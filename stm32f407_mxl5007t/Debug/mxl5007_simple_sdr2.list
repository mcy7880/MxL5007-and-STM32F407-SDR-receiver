
mxl5007_simple_sdr2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8e8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001378  0800ea78  0800ea78  0001ea78  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf0  0800fdf0  00020248  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf0  0800fdf0  0001fdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdf8  0800fdf8  00020248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdfc  0800fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000248  20000000  0800fe00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020248  2**0
                  CONTENTS
 10 .bss          00000d08  20000248  20000248  00020248  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000f50  20000f50  00020248  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002579d  00000000  00000000  00020278  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004964  00000000  00000000  00045a15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    0001d057  00000000  00000000  0004a379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001098  00000000  00000000  000673d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000034b0  00000000  00000000  00068468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021837  00000000  00000000  0006b918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00006727  00000000  00000000  0008d14f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00093876  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000562c  00000000  00000000  000938c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000248 	.word	0x20000248
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea60 	.word	0x0800ea60

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000024c 	.word	0x2000024c
 80001cc:	0800ea60 	.word	0x0800ea60

080001d0 <strcmp>:
 80001d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d8:	2a01      	cmp	r2, #1
 80001da:	bf28      	it	cs
 80001dc:	429a      	cmpcs	r2, r3
 80001de:	d0f7      	beq.n	80001d0 <strcmp>
 80001e0:	1ad0      	subs	r0, r2, r3
 80001e2:	4770      	bx	lr

080001e4 <strlen>:
 80001e4:	4603      	mov	r3, r0
 80001e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ea:	2a00      	cmp	r2, #0
 80001ec:	d1fb      	bne.n	80001e6 <strlen+0x2>
 80001ee:	1a18      	subs	r0, r3, r0
 80001f0:	3801      	subs	r0, #1
 80001f2:	4770      	bx	lr
	...

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_d2uiz>:
 8000bc8:	004a      	lsls	r2, r1, #1
 8000bca:	d211      	bcs.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d211      	bcs.n	8000bf6 <__aeabi_d2uiz+0x2e>
 8000bd2:	d50d      	bpl.n	8000bf0 <__aeabi_d2uiz+0x28>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d40e      	bmi.n	8000bfc <__aeabi_d2uiz+0x34>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	fa23 f002 	lsr.w	r0, r3, r2
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_d2uiz+0x3a>
 8000bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0000 	mov.w	r0, #0
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2f>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c10:	bf24      	itt	cs
 8000c12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c1a:	d90d      	bls.n	8000c38 <__aeabi_d2f+0x30>
 8000c1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c30:	bf08      	it	eq
 8000c32:	f020 0001 	biceq.w	r0, r0, #1
 8000c36:	4770      	bx	lr
 8000c38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c3c:	d121      	bne.n	8000c82 <__aeabi_d2f+0x7a>
 8000c3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c42:	bfbc      	itt	lt
 8000c44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c48:	4770      	bxlt	lr
 8000c4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c52:	f1c2 0218 	rsb	r2, r2, #24
 8000c56:	f1c2 0c20 	rsb	ip, r2, #32
 8000c5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c62:	bf18      	it	ne
 8000c64:	f040 0001 	orrne.w	r0, r0, #1
 8000c68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c74:	ea40 000c 	orr.w	r0, r0, ip
 8000c78:	fa23 f302 	lsr.w	r3, r3, r2
 8000c7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c80:	e7cc      	b.n	8000c1c <__aeabi_d2f+0x14>
 8000c82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c86:	d107      	bne.n	8000c98 <__aeabi_d2f+0x90>
 8000c88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c8c:	bf1e      	ittt	ne
 8000c8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c96:	4770      	bxne	lr
 8000c98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ca0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bx	lr
 8000ca6:	bf00      	nop

08000ca8 <__aeabi_uldivmod>:
 8000ca8:	b953      	cbnz	r3, 8000cc0 <__aeabi_uldivmod+0x18>
 8000caa:	b94a      	cbnz	r2, 8000cc0 <__aeabi_uldivmod+0x18>
 8000cac:	2900      	cmp	r1, #0
 8000cae:	bf08      	it	eq
 8000cb0:	2800      	cmpeq	r0, #0
 8000cb2:	bf1c      	itt	ne
 8000cb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cbc:	f000 b9aa 	b.w	8001014 <__aeabi_idiv0>
 8000cc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc8:	f000 f83c 	bl	8000d44 <__udivmoddi4>
 8000ccc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd4:	b004      	add	sp, #16
 8000cd6:	4770      	bx	lr

08000cd8 <__aeabi_d2lz>:
 8000cd8:	b538      	push	{r3, r4, r5, lr}
 8000cda:	2200      	movs	r2, #0
 8000cdc:	2300      	movs	r3, #0
 8000cde:	4604      	mov	r4, r0
 8000ce0:	460d      	mov	r5, r1
 8000ce2:	f7ff ff0b 	bl	8000afc <__aeabi_dcmplt>
 8000ce6:	b928      	cbnz	r0, 8000cf4 <__aeabi_d2lz+0x1c>
 8000ce8:	4620      	mov	r0, r4
 8000cea:	4629      	mov	r1, r5
 8000cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cf0:	f000 b80a 	b.w	8000d08 <__aeabi_d2ulz>
 8000cf4:	4620      	mov	r0, r4
 8000cf6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cfa:	f000 f805 	bl	8000d08 <__aeabi_d2ulz>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	bd38      	pop	{r3, r4, r5, pc}
 8000d06:	bf00      	nop

08000d08 <__aeabi_d2ulz>:
 8000d08:	b5d0      	push	{r4, r6, r7, lr}
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <__aeabi_d2ulz+0x34>)
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	4606      	mov	r6, r0
 8000d10:	460f      	mov	r7, r1
 8000d12:	f7ff fc81 	bl	8000618 <__aeabi_dmul>
 8000d16:	f7ff ff57 	bl	8000bc8 <__aeabi_d2uiz>
 8000d1a:	4604      	mov	r4, r0
 8000d1c:	f7ff fc02 	bl	8000524 <__aeabi_ui2d>
 8000d20:	4b07      	ldr	r3, [pc, #28]	; (8000d40 <__aeabi_d2ulz+0x38>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	f7ff fc78 	bl	8000618 <__aeabi_dmul>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	4630      	mov	r0, r6
 8000d2e:	4639      	mov	r1, r7
 8000d30:	f7ff faba 	bl	80002a8 <__aeabi_dsub>
 8000d34:	f7ff ff48 	bl	8000bc8 <__aeabi_d2uiz>
 8000d38:	4621      	mov	r1, r4
 8000d3a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d3c:	3df00000 	.word	0x3df00000
 8000d40:	41f00000 	.word	0x41f00000

08000d44 <__udivmoddi4>:
 8000d44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d48:	9d08      	ldr	r5, [sp, #32]
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	468e      	mov	lr, r1
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d14d      	bne.n	8000dee <__udivmoddi4+0xaa>
 8000d52:	428a      	cmp	r2, r1
 8000d54:	4694      	mov	ip, r2
 8000d56:	d969      	bls.n	8000e2c <__udivmoddi4+0xe8>
 8000d58:	fab2 f282 	clz	r2, r2
 8000d5c:	b152      	cbz	r2, 8000d74 <__udivmoddi4+0x30>
 8000d5e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d62:	f1c2 0120 	rsb	r1, r2, #32
 8000d66:	fa20 f101 	lsr.w	r1, r0, r1
 8000d6a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d6e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d72:	4094      	lsls	r4, r2
 8000d74:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d78:	0c21      	lsrs	r1, r4, #16
 8000d7a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d7e:	fa1f f78c 	uxth.w	r7, ip
 8000d82:	fb08 e316 	mls	r3, r8, r6, lr
 8000d86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d8a:	fb06 f107 	mul.w	r1, r6, r7
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	d90a      	bls.n	8000da8 <__udivmoddi4+0x64>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d9a:	f080 811f 	bcs.w	8000fdc <__udivmoddi4+0x298>
 8000d9e:	4299      	cmp	r1, r3
 8000da0:	f240 811c 	bls.w	8000fdc <__udivmoddi4+0x298>
 8000da4:	3e02      	subs	r6, #2
 8000da6:	4463      	add	r3, ip
 8000da8:	1a5b      	subs	r3, r3, r1
 8000daa:	b2a4      	uxth	r4, r4
 8000dac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db0:	fb08 3310 	mls	r3, r8, r0, r3
 8000db4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000db8:	fb00 f707 	mul.w	r7, r0, r7
 8000dbc:	42a7      	cmp	r7, r4
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x92>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dc8:	f080 810a 	bcs.w	8000fe0 <__udivmoddi4+0x29c>
 8000dcc:	42a7      	cmp	r7, r4
 8000dce:	f240 8107 	bls.w	8000fe0 <__udivmoddi4+0x29c>
 8000dd2:	4464      	add	r4, ip
 8000dd4:	3802      	subs	r0, #2
 8000dd6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dda:	1be4      	subs	r4, r4, r7
 8000ddc:	2600      	movs	r6, #0
 8000dde:	b11d      	cbz	r5, 8000de8 <__udivmoddi4+0xa4>
 8000de0:	40d4      	lsrs	r4, r2
 8000de2:	2300      	movs	r3, #0
 8000de4:	e9c5 4300 	strd	r4, r3, [r5]
 8000de8:	4631      	mov	r1, r6
 8000dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d909      	bls.n	8000e06 <__udivmoddi4+0xc2>
 8000df2:	2d00      	cmp	r5, #0
 8000df4:	f000 80ef 	beq.w	8000fd6 <__udivmoddi4+0x292>
 8000df8:	2600      	movs	r6, #0
 8000dfa:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfe:	4630      	mov	r0, r6
 8000e00:	4631      	mov	r1, r6
 8000e02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e06:	fab3 f683 	clz	r6, r3
 8000e0a:	2e00      	cmp	r6, #0
 8000e0c:	d14a      	bne.n	8000ea4 <__udivmoddi4+0x160>
 8000e0e:	428b      	cmp	r3, r1
 8000e10:	d302      	bcc.n	8000e18 <__udivmoddi4+0xd4>
 8000e12:	4282      	cmp	r2, r0
 8000e14:	f200 80f9 	bhi.w	800100a <__udivmoddi4+0x2c6>
 8000e18:	1a84      	subs	r4, r0, r2
 8000e1a:	eb61 0303 	sbc.w	r3, r1, r3
 8000e1e:	2001      	movs	r0, #1
 8000e20:	469e      	mov	lr, r3
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d0e0      	beq.n	8000de8 <__udivmoddi4+0xa4>
 8000e26:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e2a:	e7dd      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000e2c:	b902      	cbnz	r2, 8000e30 <__udivmoddi4+0xec>
 8000e2e:	deff      	udf	#255	; 0xff
 8000e30:	fab2 f282 	clz	r2, r2
 8000e34:	2a00      	cmp	r2, #0
 8000e36:	f040 8092 	bne.w	8000f5e <__udivmoddi4+0x21a>
 8000e3a:	eba1 010c 	sub.w	r1, r1, ip
 8000e3e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e42:	fa1f fe8c 	uxth.w	lr, ip
 8000e46:	2601      	movs	r6, #1
 8000e48:	0c20      	lsrs	r0, r4, #16
 8000e4a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e4e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e52:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e56:	fb0e f003 	mul.w	r0, lr, r3
 8000e5a:	4288      	cmp	r0, r1
 8000e5c:	d908      	bls.n	8000e70 <__udivmoddi4+0x12c>
 8000e5e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e62:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x12a>
 8000e68:	4288      	cmp	r0, r1
 8000e6a:	f200 80cb 	bhi.w	8001004 <__udivmoddi4+0x2c0>
 8000e6e:	4643      	mov	r3, r8
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1110 	mls	r1, r7, r0, r1
 8000e7c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e80:	fb0e fe00 	mul.w	lr, lr, r0
 8000e84:	45a6      	cmp	lr, r4
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x156>
 8000e88:	eb1c 0404 	adds.w	r4, ip, r4
 8000e8c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e90:	d202      	bcs.n	8000e98 <__udivmoddi4+0x154>
 8000e92:	45a6      	cmp	lr, r4
 8000e94:	f200 80bb 	bhi.w	800100e <__udivmoddi4+0x2ca>
 8000e98:	4608      	mov	r0, r1
 8000e9a:	eba4 040e 	sub.w	r4, r4, lr
 8000e9e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ea2:	e79c      	b.n	8000dde <__udivmoddi4+0x9a>
 8000ea4:	f1c6 0720 	rsb	r7, r6, #32
 8000ea8:	40b3      	lsls	r3, r6
 8000eaa:	fa22 fc07 	lsr.w	ip, r2, r7
 8000eae:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eb2:	fa20 f407 	lsr.w	r4, r0, r7
 8000eb6:	fa01 f306 	lsl.w	r3, r1, r6
 8000eba:	431c      	orrs	r4, r3
 8000ebc:	40f9      	lsrs	r1, r7
 8000ebe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ec2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ec6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eca:	0c20      	lsrs	r0, r4, #16
 8000ecc:	fa1f fe8c 	uxth.w	lr, ip
 8000ed0:	fb09 1118 	mls	r1, r9, r8, r1
 8000ed4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ed8:	fb08 f00e 	mul.w	r0, r8, lr
 8000edc:	4288      	cmp	r0, r1
 8000ede:	fa02 f206 	lsl.w	r2, r2, r6
 8000ee2:	d90b      	bls.n	8000efc <__udivmoddi4+0x1b8>
 8000ee4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ee8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000eec:	f080 8088 	bcs.w	8001000 <__udivmoddi4+0x2bc>
 8000ef0:	4288      	cmp	r0, r1
 8000ef2:	f240 8085 	bls.w	8001000 <__udivmoddi4+0x2bc>
 8000ef6:	f1a8 0802 	sub.w	r8, r8, #2
 8000efa:	4461      	add	r1, ip
 8000efc:	1a09      	subs	r1, r1, r0
 8000efe:	b2a4      	uxth	r4, r4
 8000f00:	fbb1 f0f9 	udiv	r0, r1, r9
 8000f04:	fb09 1110 	mls	r1, r9, r0, r1
 8000f08:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000f0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000f10:	458e      	cmp	lr, r1
 8000f12:	d908      	bls.n	8000f26 <__udivmoddi4+0x1e2>
 8000f14:	eb1c 0101 	adds.w	r1, ip, r1
 8000f18:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f1c:	d26c      	bcs.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f1e:	458e      	cmp	lr, r1
 8000f20:	d96a      	bls.n	8000ff8 <__udivmoddi4+0x2b4>
 8000f22:	3802      	subs	r0, #2
 8000f24:	4461      	add	r1, ip
 8000f26:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f2a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f2e:	eba1 010e 	sub.w	r1, r1, lr
 8000f32:	42a1      	cmp	r1, r4
 8000f34:	46c8      	mov	r8, r9
 8000f36:	46a6      	mov	lr, r4
 8000f38:	d356      	bcc.n	8000fe8 <__udivmoddi4+0x2a4>
 8000f3a:	d053      	beq.n	8000fe4 <__udivmoddi4+0x2a0>
 8000f3c:	b15d      	cbz	r5, 8000f56 <__udivmoddi4+0x212>
 8000f3e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f42:	eb61 010e 	sbc.w	r1, r1, lr
 8000f46:	fa01 f707 	lsl.w	r7, r1, r7
 8000f4a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f4e:	40f1      	lsrs	r1, r6
 8000f50:	431f      	orrs	r7, r3
 8000f52:	e9c5 7100 	strd	r7, r1, [r5]
 8000f56:	2600      	movs	r6, #0
 8000f58:	4631      	mov	r1, r6
 8000f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f5e:	f1c2 0320 	rsb	r3, r2, #32
 8000f62:	40d8      	lsrs	r0, r3
 8000f64:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f68:	fa21 f303 	lsr.w	r3, r1, r3
 8000f6c:	4091      	lsls	r1, r2
 8000f6e:	4301      	orrs	r1, r0
 8000f70:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f74:	fa1f fe8c 	uxth.w	lr, ip
 8000f78:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f7c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f80:	0c0b      	lsrs	r3, r1, #16
 8000f82:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f86:	fb00 f60e 	mul.w	r6, r0, lr
 8000f8a:	429e      	cmp	r6, r3
 8000f8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x260>
 8000f92:	eb1c 0303 	adds.w	r3, ip, r3
 8000f96:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f9a:	d22f      	bcs.n	8000ffc <__udivmoddi4+0x2b8>
 8000f9c:	429e      	cmp	r6, r3
 8000f9e:	d92d      	bls.n	8000ffc <__udivmoddi4+0x2b8>
 8000fa0:	3802      	subs	r0, #2
 8000fa2:	4463      	add	r3, ip
 8000fa4:	1b9b      	subs	r3, r3, r6
 8000fa6:	b289      	uxth	r1, r1
 8000fa8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000fac:	fb07 3316 	mls	r3, r7, r6, r3
 8000fb0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000fb4:	fb06 f30e 	mul.w	r3, r6, lr
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x28a>
 8000fbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000fc0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fc4:	d216      	bcs.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fc6:	428b      	cmp	r3, r1
 8000fc8:	d914      	bls.n	8000ff4 <__udivmoddi4+0x2b0>
 8000fca:	3e02      	subs	r6, #2
 8000fcc:	4461      	add	r1, ip
 8000fce:	1ac9      	subs	r1, r1, r3
 8000fd0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fd4:	e738      	b.n	8000e48 <__udivmoddi4+0x104>
 8000fd6:	462e      	mov	r6, r5
 8000fd8:	4628      	mov	r0, r5
 8000fda:	e705      	b.n	8000de8 <__udivmoddi4+0xa4>
 8000fdc:	4606      	mov	r6, r0
 8000fde:	e6e3      	b.n	8000da8 <__udivmoddi4+0x64>
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	e6f8      	b.n	8000dd6 <__udivmoddi4+0x92>
 8000fe4:	454b      	cmp	r3, r9
 8000fe6:	d2a9      	bcs.n	8000f3c <__udivmoddi4+0x1f8>
 8000fe8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fec:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ff0:	3801      	subs	r0, #1
 8000ff2:	e7a3      	b.n	8000f3c <__udivmoddi4+0x1f8>
 8000ff4:	4646      	mov	r6, r8
 8000ff6:	e7ea      	b.n	8000fce <__udivmoddi4+0x28a>
 8000ff8:	4620      	mov	r0, r4
 8000ffa:	e794      	b.n	8000f26 <__udivmoddi4+0x1e2>
 8000ffc:	4640      	mov	r0, r8
 8000ffe:	e7d1      	b.n	8000fa4 <__udivmoddi4+0x260>
 8001000:	46d0      	mov	r8, sl
 8001002:	e77b      	b.n	8000efc <__udivmoddi4+0x1b8>
 8001004:	3b02      	subs	r3, #2
 8001006:	4461      	add	r1, ip
 8001008:	e732      	b.n	8000e70 <__udivmoddi4+0x12c>
 800100a:	4630      	mov	r0, r6
 800100c:	e709      	b.n	8000e22 <__udivmoddi4+0xde>
 800100e:	4464      	add	r4, ip
 8001010:	3802      	subs	r0, #2
 8001012:	e742      	b.n	8000e9a <__udivmoddi4+0x156>

08001014 <__aeabi_idiv0>:
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <CS43_TIMEOUT_UserCallback>:
/*
 * exception handler for I2C timeout
 */
static void CS43_TIMEOUT_UserCallback(void)
{
	UART_printf("\r\nFailed to communicate with CS43L22\n\r");
 8001018:	f64e 20dc 	movw	r0, #60124	; 0xeadc
{
 800101c:	b508      	push	{r3, lr}
	UART_printf("\r\nFailed to communicate with CS43L22\n\r");
 800101e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8001022:	f002 ff87 	bl	8003f34 <UART_printf>
  /* Block communication and all processes */
  while (1)
 8001026:	e7fe      	b.n	8001026 <CS43_TIMEOUT_UserCallback+0xe>

08001028 <CS43_Init>:
}

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8001028:	b084      	sub	sp, #16
 800102a:	b5f0      	push	{r4, r5, r6, r7, lr}
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800102c:	f640 0494 	movw	r4, #2196	; 0x894
{
 8001030:	b083      	sub	sp, #12
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001032:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
 8001036:	ad08      	add	r5, sp, #32
 8001038:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800103c:	6825      	ldr	r5, [r4, #0]
{
 800103e:	f89d 6074 	ldrb.w	r6, [sp, #116]	; 0x74
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001042:	2300      	movs	r3, #0
 8001044:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8001048:	69eb      	ldr	r3, [r5, #28]
	//HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
	HAL_GPIO_WritePin(CS43L22_reset_GPIO_Port, CS43L22_reset_Pin, GPIO_PIN_SET);
 800104a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 800104e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001052:	61eb      	str	r3, [r5, #28]
	HAL_GPIO_WritePin(CS43L22_reset_GPIO_Port, CS43L22_reset_Pin, GPIO_PIN_SET);
 8001054:	2201      	movs	r2, #1
 8001056:	2110      	movs	r1, #16
 8001058:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800105c:	f005 f9f4 	bl	8006448 <HAL_GPIO_WritePin>
	iData[0] = reg;
 8001060:	f240 24b8 	movw	r4, #696	; 0x2b8
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 8001064:	f240 2064 	movw	r0, #612	; 0x264
 8001068:	2254      	movs	r2, #84	; 0x54
 800106a:	a908      	add	r1, sp, #32
	iData[0] = reg;
 800106c:	f2c2 0400 	movt	r4, #8192	; 0x2000
	i2cx = i2c_handle;
 8001070:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001074:	f007 ff48 	bl	8008f08 <memcpy>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001078:	2564      	movs	r5, #100	; 0x64
	iData[0] = reg;
 800107a:	f240 2202 	movw	r2, #514	; 0x202
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800107e:	f240 2064 	movw	r0, #612	; 0x264
 8001082:	9500      	str	r5, [sp, #0]
 8001084:	2302      	movs	r3, #2
	iData[0] = reg;
 8001086:	8022      	strh	r2, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001088:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800108c:	4622      	mov	r2, r4
 800108e:	2194      	movs	r1, #148	; 0x94
 8001090:	f005 fbb0 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001094:	2800      	cmp	r0, #0
 8001096:	f040 8172 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800109a:	f64a 7204 	movw	r2, #44804	; 0xaf04
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800109e:	f240 2064 	movw	r0, #612	; 0x264
 80010a2:	9500      	str	r5, [sp, #0]
 80010a4:	2302      	movs	r3, #2
	iData[0] = reg;
 80010a6:	8022      	strh	r2, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80010a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010ac:	4622      	mov	r2, r4
 80010ae:	2194      	movs	r1, #148	; 0x94
 80010b0:	f005 fba0 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80010b4:	2800      	cmp	r0, #0
 80010b6:	f040 8162 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 80010ba:	f248 0205 	movw	r2, #32773	; 0x8005
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80010be:	f240 2064 	movw	r0, #612	; 0x264
 80010c2:	9500      	str	r5, [sp, #0]
 80010c4:	2302      	movs	r3, #2
	iData[0] = reg;
 80010c6:	8022      	strh	r2, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80010c8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010cc:	4622      	mov	r2, r4
 80010ce:	2194      	movs	r1, #148	; 0x94
 80010d0:	f005 fb90 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80010d4:	2800      	cmp	r0, #0
 80010d6:	f040 8152 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 80010da:	2706      	movs	r7, #6
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80010dc:	f240 2064 	movw	r0, #612	; 0x264
 80010e0:	9500      	str	r5, [sp, #0]
 80010e2:	2301      	movs	r3, #1
	iData[0] = reg;
 80010e4:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80010e6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80010ea:	4622      	mov	r2, r4
 80010ec:	2194      	movs	r1, #148	; 0x94
 80010ee:	f005 fb81 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80010f2:	2800      	cmp	r0, #0
 80010f4:	f040 8143 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80010f8:	f240 2064 	movw	r0, #612	; 0x264
 80010fc:	9500      	str	r5, [sp, #0]
 80010fe:	2301      	movs	r3, #1
 8001100:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001104:	4622      	mov	r2, r4
 8001106:	2194      	movs	r1, #148	; 0x94
 8001108:	f005 fd04 	bl	8006b14 <HAL_I2C_Master_Receive>
 800110c:	2800      	cmp	r0, #0
 800110e:	f040 8136 	bne.w	800137e <CS43_Init+0x356>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
	write_register(CLOCKING_CONTROL,&iData[1]);
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001112:	7863      	ldrb	r3, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001114:	9500      	str	r5, [sp, #0]
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 8001116:	f003 0320 	and.w	r3, r3, #32
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
	iData[1] &= ~(1 << 4);  // No DSP mode
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
	iData[1] |= (1 << 2);
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800111a:	f043 0307 	orr.w	r3, r3, #7
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800111e:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 8001122:	7063      	strb	r3, [r4, #1]
	iData[0] = reg;
 8001124:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001126:	2302      	movs	r3, #2
 8001128:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800112c:	4622      	mov	r2, r4
 800112e:	2194      	movs	r1, #148	; 0x94
 8001130:	f005 fb60 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001134:	2800      	cmp	r0, #0
 8001136:	f040 8122 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800113a:	2708      	movs	r7, #8
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800113c:	f240 2064 	movw	r0, #612	; 0x264
 8001140:	9500      	str	r5, [sp, #0]
 8001142:	2301      	movs	r3, #1
	iData[0] = reg;
 8001144:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001146:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800114a:	4622      	mov	r2, r4
 800114c:	2194      	movs	r1, #148	; 0x94
 800114e:	f005 fb51 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001152:	2800      	cmp	r0, #0
 8001154:	f040 8113 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 8001158:	2301      	movs	r3, #1
 800115a:	f240 2064 	movw	r0, #612	; 0x264
 800115e:	9500      	str	r5, [sp, #0]
 8001160:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001164:	18e2      	adds	r2, r4, r3
 8001166:	2194      	movs	r1, #148	; 0x94
 8001168:	f005 fcd4 	bl	8006b14 <HAL_I2C_Master_Receive>
 800116c:	2800      	cmp	r0, #0
 800116e:	f040 8106 	bne.w	800137e <CS43_Init+0x356>
	write_register(INTERFACE_CONTROL1,&iData[1]);
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001172:	7863      	ldrb	r3, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001174:	9500      	str	r5, [sp, #0]
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 8001176:	f023 030f 	bic.w	r3, r3, #15
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 800117a:	f043 0301 	orr.w	r3, r3, #1
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800117e:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8001182:	7063      	strb	r3, [r4, #1]
	iData[0] = reg;
 8001184:	7027      	strb	r7, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001186:	2302      	movs	r3, #2
 8001188:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800118c:	4622      	mov	r2, r4
 800118e:	2194      	movs	r1, #148	; 0x94
 8001190:	f005 fb30 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001194:	2800      	cmp	r0, #0
 8001196:	f040 80f2 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800119a:	2109      	movs	r1, #9
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800119c:	f240 2064 	movw	r0, #612	; 0x264
 80011a0:	9500      	str	r5, [sp, #0]
 80011a2:	2301      	movs	r3, #1
	iData[0] = reg;
 80011a4:	7021      	strb	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80011a6:	4622      	mov	r2, r4
 80011a8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011ac:	2194      	movs	r1, #148	; 0x94
 80011ae:	f005 fb21 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80011b2:	2800      	cmp	r0, #0
 80011b4:	f040 80e3 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80011b8:	2564      	movs	r5, #100	; 0x64
 80011ba:	f240 22b9 	movw	r2, #697	; 0x2b9
 80011be:	f240 2064 	movw	r0, #612	; 0x264
 80011c2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80011c6:	9500      	str	r5, [sp, #0]
 80011c8:	2301      	movs	r3, #1
 80011ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80011ce:	2194      	movs	r1, #148	; 0x94
 80011d0:	f005 fca0 	bl	8006b14 <HAL_I2C_Master_Receive>
 80011d4:	2800      	cmp	r0, #0
 80011d6:	f040 80d2 	bne.w	800137e <CS43_Init+0x356>
	write_register(PASSTHROUGH_A,&iData[1]);
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 80011da:	7863      	ldrb	r3, [r4, #1]
 80011dc:	f023 030f 	bic.w	r3, r3, #15
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80011e0:	f043 0301 	orr.w	r3, r3, #1
	iData[0] = reg;
 80011e4:	2109      	movs	r1, #9
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80011e6:	f240 22b8 	movw	r2, #696	; 0x2b8
 80011ea:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 80011ee:	7021      	strb	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80011f0:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80011f4:	9500      	str	r5, [sp, #0]
 80011f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 80011fa:	7063      	strb	r3, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80011fc:	2194      	movs	r1, #148	; 0x94
 80011fe:	2302      	movs	r3, #2
 8001200:	f005 faf8 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001204:	2800      	cmp	r0, #0
 8001206:	f040 80ba 	bne.w	800137e <CS43_Init+0x356>
	iData[0] = reg;
 800120a:	230e      	movs	r3, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800120c:	f240 22b8 	movw	r2, #696	; 0x2b8
 8001210:	f240 2064 	movw	r0, #612	; 0x264
 8001214:	9500      	str	r5, [sp, #0]
 8001216:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 800121a:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800121c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001220:	2301      	movs	r3, #1
 8001222:	2194      	movs	r1, #148	; 0x94
 8001224:	f005 fae6 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001228:	2800      	cmp	r0, #0
 800122a:	f040 80a8 	bne.w	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800122e:	f240 22b9 	movw	r2, #697	; 0x2b9
 8001232:	f240 2064 	movw	r0, #612	; 0x264
 8001236:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800123a:	9500      	str	r5, [sp, #0]
 800123c:	2301      	movs	r3, #1
 800123e:	2194      	movs	r1, #148	; 0x94
 8001240:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001244:	f005 fc66 	bl	8006b14 <HAL_I2C_Master_Receive>
 8001248:	2800      	cmp	r0, #0
 800124a:	f040 8098 	bne.w	800137e <CS43_Init+0x356>
	write_register(PASSTHROUGH_B,&iData[1]);
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
	if(outputMode == MODE_ANALOG_)
 800124e:	2e01      	cmp	r6, #1
 8001250:	f000 808e 	beq.w	8001370 <CS43_Init+0x348>
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
	}
	else if(outputMode == MODE_I2S)
 8001254:	2e00      	cmp	r6, #0
 8001256:	f000 8088 	beq.w	800136a <CS43_Init+0x342>
	iData[0] = reg;
 800125a:	230e      	movs	r3, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800125c:	2564      	movs	r5, #100	; 0x64
 800125e:	f240 22b8 	movw	r2, #696	; 0x2b8
 8001262:	f240 2064 	movw	r0, #612	; 0x264
 8001266:	9500      	str	r5, [sp, #0]
 8001268:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 800126c:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800126e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001272:	2302      	movs	r3, #2
 8001274:	2194      	movs	r1, #148	; 0x94
 8001276:	f005 fabd 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800127a:	2800      	cmp	r0, #0
 800127c:	d17f      	bne.n	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800127e:	f240 22b8 	movw	r2, #696	; 0x2b8
 8001282:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 8001286:	260f      	movs	r6, #15
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001288:	9500      	str	r5, [sp, #0]
 800128a:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800128e:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 8001292:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001294:	2301      	movs	r3, #1
 8001296:	2194      	movs	r1, #148	; 0x94
 8001298:	f005 faac 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800129c:	2800      	cmp	r0, #0
 800129e:	d16e      	bne.n	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80012a0:	f240 22b9 	movw	r2, #697	; 0x2b9
 80012a4:	f240 2064 	movw	r0, #612	; 0x264
 80012a8:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80012ac:	9500      	str	r5, [sp, #0]
 80012ae:	2301      	movs	r3, #1
 80012b0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80012b4:	2194      	movs	r1, #148	; 0x94
 80012b6:	f005 fc2d 	bl	8006b14 <HAL_I2C_Master_Receive>
 80012ba:	2800      	cmp	r0, #0
 80012bc:	d15f      	bne.n	800137e <CS43_Init+0x356>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012be:	f240 22b8 	movw	r2, #696	; 0x2b8
 80012c2:	f240 2064 	movw	r0, #612	; 0x264
 80012c6:	9500      	str	r5, [sp, #0]
 80012c8:	2302      	movs	r3, #2
 80012ca:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 80012ce:	8026      	strh	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012d0:	2194      	movs	r1, #148	; 0x94
 80012d2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80012d6:	f005 fa8d 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80012da:	2800      	cmp	r0, #0
 80012dc:	d14f      	bne.n	800137e <CS43_Init+0x356>
	iData[0] = reg;
 80012de:	2314      	movs	r3, #20
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012e0:	f240 22b8 	movw	r2, #696	; 0x2b8
 80012e4:	f240 2064 	movw	r0, #612	; 0x264
 80012e8:	9500      	str	r5, [sp, #0]
 80012ea:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 80012ee:	8023      	strh	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80012f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80012f4:	2302      	movs	r3, #2
 80012f6:	2194      	movs	r1, #148	; 0x94
 80012f8:	f005 fa7c 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80012fc:	2800      	cmp	r0, #0
 80012fe:	d13e      	bne.n	800137e <CS43_Init+0x356>
	iData[0] = reg;
 8001300:	2315      	movs	r3, #21
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001302:	f240 22b8 	movw	r2, #696	; 0x2b8
 8001306:	f240 2064 	movw	r0, #612	; 0x264
 800130a:	9500      	str	r5, [sp, #0]
 800130c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 8001310:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001312:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001316:	2302      	movs	r3, #2
 8001318:	2194      	movs	r1, #148	; 0x94
 800131a:	f005 fa6b 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800131e:	bb70      	cbnz	r0, 800137e <CS43_Init+0x356>
	iData[0] = reg;
 8001320:	231a      	movs	r3, #26
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001322:	f240 22b8 	movw	r2, #696	; 0x2b8
 8001326:	f240 2064 	movw	r0, #612	; 0x264
 800132a:	9500      	str	r5, [sp, #0]
 800132c:	f2c2 0200 	movt	r2, #8192	; 0x2000
	iData[0] = reg;
 8001330:	7023      	strb	r3, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001332:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001336:	2302      	movs	r3, #2
 8001338:	2194      	movs	r1, #148	; 0x94
 800133a:	f005 fa5b 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800133e:	b9f0      	cbnz	r0, 800137e <CS43_Init+0x356>
	iData[0] = reg;
 8001340:	211b      	movs	r1, #27
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001342:	f240 22b8 	movw	r2, #696	; 0x2b8
 8001346:	f240 2064 	movw	r0, #612	; 0x264
 800134a:	9500      	str	r5, [sp, #0]
 800134c:	2302      	movs	r3, #2
	iData[0] = reg;
 800134e:	7021      	strb	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001350:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001354:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001358:	2194      	movs	r1, #148	; 0x94
 800135a:	f005 fa4b 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800135e:	b970      	cbnz	r0, 800137e <CS43_Init+0x356>
	iData[1] = 0x00;
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
	write_register(PCM_VOLUME_A,&iData[1]);
	write_register(PCM_VOLUME_B,&iData[1]);
}
 8001360:	b003      	add	sp, #12
 8001362:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8001366:	b004      	add	sp, #16
 8001368:	4770      	bx	lr
		iData[1] = 0x02;
 800136a:	2302      	movs	r3, #2
 800136c:	7063      	strb	r3, [r4, #1]
 800136e:	e774      	b.n	800125a <CS43_Init+0x232>
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 8001370:	7863      	ldrb	r3, [r4, #1]
 8001372:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 8001376:	f063 033f 	orn	r3, r3, #63	; 0x3f
 800137a:	7063      	strb	r3, [r4, #1]
 800137c:	e76d      	b.n	800125a <CS43_Init+0x232>
		CS43_TIMEOUT_UserCallback();
 800137e:	f7ff fe4b 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 8001382:	bf00      	nop

08001384 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8001384:	b500      	push	{lr}
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
			break;
		default:
			break;
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8001386:	f240 21b8 	movw	r1, #696	; 0x2b8
{
 800138a:	b083      	sub	sp, #12
	switch (side)
 800138c:	2803      	cmp	r0, #3
 800138e:	d82e      	bhi.n	80013ee <CS43_Enable_RightLeft+0x6a>
 8001390:	e8df f000 	tbb	[pc, r0]
 8001394:	2126021c 	.word	0x2126021c
 8001398:	f04f 0cbf 	mov.w	ip, #191	; 0xbf
 800139c:	f2c2 0100 	movt	r1, #8192	; 0x2000
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013a0:	2364      	movs	r3, #100	; 0x64
	iData[0] = reg;
 80013a2:	2004      	movs	r0, #4
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013a4:	9300      	str	r3, [sp, #0]
 80013a6:	f240 22b8 	movw	r2, #696	; 0x2b8
	iData[0] = reg;
 80013aa:	7008      	strb	r0, [r1, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013ac:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80013b0:	f881 c001 	strb.w	ip, [r1, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80013b4:	2302      	movs	r3, #2
 80013b6:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80013ba:	2194      	movs	r1, #148	; 0x94
 80013bc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80013c0:	f005 fa18 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80013c4:	b988      	cbnz	r0, 80013ea <CS43_Enable_RightLeft+0x66>
	write_register(POWER_CONTROL2,&iData[1]);
}
 80013c6:	b003      	add	sp, #12
 80013c8:	f85d fb04 	ldr.w	pc, [sp], #4
	switch (side)
 80013cc:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80013d0:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80013d4:	e7e4      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>
			break;
 80013d6:	f04f 0caf 	mov.w	ip, #175	; 0xaf
 80013da:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80013de:	e7df      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>
			break;
 80013e0:	f04f 0cef 	mov.w	ip, #239	; 0xef
 80013e4:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80013e8:	e7da      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>
		CS43_TIMEOUT_UserCallback();
 80013ea:	f7ff fe15 	bl	8001018 <CS43_TIMEOUT_UserCallback>
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80013ee:	f2c2 0100 	movt	r1, #8192	; 0x2000
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80013f2:	f891 c001 	ldrb.w	ip, [r1, #1]
 80013f6:	f04c 0c0f 	orr.w	ip, ip, #15
 80013fa:	e7d1      	b.n	80013a0 <CS43_Enable_RightLeft+0x1c>

080013fc <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80013fc:	b570      	push	{r4, r5, r6, lr}
	int8_t tempVol = volume - 50;
	tempVol = tempVol*(127/50);
	uint8_t myVolume =  (uint8_t )tempVol;
	iData[1] = myVolume;
 80013fe:	f240 25b8 	movw	r5, #696	; 0x2b8
 8001402:	f2c2 0500 	movt	r5, #8192	; 0x2000
{
 8001406:	b082      	sub	sp, #8
	int8_t tempVol = volume - 50;
 8001408:	f1a0 0332 	sub.w	r3, r0, #50	; 0x32
	tempVol = tempVol*(127/50);
 800140c:	005b      	lsls	r3, r3, #1
	iData[0] = reg;
 800140e:	2214      	movs	r2, #20
{
 8001410:	4604      	mov	r4, r0
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001412:	2664      	movs	r6, #100	; 0x64
 8001414:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] = myVolume;
 8001418:	706b      	strb	r3, [r5, #1]
	iData[0] = reg;
 800141a:	702a      	strb	r2, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800141c:	9600      	str	r6, [sp, #0]
 800141e:	2302      	movs	r3, #2
 8001420:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001424:	462a      	mov	r2, r5
 8001426:	2194      	movs	r1, #148	; 0x94
 8001428:	f005 f9e4 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800142c:	2800      	cmp	r0, #0
 800142e:	d140      	bne.n	80014b2 <CS43_SetVolume+0xb6>
	iData[0] = reg;
 8001430:	2115      	movs	r1, #21
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001432:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 8001436:	7029      	strb	r1, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001438:	9600      	str	r6, [sp, #0]
 800143a:	2302      	movs	r3, #2
 800143c:	462a      	mov	r2, r5
 800143e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001442:	2194      	movs	r1, #148	; 0x94
 8001444:	f005 f9d6 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001448:	bb98      	cbnz	r0, 80014b2 <CS43_SetVolume+0xb6>
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
	
	iData[1] = VOLUME_CONVERT_D(volume);
 800144a:	2c64      	cmp	r4, #100	; 0x64
 800144c:	d924      	bls.n	8001498 <CS43_SetVolume+0x9c>
 800144e:	2318      	movs	r3, #24
	iData[0] = reg;
 8001450:	2120      	movs	r1, #32
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001452:	2464      	movs	r4, #100	; 0x64
 8001454:	f240 22b8 	movw	r2, #696	; 0x2b8
 8001458:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] = VOLUME_CONVERT_D(volume);
 800145c:	706b      	strb	r3, [r5, #1]
	iData[0] = reg;
 800145e:	7029      	strb	r1, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001460:	9400      	str	r4, [sp, #0]
 8001462:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001466:	2302      	movs	r3, #2
 8001468:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800146c:	2194      	movs	r1, #148	; 0x94
 800146e:	f005 f9c1 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001472:	b9f0      	cbnz	r0, 80014b2 <CS43_SetVolume+0xb6>
	iData[0] = reg;
 8001474:	2121      	movs	r1, #33	; 0x21
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001476:	f240 22b8 	movw	r2, #696	; 0x2b8
 800147a:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 800147e:	7029      	strb	r1, [r5, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001480:	9400      	str	r4, [sp, #0]
 8001482:	2302      	movs	r3, #2
 8001484:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8001488:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800148c:	2194      	movs	r1, #148	; 0x94
 800148e:	f005 f9b1 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001492:	b970      	cbnz	r0, 80014b2 <CS43_SetVolume+0xb6>
	
	/* Set the Master volume */ 
	write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
	write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
}
 8001494:	b002      	add	sp, #8
 8001496:	bd70      	pop	{r4, r5, r6, pc}
	iData[1] = VOLUME_CONVERT_D(volume);
 8001498:	eb04 0344 	add.w	r3, r4, r4, lsl #1
 800149c:	f248 541f 	movw	r4, #34079	; 0x851f
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	f2c5 14eb 	movt	r4, #20971	; 0x51eb
 80014a6:	fba4 2303 	umull	r2, r3, r4, r3
 80014aa:	095b      	lsrs	r3, r3, #5
 80014ac:	3b18      	subs	r3, #24
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	e7ce      	b.n	8001450 <CS43_SetVolume+0x54>
		CS43_TIMEOUT_UserCallback();
 80014b2:	f7ff fdb1 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 80014b6:	bf00      	nop

080014b8 <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 80014b8:	b570      	push	{r4, r5, r6, lr}
	iData[0] = reg;
 80014ba:	f240 24b8 	movw	r4, #696	; 0x2b8
{
 80014be:	b082      	sub	sp, #8
	iData[0] = reg;
 80014c0:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80014c4:	f44f 4119 	mov.w	r1, #39168	; 0x9900
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014c8:	2564      	movs	r5, #100	; 0x64
 80014ca:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 80014ce:	8021      	strh	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014d0:	9500      	str	r5, [sp, #0]
 80014d2:	2302      	movs	r3, #2
 80014d4:	4622      	mov	r2, r4
 80014d6:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014da:	2194      	movs	r1, #148	; 0x94
 80014dc:	f005 f98a 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80014e0:	2800      	cmp	r0, #0
 80014e2:	d17c      	bne.n	80015de <CS43_Start+0x126>
	iData[0] = reg;
 80014e4:	f248 0147 	movw	r1, #32839	; 0x8047
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014e8:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 80014ec:	8021      	strh	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80014ee:	9500      	str	r5, [sp, #0]
 80014f0:	2302      	movs	r3, #2
 80014f2:	4622      	mov	r2, r4
 80014f4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80014f8:	2194      	movs	r1, #148	; 0x94
 80014fa:	f005 f97b 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80014fe:	2800      	cmp	r0, #0
 8001500:	d16d      	bne.n	80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001502:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 8001506:	2632      	movs	r6, #50	; 0x32
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001508:	9500      	str	r5, [sp, #0]
 800150a:	2301      	movs	r3, #1
 800150c:	4622      	mov	r2, r4
 800150e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001512:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001514:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001516:	f005 f96d 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800151a:	2800      	cmp	r0, #0
 800151c:	d15f      	bne.n	80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800151e:	2301      	movs	r3, #1
 8001520:	f240 2064 	movw	r0, #612	; 0x264
 8001524:	9500      	str	r5, [sp, #0]
 8001526:	18e2      	adds	r2, r4, r3
 8001528:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800152c:	2194      	movs	r1, #148	; 0x94
 800152e:	f005 faf1 	bl	8006b14 <HAL_I2C_Master_Receive>
 8001532:	2800      	cmp	r0, #0
 8001534:	d153      	bne.n	80015de <CS43_Start+0x126>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
	write_register(CONFIG_47,&iData[1]);
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
	iData[1] |= 0x80;
 8001536:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001538:	9500      	str	r5, [sp, #0]
	iData[1] |= 0x80;
 800153a:	f062 027f 	orn	r2, r2, #127	; 0x7f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800153e:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] |= 0x80;
 8001542:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001544:	2302      	movs	r3, #2
 8001546:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800154a:	4622      	mov	r2, r4
 800154c:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 800154e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001550:	f005 f950 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001554:	2800      	cmp	r0, #0
 8001556:	d142      	bne.n	80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001558:	f240 2064 	movw	r0, #612	; 0x264
 800155c:	9500      	str	r5, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	4622      	mov	r2, r4
 8001562:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001566:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001568:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800156a:	f005 f943 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800156e:	bbb0      	cbnz	r0, 80015de <CS43_Start+0x126>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 8001570:	2301      	movs	r3, #1
 8001572:	f240 2064 	movw	r0, #612	; 0x264
 8001576:	9500      	str	r5, [sp, #0]
 8001578:	18e2      	adds	r2, r4, r3
 800157a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800157e:	2194      	movs	r1, #148	; 0x94
 8001580:	f005 fac8 	bl	8006b14 <HAL_I2C_Master_Receive>
 8001584:	bb58      	cbnz	r0, 80015de <CS43_Start+0x126>
	write_register(CONFIG_32,&iData[1]);
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
	iData[1] &= ~(0x80);
 8001586:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001588:	9500      	str	r5, [sp, #0]
	iData[1] &= ~(0x80);
 800158a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800158e:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] &= ~(0x80);
 8001592:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001594:	2302      	movs	r3, #2
 8001596:	4622      	mov	r2, r4
 8001598:	2194      	movs	r1, #148	; 0x94
 800159a:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 800159e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015a0:	f005 f928 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80015a4:	b9d8      	cbnz	r0, 80015de <CS43_Start+0x126>
	iData[0] = reg;
 80015a6:	8020      	strh	r0, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015a8:	f240 2064 	movw	r0, #612	; 0x264
 80015ac:	9500      	str	r5, [sp, #0]
 80015ae:	2302      	movs	r3, #2
 80015b0:	4622      	mov	r2, r4
 80015b2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015b6:	2194      	movs	r1, #148	; 0x94
 80015b8:	f005 f91c 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80015bc:	b978      	cbnz	r0, 80015de <CS43_Start+0x126>
	iData[0] = reg;
 80015be:	f649 6102 	movw	r1, #40450	; 0x9e02
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015c2:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 80015c6:	8021      	strh	r1, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80015c8:	9500      	str	r5, [sp, #0]
 80015ca:	2302      	movs	r3, #2
 80015cc:	4622      	mov	r2, r4
 80015ce:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80015d2:	2194      	movs	r1, #148	; 0x94
 80015d4:	f005 f90e 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80015d8:	b908      	cbnz	r0, 80015de <CS43_Start+0x126>
	iData[1] = 0x00;
	write_register(CONFIG_00,&iData[1]);
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
	write_register(POWER_CONTROL1,&iData[1]);
}
 80015da:	b002      	add	sp, #8
 80015dc:	bd70      	pop	{r4, r5, r6, pc}
		CS43_TIMEOUT_UserCallback();
 80015de:	f7ff fd1b 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 80015e2:	bf00      	nop

080015e4 <CS43_Mute>:
	write_register(POWER_CONTROL1,&iData[1]);
}

//02-08-2025 - Maciej Fajfer
void CS43_Mute(void)
{
 80015e4:	b570      	push	{r4, r5, r6, lr}
	iData[0] = reg;
 80015e6:	f240 24b8 	movw	r4, #696	; 0x2b8
{
 80015ea:	b082      	sub	sp, #8
	iData[0] = reg;
 80015ec:	f2c2 0400 	movt	r4, #8192	; 0x2000
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80015f0:	2564      	movs	r5, #100	; 0x64
 80015f2:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 80015f6:	260f      	movs	r6, #15
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80015f8:	9500      	str	r5, [sp, #0]
 80015fa:	2301      	movs	r3, #1
 80015fc:	4622      	mov	r2, r4
 80015fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001602:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001604:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001606:	f005 f8f5 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800160a:	2800      	cmp	r0, #0
 800160c:	d145      	bne.n	800169a <CS43_Mute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800160e:	2301      	movs	r3, #1
 8001610:	f240 2064 	movw	r0, #612	; 0x264
 8001614:	9500      	str	r5, [sp, #0]
 8001616:	18e2      	adds	r2, r4, r3
 8001618:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800161c:	2194      	movs	r1, #148	; 0x94
 800161e:	f005 fa79 	bl	8006b14 <HAL_I2C_Master_Receive>
 8001622:	2800      	cmp	r0, #0
 8001624:	d139      	bne.n	800169a <CS43_Mute+0xb6>
	read_register(PLAYBACK_CONTROL, &iData[1]);
	iData[1] |= 0xC0; //HPBMUTE=1 and HPAMUTE=1
 8001626:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001628:	9500      	str	r5, [sp, #0]
	iData[1] |= 0xC0; //HPBMUTE=1 and HPAMUTE=1
 800162a:	f062 023f 	orn	r2, r2, #63	; 0x3f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800162e:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] |= 0xC0; //HPBMUTE=1 and HPAMUTE=1
 8001632:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001634:	2302      	movs	r3, #2
 8001636:	4622      	mov	r2, r4
 8001638:	2194      	movs	r1, #148	; 0x94
 800163a:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 800163e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001640:	f005 f8d8 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001644:	bb48      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001646:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 800164a:	260e      	movs	r6, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800164c:	9500      	str	r5, [sp, #0]
 800164e:	2301      	movs	r3, #1
 8001650:	4622      	mov	r2, r4
 8001652:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001656:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001658:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 800165a:	f005 f8cb 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800165e:	b9e0      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 8001660:	2301      	movs	r3, #1
 8001662:	f240 2064 	movw	r0, #612	; 0x264
 8001666:	9500      	str	r5, [sp, #0]
 8001668:	18e2      	adds	r2, r4, r3
 800166a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800166e:	2194      	movs	r1, #148	; 0x94
 8001670:	f005 fa50 	bl	8006b14 <HAL_I2C_Master_Receive>
 8001674:	b988      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	write_register(PLAYBACK_CONTROL,&iData[1]);

	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
	iData[1] |= 0x30; //PASSBMUTE=1 and PASSAMUTE=1
 8001676:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001678:	9500      	str	r5, [sp, #0]
	iData[1] |= 0x30; //PASSBMUTE=1 and PASSAMUTE=1
 800167a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800167e:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] |= 0x30; //PASSBMUTE=1 and PASSAMUTE=1
 8001682:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001684:	2302      	movs	r3, #2
 8001686:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800168a:	4622      	mov	r2, r4
 800168c:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 800168e:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001690:	f005 f8b0 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001694:	b908      	cbnz	r0, 800169a <CS43_Mute+0xb6>
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
}
 8001696:	b002      	add	sp, #8
 8001698:	bd70      	pop	{r4, r5, r6, pc}
		CS43_TIMEOUT_UserCallback();
 800169a:	f7ff fcbd 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 800169e:	bf00      	nop

080016a0 <CS43_Unmute>:

//02-08-2025 - Maciej Fajfer
void CS43_Unmute(void)
{
 80016a0:	b570      	push	{r4, r5, r6, lr}
	iData[0] = reg;
 80016a2:	f240 24b8 	movw	r4, #696	; 0x2b8
{
 80016a6:	b082      	sub	sp, #8
	iData[0] = reg;
 80016a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80016ac:	2564      	movs	r5, #100	; 0x64
 80016ae:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 80016b2:	260f      	movs	r6, #15
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80016b4:	9500      	str	r5, [sp, #0]
 80016b6:	2301      	movs	r3, #1
 80016b8:	4622      	mov	r2, r4
 80016ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016be:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 80016c0:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 80016c2:	f005 f897 	bl	80067f4 <HAL_I2C_Master_Transmit>
 80016c6:	2800      	cmp	r0, #0
 80016c8:	d145      	bne.n	8001756 <CS43_Unmute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 80016ca:	2301      	movs	r3, #1
 80016cc:	f240 2064 	movw	r0, #612	; 0x264
 80016d0:	9500      	str	r5, [sp, #0]
 80016d2:	18e2      	adds	r2, r4, r3
 80016d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80016d8:	2194      	movs	r1, #148	; 0x94
 80016da:	f005 fa1b 	bl	8006b14 <HAL_I2C_Master_Receive>
 80016de:	2800      	cmp	r0, #0
 80016e0:	d139      	bne.n	8001756 <CS43_Unmute+0xb6>
	read_register(PLAYBACK_CONTROL, &iData[1]);
	iData[1] &= 0x3F; //HPBMUTE=0 and HPAMUTE=0
 80016e2:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016e4:	9500      	str	r5, [sp, #0]
	iData[1] &= 0x3F; //HPBMUTE=0 and HPAMUTE=0
 80016e6:	f002 023f 	and.w	r2, r2, #63	; 0x3f
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016ea:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] &= 0x3F; //HPBMUTE=0 and HPAMUTE=0
 80016ee:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016f0:	2302      	movs	r3, #2
 80016f2:	4622      	mov	r2, r4
 80016f4:	2194      	movs	r1, #148	; 0x94
 80016f6:	f2c2 0000 	movt	r0, #8192	; 0x2000
	iData[0] = reg;
 80016fa:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 80016fc:	f005 f87a 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001700:	bb48      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001702:	f240 2064 	movw	r0, #612	; 0x264
	iData[0] = reg;
 8001706:	260e      	movs	r6, #14
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001708:	9500      	str	r5, [sp, #0]
 800170a:	2301      	movs	r3, #1
 800170c:	4622      	mov	r2, r4
 800170e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001712:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 8001714:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100) != HAL_OK)
 8001716:	f005 f86d 	bl	80067f4 <HAL_I2C_Master_Transmit>
 800171a:	b9e0      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	if (HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100) != HAL_OK)
 800171c:	2301      	movs	r3, #1
 800171e:	f240 2064 	movw	r0, #612	; 0x264
 8001722:	9500      	str	r5, [sp, #0]
 8001724:	18e2      	adds	r2, r4, r3
 8001726:	f2c2 0000 	movt	r0, #8192	; 0x2000
 800172a:	2194      	movs	r1, #148	; 0x94
 800172c:	f005 f9f2 	bl	8006b14 <HAL_I2C_Master_Receive>
 8001730:	b988      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	write_register(PLAYBACK_CONTROL,&iData[1]);

	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
	iData[1] &= 0xCF; //PASSBMUTE=0 and PASSAMUTE=0
 8001732:	7862      	ldrb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001734:	9500      	str	r5, [sp, #0]
	iData[1] &= 0xCF; //PASSBMUTE=0 and PASSAMUTE=0
 8001736:	f022 0230 	bic.w	r2, r2, #48	; 0x30
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800173a:	f240 2064 	movw	r0, #612	; 0x264
	iData[1] &= 0xCF; //PASSBMUTE=0 and PASSAMUTE=0
 800173e:	7062      	strb	r2, [r4, #1]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 8001740:	2302      	movs	r3, #2
 8001742:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8001746:	4622      	mov	r2, r4
 8001748:	2194      	movs	r1, #148	; 0x94
	iData[0] = reg;
 800174a:	7026      	strb	r6, [r4, #0]
	if (HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100) != HAL_OK)
 800174c:	f005 f852 	bl	80067f4 <HAL_I2C_Master_Transmit>
 8001750:	b908      	cbnz	r0, 8001756 <CS43_Unmute+0xb6>
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
}
 8001752:	b002      	add	sp, #8
 8001754:	bd70      	pop	{r4, r5, r6, pc}
		CS43_TIMEOUT_UserCallback();
 8001756:	f7ff fc5f 	bl	8001018 <CS43_TIMEOUT_UserCallback>
 800175a:	bf00      	nop

0800175c <MxL5007_Init>:
					uint32_t IF_Freq_Hz,
					uint8_t Invert_IF,
					uint8_t Clk_Out_Enable,
					uint8_t Clk_Out_Amp
					)
{
 800175c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001760:	b097      	sub	sp, #92	; 0x5c
	
	uint32_t Reg_Index=0;
	uint32_t Array_Index=0;

	IRVType IRV_Init[]=
 8001762:	f64e 2c78 	movw	ip, #60024	; 0xea78
{
 8001766:	9301      	str	r3, [sp, #4]
	IRVType IRV_Init[]=
 8001768:	f6c0 0c00 	movt	ip, #2048	; 0x800
{
 800176c:	f89d 308c 	ldrb.w	r3, [sp, #140]	; 0x8c
 8001770:	9300      	str	r3, [sp, #0]
 8001772:	4691      	mov	r9, r2
 8001774:	4686      	mov	lr, r0
 8001776:	468a      	mov	sl, r1
	IRVType IRV_Init[]=
 8001778:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800177c:	ae03      	add	r6, sp, #12
 800177e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001780:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001784:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8001786:	f85c 3b04 	ldr.w	r3, [ip], #4
 800178a:	8033      	strh	r3, [r6, #0]
		{ 0x01, 0x01}, //TOP_MASTER_ENABLE=1
		{ 0, 0}
	};


	IRVType IRV_Init_Cable[]=
 800178c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8001790:	ad0c      	add	r5, sp, #48	; 0x30
{
 8001792:	9c20      	ldr	r4, [sp, #128]	; 0x80
 8001794:	9f21      	ldr	r7, [sp, #132]	; 0x84
 8001796:	f89d b088 	ldrb.w	fp, [sp, #136]	; 0x88
 800179a:	f89d 8090 	ldrb.w	r8, [sp, #144]	; 0x90
	IRVType IRV_Init_Cable[]=
 800179e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a0:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80017a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80017a6:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80017aa:	e885 0003 	stmia.w	r5, {r0, r1}
	};
	//edit Init setting here

	PIRVType myIRV = IRV_Init;

	switch(Mode)
 80017ae:	f1b9 0f10 	cmp.w	r9, #16
 80017b2:	d812      	bhi.n	80017da <MxL5007_Init+0x7e>
 80017b4:	e8df f019 	tbh	[pc, r9, lsl #1]
 80017b8:	02de02f6 	.word	0x02de02f6
 80017bc:	001102c6 	.word	0x001102c6
 80017c0:	00110011 	.word	0x00110011
 80017c4:	00110011 	.word	0x00110011
 80017c8:	00110011 	.word	0x00110011
 80017cc:	00110011 	.word	0x00110011
 80017d0:	00110011 	.word	0x00110011
 80017d4:	00110011 	.word	0x00110011
 80017d8:	02b3      	.short	0x02b3
 80017da:	a903      	add	r1, sp, #12
		break;
	

	}

	switch(IF_Freq_Hz)
 80017dc:	f648 5380 	movw	r3, #36224	; 0x8d80
 80017e0:	f2c0 035b 	movt	r3, #91	; 0x5b
 80017e4:	429f      	cmp	r7, r3
 80017e6:	f000 8377 	beq.w	8001ed8 <MxL5007_Init+0x77c>
 80017ea:	f200 8244 	bhi.w	8001c76 <MxL5007_Init+0x51a>
 80017ee:	f64b 3390 	movw	r3, #48016	; 0xbb90
 80017f2:	f2c0 0345 	movt	r3, #69	; 0x45
 80017f6:	429f      	cmp	r7, r3
 80017f8:	f000 8386 	beq.w	8001f08 <MxL5007_Init+0x7ac>
 80017fc:	f240 8215 	bls.w	8001c2a <MxL5007_Init+0x4ce>
 8001800:	f644 3340 	movw	r3, #19264	; 0x4b40
 8001804:	f2c0 034c 	movt	r3, #76	; 0x4c
 8001808:	429f      	cmp	r7, r3
 800180a:	f000 8395 	beq.w	8001f38 <MxL5007_Init+0x7dc>
 800180e:	f44f 53bd 	mov.w	r3, #6048	; 0x17a0
 8001812:	f2c0 0352 	movt	r3, #82	; 0x52
 8001816:	1c8a      	adds	r2, r1, #2
 8001818:	429f      	cmp	r7, r3
 800181a:	bf08      	it	eq
 800181c:	4613      	moveq	r3, r2
 800181e:	d004      	beq.n	800182a <MxL5007_Init+0xce>
 8001820:	e012      	b.n	8001848 <MxL5007_Init+0xec>
}

//local functions called by Init and RFTune
uint32_t SetIRVBit(PIRVType pIRV, uint8_t Num, uint8_t Mask, uint8_t Val)
{
	while (pIRV->Num || pIRV->Val)
 8001822:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001826:	b178      	cbz	r0, 8001848 <MxL5007_Init+0xec>
 8001828:	3302      	adds	r3, #2
 800182a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 800182e:	2800      	cmp	r0, #0
 8001830:	d0f7      	beq.n	8001822 <MxL5007_Init+0xc6>
	{
		if (pIRV->Num==Num)
 8001832:	2802      	cmp	r0, #2
 8001834:	d1f8      	bne.n	8001828 <MxL5007_Init+0xcc>
		{
			pIRV->Val&=~Mask;
 8001836:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800183a:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 800183e:	f040 0005 	orr.w	r0, r0, #5
 8001842:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001846:	e7ef      	b.n	8001828 <MxL5007_Init+0xcc>
	if(Invert_IF) 
 8001848:	4613      	mov	r3, r2
 800184a:	f1bb 0f00 	cmp.w	fp, #0
 800184e:	d104      	bne.n	800185a <MxL5007_Init+0xfe>
 8001850:	e016      	b.n	8001880 <MxL5007_Init+0x124>
	while (pIRV->Num || pIRV->Val)
 8001852:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001856:	b300      	cbz	r0, 800189a <MxL5007_Init+0x13e>
 8001858:	3302      	adds	r3, #2
 800185a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 800185e:	2800      	cmp	r0, #0
 8001860:	d0f7      	beq.n	8001852 <MxL5007_Init+0xf6>
		if (pIRV->Num==Num)
 8001862:	2802      	cmp	r0, #2
 8001864:	d1f8      	bne.n	8001858 <MxL5007_Init+0xfc>
			pIRV->Val&=~Mask;
 8001866:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800186a:	f020 0010 	bic.w	r0, r0, #16
			pIRV->Val|=Val;
 800186e:	f040 0010 	orr.w	r0, r0, #16
 8001872:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001876:	e7ef      	b.n	8001858 <MxL5007_Init+0xfc>
	while (pIRV->Num || pIRV->Val)
 8001878:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800187c:	b168      	cbz	r0, 800189a <MxL5007_Init+0x13e>
 800187e:	3302      	adds	r3, #2
 8001880:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001884:	2800      	cmp	r0, #0
 8001886:	d0f7      	beq.n	8001878 <MxL5007_Init+0x11c>
		if (pIRV->Num==Num)
 8001888:	2802      	cmp	r0, #2
 800188a:	d1f8      	bne.n	800187e <MxL5007_Init+0x122>
			pIRV->Val&=~Mask;
 800188c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001890:	f020 0010 	bic.w	r0, r0, #16
			pIRV->Val|=Val;
 8001894:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001898:	e7f1      	b.n	800187e <MxL5007_Init+0x122>
	switch(Xtal_Freq_Hz)
 800189a:	f64f 43c0 	movw	r3, #64704	; 0xfcc0
 800189e:	f2c0 139b 	movt	r3, #411	; 0x19b
 80018a2:	429c      	cmp	r4, r3
 80018a4:	f000 8360 	beq.w	8001f68 <MxL5007_Init+0x80c>
 80018a8:	f200 8114 	bhi.w	8001ad4 <MxL5007_Init+0x378>
 80018ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80018b0:	f2c0 1338 	movt	r3, #312	; 0x138
 80018b4:	429c      	cmp	r4, r3
 80018b6:	f000 83d8 	beq.w	800206a <MxL5007_Init+0x90e>
 80018ba:	f240 80a5 	bls.w	8001a08 <MxL5007_Init+0x2ac>
 80018be:	f647 0340 	movw	r3, #30784	; 0x7840
 80018c2:	f2c0 137d 	movt	r3, #381	; 0x17d
 80018c6:	429c      	cmp	r4, r3
 80018c8:	f000 83fa 	beq.w	80020c0 <MxL5007_Init+0x964>
 80018cc:	f649 3320 	movw	r3, #39712	; 0x9b20
 80018d0:	f2c0 137f 	movt	r3, #383	; 0x17f
 80018d4:	429c      	cmp	r4, r3
 80018d6:	d167      	bne.n	80019a8 <MxL5007_Init+0x24c>
 80018d8:	4613      	mov	r3, r2
 80018da:	4610      	mov	r0, r2
 80018dc:	e003      	b.n	80018e6 <MxL5007_Init+0x18a>
	while (pIRV->Num || pIRV->Val)
 80018de:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80018e2:	b19c      	cbz	r4, 800190c <MxL5007_Init+0x1b0>
 80018e4:	3002      	adds	r0, #2
 80018e6:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 80018ea:	2c00      	cmp	r4, #0
 80018ec:	d0f7      	beq.n	80018de <MxL5007_Init+0x182>
		if (pIRV->Num==Num)
 80018ee:	2c03      	cmp	r4, #3
 80018f0:	d1f8      	bne.n	80018e4 <MxL5007_Init+0x188>
			pIRV->Val&=~Mask;
 80018f2:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80018f6:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 80018fa:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80018fe:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001902:	e7ef      	b.n	80018e4 <MxL5007_Init+0x188>
	while (pIRV->Num || pIRV->Val)
 8001904:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001908:	b178      	cbz	r0, 800192a <MxL5007_Init+0x1ce>
 800190a:	3302      	adds	r3, #2
 800190c:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001910:	2800      	cmp	r0, #0
 8001912:	d0f7      	beq.n	8001904 <MxL5007_Init+0x1a8>
		if (pIRV->Num==Num)
 8001914:	2805      	cmp	r0, #5
 8001916:	d1f8      	bne.n	800190a <MxL5007_Init+0x1ae>
			pIRV->Val&=~Mask;
 8001918:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800191c:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001920:	f040 0006 	orr.w	r0, r0, #6
 8001924:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001928:	e7ef      	b.n	800190a <MxL5007_Init+0x1ae>
	if(!Clk_Out_Enable) //default is enable 
 800192a:	9b00      	ldr	r3, [sp, #0]
 800192c:	b9b3      	cbnz	r3, 800195c <MxL5007_Init+0x200>
 800192e:	4613      	mov	r3, r2
 8001930:	e003      	b.n	800193a <MxL5007_Init+0x1de>
	while (pIRV->Num || pIRV->Val)
 8001932:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001936:	b188      	cbz	r0, 800195c <MxL5007_Init+0x200>
 8001938:	3302      	adds	r3, #2
 800193a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 800193e:	2800      	cmp	r0, #0
 8001940:	d0f7      	beq.n	8001932 <MxL5007_Init+0x1d6>
		if (pIRV->Num==Num)
 8001942:	2803      	cmp	r0, #3
 8001944:	d1f8      	bne.n	8001938 <MxL5007_Init+0x1dc>
			pIRV->Val&=~Mask;
 8001946:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800194a:	f020 0008 	bic.w	r0, r0, #8
			pIRV->Val|=Val;
 800194e:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001952:	e7f1      	b.n	8001938 <MxL5007_Init+0x1dc>
	while (pIRV->Num || pIRV->Val)
 8001954:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 8001958:	b17b      	cbz	r3, 800197a <MxL5007_Init+0x21e>
 800195a:	3202      	adds	r2, #2
 800195c:	f812 3c02 	ldrb.w	r3, [r2, #-2]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d0f7      	beq.n	8001954 <MxL5007_Init+0x1f8>
		if (pIRV->Num==Num)
 8001964:	2b03      	cmp	r3, #3
 8001966:	d1f8      	bne.n	800195a <MxL5007_Init+0x1fe>
			pIRV->Val&=~Mask;
 8001968:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800196c:	f023 0307 	bic.w	r3, r3, #7
			pIRV->Val|=Val;
 8001970:	ea48 0303 	orr.w	r3, r8, r3
 8001974:	f802 3c01 	strb.w	r3, [r2, #-1]
 8001978:	e7ef      	b.n	800195a <MxL5007_Init+0x1fe>
 800197a:	1c4d      	adds	r5, r1, #1
		pArray[Array_Index++] = myIRV[Reg_Index].Val;
 800197c:	f10e 0601 	add.w	r6, lr, #1
 8001980:	e004      	b.n	800198c <MxL5007_Init+0x230>
		pArray[Array_Index++] = myIRV[Reg_Index].Num;
 8001982:	f80e 2013 	strb.w	r2, [lr, r3, lsl #1]
		pArray[Array_Index++] = myIRV[Reg_Index].Val;
 8001986:	f806 0013 	strb.w	r0, [r6, r3, lsl #1]
		Reg_Index++;
 800198a:	3301      	adds	r3, #1
	while (myIRV[Reg_Index].Num || myIRV[Reg_Index].Val)
 800198c:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
		pArray[Array_Index++] = myIRV[Reg_Index].Val;
 8001990:	f815 0013 	ldrb.w	r0, [r5, r3, lsl #1]
 8001994:	005c      	lsls	r4, r3, #1
	while (myIRV[Reg_Index].Num || myIRV[Reg_Index].Val)
 8001996:	2a00      	cmp	r2, #0
 8001998:	d1f3      	bne.n	8001982 <MxL5007_Init+0x226>
 800199a:	2800      	cmp	r0, #0
 800199c:	d1f1      	bne.n	8001982 <MxL5007_Init+0x226>
	*Array_Size=Array_Index;
 800199e:	f8ca 4000 	str.w	r4, [sl]
}
 80019a2:	b017      	add	sp, #92	; 0x5c
 80019a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch(Xtal_Freq_Hz)
 80019a8:	f44f 5358 	mov.w	r3, #13824	; 0x3600
 80019ac:	f2c0 136e 	movt	r3, #366	; 0x16e
 80019b0:	429c      	cmp	r4, r3
 80019b2:	d1ba      	bne.n	800192a <MxL5007_Init+0x1ce>
 80019b4:	4613      	mov	r3, r2
 80019b6:	4610      	mov	r0, r2
 80019b8:	e003      	b.n	80019c2 <MxL5007_Init+0x266>
	while (pIRV->Num || pIRV->Val)
 80019ba:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80019be:	b1a4      	cbz	r4, 80019ea <MxL5007_Init+0x28e>
 80019c0:	3002      	adds	r0, #2
 80019c2:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 80019c6:	2c00      	cmp	r4, #0
 80019c8:	d0f7      	beq.n	80019ba <MxL5007_Init+0x25e>
		if (pIRV->Num==Num)
 80019ca:	2c03      	cmp	r4, #3
 80019cc:	d1f8      	bne.n	80019c0 <MxL5007_Init+0x264>
			pIRV->Val&=~Mask;
 80019ce:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80019d2:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 80019d6:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 80019da:	f800 4c01 	strb.w	r4, [r0, #-1]
 80019de:	e7ef      	b.n	80019c0 <MxL5007_Init+0x264>
	while (pIRV->Num || pIRV->Val)
 80019e0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80019e4:	2800      	cmp	r0, #0
 80019e6:	d0a0      	beq.n	800192a <MxL5007_Init+0x1ce>
 80019e8:	3302      	adds	r3, #2
 80019ea:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 80019ee:	2800      	cmp	r0, #0
 80019f0:	d0f6      	beq.n	80019e0 <MxL5007_Init+0x284>
		if (pIRV->Num==Num)
 80019f2:	2805      	cmp	r0, #5
 80019f4:	d1f8      	bne.n	80019e8 <MxL5007_Init+0x28c>
			pIRV->Val&=~Mask;
 80019f6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80019fa:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 80019fe:	f040 0004 	orr.w	r0, r0, #4
 8001a02:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001a06:	e7ef      	b.n	80019e8 <MxL5007_Init+0x28c>
	switch(Xtal_Freq_Hz)
 8001a08:	f44f 5334 	mov.w	r3, #11520	; 0x2d00
 8001a0c:	f2c0 1331 	movt	r3, #305	; 0x131
 8001a10:	429c      	cmp	r4, r3
 8001a12:	f000 8380 	beq.w	8002116 <MxL5007_Init+0x9ba>
 8001a16:	f64f 5390 	movw	r3, #64912	; 0xfd90
 8001a1a:	f2c0 1334 	movt	r3, #308	; 0x134
 8001a1e:	429c      	cmp	r4, r3
 8001a20:	d12a      	bne.n	8001a78 <MxL5007_Init+0x31c>
 8001a22:	4613      	mov	r3, r2
 8001a24:	4610      	mov	r0, r2
 8001a26:	e003      	b.n	8001a30 <MxL5007_Init+0x2d4>
	while (pIRV->Num || pIRV->Val)
 8001a28:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001a2c:	b1ac      	cbz	r4, 8001a5a <MxL5007_Init+0x2fe>
 8001a2e:	3002      	adds	r0, #2
 8001a30:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001a34:	2c00      	cmp	r4, #0
 8001a36:	d0f7      	beq.n	8001a28 <MxL5007_Init+0x2cc>
		if (pIRV->Num==Num)
 8001a38:	2c03      	cmp	r4, #3
 8001a3a:	d1f8      	bne.n	8001a2e <MxL5007_Init+0x2d2>
			pIRV->Val&=~Mask;
 8001a3c:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001a40:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8001a44:	f044 0420 	orr.w	r4, r4, #32
 8001a48:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001a4c:	e7ef      	b.n	8001a2e <MxL5007_Init+0x2d2>
	while (pIRV->Num || pIRV->Val)
 8001a4e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001a52:	2800      	cmp	r0, #0
 8001a54:	f43f af69 	beq.w	800192a <MxL5007_Init+0x1ce>
 8001a58:	3302      	adds	r3, #2
 8001a5a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001a5e:	2800      	cmp	r0, #0
 8001a60:	d0f5      	beq.n	8001a4e <MxL5007_Init+0x2f2>
		if (pIRV->Num==Num)
 8001a62:	2805      	cmp	r0, #5
 8001a64:	d1f8      	bne.n	8001a58 <MxL5007_Init+0x2fc>
			pIRV->Val&=~Mask;
 8001a66:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001a6a:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001a6e:	f040 0002 	orr.w	r0, r0, #2
 8001a72:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001a76:	e7ef      	b.n	8001a58 <MxL5007_Init+0x2fc>
	switch(Xtal_Freq_Hz)
 8001a78:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8001a7c:	f2c0 03f4 	movt	r3, #244	; 0xf4
 8001a80:	429c      	cmp	r4, r3
 8001a82:	f47f af52 	bne.w	800192a <MxL5007_Init+0x1ce>
 8001a86:	4613      	mov	r3, r2
 8001a88:	4610      	mov	r0, r2
 8001a8a:	e003      	b.n	8001a94 <MxL5007_Init+0x338>
	while (pIRV->Num || pIRV->Val)
 8001a8c:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001a90:	b19c      	cbz	r4, 8001aba <MxL5007_Init+0x35e>
 8001a92:	3002      	adds	r0, #2
 8001a94:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001a98:	2c00      	cmp	r4, #0
 8001a9a:	d0f7      	beq.n	8001a8c <MxL5007_Init+0x330>
		if (pIRV->Num==Num)
 8001a9c:	2c03      	cmp	r4, #3
 8001a9e:	d1f8      	bne.n	8001a92 <MxL5007_Init+0x336>
			pIRV->Val&=~Mask;
 8001aa0:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001aa4:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8001aa8:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001aac:	e7f1      	b.n	8001a92 <MxL5007_Init+0x336>
	while (pIRV->Num || pIRV->Val)
 8001aae:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001ab2:	2800      	cmp	r0, #0
 8001ab4:	f43f af39 	beq.w	800192a <MxL5007_Init+0x1ce>
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001abe:	2800      	cmp	r0, #0
 8001ac0:	d0f5      	beq.n	8001aae <MxL5007_Init+0x352>
		if (pIRV->Num==Num)
 8001ac2:	2805      	cmp	r0, #5
 8001ac4:	d1f8      	bne.n	8001ab8 <MxL5007_Init+0x35c>
			pIRV->Val&=~Mask;
 8001ac6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001aca:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001ace:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001ad2:	e7f1      	b.n	8001ab8 <MxL5007_Init+0x35c>
	switch(Xtal_Freq_Hz)
 8001ad4:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 8001ad8:	f2c0 239f 	movt	r3, #671	; 0x29f
 8001adc:	429c      	cmp	r4, r3
 8001ade:	f000 8345 	beq.w	800216c <MxL5007_Init+0xa10>
 8001ae2:	d938      	bls.n	8001b56 <MxL5007_Init+0x3fa>
 8001ae4:	f44f 43d8 	mov.w	r3, #27648	; 0x6c00
 8001ae8:	f2c0 23dc 	movt	r3, #732	; 0x2dc
 8001aec:	429c      	cmp	r4, r3
 8001aee:	f000 8266 	beq.w	8001fbe <MxL5007_Init+0x862>
 8001af2:	f647 63ec 	movw	r3, #32492	; 0x7eec
 8001af6:	f2c0 23f1 	movt	r3, #753	; 0x2f1
 8001afa:	429c      	cmp	r4, r3
 8001afc:	f47f af15 	bne.w	800192a <MxL5007_Init+0x1ce>
 8001b00:	4613      	mov	r3, r2
 8001b02:	4610      	mov	r0, r2
 8001b04:	e003      	b.n	8001b0e <MxL5007_Init+0x3b2>
	while (pIRV->Num || pIRV->Val)
 8001b06:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001b0a:	b1ac      	cbz	r4, 8001b38 <MxL5007_Init+0x3dc>
 8001b0c:	3002      	adds	r0, #2
 8001b0e:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001b12:	2c00      	cmp	r4, #0
 8001b14:	d0f7      	beq.n	8001b06 <MxL5007_Init+0x3aa>
		if (pIRV->Num==Num)
 8001b16:	2c03      	cmp	r4, #3
 8001b18:	d1f8      	bne.n	8001b0c <MxL5007_Init+0x3b0>
			pIRV->Val&=~Mask;
 8001b1a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001b1e:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8001b22:	f064 042f 	orn	r4, r4, #47	; 0x2f
 8001b26:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001b2a:	e7ef      	b.n	8001b0c <MxL5007_Init+0x3b0>
	while (pIRV->Num || pIRV->Val)
 8001b2c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001b30:	2800      	cmp	r0, #0
 8001b32:	f43f aefa 	beq.w	800192a <MxL5007_Init+0x1ce>
 8001b36:	3302      	adds	r3, #2
 8001b38:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001b3c:	2800      	cmp	r0, #0
 8001b3e:	d0f5      	beq.n	8001b2c <MxL5007_Init+0x3d0>
		if (pIRV->Num==Num)
 8001b40:	2805      	cmp	r0, #5
 8001b42:	d1f8      	bne.n	8001b36 <MxL5007_Init+0x3da>
			pIRV->Val&=~Mask;
 8001b44:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001b48:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001b4c:	f040 000d 	orr.w	r0, r0, #13
 8001b50:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001b54:	e7ef      	b.n	8001b36 <MxL5007_Init+0x3da>
	switch(Xtal_Freq_Hz)
 8001b56:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 8001b5a:	f2c0 13e8 	movt	r3, #488	; 0x1e8
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	f000 8258 	beq.w	8002014 <MxL5007_Init+0x8b8>
 8001b64:	f44f 43b4 	mov.w	r3, #23040	; 0x5a00
 8001b68:	f2c0 2362 	movt	r3, #610	; 0x262
 8001b6c:	429c      	cmp	r4, r3
 8001b6e:	d12a      	bne.n	8001bc6 <MxL5007_Init+0x46a>
 8001b70:	4613      	mov	r3, r2
 8001b72:	4610      	mov	r0, r2
 8001b74:	e003      	b.n	8001b7e <MxL5007_Init+0x422>
	while (pIRV->Num || pIRV->Val)
 8001b76:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001b7a:	b1ac      	cbz	r4, 8001ba8 <MxL5007_Init+0x44c>
 8001b7c:	3002      	adds	r0, #2
 8001b7e:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001b82:	2c00      	cmp	r4, #0
 8001b84:	d0f7      	beq.n	8001b76 <MxL5007_Init+0x41a>
		if (pIRV->Num==Num)
 8001b86:	2c03      	cmp	r4, #3
 8001b88:	d1f8      	bne.n	8001b7c <MxL5007_Init+0x420>
			pIRV->Val&=~Mask;
 8001b8a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001b8e:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8001b92:	f064 045f 	orn	r4, r4, #95	; 0x5f
 8001b96:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001b9a:	e7ef      	b.n	8001b7c <MxL5007_Init+0x420>
	while (pIRV->Num || pIRV->Val)
 8001b9c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001ba0:	2800      	cmp	r0, #0
 8001ba2:	f43f aec2 	beq.w	800192a <MxL5007_Init+0x1ce>
 8001ba6:	3302      	adds	r3, #2
 8001ba8:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001bac:	2800      	cmp	r0, #0
 8001bae:	d0f5      	beq.n	8001b9c <MxL5007_Init+0x440>
		if (pIRV->Num==Num)
 8001bb0:	2805      	cmp	r0, #5
 8001bb2:	d1f8      	bne.n	8001ba6 <MxL5007_Init+0x44a>
			pIRV->Val&=~Mask;
 8001bb4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001bb8:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001bbc:	f040 000a 	orr.w	r0, r0, #10
 8001bc0:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001bc4:	e7ef      	b.n	8001ba6 <MxL5007_Init+0x44a>
	switch(Xtal_Freq_Hz)
 8001bc6:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8001bca:	f2c0 13b7 	movt	r3, #439	; 0x1b7
 8001bce:	429c      	cmp	r4, r3
 8001bd0:	f47f aeab 	bne.w	800192a <MxL5007_Init+0x1ce>
 8001bd4:	4613      	mov	r3, r2
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	e003      	b.n	8001be2 <MxL5007_Init+0x486>
	while (pIRV->Num || pIRV->Val)
 8001bda:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001bde:	b1ac      	cbz	r4, 8001c0c <MxL5007_Init+0x4b0>
 8001be0:	3002      	adds	r0, #2
 8001be2:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001be6:	2c00      	cmp	r4, #0
 8001be8:	d0f7      	beq.n	8001bda <MxL5007_Init+0x47e>
		if (pIRV->Num==Num)
 8001bea:	2c03      	cmp	r4, #3
 8001bec:	d1f8      	bne.n	8001be0 <MxL5007_Init+0x484>
			pIRV->Val&=~Mask;
 8001bee:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001bf2:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8001bf6:	f064 047f 	orn	r4, r4, #127	; 0x7f
 8001bfa:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001bfe:	e7ef      	b.n	8001be0 <MxL5007_Init+0x484>
	while (pIRV->Num || pIRV->Val)
 8001c00:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001c04:	2800      	cmp	r0, #0
 8001c06:	f43f ae90 	beq.w	800192a <MxL5007_Init+0x1ce>
 8001c0a:	3302      	adds	r3, #2
 8001c0c:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001c10:	2800      	cmp	r0, #0
 8001c12:	d0f5      	beq.n	8001c00 <MxL5007_Init+0x4a4>
		if (pIRV->Num==Num)
 8001c14:	2805      	cmp	r0, #5
 8001c16:	d1f8      	bne.n	8001c0a <MxL5007_Init+0x4ae>
			pIRV->Val&=~Mask;
 8001c18:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001c1c:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001c20:	f040 0008 	orr.w	r0, r0, #8
 8001c24:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001c28:	e7ef      	b.n	8001c0a <MxL5007_Init+0x4ae>
	switch(IF_Freq_Hz)
 8001c2a:	f44f 6310 	mov.w	r3, #2304	; 0x900
 8001c2e:	f2c0 033d 	movt	r3, #61	; 0x3d
 8001c32:	429f      	cmp	r7, r3
 8001c34:	f000 813a 	beq.w	8001eac <MxL5007_Init+0x750>
 8001c38:	f64a 2320 	movw	r3, #43552	; 0xaa20
 8001c3c:	f2c0 0344 	movt	r3, #68	; 0x44
 8001c40:	1c8a      	adds	r2, r1, #2
 8001c42:	429f      	cmp	r7, r3
 8001c44:	bf08      	it	eq
 8001c46:	4613      	moveq	r3, r2
 8001c48:	d006      	beq.n	8001c58 <MxL5007_Init+0x4fc>
 8001c4a:	e5fd      	b.n	8001848 <MxL5007_Init+0xec>
	while (pIRV->Num || pIRV->Val)
 8001c4c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001c50:	2800      	cmp	r0, #0
 8001c52:	f43f adf9 	beq.w	8001848 <MxL5007_Init+0xec>
 8001c56:	3302      	adds	r3, #2
 8001c58:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001c5c:	2800      	cmp	r0, #0
 8001c5e:	d0f5      	beq.n	8001c4c <MxL5007_Init+0x4f0>
		if (pIRV->Num==Num)
 8001c60:	2802      	cmp	r0, #2
 8001c62:	d1f8      	bne.n	8001c56 <MxL5007_Init+0x4fa>
			pIRV->Val&=~Mask;
 8001c64:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001c68:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001c6c:	f040 0002 	orr.w	r0, r0, #2
 8001c70:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001c74:	e7ef      	b.n	8001c56 <MxL5007_Init+0x4fa>
	switch(IF_Freq_Hz)
 8001c76:	f64d 7350 	movw	r3, #57168	; 0xdf50
 8001c7a:	f2c0 2319 	movt	r3, #537	; 0x219
 8001c7e:	429f      	cmp	r7, r3
 8001c80:	f000 80cc 	beq.w	8001e1c <MxL5007_Init+0x6c0>
 8001c84:	d925      	bls.n	8001cd2 <MxL5007_Init+0x576>
 8001c86:	f649 23f0 	movw	r3, #39664	; 0x9af0
 8001c8a:	f2c0 2327 	movt	r3, #551	; 0x227
 8001c8e:	429f      	cmp	r7, r3
 8001c90:	f000 80dc 	beq.w	8001e4c <MxL5007_Init+0x6f0>
 8001c94:	f44f 43c6 	mov.w	r3, #25344	; 0x6300
 8001c98:	f2c0 239f 	movt	r3, #671	; 0x29f
 8001c9c:	1c8a      	adds	r2, r1, #2
 8001c9e:	429f      	cmp	r7, r3
 8001ca0:	bf08      	it	eq
 8001ca2:	4613      	moveq	r3, r2
 8001ca4:	d006      	beq.n	8001cb4 <MxL5007_Init+0x558>
 8001ca6:	e5cf      	b.n	8001848 <MxL5007_Init+0xec>
	while (pIRV->Num || pIRV->Val)
 8001ca8:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001cac:	2800      	cmp	r0, #0
 8001cae:	f43f adcb 	beq.w	8001848 <MxL5007_Init+0xec>
 8001cb2:	3302      	adds	r3, #2
 8001cb4:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001cb8:	2800      	cmp	r0, #0
 8001cba:	d0f5      	beq.n	8001ca8 <MxL5007_Init+0x54c>
		if (pIRV->Num==Num)
 8001cbc:	2802      	cmp	r0, #2
 8001cbe:	d1f8      	bne.n	8001cb2 <MxL5007_Init+0x556>
			pIRV->Val&=~Mask;
 8001cc0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001cc4:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001cc8:	f040 000b 	orr.w	r0, r0, #11
 8001ccc:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001cd0:	e7ef      	b.n	8001cb2 <MxL5007_Init+0x556>
	switch(IF_Freq_Hz)
 8001cd2:	f24d 3340 	movw	r3, #54080	; 0xd340
 8001cd6:	f2c0 035f 	movt	r3, #95	; 0x5f
 8001cda:	429f      	cmp	r7, r3
 8001cdc:	f000 80ce 	beq.w	8001e7c <MxL5007_Init+0x720>
 8001ce0:	f244 034c 	movw	r3, #16460	; 0x404c
 8001ce4:	f2c0 038c 	movt	r3, #140	; 0x8c
 8001ce8:	1c8a      	adds	r2, r1, #2
 8001cea:	429f      	cmp	r7, r3
 8001cec:	bf08      	it	eq
 8001cee:	4613      	moveq	r3, r2
 8001cf0:	d006      	beq.n	8001d00 <MxL5007_Init+0x5a4>
 8001cf2:	e5a9      	b.n	8001848 <MxL5007_Init+0xec>
	while (pIRV->Num || pIRV->Val)
 8001cf4:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001cf8:	2800      	cmp	r0, #0
 8001cfa:	f43f ada5 	beq.w	8001848 <MxL5007_Init+0xec>
 8001cfe:	3302      	adds	r3, #2
 8001d00:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001d04:	2800      	cmp	r0, #0
 8001d06:	d0f5      	beq.n	8001cf4 <MxL5007_Init+0x598>
		if (pIRV->Num==Num)
 8001d08:	2802      	cmp	r0, #2
 8001d0a:	d1f8      	bne.n	8001cfe <MxL5007_Init+0x5a2>
			pIRV->Val&=~Mask;
 8001d0c:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001d10:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001d14:	f040 0008 	orr.w	r0, r0, #8
 8001d18:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001d1c:	e7ef      	b.n	8001cfe <MxL5007_Init+0x5a2>
 8001d1e:	f10d 0332 	add.w	r3, sp, #50	; 0x32
	switch(Mode)
 8001d22:	461a      	mov	r2, r3
			pIRV->Val|=Val;
 8001d24:	20c1      	movs	r0, #193	; 0xc1
 8001d26:	e004      	b.n	8001d32 <MxL5007_Init+0x5d6>
	while (pIRV->Num || pIRV->Val)
 8001d28:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001d2c:	2900      	cmp	r1, #0
 8001d2e:	d051      	beq.n	8001dd4 <MxL5007_Init+0x678>
 8001d30:	3202      	adds	r2, #2
 8001d32:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8001d36:	2900      	cmp	r1, #0
 8001d38:	d0f6      	beq.n	8001d28 <MxL5007_Init+0x5cc>
		if (pIRV->Num==Num)
 8001d3a:	2909      	cmp	r1, #9
			pIRV->Val|=Val;
 8001d3c:	bf08      	it	eq
 8001d3e:	f802 0c01 	strbeq.w	r0, [r2, #-1]
 8001d42:	e7f5      	b.n	8001d30 <MxL5007_Init+0x5d4>
 8001d44:	f10d 030e 	add.w	r3, sp, #14
 8001d48:	e005      	b.n	8001d56 <MxL5007_Init+0x5fa>
	while (pIRV->Num || pIRV->Val)
 8001d4a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	f43f ad43 	beq.w	80017da <MxL5007_Init+0x7e>
 8001d54:	3302      	adds	r3, #2
 8001d56:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d0f5      	beq.n	8001d4a <MxL5007_Init+0x5ee>
		if (pIRV->Num==Num)
 8001d5e:	2a06      	cmp	r2, #6
 8001d60:	d1f8      	bne.n	8001d54 <MxL5007_Init+0x5f8>
			pIRV->Val&=~Mask;
 8001d62:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001d66:	f022 021f 	bic.w	r2, r2, #31
			pIRV->Val|=Val;
 8001d6a:	f042 0212 	orr.w	r2, r2, #18
 8001d6e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8001d72:	e7ef      	b.n	8001d54 <MxL5007_Init+0x5f8>
 8001d74:	f10d 030e 	add.w	r3, sp, #14
 8001d78:	e005      	b.n	8001d86 <MxL5007_Init+0x62a>
	while (pIRV->Num || pIRV->Val)
 8001d7a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001d7e:	2a00      	cmp	r2, #0
 8001d80:	f43f ad2b 	beq.w	80017da <MxL5007_Init+0x7e>
 8001d84:	3302      	adds	r3, #2
 8001d86:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8001d8a:	2a00      	cmp	r2, #0
 8001d8c:	d0f5      	beq.n	8001d7a <MxL5007_Init+0x61e>
		if (pIRV->Num==Num)
 8001d8e:	2a06      	cmp	r2, #6
 8001d90:	d1f8      	bne.n	8001d84 <MxL5007_Init+0x628>
			pIRV->Val&=~Mask;
 8001d92:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001d96:	f022 021f 	bic.w	r2, r2, #31
			pIRV->Val|=Val;
 8001d9a:	f042 0211 	orr.w	r2, r2, #17
 8001d9e:	f803 2c01 	strb.w	r2, [r3, #-1]
 8001da2:	e7ef      	b.n	8001d84 <MxL5007_Init+0x628>
 8001da4:	f10d 030e 	add.w	r3, sp, #14
 8001da8:	e005      	b.n	8001db6 <MxL5007_Init+0x65a>
	while (pIRV->Num || pIRV->Val)
 8001daa:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	f43f ad13 	beq.w	80017da <MxL5007_Init+0x7e>
 8001db4:	3302      	adds	r3, #2
 8001db6:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8001dba:	2a00      	cmp	r2, #0
 8001dbc:	d0f5      	beq.n	8001daa <MxL5007_Init+0x64e>
		if (pIRV->Num==Num)
 8001dbe:	2a06      	cmp	r2, #6
 8001dc0:	d1f8      	bne.n	8001db4 <MxL5007_Init+0x658>
			pIRV->Val&=~Mask;
 8001dc2:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001dc6:	f022 021f 	bic.w	r2, r2, #31
			pIRV->Val|=Val;
 8001dca:	f042 0210 	orr.w	r2, r2, #16
 8001dce:	f803 2c01 	strb.w	r2, [r3, #-1]
 8001dd2:	e7ef      	b.n	8001db4 <MxL5007_Init+0x658>
		SetIRVBit(myIRV, 0x0A, 0xFF, 8-IF_Diff_Out_Level);	
 8001dd4:	9a01      	ldr	r2, [sp, #4]
 8001dd6:	f1c2 0008 	rsb	r0, r2, #8
 8001dda:	b2c0      	uxtb	r0, r0
 8001ddc:	461a      	mov	r2, r3
 8001dde:	e003      	b.n	8001de8 <MxL5007_Init+0x68c>
	while (pIRV->Num || pIRV->Val)
 8001de0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8001de4:	b149      	cbz	r1, 8001dfa <MxL5007_Init+0x69e>
 8001de6:	3202      	adds	r2, #2
 8001de8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8001dec:	2900      	cmp	r1, #0
 8001dee:	d0f7      	beq.n	8001de0 <MxL5007_Init+0x684>
		if (pIRV->Num==Num)
 8001df0:	290a      	cmp	r1, #10
			pIRV->Val|=Val;
 8001df2:	bf08      	it	eq
 8001df4:	f802 0c01 	strbeq.w	r0, [r2, #-1]
 8001df8:	e7f5      	b.n	8001de6 <MxL5007_Init+0x68a>
 8001dfa:	2117      	movs	r1, #23
 8001dfc:	e003      	b.n	8001e06 <MxL5007_Init+0x6aa>
	while (pIRV->Num || pIRV->Val)
 8001dfe:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8001e02:	b14a      	cbz	r2, 8001e18 <MxL5007_Init+0x6bc>
 8001e04:	3302      	adds	r3, #2
 8001e06:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8001e0a:	2a00      	cmp	r2, #0
 8001e0c:	d0f7      	beq.n	8001dfe <MxL5007_Init+0x6a2>
		if (pIRV->Num==Num)
 8001e0e:	2a0b      	cmp	r2, #11
			pIRV->Val|=Val;
 8001e10:	bf08      	it	eq
 8001e12:	f803 1c01 	strbeq.w	r1, [r3, #-1]
 8001e16:	e7f5      	b.n	8001e04 <MxL5007_Init+0x6a8>
		myIRV = IRV_Init_Cable;
 8001e18:	a90c      	add	r1, sp, #48	; 0x30
 8001e1a:	e4df      	b.n	80017dc <MxL5007_Init+0x80>
 8001e1c:	1c8a      	adds	r2, r1, #2
 8001e1e:	4613      	mov	r3, r2
 8001e20:	e005      	b.n	8001e2e <MxL5007_Init+0x6d2>
	while (pIRV->Num || pIRV->Val)
 8001e22:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001e26:	2800      	cmp	r0, #0
 8001e28:	f43f ad0e 	beq.w	8001848 <MxL5007_Init+0xec>
 8001e2c:	3302      	adds	r3, #2
 8001e2e:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001e32:	2800      	cmp	r0, #0
 8001e34:	d0f5      	beq.n	8001e22 <MxL5007_Init+0x6c6>
		if (pIRV->Num==Num)
 8001e36:	2802      	cmp	r0, #2
 8001e38:	d1f8      	bne.n	8001e2c <MxL5007_Init+0x6d0>
			pIRV->Val&=~Mask;
 8001e3a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001e3e:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001e42:	f040 0009 	orr.w	r0, r0, #9
 8001e46:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001e4a:	e7ef      	b.n	8001e2c <MxL5007_Init+0x6d0>
 8001e4c:	1c8a      	adds	r2, r1, #2
 8001e4e:	4613      	mov	r3, r2
 8001e50:	e005      	b.n	8001e5e <MxL5007_Init+0x702>
	while (pIRV->Num || pIRV->Val)
 8001e52:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001e56:	2800      	cmp	r0, #0
 8001e58:	f43f acf6 	beq.w	8001848 <MxL5007_Init+0xec>
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001e62:	2800      	cmp	r0, #0
 8001e64:	d0f5      	beq.n	8001e52 <MxL5007_Init+0x6f6>
		if (pIRV->Num==Num)
 8001e66:	2802      	cmp	r0, #2
 8001e68:	d1f8      	bne.n	8001e5c <MxL5007_Init+0x700>
			pIRV->Val&=~Mask;
 8001e6a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001e6e:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001e72:	f040 000a 	orr.w	r0, r0, #10
 8001e76:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001e7a:	e7ef      	b.n	8001e5c <MxL5007_Init+0x700>
 8001e7c:	1c8a      	adds	r2, r1, #2
 8001e7e:	4613      	mov	r3, r2
 8001e80:	e005      	b.n	8001e8e <MxL5007_Init+0x732>
	while (pIRV->Num || pIRV->Val)
 8001e82:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001e86:	2800      	cmp	r0, #0
 8001e88:	f43f acde 	beq.w	8001848 <MxL5007_Init+0xec>
 8001e8c:	3302      	adds	r3, #2
 8001e8e:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001e92:	2800      	cmp	r0, #0
 8001e94:	d0f5      	beq.n	8001e82 <MxL5007_Init+0x726>
		if (pIRV->Num==Num)
 8001e96:	2802      	cmp	r0, #2
 8001e98:	d1f8      	bne.n	8001e8c <MxL5007_Init+0x730>
			pIRV->Val&=~Mask;
 8001e9a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001e9e:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001ea2:	f040 0007 	orr.w	r0, r0, #7
 8001ea6:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001eaa:	e7ef      	b.n	8001e8c <MxL5007_Init+0x730>
 8001eac:	1c8a      	adds	r2, r1, #2
 8001eae:	4613      	mov	r3, r2
 8001eb0:	e005      	b.n	8001ebe <MxL5007_Init+0x762>
	while (pIRV->Num || pIRV->Val)
 8001eb2:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001eb6:	2800      	cmp	r0, #0
 8001eb8:	f43f acc6 	beq.w	8001848 <MxL5007_Init+0xec>
 8001ebc:	3302      	adds	r3, #2
 8001ebe:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001ec2:	2800      	cmp	r0, #0
 8001ec4:	d0f5      	beq.n	8001eb2 <MxL5007_Init+0x756>
		if (pIRV->Num==Num)
 8001ec6:	2802      	cmp	r0, #2
 8001ec8:	d1f8      	bne.n	8001ebc <MxL5007_Init+0x760>
			pIRV->Val&=~Mask;
 8001eca:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001ece:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001ed2:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001ed6:	e7f1      	b.n	8001ebc <MxL5007_Init+0x760>
 8001ed8:	1c8a      	adds	r2, r1, #2
 8001eda:	4613      	mov	r3, r2
 8001edc:	e005      	b.n	8001eea <MxL5007_Init+0x78e>
	while (pIRV->Num || pIRV->Val)
 8001ede:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001ee2:	2800      	cmp	r0, #0
 8001ee4:	f43f acb0 	beq.w	8001848 <MxL5007_Init+0xec>
 8001ee8:	3302      	adds	r3, #2
 8001eea:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d0f5      	beq.n	8001ede <MxL5007_Init+0x782>
		if (pIRV->Num==Num)
 8001ef2:	2802      	cmp	r0, #2
 8001ef4:	d1f8      	bne.n	8001ee8 <MxL5007_Init+0x78c>
			pIRV->Val&=~Mask;
 8001ef6:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001efa:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001efe:	f040 0006 	orr.w	r0, r0, #6
 8001f02:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001f06:	e7ef      	b.n	8001ee8 <MxL5007_Init+0x78c>
 8001f08:	1c8a      	adds	r2, r1, #2
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	e005      	b.n	8001f1a <MxL5007_Init+0x7be>
	while (pIRV->Num || pIRV->Val)
 8001f0e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001f12:	2800      	cmp	r0, #0
 8001f14:	f43f ac98 	beq.w	8001848 <MxL5007_Init+0xec>
 8001f18:	3302      	adds	r3, #2
 8001f1a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001f1e:	2800      	cmp	r0, #0
 8001f20:	d0f5      	beq.n	8001f0e <MxL5007_Init+0x7b2>
		if (pIRV->Num==Num)
 8001f22:	2802      	cmp	r0, #2
 8001f24:	d1f8      	bne.n	8001f18 <MxL5007_Init+0x7bc>
			pIRV->Val&=~Mask;
 8001f26:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001f2a:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001f2e:	f040 0003 	orr.w	r0, r0, #3
 8001f32:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001f36:	e7ef      	b.n	8001f18 <MxL5007_Init+0x7bc>
 8001f38:	1c8a      	adds	r2, r1, #2
 8001f3a:	4613      	mov	r3, r2
 8001f3c:	e005      	b.n	8001f4a <MxL5007_Init+0x7ee>
	while (pIRV->Num || pIRV->Val)
 8001f3e:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001f42:	2800      	cmp	r0, #0
 8001f44:	f43f ac80 	beq.w	8001848 <MxL5007_Init+0xec>
 8001f48:	3302      	adds	r3, #2
 8001f4a:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001f4e:	2800      	cmp	r0, #0
 8001f50:	d0f5      	beq.n	8001f3e <MxL5007_Init+0x7e2>
		if (pIRV->Num==Num)
 8001f52:	2802      	cmp	r0, #2
 8001f54:	d1f8      	bne.n	8001f48 <MxL5007_Init+0x7ec>
			pIRV->Val&=~Mask;
 8001f56:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001f5a:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001f5e:	f040 0004 	orr.w	r0, r0, #4
 8001f62:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001f66:	e7ef      	b.n	8001f48 <MxL5007_Init+0x7ec>
 8001f68:	4613      	mov	r3, r2
	switch(Xtal_Freq_Hz)
 8001f6a:	4610      	mov	r0, r2
 8001f6c:	e003      	b.n	8001f76 <MxL5007_Init+0x81a>
	while (pIRV->Num || pIRV->Val)
 8001f6e:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001f72:	b1ac      	cbz	r4, 8001fa0 <MxL5007_Init+0x844>
 8001f74:	3002      	adds	r0, #2
 8001f76:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001f7a:	2c00      	cmp	r4, #0
 8001f7c:	d0f7      	beq.n	8001f6e <MxL5007_Init+0x812>
		if (pIRV->Num==Num)
 8001f7e:	2c03      	cmp	r4, #3
 8001f80:	d1f8      	bne.n	8001f74 <MxL5007_Init+0x818>
			pIRV->Val&=~Mask;
 8001f82:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001f86:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8001f8a:	f044 0470 	orr.w	r4, r4, #112	; 0x70
 8001f8e:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001f92:	e7ef      	b.n	8001f74 <MxL5007_Init+0x818>
	while (pIRV->Num || pIRV->Val)
 8001f94:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001f98:	2800      	cmp	r0, #0
 8001f9a:	f43f acc6 	beq.w	800192a <MxL5007_Init+0x1ce>
 8001f9e:	3302      	adds	r3, #2
 8001fa0:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001fa4:	2800      	cmp	r0, #0
 8001fa6:	d0f5      	beq.n	8001f94 <MxL5007_Init+0x838>
		if (pIRV->Num==Num)
 8001fa8:	2805      	cmp	r0, #5
 8001faa:	d1f8      	bne.n	8001f9e <MxL5007_Init+0x842>
			pIRV->Val&=~Mask;
 8001fac:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001fb0:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8001fb4:	f040 0007 	orr.w	r0, r0, #7
 8001fb8:	f803 0c01 	strb.w	r0, [r3, #-1]
 8001fbc:	e7ef      	b.n	8001f9e <MxL5007_Init+0x842>
 8001fbe:	4613      	mov	r3, r2
	switch(Xtal_Freq_Hz)
 8001fc0:	4610      	mov	r0, r2
 8001fc2:	e003      	b.n	8001fcc <MxL5007_Init+0x870>
	while (pIRV->Num || pIRV->Val)
 8001fc4:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001fc8:	b1ac      	cbz	r4, 8001ff6 <MxL5007_Init+0x89a>
 8001fca:	3002      	adds	r0, #2
 8001fcc:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8001fd0:	2c00      	cmp	r4, #0
 8001fd2:	d0f7      	beq.n	8001fc4 <MxL5007_Init+0x868>
		if (pIRV->Num==Num)
 8001fd4:	2c03      	cmp	r4, #3
 8001fd6:	d1f8      	bne.n	8001fca <MxL5007_Init+0x86e>
			pIRV->Val&=~Mask;
 8001fd8:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8001fdc:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8001fe0:	f064 043f 	orn	r4, r4, #63	; 0x3f
 8001fe4:	f800 4c01 	strb.w	r4, [r0, #-1]
 8001fe8:	e7ef      	b.n	8001fca <MxL5007_Init+0x86e>
	while (pIRV->Num || pIRV->Val)
 8001fea:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8001fee:	2800      	cmp	r0, #0
 8001ff0:	f43f ac9b 	beq.w	800192a <MxL5007_Init+0x1ce>
 8001ff4:	3302      	adds	r3, #2
 8001ff6:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8001ffa:	2800      	cmp	r0, #0
 8001ffc:	d0f5      	beq.n	8001fea <MxL5007_Init+0x88e>
		if (pIRV->Num==Num)
 8001ffe:	2805      	cmp	r0, #5
 8002000:	d1f8      	bne.n	8001ff4 <MxL5007_Init+0x898>
			pIRV->Val&=~Mask;
 8002002:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8002006:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 800200a:	f040 000c 	orr.w	r0, r0, #12
 800200e:	f803 0c01 	strb.w	r0, [r3, #-1]
 8002012:	e7ef      	b.n	8001ff4 <MxL5007_Init+0x898>
 8002014:	4613      	mov	r3, r2
	switch(Xtal_Freq_Hz)
 8002016:	4610      	mov	r0, r2
 8002018:	e003      	b.n	8002022 <MxL5007_Init+0x8c6>
	while (pIRV->Num || pIRV->Val)
 800201a:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800201e:	b1ac      	cbz	r4, 800204c <MxL5007_Init+0x8f0>
 8002020:	3002      	adds	r0, #2
 8002022:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8002026:	2c00      	cmp	r4, #0
 8002028:	d0f7      	beq.n	800201a <MxL5007_Init+0x8be>
		if (pIRV->Num==Num)
 800202a:	2c03      	cmp	r4, #3
 800202c:	d1f8      	bne.n	8002020 <MxL5007_Init+0x8c4>
			pIRV->Val&=~Mask;
 800202e:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8002032:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8002036:	f064 046f 	orn	r4, r4, #111	; 0x6f
 800203a:	f800 4c01 	strb.w	r4, [r0, #-1]
 800203e:	e7ef      	b.n	8002020 <MxL5007_Init+0x8c4>
	while (pIRV->Num || pIRV->Val)
 8002040:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8002044:	2800      	cmp	r0, #0
 8002046:	f43f ac70 	beq.w	800192a <MxL5007_Init+0x1ce>
 800204a:	3302      	adds	r3, #2
 800204c:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8002050:	2800      	cmp	r0, #0
 8002052:	d0f5      	beq.n	8002040 <MxL5007_Init+0x8e4>
		if (pIRV->Num==Num)
 8002054:	2805      	cmp	r0, #5
 8002056:	d1f8      	bne.n	800204a <MxL5007_Init+0x8ee>
			pIRV->Val&=~Mask;
 8002058:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800205c:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8002060:	f040 0009 	orr.w	r0, r0, #9
 8002064:	f803 0c01 	strb.w	r0, [r3, #-1]
 8002068:	e7ef      	b.n	800204a <MxL5007_Init+0x8ee>
 800206a:	4613      	mov	r3, r2
	switch(Xtal_Freq_Hz)
 800206c:	4610      	mov	r0, r2
 800206e:	e003      	b.n	8002078 <MxL5007_Init+0x91c>
	while (pIRV->Num || pIRV->Val)
 8002070:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8002074:	b1ac      	cbz	r4, 80020a2 <MxL5007_Init+0x946>
 8002076:	3002      	adds	r0, #2
 8002078:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 800207c:	2c00      	cmp	r4, #0
 800207e:	d0f7      	beq.n	8002070 <MxL5007_Init+0x914>
		if (pIRV->Num==Num)
 8002080:	2c03      	cmp	r4, #3
 8002082:	d1f8      	bne.n	8002076 <MxL5007_Init+0x91a>
			pIRV->Val&=~Mask;
 8002084:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8002088:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 800208c:	f044 0430 	orr.w	r4, r4, #48	; 0x30
 8002090:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002094:	e7ef      	b.n	8002076 <MxL5007_Init+0x91a>
	while (pIRV->Num || pIRV->Val)
 8002096:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800209a:	2800      	cmp	r0, #0
 800209c:	f43f ac45 	beq.w	800192a <MxL5007_Init+0x1ce>
 80020a0:	3302      	adds	r3, #2
 80020a2:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 80020a6:	2800      	cmp	r0, #0
 80020a8:	d0f5      	beq.n	8002096 <MxL5007_Init+0x93a>
		if (pIRV->Num==Num)
 80020aa:	2805      	cmp	r0, #5
 80020ac:	d1f8      	bne.n	80020a0 <MxL5007_Init+0x944>
			pIRV->Val&=~Mask;
 80020ae:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80020b2:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 80020b6:	f040 0003 	orr.w	r0, r0, #3
 80020ba:	f803 0c01 	strb.w	r0, [r3, #-1]
 80020be:	e7ef      	b.n	80020a0 <MxL5007_Init+0x944>
 80020c0:	4613      	mov	r3, r2
	switch(Xtal_Freq_Hz)
 80020c2:	4610      	mov	r0, r2
 80020c4:	e003      	b.n	80020ce <MxL5007_Init+0x972>
	while (pIRV->Num || pIRV->Val)
 80020c6:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80020ca:	b1ac      	cbz	r4, 80020f8 <MxL5007_Init+0x99c>
 80020cc:	3002      	adds	r0, #2
 80020ce:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 80020d2:	2c00      	cmp	r4, #0
 80020d4:	d0f7      	beq.n	80020c6 <MxL5007_Init+0x96a>
		if (pIRV->Num==Num)
 80020d6:	2c03      	cmp	r4, #3
 80020d8:	d1f8      	bne.n	80020cc <MxL5007_Init+0x970>
			pIRV->Val&=~Mask;
 80020da:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 80020de:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 80020e2:	f044 0450 	orr.w	r4, r4, #80	; 0x50
 80020e6:	f800 4c01 	strb.w	r4, [r0, #-1]
 80020ea:	e7ef      	b.n	80020cc <MxL5007_Init+0x970>
	while (pIRV->Num || pIRV->Val)
 80020ec:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80020f0:	2800      	cmp	r0, #0
 80020f2:	f43f ac1a 	beq.w	800192a <MxL5007_Init+0x1ce>
 80020f6:	3302      	adds	r3, #2
 80020f8:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 80020fc:	2800      	cmp	r0, #0
 80020fe:	d0f5      	beq.n	80020ec <MxL5007_Init+0x990>
		if (pIRV->Num==Num)
 8002100:	2805      	cmp	r0, #5
 8002102:	d1f8      	bne.n	80020f6 <MxL5007_Init+0x99a>
			pIRV->Val&=~Mask;
 8002104:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8002108:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 800210c:	f040 0005 	orr.w	r0, r0, #5
 8002110:	f803 0c01 	strb.w	r0, [r3, #-1]
 8002114:	e7ef      	b.n	80020f6 <MxL5007_Init+0x99a>
 8002116:	4613      	mov	r3, r2
	switch(Xtal_Freq_Hz)
 8002118:	4610      	mov	r0, r2
 800211a:	e003      	b.n	8002124 <MxL5007_Init+0x9c8>
	while (pIRV->Num || pIRV->Val)
 800211c:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8002120:	b1ac      	cbz	r4, 800214e <MxL5007_Init+0x9f2>
 8002122:	3002      	adds	r0, #2
 8002124:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 8002128:	2c00      	cmp	r4, #0
 800212a:	d0f7      	beq.n	800211c <MxL5007_Init+0x9c0>
		if (pIRV->Num==Num)
 800212c:	2c03      	cmp	r4, #3
 800212e:	d1f8      	bne.n	8002122 <MxL5007_Init+0x9c6>
			pIRV->Val&=~Mask;
 8002130:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8002134:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 8002138:	f044 0410 	orr.w	r4, r4, #16
 800213c:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002140:	e7ef      	b.n	8002122 <MxL5007_Init+0x9c6>
	while (pIRV->Num || pIRV->Val)
 8002142:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 8002146:	2800      	cmp	r0, #0
 8002148:	f43f abef 	beq.w	800192a <MxL5007_Init+0x1ce>
 800214c:	3302      	adds	r3, #2
 800214e:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 8002152:	2800      	cmp	r0, #0
 8002154:	d0f5      	beq.n	8002142 <MxL5007_Init+0x9e6>
		if (pIRV->Num==Num)
 8002156:	2805      	cmp	r0, #5
 8002158:	d1f8      	bne.n	800214c <MxL5007_Init+0x9f0>
			pIRV->Val&=~Mask;
 800215a:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800215e:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 8002162:	f040 0001 	orr.w	r0, r0, #1
 8002166:	f803 0c01 	strb.w	r0, [r3, #-1]
 800216a:	e7ef      	b.n	800214c <MxL5007_Init+0x9f0>
 800216c:	4613      	mov	r3, r2
	switch(Xtal_Freq_Hz)
 800216e:	4610      	mov	r0, r2
 8002170:	e003      	b.n	800217a <MxL5007_Init+0xa1e>
	while (pIRV->Num || pIRV->Val)
 8002172:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 8002176:	b1ac      	cbz	r4, 80021a4 <MxL5007_Init+0xa48>
 8002178:	3002      	adds	r0, #2
 800217a:	f810 4c02 	ldrb.w	r4, [r0, #-2]
 800217e:	2c00      	cmp	r4, #0
 8002180:	d0f7      	beq.n	8002172 <MxL5007_Init+0xa16>
		if (pIRV->Num==Num)
 8002182:	2c03      	cmp	r4, #3
 8002184:	d1f8      	bne.n	8002178 <MxL5007_Init+0xa1c>
			pIRV->Val&=~Mask;
 8002186:	f810 4c01 	ldrb.w	r4, [r0, #-1]
 800218a:	f004 040f 	and.w	r4, r4, #15
			pIRV->Val|=Val;
 800218e:	f064 044f 	orn	r4, r4, #79	; 0x4f
 8002192:	f800 4c01 	strb.w	r4, [r0, #-1]
 8002196:	e7ef      	b.n	8002178 <MxL5007_Init+0xa1c>
	while (pIRV->Num || pIRV->Val)
 8002198:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 800219c:	2800      	cmp	r0, #0
 800219e:	f43f abc4 	beq.w	800192a <MxL5007_Init+0x1ce>
 80021a2:	3302      	adds	r3, #2
 80021a4:	f813 0c02 	ldrb.w	r0, [r3, #-2]
 80021a8:	2800      	cmp	r0, #0
 80021aa:	d0f5      	beq.n	8002198 <MxL5007_Init+0xa3c>
		if (pIRV->Num==Num)
 80021ac:	2805      	cmp	r0, #5
 80021ae:	d1f8      	bne.n	80021a2 <MxL5007_Init+0xa46>
			pIRV->Val&=~Mask;
 80021b0:	f813 0c01 	ldrb.w	r0, [r3, #-1]
 80021b4:	f020 000f 	bic.w	r0, r0, #15
			pIRV->Val|=Val;
 80021b8:	f040 000b 	orr.w	r0, r0, #11
 80021bc:	f803 0c01 	strb.w	r0, [r3, #-1]
 80021c0:	e7ef      	b.n	80021a2 <MxL5007_Init+0xa46>
 80021c2:	bf00      	nop

080021c4 <MxL5007_RFTune>:
{
 80021c4:	b5f0      	push	{r4, r5, r6, r7, lr}
	IRVType IRV_RFTune[]=
 80021c6:	f64e 2cc4 	movw	ip, #60100	; 0xeac4
 80021ca:	f6c0 0c00 	movt	ip, #2048	; 0x800
{
 80021ce:	469e      	mov	lr, r3
 80021d0:	4605      	mov	r5, r0
 80021d2:	460f      	mov	r7, r1
 80021d4:	4616      	mov	r6, r2
	IRVType IRV_RFTune[]=
 80021d6:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
{
 80021da:	b087      	sub	sp, #28
	IRVType IRV_RFTune[]=
 80021dc:	466c      	mov	r4, sp
 80021de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80021e0:	e89c 0003 	ldmia.w	ip, {r0, r1}
 80021e4:	f844 0b04 	str.w	r0, [r4], #4
	switch(BWMHz)
 80021e8:	f1be 0f07 	cmp.w	lr, #7
	IRVType IRV_RFTune[]=
 80021ec:	8021      	strh	r1, [r4, #0]
	switch(BWMHz)
 80021ee:	f10d 0302 	add.w	r3, sp, #2
 80021f2:	f000 8168 	beq.w	80024c6 <MxL5007_RFTune+0x302>
 80021f6:	f1be 0f08 	cmp.w	lr, #8
 80021fa:	f000 814d 	beq.w	8002498 <MxL5007_RFTune+0x2d4>
 80021fe:	f1be 0f06 	cmp.w	lr, #6
 8002202:	f000 8132 	beq.w	800246a <MxL5007_RFTune+0x2a6>
	dig_rf_freq = RF_Freq / MHz;
 8002206:	f64d 6283 	movw	r2, #56963	; 0xde83
 800220a:	f2c4 321b 	movt	r2, #17179	; 0x431b
 800220e:	fba2 1206 	umull	r1, r2, r2, r6
	temp = RF_Freq % MHz;
 8002212:	f244 2140 	movw	r1, #16960	; 0x4240
	dig_rf_freq = RF_Freq / MHz;
 8002216:	0c92      	lsrs	r2, r2, #18
	temp = RF_Freq % MHz;
 8002218:	f2c0 010f 	movt	r1, #15
 800221c:	fb01 6112 	mls	r1, r1, r2, r6
		dig_rf_freq <<= 1;
 8002220:	ea4f 0c42 	mov.w	ip, r2, lsl #1
		if(temp > frac_divider)
 8002224:	f24a 1220 	movw	r2, #41248	; 0xa120
 8002228:	f2c0 0207 	movt	r2, #7
 800222c:	4291      	cmp	r1, r2
 800222e:	d905      	bls.n	800223c <MxL5007_RFTune+0x78>
			temp -= frac_divider;
 8002230:	f5a1 21f4 	sub.w	r1, r1, #499712	; 0x7a000
 8002234:	f5a1 7190 	sub.w	r1, r1, #288	; 0x120
			dig_rf_freq++;
 8002238:	f10c 0c01 	add.w	ip, ip, #1
		if(temp > frac_divider)
 800223c:	f24d 0290 	movw	r2, #53392	; 0xd090
 8002240:	f2c0 0203 	movt	r2, #3
 8002244:	4291      	cmp	r1, r2
		dig_rf_freq <<= 1;
 8002246:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		if(temp > frac_divider)
 800224a:	d904      	bls.n	8002256 <MxL5007_RFTune+0x92>
			temp -= frac_divider;
 800224c:	f5a1 3174 	sub.w	r1, r1, #249856	; 0x3d000
 8002250:	3990      	subs	r1, #144	; 0x90
			dig_rf_freq++;
 8002252:	f10c 0c01 	add.w	ip, ip, #1
		if(temp > frac_divider)
 8002256:	f64e 0248 	movw	r2, #59464	; 0xe848
 800225a:	f2c0 0201 	movt	r2, #1
 800225e:	4291      	cmp	r1, r2
		dig_rf_freq <<= 1;
 8002260:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		if(temp > frac_divider)
 8002264:	d904      	bls.n	8002270 <MxL5007_RFTune+0xac>
			temp -= frac_divider;
 8002266:	f5a1 31f4 	sub.w	r1, r1, #124928	; 0x1e800
 800226a:	3948      	subs	r1, #72	; 0x48
			dig_rf_freq++;
 800226c:	f10c 0c01 	add.w	ip, ip, #1
		if(temp > frac_divider)
 8002270:	f24f 4224 	movw	r2, #62500	; 0xf424
 8002274:	4291      	cmp	r1, r2
		dig_rf_freq <<= 1;
 8002276:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		if(temp > frac_divider)
 800227a:	d904      	bls.n	8002286 <MxL5007_RFTune+0xc2>
			temp -= frac_divider;
 800227c:	f5a1 4174 	sub.w	r1, r1, #62464	; 0xf400
 8002280:	3924      	subs	r1, #36	; 0x24
			dig_rf_freq++;
 8002282:	f10c 0c01 	add.w	ip, ip, #1
		if(temp > frac_divider)
 8002286:	f647 2212 	movw	r2, #31250	; 0x7a12
 800228a:	4291      	cmp	r1, r2
		dig_rf_freq <<= 1;
 800228c:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
		if(temp > frac_divider)
 8002290:	d904      	bls.n	800229c <MxL5007_RFTune+0xd8>
			temp -= frac_divider;
 8002292:	f5a1 41f4 	sub.w	r1, r1, #31232	; 0x7a00
 8002296:	3912      	subs	r1, #18
			dig_rf_freq++;
 8002298:	f10c 0c01 	add.w	ip, ip, #1
		if(temp > frac_divider)
 800229c:	f643 5009 	movw	r0, #15625	; 0x3d09
 80022a0:	4281      	cmp	r1, r0
		dig_rf_freq <<= 1;
 80022a2:	ea4f 024c 	mov.w	r2, ip, lsl #1
		if(temp > frac_divider)
 80022a6:	d903      	bls.n	80022b0 <MxL5007_RFTune+0xec>
			temp -= frac_divider;
 80022a8:	f5a1 5174 	sub.w	r1, r1, #15616	; 0x3d00
 80022ac:	3909      	subs	r1, #9
			dig_rf_freq++;
 80022ae:	3201      	adds	r2, #1
	if(temp > 7812)
 80022b0:	f641 6084 	movw	r0, #7812	; 0x1e84
 80022b4:	4281      	cmp	r1, r0
		dig_rf_freq ++;
 80022b6:	bf88      	it	hi
 80022b8:	3201      	addhi	r2, #1
	SetIRVBit(IRV_RFTune, 0x0D, 0xFF, (uint8_t)dig_rf_freq);
 80022ba:	b2d0      	uxtb	r0, r2
	while (pIRV->Num || pIRV->Val)
 80022bc:	469e      	mov	lr, r3
 80022be:	469c      	mov	ip, r3
 80022c0:	e004      	b.n	80022cc <MxL5007_RFTune+0x108>
 80022c2:	f81c 1c01 	ldrb.w	r1, [ip, #-1]
 80022c6:	b151      	cbz	r1, 80022de <MxL5007_RFTune+0x11a>
		}
		pIRV++;
 80022c8:	f10c 0c02 	add.w	ip, ip, #2
	while (pIRV->Num || pIRV->Val)
 80022cc:	f81c 4c02 	ldrb.w	r4, [ip, #-2]
 80022d0:	2c00      	cmp	r4, #0
 80022d2:	d0f6      	beq.n	80022c2 <MxL5007_RFTune+0xfe>
		if (pIRV->Num==Num)
 80022d4:	2c0d      	cmp	r4, #13
			pIRV->Val|=Val;
 80022d6:	bf08      	it	eq
 80022d8:	f80c 0c01 	strbeq.w	r0, [ip, #-1]
 80022dc:	e7f4      	b.n	80022c8 <MxL5007_RFTune+0x104>
	SetIRVBit(IRV_RFTune, 0x0E, 0xFF, (uint8_t)(dig_rf_freq>>8));
 80022de:	f3c2 2c07 	ubfx	ip, r2, #8, #8
uint32_t SetIRVBit(PIRVType pIRV, uint8_t Num, uint8_t Mask, uint8_t Val)
 80022e2:	e003      	b.n	80022ec <MxL5007_RFTune+0x128>
	while (pIRV->Num || pIRV->Val)
 80022e4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 80022e8:	b14a      	cbz	r2, 80022fe <MxL5007_RFTune+0x13a>
		pIRV++;
 80022ea:	3302      	adds	r3, #2
	while (pIRV->Num || pIRV->Val)
 80022ec:	f813 4c02 	ldrb.w	r4, [r3, #-2]
 80022f0:	2c00      	cmp	r4, #0
 80022f2:	d0f7      	beq.n	80022e4 <MxL5007_RFTune+0x120>
		if (pIRV->Num==Num)
 80022f4:	2c0e      	cmp	r4, #14
			pIRV->Val|=Val;
 80022f6:	bf08      	it	eq
 80022f8:	f803 cc01 	strbeq.w	ip, [r3, #-1]
 80022fc:	e7f5      	b.n	80022ea <MxL5007_RFTune+0x126>
	if (RF_Freq >=333*MHz)
 80022fe:	f642 533f 	movw	r3, #11583	; 0x2d3f
 8002302:	f2c1 33d9 	movt	r3, #5081	; 0x13d9
 8002306:	429e      	cmp	r6, r3
 8002308:	d861      	bhi.n	80023ce <MxL5007_RFTune+0x20a>
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 800230a:	f89d 2000 	ldrb.w	r2, [sp]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800230e:	f89d 3001 	ldrb.w	r3, [sp, #1]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002312:	b90a      	cbnz	r2, 8002318 <MxL5007_RFTune+0x154>
 8002314:	2b00      	cmp	r3, #0
 8002316:	d06c      	beq.n	80023f2 <MxL5007_RFTune+0x22e>
 8002318:	f89d 1002 	ldrb.w	r1, [sp, #2]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800231c:	702a      	strb	r2, [r5, #0]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800231e:	706b      	strb	r3, [r5, #1]
 8002320:	f89d 2003 	ldrb.w	r2, [sp, #3]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002324:	2900      	cmp	r1, #0
 8002326:	d061      	beq.n	80023ec <MxL5007_RFTune+0x228>
 8002328:	f89d 3004 	ldrb.w	r3, [sp, #4]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800232c:	70a9      	strb	r1, [r5, #2]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800232e:	70ea      	strb	r2, [r5, #3]
 8002330:	f89d 1005 	ldrb.w	r1, [sp, #5]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002334:	2b00      	cmp	r3, #0
 8002336:	d060      	beq.n	80023fa <MxL5007_RFTune+0x236>
 8002338:	f89d 2006 	ldrb.w	r2, [sp, #6]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800233c:	7169      	strb	r1, [r5, #5]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800233e:	712b      	strb	r3, [r5, #4]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002340:	f89d 1007 	ldrb.w	r1, [sp, #7]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002344:	2a00      	cmp	r2, #0
 8002346:	d05c      	beq.n	8002402 <MxL5007_RFTune+0x23e>
 8002348:	f89d 3008 	ldrb.w	r3, [sp, #8]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800234c:	71e9      	strb	r1, [r5, #7]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800234e:	71aa      	strb	r2, [r5, #6]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002350:	f89d 1009 	ldrb.w	r1, [sp, #9]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002354:	2b00      	cmp	r3, #0
 8002356:	d05f      	beq.n	8002418 <MxL5007_RFTune+0x254>
 8002358:	f89d 200a 	ldrb.w	r2, [sp, #10]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800235c:	7269      	strb	r1, [r5, #9]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800235e:	722b      	strb	r3, [r5, #8]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002360:	f89d 100b 	ldrb.w	r1, [sp, #11]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002364:	2a00      	cmp	r2, #0
 8002366:	d05b      	beq.n	8002420 <MxL5007_RFTune+0x25c>
 8002368:	f89d 300c 	ldrb.w	r3, [sp, #12]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800236c:	72e9      	strb	r1, [r5, #11]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800236e:	72aa      	strb	r2, [r5, #10]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002370:	f89d 100d 	ldrb.w	r1, [sp, #13]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002374:	2b00      	cmp	r3, #0
 8002376:	d05e      	beq.n	8002436 <MxL5007_RFTune+0x272>
 8002378:	f89d 200e 	ldrb.w	r2, [sp, #14]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800237c:	7369      	strb	r1, [r5, #13]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800237e:	732b      	strb	r3, [r5, #12]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002380:	f89d 100f 	ldrb.w	r1, [sp, #15]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002384:	2a00      	cmp	r2, #0
 8002386:	d05a      	beq.n	800243e <MxL5007_RFTune+0x27a>
 8002388:	f89d 3010 	ldrb.w	r3, [sp, #16]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800238c:	73e9      	strb	r1, [r5, #15]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800238e:	73aa      	strb	r2, [r5, #14]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002390:	f89d 1011 	ldrb.w	r1, [sp, #17]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002394:	2b00      	cmp	r3, #0
 8002396:	d05d      	beq.n	8002454 <MxL5007_RFTune+0x290>
 8002398:	f89d 2012 	ldrb.w	r2, [sp, #18]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800239c:	742b      	strb	r3, [r5, #16]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800239e:	7469      	strb	r1, [r5, #17]
 80023a0:	f89d 3013 	ldrb.w	r3, [sp, #19]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 80023a4:	2a00      	cmp	r2, #0
 80023a6:	d059      	beq.n	800245c <MxL5007_RFTune+0x298>
 80023a8:	f89d 1014 	ldrb.w	r1, [sp, #20]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 80023ac:	74aa      	strb	r2, [r5, #18]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 80023ae:	74eb      	strb	r3, [r5, #19]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 80023b0:	2900      	cmp	r1, #0
 80023b2:	d157      	bne.n	8002464 <MxL5007_RFTune+0x2a0>
 80023b4:	f89d 3015 	ldrb.w	r3, [sp, #21]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	f000 809b 	beq.w	80024f4 <MxL5007_RFTune+0x330>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 80023be:	7529      	strb	r1, [r5, #20]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 80023c0:	756b      	strb	r3, [r5, #21]
	while (pIRV->Num || pIRV->Val)
 80023c2:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d09f      	beq.n	800230a <MxL5007_RFTune+0x146>
		pIRV++;
 80023ca:	f10e 0e02 	add.w	lr, lr, #2
	while (pIRV->Num || pIRV->Val)
 80023ce:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d0f5      	beq.n	80023c2 <MxL5007_RFTune+0x1fe>
		if (pIRV->Num==Num)
 80023d6:	2b80      	cmp	r3, #128	; 0x80
 80023d8:	d1f7      	bne.n	80023ca <MxL5007_RFTune+0x206>
			pIRV->Val&=~Mask;
 80023da:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 80023de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
			pIRV->Val|=Val;
 80023e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80023e6:	f80e 3c01 	strb.w	r3, [lr, #-1]
 80023ea:	e7ee      	b.n	80023ca <MxL5007_RFTune+0x206>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 80023ec:	2302      	movs	r3, #2
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 80023ee:	2a00      	cmp	r2, #0
 80023f0:	d19a      	bne.n	8002328 <MxL5007_RFTune+0x164>
}
 80023f2:	2000      	movs	r0, #0
	*Array_Size=Array_Index;
 80023f4:	603b      	str	r3, [r7, #0]
}
 80023f6:	b007      	add	sp, #28
 80023f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 80023fa:	2900      	cmp	r1, #0
 80023fc:	d19c      	bne.n	8002338 <MxL5007_RFTune+0x174>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 80023fe:	2304      	movs	r3, #4
 8002400:	e7f7      	b.n	80023f2 <MxL5007_RFTune+0x22e>
 8002402:	2306      	movs	r3, #6
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002404:	2900      	cmp	r1, #0
 8002406:	d0f4      	beq.n	80023f2 <MxL5007_RFTune+0x22e>
 8002408:	f89d 3008 	ldrb.w	r3, [sp, #8]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800240c:	71e9      	strb	r1, [r5, #7]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800240e:	71aa      	strb	r2, [r5, #6]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002410:	f89d 1009 	ldrb.w	r1, [sp, #9]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002414:	2b00      	cmp	r3, #0
 8002416:	d19f      	bne.n	8002358 <MxL5007_RFTune+0x194>
 8002418:	2900      	cmp	r1, #0
 800241a:	d19d      	bne.n	8002358 <MxL5007_RFTune+0x194>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800241c:	2308      	movs	r3, #8
 800241e:	e7e8      	b.n	80023f2 <MxL5007_RFTune+0x22e>
 8002420:	230a      	movs	r3, #10
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002422:	2900      	cmp	r1, #0
 8002424:	d0e5      	beq.n	80023f2 <MxL5007_RFTune+0x22e>
 8002426:	f89d 300c 	ldrb.w	r3, [sp, #12]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800242a:	72e9      	strb	r1, [r5, #11]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800242c:	72aa      	strb	r2, [r5, #10]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800242e:	f89d 100d 	ldrb.w	r1, [sp, #13]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002432:	2b00      	cmp	r3, #0
 8002434:	d1a0      	bne.n	8002378 <MxL5007_RFTune+0x1b4>
 8002436:	2900      	cmp	r1, #0
 8002438:	d19e      	bne.n	8002378 <MxL5007_RFTune+0x1b4>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800243a:	230c      	movs	r3, #12
 800243c:	e7d9      	b.n	80023f2 <MxL5007_RFTune+0x22e>
 800243e:	230e      	movs	r3, #14
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002440:	2900      	cmp	r1, #0
 8002442:	d0d6      	beq.n	80023f2 <MxL5007_RFTune+0x22e>
 8002444:	f89d 3010 	ldrb.w	r3, [sp, #16]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002448:	73e9      	strb	r1, [r5, #15]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Num;
 800244a:	73aa      	strb	r2, [r5, #14]
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 800244c:	f89d 1011 	ldrb.w	r1, [sp, #17]
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 8002450:	2b00      	cmp	r3, #0
 8002452:	d1a1      	bne.n	8002398 <MxL5007_RFTune+0x1d4>
 8002454:	2900      	cmp	r1, #0
 8002456:	d19f      	bne.n	8002398 <MxL5007_RFTune+0x1d4>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002458:	2310      	movs	r3, #16
 800245a:	e7ca      	b.n	80023f2 <MxL5007_RFTune+0x22e>
	while (IRV_RFTune[Reg_Index].Num || IRV_RFTune[Reg_Index].Val)
 800245c:	2b00      	cmp	r3, #0
 800245e:	d1a3      	bne.n	80023a8 <MxL5007_RFTune+0x1e4>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 8002460:	2312      	movs	r3, #18
 8002462:	e7c6      	b.n	80023f2 <MxL5007_RFTune+0x22e>
 8002464:	f89d 3015 	ldrb.w	r3, [sp, #21]
 8002468:	e7a9      	b.n	80023be <MxL5007_RFTune+0x1fa>
 800246a:	461a      	mov	r2, r3
 800246c:	e005      	b.n	800247a <MxL5007_RFTune+0x2b6>
	while (pIRV->Num || pIRV->Val)
 800246e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8002472:	2900      	cmp	r1, #0
 8002474:	f43f aec7 	beq.w	8002206 <MxL5007_RFTune+0x42>
		pIRV++;
 8002478:	3202      	adds	r2, #2
	while (pIRV->Num || pIRV->Val)
 800247a:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 800247e:	2900      	cmp	r1, #0
 8002480:	d0f5      	beq.n	800246e <MxL5007_RFTune+0x2aa>
		if (pIRV->Num==Num)
 8002482:	290c      	cmp	r1, #12
 8002484:	d1f8      	bne.n	8002478 <MxL5007_RFTune+0x2b4>
			pIRV->Val&=~Mask;
 8002486:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800248a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
			pIRV->Val|=Val;
 800248e:	f041 0115 	orr.w	r1, r1, #21
 8002492:	f802 1c01 	strb.w	r1, [r2, #-1]
 8002496:	e7ef      	b.n	8002478 <MxL5007_RFTune+0x2b4>
 8002498:	461a      	mov	r2, r3
 800249a:	e005      	b.n	80024a8 <MxL5007_RFTune+0x2e4>
	while (pIRV->Num || pIRV->Val)
 800249c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80024a0:	2900      	cmp	r1, #0
 80024a2:	f43f aeb0 	beq.w	8002206 <MxL5007_RFTune+0x42>
		pIRV++;
 80024a6:	3202      	adds	r2, #2
	while (pIRV->Num || pIRV->Val)
 80024a8:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80024ac:	2900      	cmp	r1, #0
 80024ae:	d0f5      	beq.n	800249c <MxL5007_RFTune+0x2d8>
		if (pIRV->Num==Num)
 80024b0:	290c      	cmp	r1, #12
 80024b2:	d1f8      	bne.n	80024a6 <MxL5007_RFTune+0x2e2>
			pIRV->Val&=~Mask;
 80024b4:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80024b8:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
			pIRV->Val|=Val;
 80024bc:	f041 013f 	orr.w	r1, r1, #63	; 0x3f
 80024c0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80024c4:	e7ef      	b.n	80024a6 <MxL5007_RFTune+0x2e2>
 80024c6:	461a      	mov	r2, r3
 80024c8:	e005      	b.n	80024d6 <MxL5007_RFTune+0x312>
	while (pIRV->Num || pIRV->Val)
 80024ca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80024ce:	2900      	cmp	r1, #0
 80024d0:	f43f ae99 	beq.w	8002206 <MxL5007_RFTune+0x42>
		pIRV++;
 80024d4:	3202      	adds	r2, #2
	while (pIRV->Num || pIRV->Val)
 80024d6:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80024da:	2900      	cmp	r1, #0
 80024dc:	d0f5      	beq.n	80024ca <MxL5007_RFTune+0x306>
		if (pIRV->Num==Num)
 80024de:	290c      	cmp	r1, #12
 80024e0:	d1f8      	bne.n	80024d4 <MxL5007_RFTune+0x310>
			pIRV->Val&=~Mask;
 80024e2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80024e6:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
			pIRV->Val|=Val;
 80024ea:	f041 012a 	orr.w	r1, r1, #42	; 0x2a
 80024ee:	f802 1c01 	strb.w	r1, [r2, #-1]
 80024f2:	e7ef      	b.n	80024d4 <MxL5007_RFTune+0x310>
		pArray[Array_Index++] = IRV_RFTune[Reg_Index].Val;
 80024f4:	2314      	movs	r3, #20
 80024f6:	e77c      	b.n	80023f2 <MxL5007_RFTune+0x22e>

080024f8 <MxL_Set_Register>:
//							Tuner Functions								   //
//																		   //
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//
MxL_ERR_MSG MxL_Set_Register(MxL5007_TunerConfigS* myTuner, uint8_t RegAddr, uint8_t RegData)
{
 80024f8:	b500      	push	{lr}
 80024fa:	b083      	sub	sp, #12
 80024fc:	468c      	mov	ip, r1
 80024fe:	4613      	mov	r3, r2
	uint32_t Status=0;
	uint8_t pArray[2];
	pArray[0] = RegAddr;
	pArray[1] = RegData;
	Status = MxL_I2C_Write((uint8_t)myTuner->I2C_Addr, pArray, 2);
 8002500:	a901      	add	r1, sp, #4
 8002502:	2202      	movs	r2, #2
 8002504:	7800      	ldrb	r0, [r0, #0]
	pArray[0] = RegAddr;
 8002506:	f88d c004 	strb.w	ip, [sp, #4]
	pArray[1] = RegData;
 800250a:	f88d 3005 	strb.w	r3, [sp, #5]
	Status = MxL_I2C_Write((uint8_t)myTuner->I2C_Addr, pArray, 2);
 800250e:	f000 f93f 	bl	8002790 <MxL_I2C_Write>
	if(Status) return MxL_ERR_SET_REG;
 8002512:	2800      	cmp	r0, #0

	return MxL_OK;

}
 8002514:	bf14      	ite	ne
 8002516:	2003      	movne	r0, #3
 8002518:	2000      	moveq	r0, #0
 800251a:	b003      	add	sp, #12
 800251c:	f85d fb04 	ldr.w	pc, [sp], #4

08002520 <MxL_Get_Register>:

MxL_ERR_MSG MxL_Get_Register(MxL5007_TunerConfigS* myTuner, uint8_t RegAddr, uint8_t *RegData)
{
 8002520:	b508      	push	{r3, lr}
	if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, RegAddr, RegData))
 8002522:	7800      	ldrb	r0, [r0, #0]
 8002524:	f000 f946 	bl	80027b4 <MxL_I2C_Read>
		return MxL_ERR_GET_REG;
 8002528:	2800      	cmp	r0, #0
	return MxL_OK;

}
 800252a:	bf14      	ite	ne
 800252c:	2004      	movne	r0, #4
 800252e:	2000      	moveq	r0, #0
 8002530:	bd08      	pop	{r3, pc}
 8002532:	bf00      	nop

08002534 <MxL_Tuner_Init>:

	return MxL_OK;
}

MxL_ERR_MSG MxL_Tuner_Init(MxL5007_TunerConfigS* myTuner)
{	
 8002534:	b510      	push	{r4, lr}
 8002536:	b0a0      	sub	sp, #128	; 0x80
 8002538:	4604      	mov	r4, r0
	reg_reset = 0xFF;
 800253a:	23ff      	movs	r3, #255	; 0xff
	if(MxL_I2C_Write((uint8_t)myTuner->I2C_Addr, &reg_reset, 1))
 800253c:	7800      	ldrb	r0, [r0, #0]
	reg_reset = 0xFF;
 800253e:	f88d 301c 	strb.w	r3, [sp, #28]
	if(MxL_I2C_Write((uint8_t)myTuner->I2C_Addr, &reg_reset, 1))
 8002542:	2201      	movs	r2, #1
 8002544:	a907      	add	r1, sp, #28
 8002546:	f000 f923 	bl	8002790 <MxL_I2C_Write>
 800254a:	b9c8      	cbnz	r0, 8002580 <MxL_Tuner_Init+0x4c>
	//Soft reset tuner
	if(MxL_Soft_Reset(myTuner))
		return MxL_ERR_INIT;

	//perform initialization calculation
	MxL5007_Init(pArray, &Array_Size, (uint8_t)myTuner->Mode, myTuner->IF_Diff_Out_Level, (uint32_t)myTuner->Xtal_Freq,
 800254c:	7ca1      	ldrb	r1, [r4, #18]
 800254e:	7c63      	ldrb	r3, [r4, #17]
 8002550:	7c22      	ldrb	r2, [r4, #16]
 8002552:	e9cd 3103 	strd	r3, r1, [sp, #12]
 8002556:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 800255a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800255e:	a807      	add	r0, sp, #28
 8002560:	6863      	ldr	r3, [r4, #4]
 8002562:	7862      	ldrb	r2, [r4, #1]
 8002564:	9100      	str	r1, [sp, #0]
 8002566:	a906      	add	r1, sp, #24
 8002568:	f7ff f8f8 	bl	800175c <MxL5007_Init>
				(uint32_t)myTuner->IF_Freq, (uint8_t)myTuner->IF_Spectrum, (uint8_t)myTuner->ClkOut_Setting, (uint8_t)myTuner->ClkOut_Amp);

	//perform I2C write here
	if(MxL_I2C_Write((uint8_t)myTuner->I2C_Addr, pArray, Array_Size))
 800256c:	9a06      	ldr	r2, [sp, #24]
 800256e:	7820      	ldrb	r0, [r4, #0]
 8002570:	a907      	add	r1, sp, #28
 8002572:	f000 f90d 	bl	8002790 <MxL_I2C_Write>
		return MxL_ERR_INIT;
 8002576:	3800      	subs	r0, #0
 8002578:	bf18      	it	ne
 800257a:	2001      	movne	r0, #1
		return MxL_ERR_INIT;

	return MxL_OK;
}
 800257c:	b020      	add	sp, #128	; 0x80
 800257e:	bd10      	pop	{r4, pc}
		return MxL_ERR_INIT;
 8002580:	2001      	movs	r0, #1
}
 8002582:	b020      	add	sp, #128	; 0x80
 8002584:	bd10      	pop	{r4, pc}
 8002586:	bf00      	nop

08002588 <MxL_Tuner_RFTune>:


MxL_ERR_MSG MxL_Tuner_RFTune(MxL5007_TunerConfigS* myTuner, uint32_t RF_Freq_Hz, MxL5007_BW_MHz BWMHz)
{
 8002588:	b510      	push	{r4, lr}
 800258a:	4613      	mov	r3, r2
 800258c:	b09a      	sub	sp, #104	; 0x68
 800258e:	4604      	mov	r4, r0
	uint8_t pArray[MAX_ARRAY_SIZE];	// a array pointer that store the addr and data pairs for I2C write
	uint32_t Array_Size;							// a integer pointer that store the number of element in above array

	//Store information into struc
	myTuner->RF_Freq_Hz = RF_Freq_Hz;
 8002590:	6141      	str	r1, [r0, #20]
	myTuner->BW_MHz = BWMHz;

	//perform Channel Change calculation
	MxL5007_RFTune(pArray,&Array_Size,RF_Freq_Hz,BWMHz);
 8002592:	460a      	mov	r2, r1
	myTuner->BW_MHz = BWMHz;
 8002594:	74c3      	strb	r3, [r0, #19]
	MxL5007_RFTune(pArray,&Array_Size,RF_Freq_Hz,BWMHz);
 8002596:	4669      	mov	r1, sp
 8002598:	a801      	add	r0, sp, #4
 800259a:	f7ff fe13 	bl	80021c4 <MxL5007_RFTune>

	//perform I2C write here
	if(MxL_I2C_Write((uint8_t)myTuner->I2C_Addr, pArray, Array_Size))
 800259e:	9a00      	ldr	r2, [sp, #0]
 80025a0:	7820      	ldrb	r0, [r4, #0]
 80025a2:	a901      	add	r1, sp, #4
 80025a4:	f000 f8f4 	bl	8002790 <MxL_I2C_Write>
 80025a8:	b930      	cbnz	r0, 80025b8 <MxL_Tuner_RFTune+0x30>
 80025aa:	4604      	mov	r4, r0
		return MxL_ERR_RFTUNE;

	//wait for 3ms
	MxL_Delay(3); 
 80025ac:	2003      	movs	r0, #3
 80025ae:	f000 f925 	bl	80027fc <MxL_Delay>

	return MxL_OK;
 80025b2:	4620      	mov	r0, r4
}
 80025b4:	b01a      	add	sp, #104	; 0x68
 80025b6:	bd10      	pop	{r4, pc}
		return MxL_ERR_RFTUNE;
 80025b8:	2002      	movs	r0, #2
}
 80025ba:	b01a      	add	sp, #104	; 0x68
 80025bc:	bd10      	pop	{r4, pc}
 80025be:	bf00      	nop

080025c0 <MxL_Check_ChipVersion>:

MxL5007_ChipVersion MxL_Check_ChipVersion(MxL5007_TunerConfigS* myTuner)
{	
 80025c0:	b500      	push	{lr}
 80025c2:	b083      	sub	sp, #12
	uint8_t Data;
	if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xD9, &Data)) //https://github.com/VPBox/Dev/blob/68c7654006f1c355b51d622398fc40884c6df2b7/kernel/drivers/media/tuners/mxl5007t.c#L822
 80025c4:	7800      	ldrb	r0, [r0, #0]
 80025c6:	f10d 0207 	add.w	r2, sp, #7
 80025ca:	21d9      	movs	r1, #217	; 0xd9
 80025cc:	f000 f8f2 	bl	80027b4 <MxL_I2C_Read>
 80025d0:	b980      	cbnz	r0, 80025f4 <MxL_Check_ChipVersion+0x34>
		return MxL_GET_ID_FAIL;

	MxL5007_ChipVersion MxL_ChipVersion;
	switch (Data)
 80025d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80025d6:	3b11      	subs	r3, #17
 80025d8:	b2db      	uxtb	r3, r3
 80025da:	2b13      	cmp	r3, #19
 80025dc:	d902      	bls.n	80025e4 <MxL_Check_ChipVersion+0x24>
			MxL_ChipVersion = MxL_UNKNOWN_ID;
		break;
	}

	return MxL_ChipVersion;
}
 80025de:	b003      	add	sp, #12
 80025e0:	f85d fb04 	ldr.w	pc, [sp], #4
 80025e4:	f64e 32ec 	movw	r2, #60396	; 0xebec
 80025e8:	f6c0 0200 	movt	r2, #2048	; 0x800
 80025ec:	5cd0      	ldrb	r0, [r2, r3]
 80025ee:	b003      	add	sp, #12
 80025f0:	f85d fb04 	ldr.w	pc, [sp], #4
		return MxL_GET_ID_FAIL;
 80025f4:	20ff      	movs	r0, #255	; 0xff
}
 80025f6:	b003      	add	sp, #12
 80025f8:	f85d fb04 	ldr.w	pc, [sp], #4

080025fc <MxL_Print_ChipVersion>:

void MxL_Print_ChipVersion(MxL5007_ChipVersion MxL_ChipVersion)
{
	switch (MxL_ChipVersion)
 80025fc:	3811      	subs	r0, #17
 80025fe:	2813      	cmp	r0, #19
 8002600:	d80b      	bhi.n	800261a <MxL_Print_ChipVersion+0x1e>
 8002602:	e8df f000 	tbb	[pc, r0]
 8002606:	1610      	.short	0x1610
 8002608:	0a0a1c0a 	.word	0x0a0a1c0a
 800260c:	0a0a0a0a 	.word	0x0a0a0a0a
 8002610:	0a0a0a0a 	.word	0x0a0a0a0a
 8002614:	28220a0a 	.word	0x28220a0a
 8002618:	342e      	.short	0x342e
		case MxL_5007_V4:
			UART_printf("MxL5007T_v4 detected\r\n");
			break;

		default:
			UART_printf("it isn't MxL5007T chip");
 800261a:	f64e 30d4 	movw	r0, #60372	; 0xebd4
 800261e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002622:	f001 bc87 	b.w	8003f34 <UART_printf>
			UART_printf("MxL5007T_v1.f1 detected\r\n");
 8002626:	f64e 3004 	movw	r0, #60164	; 0xeb04
 800262a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800262e:	f001 bc81 	b.w	8003f34 <UART_printf>
			UART_printf("MxL5007T_v1.f2 detected\r\n");
 8002632:	f64e 3020 	movw	r0, #60192	; 0xeb20
 8002636:	f6c0 0000 	movt	r0, #2048	; 0x800
 800263a:	f001 bc7b 	b.w	8003f34 <UART_printf>
			UART_printf("MxL5007T_v4 detected\r\n");
 800263e:	f64e 30bc 	movw	r0, #60348	; 0xebbc
 8002642:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002646:	f001 bc75 	b.w	8003f34 <UART_printf>
			UART_printf("MxL5007T_v2.100.f1 detected\r\n");
 800264a:	f64e 303c 	movw	r0, #60220	; 0xeb3c
 800264e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002652:	f001 bc6f 	b.w	8003f34 <UART_printf>
			UART_printf("MxL5007T_v2.100.f2 detected\r\n");
 8002656:	f64e 305c 	movw	r0, #60252	; 0xeb5c
 800265a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800265e:	f001 bc69 	b.w	8003f34 <UART_printf>
			UART_printf("MxL5007T_v2.200.f1 detected\r\n");
 8002662:	f64e 307c 	movw	r0, #60284	; 0xeb7c
 8002666:	f6c0 0000 	movt	r0, #2048	; 0x800
 800266a:	f001 bc63 	b.w	8003f34 <UART_printf>
			UART_printf("MxL5007T_v2.200.f2 detected\r\n");
 800266e:	f64e 309c 	movw	r0, #60316	; 0xeb9c
 8002672:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002676:	f001 bc5d 	b.w	8003f34 <UART_printf>
 800267a:	bf00      	nop

0800267c <MxL_RFSynth_Lock_Status>:
			break;
	}
}

MxL_ERR_MSG MxL_RFSynth_Lock_Status(MxL5007_TunerConfigS* myTuner, bool* isLock)
{	
 800267c:	b510      	push	{r4, lr}
	uint8_t Data;
	*isLock = false;
 800267e:	2300      	movs	r3, #0
{	
 8002680:	b082      	sub	sp, #8
	*isLock = false;
 8002682:	700b      	strb	r3, [r1, #0]
{	
 8002684:	460c      	mov	r4, r1
	if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xD8, &Data))
 8002686:	7800      	ldrb	r0, [r0, #0]
 8002688:	f10d 0207 	add.w	r2, sp, #7
 800268c:	21d8      	movs	r1, #216	; 0xd8
 800268e:	f000 f891 	bl	80027b4 <MxL_I2C_Read>
 8002692:	b948      	cbnz	r0, 80026a8 <MxL_RFSynth_Lock_Status+0x2c>
		return MxL_ERR_OTHERS;
	Data &= 0x0C;
 8002694:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (Data == 0x0C)
 8002698:	f003 030c 	and.w	r3, r3, #12
 800269c:	2b0c      	cmp	r3, #12
 800269e:	d101      	bne.n	80026a4 <MxL_RFSynth_Lock_Status+0x28>
		*isLock = true;  //RF Synthesizer is Lock
 80026a0:	2301      	movs	r3, #1
 80026a2:	7023      	strb	r3, [r4, #0]
	return MxL_OK;
}
 80026a4:	b002      	add	sp, #8
 80026a6:	bd10      	pop	{r4, pc}
		return MxL_ERR_OTHERS;
 80026a8:	200a      	movs	r0, #10
}
 80026aa:	b002      	add	sp, #8
 80026ac:	bd10      	pop	{r4, pc}
 80026ae:	bf00      	nop

080026b0 <MxL_REFSynth_Lock_Status>:

MxL_ERR_MSG MxL_REFSynth_Lock_Status(MxL5007_TunerConfigS* myTuner, bool* isLock)
{
 80026b0:	b510      	push	{r4, lr}
	uint8_t Data;
	*isLock = false;
 80026b2:	2300      	movs	r3, #0
{
 80026b4:	b082      	sub	sp, #8
	*isLock = false;
 80026b6:	700b      	strb	r3, [r1, #0]
{
 80026b8:	460c      	mov	r4, r1
	if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xD8, &Data))
 80026ba:	7800      	ldrb	r0, [r0, #0]
 80026bc:	f10d 0207 	add.w	r2, sp, #7
 80026c0:	21d8      	movs	r1, #216	; 0xd8
 80026c2:	f000 f877 	bl	80027b4 <MxL_I2C_Read>
 80026c6:	b948      	cbnz	r0, 80026dc <MxL_REFSynth_Lock_Status+0x2c>
		return MxL_ERR_OTHERS;
	Data &= 0x03;
 80026c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	if (Data == 0x03)
 80026cc:	f003 0303 	and.w	r3, r3, #3
 80026d0:	2b03      	cmp	r3, #3
 80026d2:	d101      	bne.n	80026d8 <MxL_REFSynth_Lock_Status+0x28>
		*isLock = true;   //REF Synthesizer is Lock
 80026d4:	2301      	movs	r3, #1
 80026d6:	7023      	strb	r3, [r4, #0]
	return MxL_OK;
}
 80026d8:	b002      	add	sp, #8
 80026da:	bd10      	pop	{r4, pc}
		return MxL_ERR_OTHERS;
 80026dc:	200a      	movs	r0, #10
}
 80026de:	b002      	add	sp, #8
 80026e0:	bd10      	pop	{r4, pc}
 80026e2:	bf00      	nop

080026e4 <MxL_SetGain>:

void MxL_SetGain(float gain)
{
 80026e4:	b508      	push	{r3, lr}
 80026e6:	ee10 0a10 	vmov	r0, s0
	float V_if_agc = A_MxL_V_if_agc*gain + B_MxL_V_if_agc;
 80026ea:	f7fd ff3d 	bl	8000568 <__aeabi_f2d>
 80026ee:	f645 4246 	movw	r2, #23622	; 0x5c46
 80026f2:	f644 33a5 	movw	r3, #19365	; 0x4ba5
 80026f6:	f6c1 2200 	movt	r2, #6656	; 0x1a00
 80026fa:	f6c3 738f 	movt	r3, #16271	; 0x3f8f
 80026fe:	f7fd ff8b 	bl	8000618 <__aeabi_dmul>
 8002702:	f242 021d 	movw	r2, #8221	; 0x201d
 8002706:	f64e 73c7 	movw	r3, #61383	; 0xefc7
 800270a:	f6c3 73e1 	movt	r3, #16353	; 0x3fe1
 800270e:	f2ca 3298 	movt	r2, #41880	; 0xa398
 8002712:	f7fd fdcb 	bl	80002ac <__adddf3>
 8002716:	f7fe fa77 	bl	8000c08 <__aeabi_d2f>
	MxL_Set_IF_AGC_Volatge(V_if_agc);
}
 800271a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	MxL_Set_IF_AGC_Volatge(V_if_agc);
 800271e:	ee00 0a10 	vmov	s0, r0
 8002722:	f000 b86d 	b.w	8002800 <MxL_Set_IF_AGC_Volatge>
 8002726:	bf00      	nop

08002728 <MxL_Get_RSSI>:

//According to reverse engineering of the MxL5007 it looks like that 0xAD and 0xAE registers contains word that are
//dependents on both: V_if_agc voltage and RF input level. Most probably this experimental function is worthless.
MxL_ERR_MSG MxL_Get_RSSI(MxL5007_TunerConfigS* myTuner, uint16_t* RSSI_int)
{
 8002728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800272a:	4605      	mov	r5, r0
 800272c:	b083      	sub	sp, #12
 800272e:	460f      	mov	r7, r1
 8002730:	240a      	movs	r4, #10
	uint8_t d1, d2, i;
	uint16_t tmp = 0;
 8002732:	2600      	movs	r6, #0

	for (i=0;i<10;i++) //getting max result from 10 readings
	{
		if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xAE, &d1))
 8002734:	f10d 0206 	add.w	r2, sp, #6
 8002738:	21ae      	movs	r1, #174	; 0xae
 800273a:	7828      	ldrb	r0, [r5, #0]
 800273c:	f000 f83a 	bl	80027b4 <MxL_I2C_Read>
			return MxL_ERR_OTHERS;

		if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xAD, &d2)) //it looks like 0xAD contains some flags
 8002740:	f10d 0207 	add.w	r2, sp, #7
 8002744:	21ad      	movs	r1, #173	; 0xad
		if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xAE, &d1))
 8002746:	b9b8      	cbnz	r0, 8002778 <MxL_Get_RSSI+0x50>
		if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xAD, &d2)) //it looks like 0xAD contains some flags
 8002748:	7828      	ldrb	r0, [r5, #0]
 800274a:	f000 f833 	bl	80027b4 <MxL_I2C_Read>
	for (i=0;i<10;i++) //getting max result from 10 readings
 800274e:	1e62      	subs	r2, r4, #1
		if(MxL_I2C_Read((uint8_t)myTuner->I2C_Addr, 0xAD, &d2)) //it looks like 0xAD contains some flags
 8002750:	b990      	cbnz	r0, 8002778 <MxL_Get_RSSI+0x50>
			return MxL_ERR_OTHERS;

		*RSSI_int = ((d2 & 0x3E)<<7) | d1;
 8002752:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8002756:	f89d 1006 	ldrb.w	r1, [sp, #6]
 800275a:	01db      	lsls	r3, r3, #7
 800275c:	f403 53f8 	and.w	r3, r3, #7936	; 0x1f00
 8002760:	430b      	orrs	r3, r1
 8002762:	429e      	cmp	r6, r3
 8002764:	bf38      	it	cc
 8002766:	461e      	movcc	r6, r3
	for (i=0;i<10;i++) //getting max result from 10 readings
 8002768:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
		*RSSI_int = ((d2 & 0x3E)<<7) | d1;
 800276c:	803b      	strh	r3, [r7, #0]
	for (i=0;i<10;i++) //getting max result from 10 readings
 800276e:	d1e1      	bne.n	8002734 <MxL_Get_RSSI+0xc>
		if (*RSSI_int > tmp) tmp = *RSSI_int;
	}
	*RSSI_int = tmp;

	return MxL_OK;
}
 8002770:	4620      	mov	r0, r4
	*RSSI_int = tmp;
 8002772:	803e      	strh	r6, [r7, #0]
}
 8002774:	b003      	add	sp, #12
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return MxL_ERR_OTHERS;
 8002778:	240a      	movs	r4, #10
}
 800277a:	4620      	mov	r0, r4
 800277c:	b003      	add	sp, #12
 800277e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002780 <MxL_TIMEOUT_UserCallback>:
/*
 * exception handler for I2C timeout
 */
void MxL_TIMEOUT_UserCallback()
{
	UART_printf("\r\nFailed to communicate with MXL5007T\r\n");
 8002780:	f64e 4000 	movw	r0, #60416	; 0xec00
{
 8002784:	b508      	push	{r3, lr}
	UART_printf("\r\nFailed to communicate with MXL5007T\r\n");
 8002786:	f6c0 0000 	movt	r0, #2048	; 0x800
 800278a:	f001 fbd3 	bl	8003f34 <UART_printf>
	/* Block communication and all processes */
	while (1);
 800278e:	e7fe      	b.n	800278e <MxL_TIMEOUT_UserCallback+0xe>

08002790 <MxL_I2C_Write>:
**  -------------------------------------------------------------------------
**   N/A   12-16-2007   khuang initial release.
**
******************************************************************************/
uint32_t MxL_I2C_Write(uint8_t DeviceAddr, uint8_t* pArray, uint32_t count)
{
 8002790:	b500      	push	{lr}
 8002792:	b083      	sub	sp, #12
 8002794:	4684      	mov	ip, r0
	//HAL_OK that is return by HAL_I2C_Master_Transmit is equal to zero so it's compliant with Maxlinear's driver implementation.
	return HAL_I2C_Master_Transmit(&hi2c3, DeviceAddr<<1, pArray, count, I2C_time_out);
 8002796:	2332      	movs	r3, #50	; 0x32
 8002798:	f640 0040 	movw	r0, #2112	; 0x840
 800279c:	9300      	str	r3, [sp, #0]
 800279e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027a2:	b293      	uxth	r3, r2
 80027a4:	460a      	mov	r2, r1
 80027a6:	ea4f 014c 	mov.w	r1, ip, lsl #1
 80027aa:	f004 f823 	bl	80067f4 <HAL_I2C_Master_Transmit>
}
 80027ae:	b003      	add	sp, #12
 80027b0:	f85d fb04 	ldr.w	pc, [sp], #4

080027b4 <MxL_I2C_Read>:
**  -------------------------------------------------------------------------
**   N/A   12-16-2007   khuang initial release.
**
******************************************************************************/
uint32_t MxL_I2C_Read(uint8_t DeviceAddr, uint8_t Addr, uint8_t* mData)
{
 80027b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027b6:	b087      	sub	sp, #28
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c3, DeviceAddr<<1, 0xFB, I2C_MEMADD_SIZE_8BIT, &Addr, 1, I2C_time_out);
 80027b8:	0044      	lsls	r4, r0, #1
 80027ba:	2601      	movs	r6, #1
 80027bc:	f10d 0317 	add.w	r3, sp, #23
 80027c0:	2732      	movs	r7, #50	; 0x32
 80027c2:	f640 0040 	movw	r0, #2112	; 0x840
{
 80027c6:	4615      	mov	r5, r2
 80027c8:	f88d 1017 	strb.w	r1, [sp, #23]
	HAL_StatusTypeDef status = HAL_I2C_Mem_Write(&hi2c3, DeviceAddr<<1, 0xFB, I2C_MEMADD_SIZE_8BIT, &Addr, 1, I2C_time_out);
 80027cc:	9300      	str	r3, [sp, #0]
 80027ce:	e9cd 6701 	strd	r6, r7, [sp, #4]
 80027d2:	4633      	mov	r3, r6
 80027d4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027d8:	22fb      	movs	r2, #251	; 0xfb
 80027da:	4621      	mov	r1, r4
 80027dc:	f004 fc08 	bl	8006ff0 <HAL_I2C_Mem_Write>
	if (status != HAL_OK)
 80027e0:	b948      	cbnz	r0, 80027f6 <MxL_I2C_Read+0x42>
		return status;

	status = HAL_I2C_Master_Receive(&hi2c3, DeviceAddr<<1, mData, 1, I2C_time_out);
 80027e2:	f640 0040 	movw	r0, #2112	; 0x840
 80027e6:	9700      	str	r7, [sp, #0]
 80027e8:	4633      	mov	r3, r6
 80027ea:	462a      	mov	r2, r5
 80027ec:	4621      	mov	r1, r4
 80027ee:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80027f2:	f004 f98f 	bl	8006b14 <HAL_I2C_Master_Receive>
	if (status != HAL_OK)
			return status;

	return 0; //returns 0 if success
}
 80027f6:	b007      	add	sp, #28
 80027f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80027fa:	bf00      	nop

080027fc <MxL_Delay>:
**   N/A   12-16-2007   khuang initial release.
**
******************************************************************************/
void MxL_Delay(uint32_t mSec)
{
	HAL_Delay(mSec);
 80027fc:	f002 bf5a 	b.w	80056b4 <HAL_Delay>

08002800 <MxL_Set_IF_AGC_Volatge>:
**  -------------------------------------------------------------------------
**   N/A   18-08-2025   Maciej Fajfer initial release.
**
******************************************************************************/
void MxL_Set_IF_AGC_Volatge(float V_if_agc)
{
 8002800:	b508      	push	{r3, lr}
 8002802:	ee10 0a10 	vmov	r0, s0
	int32_t TIM4_CCR_val = V_if_agc * 8192.0/3.0 * K_corr_coeff; //calculating value for TIM4_CCR register
 8002806:	f7fd feaf 	bl	8000568 <__aeabi_f2d>
 800280a:	f649 4278 	movw	r2, #40056	; 0x9c78
 800280e:	f64f 43b9 	movw	r3, #64697	; 0xfcb9
 8002812:	f2c4 03ab 	movt	r3, #16555	; 0x40ab
 8002816:	f2c2 32a2 	movt	r2, #9122	; 0x23a2
 800281a:	f7fd fefd 	bl	8000618 <__aeabi_dmul>
 800281e:	f7fe f9ab 	bl	8000b78 <__aeabi_d2iz>
	if (TIM4_CCR_val < 0) TIM4_CCR_val = 0;
	if (TIM4_CCR_val > 8191) TIM4_CCR_val = 8191;
	TIM4->CCR2 =  TIM4_CCR_val; //duty cycle update
 8002822:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002826:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800282a:	f380 000d 	usat	r0, #13, r0
 800282e:	6398      	str	r0, [r3, #56]	; 0x38
}
 8002830:	bd08      	pop	{r3, pc}
 8002832:	bf00      	nop

08002834 <set_IQ_filters_coeff>:
	usart_flush_RX_buffer();
	return rxchar_loc;
}

void set_IQ_filters_coeff(float* b, float* a, Output_demod_type_enum Demod_Type)
{
 8002834:	b500      	push	{lr}
	if (Demod_Type == DEMOD_FM)
 8002836:	bb9a      	cbnz	r2, 80028a0 <set_IQ_filters_coeff+0x6c>
	{
		//set coefficients for FM and fc=105 kHz
		b[0] = b0__105kHz;
		b[1] = b1__105kHz;
 8002838:	f646 72a7 	movw	r2, #28583	; 0x6fa7
		b[2] = b2__105kHz;
 800283c:	4694      	mov	ip, r2
		b[0] = b0__105kHz;
 800283e:	f64b 73b8 	movw	r3, #49080	; 0xbfb8
 8002842:	f6c3 2312 	movt	r3, #14866	; 0x3a12
		b[1] = b1__105kHz;
 8002846:	f6c3 3237 	movt	r2, #15159	; 0x3b37
		b[2] = b2__105kHz;
 800284a:	f6c3 3cb7 	movt	ip, #15287	; 0x3bb7
		b[0] = b0__105kHz;
 800284e:	6003      	str	r3, [r0, #0]
		b[1] = b1__105kHz;
 8002850:	6042      	str	r2, [r0, #4]
		b[2] = b2__105kHz;
 8002852:	f8c0 c008 	str.w	ip, [r0, #8]
		b[3] = b3__105kHz;
 8002856:	f8c0 c00c 	str.w	ip, [r0, #12]
		b[4] = b4__105kHz;
 800285a:	6102      	str	r2, [r0, #16]
		b[5] = b5__105kHz;
 800285c:	6143      	str	r3, [r0, #20]
		a[0] = a0__105kHz;
 800285e:	f24f 5c83 	movw	ip, #62851	; 0xf583
		a[1] = a1__105kHz;
 8002862:	f248 107c 	movw	r0, #33148	; 0x817c
		a[2] = a2__105kHz;
 8002866:	f24d 62fc 	movw	r2, #55036	; 0xd6fc
		a[3] = a3__105kHz;
 800286a:	f64f 3346 	movw	r3, #64326	; 0xfb46
		a[0] = a0__105kHz;
 800286e:	f2cc 0c71 	movt	ip, #49265	; 0xc071
		a[1] = a1__105kHz;
 8002872:	f2c4 00c9 	movt	r0, #16585	; 0x40c9
		a[2] = a2__105kHz;
 8002876:	f2cc 02b5 	movt	r2, #49333	; 0xc0b5
		a[3] = a3__105kHz;
 800287a:	f2c4 0330 	movt	r3, #16432	; 0x4030
		a[0] = a0__105kHz;
 800287e:	46e6      	mov	lr, ip
		a[1] = a1__105kHz;
 8002880:	4684      	mov	ip, r0
		a[2] = a2__105kHz;
 8002882:	4610      	mov	r0, r2
		a[3] = a3__105kHz;
 8002884:	461a      	mov	r2, r3
		a[4] = a4__105kHz;
 8002886:	f24d 5313 	movw	r3, #54547	; 0xd513
 800288a:	f6cb 7314 	movt	r3, #48916	; 0xbf14
		a[0] = a0__105kHz;
 800288e:	f8c1 e000 	str.w	lr, [r1]
		a[1] = a1__105kHz;
 8002892:	f8c1 c004 	str.w	ip, [r1, #4]
		a[2] = a2__105kHz;
 8002896:	6088      	str	r0, [r1, #8]
		a[3] = a3__105kHz;
 8002898:	60ca      	str	r2, [r1, #12]
		a[4] = a4__105kHz;
 800289a:	610b      	str	r3, [r1, #16]
		a[1] = a1__15kHz;
		a[2] = a2__15kHz;
		a[3] = a3__15kHz;
		a[4] = a4__15kHz;
	}
}
 800289c:	f85d fb04 	ldr.w	pc, [sp], #4
		b[1] = b1__15kHz;
 80028a0:	f643 52f3 	movw	r2, #15859	; 0x3df3
		b[2] = b2__15kHz;
 80028a4:	4694      	mov	ip, r2
		b[0] = b0__15kHz;
 80028a6:	f64c 3328 	movw	r3, #52008	; 0xcb28
 80028aa:	f2c3 3329 	movt	r3, #13097	; 0x3329
		b[1] = b1__15kHz;
 80028ae:	f2c3 4254 	movt	r2, #13396	; 0x3454
		b[2] = b2__15kHz;
 80028b2:	f2c3 4cd4 	movt	ip, #13524	; 0x34d4
		b[0] = b0__15kHz;
 80028b6:	6003      	str	r3, [r0, #0]
		b[1] = b1__15kHz;
 80028b8:	6042      	str	r2, [r0, #4]
		b[2] = b2__15kHz;
 80028ba:	f8c0 c008 	str.w	ip, [r0, #8]
		b[3] = b3__15kHz;
 80028be:	f8c0 c00c 	str.w	ip, [r0, #12]
		b[4] = b4__15kHz;
 80028c2:	6102      	str	r2, [r0, #16]
		b[5] = b5__15kHz;
 80028c4:	6143      	str	r3, [r0, #20]
		a[0] = a0__15kHz;
 80028c6:	f640 1c43 	movw	ip, #2371	; 0x943
		a[1] = a1__15kHz;
 80028ca:	f645 70ae 	movw	r0, #24494	; 0x5fae
		a[2] = a2__15kHz;
 80028ce:	f64f 7214 	movw	r2, #65300	; 0xff14
		a[3] = a3__15kHz;
 80028d2:	f24e 33d7 	movw	r3, #58327	; 0xe3d7
		a[0] = a0__15kHz;
 80028d6:	f2cc 0c9d 	movt	ip, #49309	; 0xc09d
		a[1] = a1__15kHz;
 80028da:	f2c4 101a 	movt	r0, #16666	; 0x411a
		a[2] = a2__15kHz;
 80028de:	f2cc 1217 	movt	r2, #49431	; 0xc117
		a[3] = a3__15kHz;
 80028e2:	f2c4 0395 	movt	r3, #16533	; 0x4095
		a[0] = a0__15kHz;
 80028e6:	46e6      	mov	lr, ip
		a[1] = a1__15kHz;
 80028e8:	4684      	mov	ip, r0
		a[2] = a2__15kHz;
 80028ea:	4610      	mov	r0, r2
		a[3] = a3__15kHz;
 80028ec:	461a      	mov	r2, r3
		a[4] = a4__15kHz;
 80028ee:	f64d 632a 	movw	r3, #56874	; 0xde2a
 80028f2:	f6cb 736c 	movt	r3, #49004	; 0xbf6c
		a[0] = a0__15kHz;
 80028f6:	f8c1 e000 	str.w	lr, [r1]
		a[1] = a1__15kHz;
 80028fa:	f8c1 c004 	str.w	ip, [r1, #4]
		a[2] = a2__15kHz;
 80028fe:	6088      	str	r0, [r1, #8]
		a[3] = a3__15kHz;
 8002900:	60ca      	str	r2, [r1, #12]
		a[4] = a4__15kHz;
 8002902:	610b      	str	r3, [r1, #16]
}
 8002904:	f85d fb04 	ldr.w	pc, [sp], #4

08002908 <cmd_proc>:
	return 20.0*log10f(module/120.0);
}

/* process command line after <cr> */
void cmd_proc(void)
{
 8002908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint16_t i, k, RSSI_int;
	MxL_ERR_MSG MxL_Status;
	bool RFSynthLock, REFSynthLock;

	//some of registers that depends on RF input level and V_if_agc voltage - useful for reverse engineering
	const uint8_t reg_mon[] = {0xAD, 0xAE, 0xAF, 0xB4, 0xB5, 0xB6, 0xB8, 0xBB, 0xBD, 0xBE, 0xCC, 0xCD, 0x00};
 800290c:	f24f 3398 	movw	r3, #62360	; 0xf398
 8002910:	f6c0 0300 	movt	r3, #2048	; 0x800
 8002914:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
{
 8002916:	ed2d 8b0c 	vpush	{d8-d13}
 800291a:	b09b      	sub	sp, #108	; 0x6c
	const uint8_t reg_mon[] = {0xAD, 0xAE, 0xAF, 0xB4, 0xB5, 0xB6, 0xB8, 0xBB, 0xBD, 0xBE, 0xCC, 0xCD, 0x00};
 800291c:	ac11      	add	r4, sp, #68	; 0x44
 800291e:	c407      	stmia	r4!, {r0, r1, r2}

	/* parse out three tokens: cmd arg arg */
	argc = 0;
	token = strtok(cmd_buffer, " ");
 8002920:	f64e 4134 	movw	r1, #60468	; 0xec34
 8002924:	f240 20bc 	movw	r0, #700	; 0x2bc
 8002928:	f6c0 0100 	movt	r1, #2048	; 0x800
 800292c:	f2c2 0000 	movt	r0, #8192	; 0x2000
	const uint8_t reg_mon[] = {0xAD, 0xAE, 0xAF, 0xB4, 0xB5, 0xB6, 0xB8, 0xBB, 0xBD, 0xBE, 0xCC, 0xCD, 0x00};
 8002930:	7023      	strb	r3, [r4, #0]
	token = strtok(cmd_buffer, " ");
 8002932:	f007 ffd5 	bl	800a8e0 <strtok>
	while(token != NULL && argc < MAX_ARGS)
 8002936:	2800      	cmp	r0, #0
 8002938:	d041      	beq.n	80029be <cmd_proc+0xb6>
	{
		argv[argc++] = token;
		token = strtok(NULL, " ");
 800293a:	f64e 4634 	movw	r6, #60468	; 0xec34
 800293e:	4603      	mov	r3, r0
 8002940:	ac15      	add	r4, sp, #84	; 0x54
	argc = 0;
 8002942:	2500      	movs	r5, #0
		token = strtok(NULL, " ");
 8002944:	f6c0 0600 	movt	r6, #2048	; 0x800
		argv[argc++] = token;
 8002948:	f844 3b04 	str.w	r3, [r4], #4
		token = strtok(NULL, " ");
 800294c:	4631      	mov	r1, r6
 800294e:	2000      	movs	r0, #0
 8002950:	f007 ffc6 	bl	800a8e0 <strtok>
		argv[argc++] = token;
 8002954:	3501      	adds	r5, #1
	while(token != NULL && argc < MAX_ARGS)
 8002956:	4603      	mov	r3, r0
 8002958:	b108      	cbz	r0, 800295e <cmd_proc+0x56>
 800295a:	2d05      	cmp	r5, #5
 800295c:	d1f4      	bne.n	8002948 <cmd_proc+0x40>

	/* figure out which command it is */
	if(argc > 0)
	{
		cmd = 0;
		while(cmd_commands[cmd] != NULL)
 800295e:	f240 0600 	movw	r6, #0
 8002962:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002966:	6831      	ldr	r1, [r6, #0]
 8002968:	b371      	cbz	r1, 80029c8 <cmd_proc+0xc0>
		{
			if(strcmp(argv[0], cmd_commands[cmd])==0)
 800296a:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
		cmd = 0;
 800296e:	2700      	movs	r7, #0
 8002970:	e003      	b.n	800297a <cmd_proc+0x72>
		while(cmd_commands[cmd] != NULL)
 8002972:	f856 1f04 	ldr.w	r1, [r6, #4]!
				break;
			cmd++;
 8002976:	3701      	adds	r7, #1
		while(cmd_commands[cmd] != NULL)
 8002978:	b331      	cbz	r1, 80029c8 <cmd_proc+0xc0>
			if(strcmp(argv[0], cmd_commands[cmd])==0)
 800297a:	4640      	mov	r0, r8
 800297c:	f7fd fc28 	bl	80001d0 <strcmp>
 8002980:	2800      	cmp	r0, #0
 8002982:	d1f6      	bne.n	8002972 <cmd_proc+0x6a>
		}
	
		/* Can we handle this? */
		if(cmd_commands[cmd] != NULL)
		{
			UART_printf("\r\n");
 8002984:	4604      	mov	r4, r0
 8002986:	f24f 4070 	movw	r0, #62576	; 0xf470
 800298a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800298e:	f001 fad1 	bl	8003f34 <UART_printf>

			/* Handle commands */
			switch(cmd)
 8002992:	2f0f      	cmp	r7, #15
 8002994:	d813      	bhi.n	80029be <cmd_proc+0xb6>
 8002996:	e8df f017 	tbh	[pc, r7, lsl #1]
 800299a:	00be      	.short	0x00be
 800299c:	02510154 	.word	0x02510154
 80029a0:	021c01cc 	.word	0x021c01cc
 80029a4:	02440237 	.word	0x02440237
 80029a8:	0140011d 	.word	0x0140011d
 80029ac:	00620148 	.word	0x00620148
 80029b0:	009c019c 	.word	0x009c019c
 80029b4:	00880080 	.word	0x00880080
 80029b8:	0022      	.short	0x0022
							}

							UART_printf(" ; Mod: %.2f -> n/p - next/prev step ; s - stop\r\n", calculate_mean_module());

							while ( ((rxchar_loc = usart_getc()) == EOF) || ((rxchar_loc != 'n') && (rxchar_loc != 'p') && (rxchar_loc != 's')) );
							usart_flush_RX_buffer();
 80029ba:	f002 fd93 	bl	80054e4 <usart_flush_RX_buffer>
			}
		}
		else
			UART_printf(" Unknown command\r\n");
	}
}
 80029be:	b01b      	add	sp, #108	; 0x6c
 80029c0:	ecbd 8b0c 	vpop	{d8-d13}
 80029c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			UART_printf(" Unknown command\r\n");
 80029c8:	f24f 3084 	movw	r0, #62340	; 0xf384
 80029cc:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 80029d0:	b01b      	add	sp, #108	; 0x6c
 80029d2:	ecbd 8b0c 	vpop	{d8-d13}
 80029d6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			UART_printf(" Unknown command\r\n");
 80029da:	f001 baab 	b.w	8003f34 <UART_printf>
 80029de:	f240 3710 	movw	r7, #784	; 0x310
						MxL_Status = MxL_Get_Register(&myTuner, reg_mon[i], &reg_curr);
 80029e2:	f640 1ab0 	movw	sl, #2480	; 0x9b0
						UART_printf("0x%02X:  0x%02X -> 0x%02X", reg_mon[i], reg_prev[reg_mon[i]], reg_curr);
 80029e6:	f24f 3934 	movw	r9, #62260	; 0xf334
						UART_printf("\r\n");
 80029ea:	f24f 4870 	movw	r8, #62576	; 0xf470
			switch(cmd)
 80029ee:	2500      	movs	r5, #0
 80029f0:	f2c2 0700 	movt	r7, #8192	; 0x2000
						MxL_Status = MxL_Get_Register(&myTuner, reg_mon[i], &reg_curr);
 80029f4:	f2c2 0a00 	movt	sl, #8192	; 0x2000
						UART_printf("0x%02X:  0x%02X -> 0x%02X", reg_mon[i], reg_prev[reg_mon[i]], reg_curr);
 80029f8:	f6c0 0900 	movt	r9, #2048	; 0x800
						UART_printf("\r\n");
 80029fc:	f6c0 0800 	movt	r8, #2048	; 0x800
			switch(cmd)
 8002a00:	24ad      	movs	r4, #173	; 0xad
 8002a02:	f10d 0642 	add.w	r6, sp, #66	; 0x42
 8002a06:	e020      	b.n	8002a4a <cmd_proc+0x142>
						UART_printf("0x%02X:  0x%02X -> 0x%02X", reg_mon[i], reg_prev[reg_mon[i]], reg_curr);
 8002a08:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8002a0c:	5d3a      	ldrb	r2, [r7, r4]
 8002a0e:	4648      	mov	r0, r9
 8002a10:	4621      	mov	r1, r4
 8002a12:	f001 fa8f 	bl	8003f34 <UART_printf>
						if (reg_prev[reg_mon[i]] != reg_curr) UART_printf("  --- DIFF ---");
 8002a16:	5d3a      	ldrb	r2, [r7, r4]
 8002a18:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8002a1c:	f24f 3050 	movw	r0, #62288	; 0xf350
 8002a20:	429a      	cmp	r2, r3
 8002a22:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002a26:	d001      	beq.n	8002a2c <cmd_proc+0x124>
 8002a28:	f001 fa84 	bl	8003f34 <UART_printf>
						i++;
 8002a2c:	3501      	adds	r5, #1
						UART_printf("\r\n");
 8002a2e:	4640      	mov	r0, r8
						i++;
 8002a30:	b2ad      	uxth	r5, r5
						UART_printf("\r\n");
 8002a32:	f001 fa7f 	bl	8003f34 <UART_printf>
						reg_prev[reg_mon[i]] = reg_curr;
 8002a36:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8002a3a:	553a      	strb	r2, [r7, r4]
					while(reg_mon[i] != 0)
 8002a3c:	f105 0368 	add.w	r3, r5, #104	; 0x68
 8002a40:	446b      	add	r3, sp
 8002a42:	f813 4c24 	ldrb.w	r4, [r3, #-36]
 8002a46:	2c00      	cmp	r4, #0
 8002a48:	d0b9      	beq.n	80029be <cmd_proc+0xb6>
						MxL_Status = MxL_Get_Register(&myTuner, reg_mon[i], &reg_curr);
 8002a4a:	4621      	mov	r1, r4
 8002a4c:	4632      	mov	r2, r6
 8002a4e:	4650      	mov	r0, sl
 8002a50:	f7ff fd66 	bl	8002520 <MxL_Get_Register>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002a54:	2800      	cmp	r0, #0
 8002a56:	d0d7      	beq.n	8002a08 <cmd_proc+0x100>
 8002a58:	f7ff fe92 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8002a5c:	e7d4      	b.n	8002a08 <cmd_proc+0x100>
						MxL_Status = MxL_Get_Register(&myTuner, i, &reg_curr);
 8002a5e:	f640 17b0 	movw	r7, #2480	; 0x9b0
						UART_printf("0x%02X=0x%02X\r\n", i, reg_curr);
 8002a62:	f24f 2580 	movw	r5, #62080	; 0xf280
			switch(cmd)
 8002a66:	2400      	movs	r4, #0
 8002a68:	f10d 0642 	add.w	r6, sp, #66	; 0x42
						MxL_Status = MxL_Get_Register(&myTuner, i, &reg_curr);
 8002a6c:	f2c2 0700 	movt	r7, #8192	; 0x2000
						UART_printf("0x%02X=0x%02X\r\n", i, reg_curr);
 8002a70:	f6c0 0500 	movt	r5, #2048	; 0x800
						MxL_Status = MxL_Get_Register(&myTuner, i, &reg_curr);
 8002a74:	b2e1      	uxtb	r1, r4
 8002a76:	4632      	mov	r2, r6
 8002a78:	4638      	mov	r0, r7
 8002a7a:	f7ff fd51 	bl	8002520 <MxL_Get_Register>
 8002a7e:	4603      	mov	r3, r0
						UART_printf("0x%02X=0x%02X\r\n", i, reg_curr);
 8002a80:	4621      	mov	r1, r4
 8002a82:	4628      	mov	r0, r5
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f040 82f5 	bne.w	8003074 <cmd_proc+0x76c>
						UART_printf("0x%02X=0x%02X\r\n", i, reg_curr);
 8002a8a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
					for (i=0 ; i<MxL5007_regs_num ; i++)
 8002a8e:	3401      	adds	r4, #1
						UART_printf("0x%02X=0x%02X\r\n", i, reg_curr);
 8002a90:	f001 fa50 	bl	8003f34 <UART_printf>
					for (i=0 ; i<MxL5007_regs_num ; i++)
 8002a94:	2cda      	cmp	r4, #218	; 0xda
 8002a96:	d1ed      	bne.n	8002a74 <cmd_proc+0x16c>
 8002a98:	e791      	b.n	80029be <cmd_proc+0xb6>
					if(argc < 3)
 8002a9a:	2d02      	cmp	r5, #2
 8002a9c:	f300 83dc 	bgt.w	8003258 <cmd_proc+0x950>
						UART_printf("write - missing arg(s)\r\n");
 8002aa0:	f24f 20f4 	movw	r0, #62196	; 0xf2f4
 8002aa4:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002aa8:	e792      	b.n	80029d0 <cmd_proc+0xc8>
					MxL_Status = MxL_Get_RSSI(&myTuner, &RSSI_int);
 8002aaa:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002aae:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8002ab2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002ab6:	f7ff fe37 	bl	8002728 <MxL_Get_RSSI>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002aba:	2800      	cmp	r0, #0
 8002abc:	f040 83f3 	bne.w	80032a6 <cmd_proc+0x99e>
					UART_printf("rssi: %d\r\n", RSSI_int);
 8002ac0:	f24f 3028 	movw	r0, #62248	; 0xf328
 8002ac4:	f8bd 1042 	ldrh.w	r1, [sp, #66]	; 0x42
 8002ac8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002acc:	f001 fa32 	bl	8003f34 <UART_printf>
					break;
 8002ad0:	e775      	b.n	80029be <cmd_proc+0xb6>
					if(argc < 2)
 8002ad2:	2d01      	cmp	r5, #1
 8002ad4:	f000 856e 	beq.w	80035b4 <cmd_proc+0xcac>
						reg = (int)strtoul(argv[1], NULL, 0);
 8002ad8:	2200      	movs	r2, #0
 8002ada:	4611      	mov	r1, r2
 8002adc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002ade:	f008 f851 	bl	800ab84 <strtoul>
 8002ae2:	b2c1      	uxtb	r1, r0
						if (reg > MxL5007_regs_num-1) reg = MxL5007_regs_num-1;
 8002ae4:	29d9      	cmp	r1, #217	; 0xd9
						MxL_Status = MxL_Get_Register(&myTuner, reg, &reg_curr);
 8002ae6:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002aea:	bf28      	it	cs
 8002aec:	21d9      	movcs	r1, #217	; 0xd9
 8002aee:	f10d 0242 	add.w	r2, sp, #66	; 0x42
 8002af2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002af6:	9104      	str	r1, [sp, #16]
 8002af8:	f7ff fd12 	bl	8002520 <MxL_Get_Register>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002afc:	9904      	ldr	r1, [sp, #16]
 8002afe:	2800      	cmp	r0, #0
 8002b00:	f040 858c 	bne.w	800361c <cmd_proc+0xd14>
						UART_printf("read: 0x%02X = 0x%02lX\r\n", reg, reg_curr);
 8002b04:	f24f 20d8 	movw	r0, #62168	; 0xf2d8
 8002b08:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8002b0c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b10:	f001 fa10 	bl	8003f34 <UART_printf>
 8002b14:	e753      	b.n	80029be <cmd_proc+0xb6>
					UART_printf("help - this message\r\n");
 8002b16:	f64e 4038 	movw	r0, #60472	; 0xec38
 8002b1a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b1e:	f001 fa09 	bl	8003f34 <UART_printf>
					UART_printf("freq <frequency> - Set freq in MHz\r\n");
 8002b22:	f64e 4050 	movw	r0, #60496	; 0xec50
 8002b26:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b2a:	f001 fa03 	bl	8003f34 <UART_printf>
					UART_printf("set_gain <gain> - Set gain VGA [1 - 49.3 dB]\r\n");
 8002b2e:	f64e 4078 	movw	r0, #60536	; 0xec78
 8002b32:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b36:	f001 f9fd 	bl	8003f34 <UART_printf>
                    UART_printf("init - default SDR state\r\n");
 8002b3a:	f64e 40a8 	movw	r0, #60584	; 0xeca8
 8002b3e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b42:	f001 f9f7 	bl	8003f34 <UART_printf>
                    UART_printf("volume <vol> - audio volume for CS43L22 [0 - 100]\r\n");
 8002b46:	f64e 40c4 	movw	r0, #60612	; 0xecc4
 8002b4a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b4e:	f001 f9f1 	bl	8003f34 <UART_printf>
                    UART_printf("mute - muting of CS43L22\r\n");
 8002b52:	f64e 40f8 	movw	r0, #60664	; 0xecf8
 8002b56:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b5a:	f001 f9eb 	bl	8003f34 <UART_printf>
                    UART_printf("unmute - unmuting of CS43L22\r\n");
 8002b5e:	f64e 5014 	movw	r0, #60692	; 0xed14
 8002b62:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b66:	f001 f9e5 	bl	8003f34 <UART_printf>
                    UART_printf("demod_type <type> <CW upper lvl> <CW hyst> - Set demodulator type [AM/FM/IQ/CW]\r\n");
 8002b6a:	f64e 5034 	movw	r0, #60724	; 0xed34
 8002b6e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b72:	f001 f9df 	bl	8003f34 <UART_printf>
                    UART_printf("tune <start_freq> <step> - Manual tune from start_freq [MHz] with step [MHz]\r\n");
 8002b76:	f64e 5088 	movw	r0, #60808	; 0xed88
 8002b7a:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b7e:	f001 f9d9 	bl	8003f34 <UART_printf>
                    UART_printf("scan <start_freq> <step> <mod_thres> <Mute> - Scan from start_freq [MHz] with step [MHz], mod_thres [dB] and Mute [0/1]\r\n");
 8002b82:	f64e 50d8 	movw	r0, #60888	; 0xedd8
 8002b86:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b8a:	f001 f9d3 	bl	8003f34 <UART_printf>
                    UART_printf("dump - dump MxL5007's all registers\r\n");
 8002b8e:	f64e 6054 	movw	r0, #61012	; 0xee54
 8002b92:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002b96:	f001 f9cd 	bl	8003f34 <UART_printf>
					UART_printf("reg_diff - print registers differences between reg_diff's calls\r\n");
 8002b9a:	f64e 607c 	movw	r0, #61052	; 0xee7c
 8002b9e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ba2:	f001 f9c7 	bl	8003f34 <UART_printf>
					UART_printf("read - reading particular register\r\n");
 8002ba6:	f64e 60c0 	movw	r0, #61120	; 0xeec0
 8002baa:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bae:	f001 f9c1 	bl	8003f34 <UART_printf>
					UART_printf("write - write particular register\r\n");
 8002bb2:	f64e 60e8 	movw	r0, #61160	; 0xeee8
 8002bb6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bba:	f001 f9bb 	bl	8003f34 <UART_printf>
					UART_printf("rssi - get RSSI value (experimental - most probably worthless)");
 8002bbe:	f64e 700c 	movw	r0, #61196	; 0xef0c
 8002bc2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bc6:	f001 f9b5 	bl	8003f34 <UART_printf>
					UART_printf("test - specific MxL5007 registers monitoring\r\n");
 8002bca:	f64e 704c 	movw	r0, #61260	; 0xef4c
 8002bce:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002bd2:	e6fd      	b.n	80029d0 <cmd_proc+0xc8>
					if(argc < 2)
 8002bd4:	2d01      	cmp	r5, #1
 8002bd6:	f000 8534 	beq.w	8003642 <cmd_proc+0xd3a>
						while(demod_type_param[type] != NULL)
 8002bda:	f240 0644 	movw	r6, #68	; 0x44
 8002bde:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8002be2:	6831      	ldr	r1, [r6, #0]
 8002be4:	2900      	cmp	r1, #0
 8002be6:	f000 8532 	beq.w	800364e <cmd_proc+0xd46>
							if(strcmp(argv[1], demod_type_param[type])==0)
 8002bea:	9f16      	ldr	r7, [sp, #88]	; 0x58
						uint8_t type = 0;
 8002bec:	2400      	movs	r4, #0
 8002bee:	e005      	b.n	8002bfc <cmd_proc+0x2f4>
							type++;
 8002bf0:	b2dc      	uxtb	r4, r3
						while(demod_type_param[type] != NULL)
 8002bf2:	f856 1024 	ldr.w	r1, [r6, r4, lsl #2]
 8002bf6:	2900      	cmp	r1, #0
 8002bf8:	f000 8529 	beq.w	800364e <cmd_proc+0xd46>
							if(strcmp(argv[1], demod_type_param[type])==0)
 8002bfc:	4638      	mov	r0, r7
 8002bfe:	f7fd fae7 	bl	80001d0 <strcmp>
							type++;
 8002c02:	1c63      	adds	r3, r4, #1
							if(strcmp(argv[1], demod_type_param[type])==0)
 8002c04:	2800      	cmp	r0, #0
 8002c06:	d1f3      	bne.n	8002bf0 <cmd_proc+0x2e8>
							switch(type)
 8002c08:	2c03      	cmp	r4, #3
 8002c0a:	f63f aed8 	bhi.w	80029be <cmd_proc+0xb6>
 8002c0e:	e8df f014 	tbh	[pc, r4, lsl #1]
 8002c12:	01ee      	.short	0x01ee
 8002c14:	016801ab 	.word	0x016801ab
 8002c18:	0160      	.short	0x0160
					if(argc < 3)
 8002c1a:	2d02      	cmp	r5, #2
 8002c1c:	f300 823f 	bgt.w	800309e <cmd_proc+0x796>
						UART_printf("tune - missing arg(s)\r\n");
 8002c20:	f24f 1014 	movw	r0, #61716	; 0xf114
 8002c24:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c28:	e6d2      	b.n	80029d0 <cmd_proc+0xc8>
					if(argc < 5)
 8002c2a:	2d05      	cmp	r5, #5
 8002c2c:	f000 8350 	beq.w	80032d0 <cmd_proc+0x9c8>
						UART_printf("scan - missing arg(s)\r\n");
 8002c30:	f24f 1098 	movw	r0, #61848	; 0xf198
 8002c34:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c38:	f001 f97c 	bl	8003f34 <UART_printf>
					CS43_Unmute();
 8002c3c:	f7fe fd30 	bl	80016a0 <CS43_Unmute>
					break;
 8002c40:	e6bd      	b.n	80029be <cmd_proc+0xb6>
					if(argc < 2)
 8002c42:	2d01      	cmp	r5, #1
 8002c44:	f000 84d5 	beq.w	80035f2 <cmd_proc+0xcea>
						double frequency = atof(argv[1]);
 8002c48:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002c4a:	f006 f92f 	bl	8008eac <atof>
 8002c4e:	ec55 4b10 	vmov	r4, r5, d0
						MxL_Status = MxL_Tuner_RFTune(&myTuner, (uint32_t) (frequency*1.0E6), MxL_BW_6MHz);
 8002c52:	f248 4380 	movw	r3, #33920	; 0x8480
 8002c56:	2200      	movs	r2, #0
 8002c58:	ee10 0a10 	vmov	r0, s0
 8002c5c:	f2c4 132e 	movt	r3, #16686	; 0x412e
 8002c60:	4629      	mov	r1, r5
 8002c62:	f7fd fcd9 	bl	8000618 <__aeabi_dmul>
 8002c66:	f7fd ffaf 	bl	8000bc8 <__aeabi_d2uiz>
 8002c6a:	4601      	mov	r1, r0
 8002c6c:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002c70:	2206      	movs	r2, #6
 8002c72:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c76:	f7ff fc87 	bl	8002588 <MxL_Tuner_RFTune>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002c7a:	2800      	cmp	r0, #0
 8002c7c:	f040 84ca 	bne.w	8003614 <cmd_proc+0xd0c>
						UART_printf("freq:  %.6f MHz", frequency);
 8002c80:	f64e 7094 	movw	r0, #61332	; 0xef94
 8002c84:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002c88:	4622      	mov	r2, r4
 8002c8a:	462b      	mov	r3, r5
 8002c8c:	f001 f952 	bl	8003f34 <UART_printf>
						MxL_Status = MxL_RFSynth_Lock_Status(&myTuner, &RFSynthLock);
 8002c90:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002c94:	f10d 0141 	add.w	r1, sp, #65	; 0x41
 8002c98:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002c9c:	f7ff fcee 	bl	800267c <MxL_RFSynth_Lock_Status>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	f040 84b3 	bne.w	800360c <cmd_proc+0xd04>
						MxL_Status = MxL_REFSynth_Lock_Status(&myTuner, &REFSynthLock);
 8002ca6:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002caa:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8002cae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002cb2:	f7ff fcfd 	bl	80026b0 <MxL_REFSynth_Lock_Status>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002cb6:	2800      	cmp	r0, #0
 8002cb8:	f040 84a4 	bne.w	8003604 <cmd_proc+0xcfc>
						UART_printf("\r\nrfLock=%d   refLock=%d\r\n", RFSynthLock, REFSynthLock);
 8002cbc:	f64e 70a4 	movw	r0, #61348	; 0xefa4
 8002cc0:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8002cc4:	f89d 1041 	ldrb.w	r1, [sp, #65]	; 0x41
 8002cc8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ccc:	f001 f932 	bl	8003f34 <UART_printf>
 8002cd0:	e675      	b.n	80029be <cmd_proc+0xb6>
 8002cd2:	f240 3510 	movw	r5, #784	; 0x310
			switch(cmd)
 8002cd6:	2400      	movs	r4, #0
						MxL_Status = MxL_Get_Register(&myTuner, i, &reg_curr);
 8002cd8:	f640 18b0 	movw	r8, #2480	; 0x9b0
							UART_printf("0x%02X:  0x%02X -> 0x%02X\r\n", i, reg_prev[i], reg_curr);
 8002cdc:	f24f 2990 	movw	r9, #62096	; 0xf290
 8002ce0:	f2c2 0500 	movt	r5, #8192	; 0x2000
					k = 0;
 8002ce4:	4627      	mov	r7, r4
						MxL_Status = MxL_Get_Register(&myTuner, i, &reg_curr);
 8002ce6:	f2c2 0800 	movt	r8, #8192	; 0x2000
							UART_printf("0x%02X:  0x%02X -> 0x%02X\r\n", i, reg_prev[i], reg_curr);
 8002cea:	f6c0 0900 	movt	r9, #2048	; 0x800
 8002cee:	f10d 0642 	add.w	r6, sp, #66	; 0x42
 8002cf2:	e014      	b.n	8002d1e <cmd_proc+0x416>
						if (reg_prev[i] != reg_curr)
 8002cf4:	782a      	ldrb	r2, [r5, #0]
 8002cf6:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8002cfa:	429a      	cmp	r2, r3
							UART_printf("0x%02X:  0x%02X -> 0x%02X\r\n", i, reg_prev[i], reg_curr);
 8002cfc:	4621      	mov	r1, r4
					for (i=0 ; i<MxL5007_regs_num ; i++)
 8002cfe:	f104 0401 	add.w	r4, r4, #1
						if (reg_prev[i] != reg_curr)
 8002d02:	d007      	beq.n	8002d14 <cmd_proc+0x40c>
							UART_printf("0x%02X:  0x%02X -> 0x%02X\r\n", i, reg_prev[i], reg_curr);
 8002d04:	4648      	mov	r0, r9
 8002d06:	f001 f915 	bl	8003f34 <UART_printf>
							k++;
 8002d0a:	3701      	adds	r7, #1
							reg_prev[i] = reg_curr;
 8002d0c:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
 8002d10:	702b      	strb	r3, [r5, #0]
							k++;
 8002d12:	b2bf      	uxth	r7, r7
					for (i=0 ; i<MxL5007_regs_num ; i++)
 8002d14:	2cda      	cmp	r4, #218	; 0xda
 8002d16:	f105 0501 	add.w	r5, r5, #1
 8002d1a:	f000 81b8 	beq.w	800308e <cmd_proc+0x786>
						MxL_Status = MxL_Get_Register(&myTuner, i, &reg_curr);
 8002d1e:	b2e1      	uxtb	r1, r4
 8002d20:	4632      	mov	r2, r6
 8002d22:	4640      	mov	r0, r8
 8002d24:	f7ff fbfc 	bl	8002520 <MxL_Get_Register>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002d28:	2800      	cmp	r0, #0
 8002d2a:	d0e3      	beq.n	8002cf4 <cmd_proc+0x3ec>
 8002d2c:	f7ff fd28 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8002d30:	e7e0      	b.n	8002cf4 <cmd_proc+0x3ec>
                    UART_printf("init\r\n");
 8002d32:	f24f 0008 	movw	r0, #61448	; 0xf008
 8002d36:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002d3a:	f001 f8fb 	bl	8003f34 <UART_printf>
                    MxL_ERR_MSG MxL_Status = MxL_Tuner_Init(&myTuner);
 8002d3e:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002d42:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d46:	f7ff fbf5 	bl	8002534 <MxL_Tuner_Init>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002d4a:	2800      	cmp	r0, #0
 8002d4c:	f040 82b7 	bne.w	80032be <cmd_proc+0x9b6>
					MxL_Status = MxL_Tuner_RFTune(&myTuner, 100*MHz, MxL_BW_6MHz);
 8002d50:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8002d54:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002d58:	2206      	movs	r2, #6
 8002d5a:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
 8002d5e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d62:	f7ff fc11 	bl	8002588 <MxL_Tuner_RFTune>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002d66:	2800      	cmp	r0, #0
 8002d68:	f040 82a6 	bne.w	80032b8 <cmd_proc+0x9b0>
					MxL_Status = MxL_RFSynth_Lock_Status(&myTuner, &RFSynthLock);
 8002d6c:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002d70:	f10d 0141 	add.w	r1, sp, #65	; 0x41
 8002d74:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d78:	f7ff fc80 	bl	800267c <MxL_RFSynth_Lock_Status>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002d7c:	2800      	cmp	r0, #0
 8002d7e:	f040 8298 	bne.w	80032b2 <cmd_proc+0x9aa>
					MxL_Status = MxL_REFSynth_Lock_Status(&myTuner, &REFSynthLock);
 8002d82:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8002d86:	f10d 0142 	add.w	r1, sp, #66	; 0x42
 8002d8a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8002d8e:	f7ff fc8f 	bl	80026b0 <MxL_REFSynth_Lock_Status>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8002d92:	2800      	cmp	r0, #0
 8002d94:	f040 828a 	bne.w	80032ac <cmd_proc+0x9a4>
					UART_printf("rfLock=%d   refLock=%d\r\n", RFSynthLock, RFSynthLock);
 8002d98:	f89d 2041 	ldrb.w	r2, [sp, #65]	; 0x41
 8002d9c:	f24f 0010 	movw	r0, #61456	; 0xf010
 8002da0:	4611      	mov	r1, r2
 8002da2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002da6:	f001 f8c5 	bl	8003f34 <UART_printf>
					MxL_SetGain(75.0 - (IF_Gain + Attenuation)); //total gain 75 dB
 8002daa:	f640 233d 	movw	r3, #2621	; 0xa3d
 8002dae:	f2c4 237e 	movt	r3, #17022	; 0x427e
 8002db2:	ee00 3a10 	vmov	s0, r3
 8002db6:	f7ff fc95 	bl	80026e4 <MxL_SetGain>
                    Demod_Type = DEMOD_FM;
 8002dba:	f640 330e 	movw	r3, #2830	; 0xb0e
 8002dbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002dc2:	2200      	movs	r2, #0
					CS43_SetVolume(CS43_default_vol);
 8002dc4:	2030      	movs	r0, #48	; 0x30
                    Demod_Type = DEMOD_FM;
 8002dc6:	701a      	strb	r2, [r3, #0]
					CS43_SetVolume(CS43_default_vol);
 8002dc8:	f7fe fb18 	bl	80013fc <CS43_SetVolume>
					CS43_Unmute();
 8002dcc:	f7fe fc68 	bl	80016a0 <CS43_Unmute>
                    break;
 8002dd0:	e5f5      	b.n	80029be <cmd_proc+0xb6>
					if(argc < 2)
 8002dd2:	2d01      	cmp	r5, #1
 8002dd4:	f000 8276 	beq.w	80032c4 <cmd_proc+0x9bc>
						data = (int)strtoul(argv[1], NULL, 0);
 8002dd8:	2200      	movs	r2, #0
 8002dda:	4611      	mov	r1, r2
 8002ddc:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002dde:	f007 fed1 	bl	800ab84 <strtoul>
						if (data > 100) data = 100;
 8002de2:	2864      	cmp	r0, #100	; 0x64
 8002de4:	bf28      	it	cs
 8002de6:	2064      	movcs	r0, #100	; 0x64
 8002de8:	4604      	mov	r4, r0
						CS43_SetVolume(data);
 8002dea:	b2c0      	uxtb	r0, r0
 8002dec:	f7fe fb06 	bl	80013fc <CS43_SetVolume>
						UART_printf("volume:  %ld\r\n", data);
 8002df0:	f24f 0048 	movw	r0, #61512	; 0xf048
 8002df4:	4621      	mov	r1, r4
 8002df6:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8002dfa:	b01b      	add	sp, #108	; 0x6c
 8002dfc:	ecbd 8b0c 	vpop	{d8-d13}
 8002e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						UART_printf("volume:  %ld\r\n", data);
 8002e04:	f001 b896 	b.w	8003f34 <UART_printf>
                    UART_printf("CS43L22 muted\r\n");
 8002e08:	f24f 0058 	movw	r0, #61528	; 0xf058
 8002e0c:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e10:	f001 f890 	bl	8003f34 <UART_printf>
}
 8002e14:	b01b      	add	sp, #108	; 0x6c
 8002e16:	ecbd 8b0c 	vpop	{d8-d13}
 8002e1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    CS43_Mute();
 8002e1e:	f7fe bbe1 	b.w	80015e4 <CS43_Mute>
                    UART_printf("CS43L22 unmuted\r\n");
 8002e22:	f24f 0068 	movw	r0, #61544	; 0xf068
 8002e26:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002e2a:	f001 f883 	bl	8003f34 <UART_printf>
}
 8002e2e:	b01b      	add	sp, #108	; 0x6c
 8002e30:	ecbd 8b0c 	vpop	{d8-d13}
 8002e34:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
                    CS43_Unmute();
 8002e38:	f7fe bc32 	b.w	80016a0 <CS43_Unmute>
					if(argc < 2)
 8002e3c:	2d01      	cmp	r5, #1
 8002e3e:	f000 83d2 	beq.w	80035e6 <cmd_proc+0xcde>
						float Total_Gain = atof(argv[1]);
 8002e42:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002e44:	f006 f832 	bl	8008eac <atof>
 8002e48:	ec51 0b10 	vmov	r0, r1, d0
 8002e4c:	f7fd fedc 	bl	8000c08 <__aeabi_d2f>
						if (Total_Gain < IF_Gain + Attenuation) Total_Gain = IF_Gain + Attenuation;
 8002e50:	f7fd fb8a 	bl	8000568 <__aeabi_f2d>
 8002e54:	f241 467a 	movw	r6, #5242	; 0x147a
 8002e58:	f64f 27e1 	movw	r7, #64225	; 0xfae1
 8002e5c:	f2c4 76ae 	movt	r6, #18350	; 0x47ae
 8002e60:	f2c4 0726 	movt	r7, #16422	; 0x4026
 8002e64:	4632      	mov	r2, r6
 8002e66:	463b      	mov	r3, r7
 8002e68:	4604      	mov	r4, r0
 8002e6a:	460d      	mov	r5, r1
 8002e6c:	f7fd fe46 	bl	8000afc <__aeabi_dcmplt>
 8002e70:	2800      	cmp	r0, #0
 8002e72:	f040 83a5 	bne.w	80035c0 <cmd_proc+0xcb8>
						if (Total_Gain > Total_Gain_max) Total_Gain = Total_Gain_max;
 8002e76:	f24c 2290 	movw	r2, #49808	; 0xc290
 8002e7a:	f645 735c 	movw	r3, #24412	; 0x5f5c
 8002e7e:	f6c2 02f5 	movt	r2, #10485	; 0x28f5
 8002e82:	f2c4 0359 	movt	r3, #16473	; 0x4059
 8002e86:	4620      	mov	r0, r4
 8002e88:	4629      	mov	r1, r5
 8002e8a:	f7fd fe55 	bl	8000b38 <__aeabi_dcmpgt>
 8002e8e:	2800      	cmp	r0, #0
 8002e90:	f000 8455 	beq.w	800373e <cmd_proc+0xe36>
 8002e94:	2300      	movs	r3, #0
 8002e96:	f2c4 23b4 	movt	r3, #17076	; 0x42b4
 8002e9a:	f645 755c 	movw	r5, #24412	; 0x5f5c
 8002e9e:	f44f 4700 	mov.w	r7, #32768	; 0x8000
 8002ea2:	ee08 3a10 	vmov	s16, r3
 8002ea6:	f04f 5400 	mov.w	r4, #536870912	; 0x20000000
 8002eaa:	f2c4 0559 	movt	r5, #16473	; 0x4059
 8002eae:	2600      	movs	r6, #0
 8002eb0:	f2c4 0756 	movt	r7, #16470	; 0x4056
						MxL_SetGain(MxL_gain);
 8002eb4:	eeb0 0a48 	vmov.f32	s0, s16
 8002eb8:	f7ff fc14 	bl	80026e4 <MxL_SetGain>
						UART_printf("set_gain:  MxL->%.2f dB  Total->%.2f dB\r\n", MxL_gain, Total_Gain);
 8002ebc:	f64e 70dc 	movw	r0, #61404	; 0xefdc
 8002ec0:	e9cd 4500 	strd	r4, r5, [sp]
 8002ec4:	4632      	mov	r2, r6
 8002ec6:	463b      	mov	r3, r7
 8002ec8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ecc:	f001 f832 	bl	8003f34 <UART_printf>
 8002ed0:	e575      	b.n	80029be <cmd_proc+0xb6>
									if(argc < 4)
 8002ed2:	2d03      	cmp	r5, #3
 8002ed4:	f300 83d6 	bgt.w	8003684 <cmd_proc+0xd7c>
										UART_printf("demod_type CW - missing arg(s)\r\n");
 8002ed8:	f24f 00d8 	movw	r0, #61656	; 0xf0d8
 8002edc:	f6c0 0000 	movt	r0, #2048	; 0x800
 8002ee0:	e576      	b.n	80029d0 <cmd_proc+0xc8>
		a[1] = a1__15kHz;
 8002ee2:	f645 73ae 	movw	r3, #24494	; 0x5fae
 8002ee6:	f2c4 131a 	movt	r3, #16666	; 0x411a
 8002eea:	469e      	mov	lr, r3
		a[2] = a2__15kHz;
 8002eec:	f64f 7314 	movw	r3, #65300	; 0xff14
 8002ef0:	f2cc 1317 	movt	r3, #49431	; 0xc117
 8002ef4:	461e      	mov	r6, r3
		a[3] = a3__15kHz;
 8002ef6:	f24e 33d7 	movw	r3, #58327	; 0xe3d7
 8002efa:	f2c4 0395 	movt	r3, #16533	; 0x4095
 8002efe:	461d      	mov	r5, r3
		a[4] = a4__15kHz;
 8002f00:	f64d 632a 	movw	r3, #56874	; 0xde2a
 8002f04:	f6cb 736c 	movt	r3, #49004	; 0xbf6c
		b[1] = b1__15kHz;
 8002f08:	f643 51f3 	movw	r1, #15859	; 0x3df3
		a[4] = a4__15kHz;
 8002f0c:	461c      	mov	r4, r3
		b[0] = b0__15kHz;
 8002f0e:	f640 3370 	movw	r3, #2928	; 0xb70
 8002f12:	f2c2 0300 	movt	r3, #8192	; 0x2000
		b[2] = b2__15kHz;
 8002f16:	460a      	mov	r2, r1
		b[0] = b0__15kHz;
 8002f18:	f64c 3028 	movw	r0, #52008	; 0xcb28
 8002f1c:	f2c3 3029 	movt	r0, #13097	; 0x3329
		b[1] = b1__15kHz;
 8002f20:	f2c3 4154 	movt	r1, #13396	; 0x3454
		b[2] = b2__15kHz;
 8002f24:	f2c3 42d4 	movt	r2, #13524	; 0x34d4
		b[0] = b0__15kHz;
 8002f28:	6018      	str	r0, [r3, #0]
		b[5] = b5__15kHz;
 8002f2a:	6158      	str	r0, [r3, #20]
		b[1] = b1__15kHz;
 8002f2c:	6059      	str	r1, [r3, #4]
		b[4] = b4__15kHz;
 8002f2e:	6119      	str	r1, [r3, #16]
		b[2] = b2__15kHz;
 8002f30:	609a      	str	r2, [r3, #8]
		b[3] = b3__15kHz;
 8002f32:	60da      	str	r2, [r3, #12]
		a[0] = a0__15kHz;
 8002f34:	f640 335c 	movw	r3, #2908	; 0xb5c
 8002f38:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002f3c:	f640 1c43 	movw	ip, #2371	; 0x943
									Demod_Type = OUT_IQ;
 8002f40:	f640 370e 	movw	r7, #2830	; 0xb0e
		a[0] = a0__15kHz;
 8002f44:	f2cc 0c9d 	movt	ip, #49309	; 0xc09d
									Demod_Type = OUT_IQ;
 8002f48:	f2c2 0700 	movt	r7, #8192	; 0x2000
		a[0] = a0__15kHz;
 8002f4c:	f8c3 c000 	str.w	ip, [r3]
		a[1] = a1__15kHz;
 8002f50:	f8c3 e004 	str.w	lr, [r3, #4]
		a[2] = a2__15kHz;
 8002f54:	609e      	str	r6, [r3, #8]
		a[3] = a3__15kHz;
 8002f56:	60dd      	str	r5, [r3, #12]
		a[4] = a4__15kHz;
 8002f58:	611c      	str	r4, [r3, #16]
									UART_printf("demod_type: IQ\r\n");
 8002f5a:	f24f 00c4 	movw	r0, #61636	; 0xf0c4
									Demod_Type = OUT_IQ;
 8002f5e:	2302      	movs	r3, #2
									UART_printf("demod_type: IQ\r\n");
 8002f60:	f6c0 0000 	movt	r0, #2048	; 0x800
									Demod_Type = OUT_IQ;
 8002f64:	703b      	strb	r3, [r7, #0]
									UART_printf("demod_type: IQ\r\n");
 8002f66:	e533      	b.n	80029d0 <cmd_proc+0xc8>
		a[1] = a1__105kHz;
 8002f68:	f248 137c 	movw	r3, #33148	; 0x817c
 8002f6c:	f2c4 03c9 	movt	r3, #16585	; 0x40c9
 8002f70:	469e      	mov	lr, r3
		a[2] = a2__105kHz;
 8002f72:	f24d 63fc 	movw	r3, #55036	; 0xd6fc
 8002f76:	f2cc 03b5 	movt	r3, #49333	; 0xc0b5
 8002f7a:	461e      	mov	r6, r3
		a[3] = a3__105kHz;
 8002f7c:	f64f 3346 	movw	r3, #64326	; 0xfb46
 8002f80:	f2c4 0330 	movt	r3, #16432	; 0x4030
 8002f84:	461d      	mov	r5, r3
		a[4] = a4__105kHz;
 8002f86:	f24d 5313 	movw	r3, #54547	; 0xd513
 8002f8a:	f6cb 7314 	movt	r3, #48916	; 0xbf14
		b[1] = b1__105kHz;
 8002f8e:	f646 71a7 	movw	r1, #28583	; 0x6fa7
		a[4] = a4__105kHz;
 8002f92:	461c      	mov	r4, r3
		b[0] = b0__105kHz;
 8002f94:	f640 3370 	movw	r3, #2928	; 0xb70
 8002f98:	f2c2 0300 	movt	r3, #8192	; 0x2000
		b[2] = b2__105kHz;
 8002f9c:	460a      	mov	r2, r1
		b[0] = b0__105kHz;
 8002f9e:	f64b 70b8 	movw	r0, #49080	; 0xbfb8
 8002fa2:	f6c3 2012 	movt	r0, #14866	; 0x3a12
		b[1] = b1__105kHz;
 8002fa6:	f6c3 3137 	movt	r1, #15159	; 0x3b37
		b[2] = b2__105kHz;
 8002faa:	f6c3 32b7 	movt	r2, #15287	; 0x3bb7
		b[0] = b0__105kHz;
 8002fae:	6018      	str	r0, [r3, #0]
		b[5] = b5__105kHz;
 8002fb0:	6158      	str	r0, [r3, #20]
		b[1] = b1__105kHz;
 8002fb2:	6059      	str	r1, [r3, #4]
		b[4] = b4__105kHz;
 8002fb4:	6119      	str	r1, [r3, #16]
		b[2] = b2__105kHz;
 8002fb6:	609a      	str	r2, [r3, #8]
		b[3] = b3__105kHz;
 8002fb8:	60da      	str	r2, [r3, #12]
		a[0] = a0__105kHz;
 8002fba:	f640 335c 	movw	r3, #2908	; 0xb5c
 8002fbe:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8002fc2:	f24f 5c83 	movw	ip, #62851	; 0xf583
									Demod_Type = DEMOD_FM;
 8002fc6:	f640 370e 	movw	r7, #2830	; 0xb0e
		a[0] = a0__105kHz;
 8002fca:	f2cc 0c71 	movt	ip, #49265	; 0xc071
									Demod_Type = DEMOD_FM;
 8002fce:	f2c2 0700 	movt	r7, #8192	; 0x2000
		a[0] = a0__105kHz;
 8002fd2:	f8c3 c000 	str.w	ip, [r3]
		a[1] = a1__105kHz;
 8002fd6:	f8c3 e004 	str.w	lr, [r3, #4]
		a[2] = a2__105kHz;
 8002fda:	609e      	str	r6, [r3, #8]
		a[3] = a3__105kHz;
 8002fdc:	60dd      	str	r5, [r3, #12]
		a[4] = a4__105kHz;
 8002fde:	611c      	str	r4, [r3, #16]
									UART_printf("demod_type: FM\r\n");
 8002fe0:	f24f 00b0 	movw	r0, #61616	; 0xf0b0
									Demod_Type = DEMOD_FM;
 8002fe4:	2300      	movs	r3, #0
									UART_printf("demod_type: FM\r\n");
 8002fe6:	f6c0 0000 	movt	r0, #2048	; 0x800
									Demod_Type = DEMOD_FM;
 8002fea:	703b      	strb	r3, [r7, #0]
									UART_printf("demod_type: FM\r\n");
 8002fec:	e4f0      	b.n	80029d0 <cmd_proc+0xc8>
		a[1] = a1__15kHz;
 8002fee:	f645 73ae 	movw	r3, #24494	; 0x5fae
 8002ff2:	f2c4 131a 	movt	r3, #16666	; 0x411a
 8002ff6:	469e      	mov	lr, r3
		a[2] = a2__15kHz;
 8002ff8:	f64f 7314 	movw	r3, #65300	; 0xff14
 8002ffc:	f2cc 1317 	movt	r3, #49431	; 0xc117
 8003000:	461e      	mov	r6, r3
		a[3] = a3__15kHz;
 8003002:	f24e 33d7 	movw	r3, #58327	; 0xe3d7
 8003006:	f2c4 0395 	movt	r3, #16533	; 0x4095
 800300a:	461d      	mov	r5, r3
		a[4] = a4__15kHz;
 800300c:	f64d 632a 	movw	r3, #56874	; 0xde2a
 8003010:	f6cb 736c 	movt	r3, #49004	; 0xbf6c
		b[1] = b1__15kHz;
 8003014:	f643 51f3 	movw	r1, #15859	; 0x3df3
		a[4] = a4__15kHz;
 8003018:	461c      	mov	r4, r3
		b[0] = b0__15kHz;
 800301a:	f640 3370 	movw	r3, #2928	; 0xb70
 800301e:	f2c2 0300 	movt	r3, #8192	; 0x2000
		b[2] = b2__15kHz;
 8003022:	460a      	mov	r2, r1
		b[0] = b0__15kHz;
 8003024:	f64c 3028 	movw	r0, #52008	; 0xcb28
 8003028:	f2c3 3029 	movt	r0, #13097	; 0x3329
		b[1] = b1__15kHz;
 800302c:	f2c3 4154 	movt	r1, #13396	; 0x3454
		b[2] = b2__15kHz;
 8003030:	f2c3 42d4 	movt	r2, #13524	; 0x34d4
		b[0] = b0__15kHz;
 8003034:	6018      	str	r0, [r3, #0]
		b[5] = b5__15kHz;
 8003036:	6158      	str	r0, [r3, #20]
		b[1] = b1__15kHz;
 8003038:	6059      	str	r1, [r3, #4]
		b[4] = b4__15kHz;
 800303a:	6119      	str	r1, [r3, #16]
		b[2] = b2__15kHz;
 800303c:	609a      	str	r2, [r3, #8]
		b[3] = b3__15kHz;
 800303e:	60da      	str	r2, [r3, #12]
		a[0] = a0__15kHz;
 8003040:	f640 335c 	movw	r3, #2908	; 0xb5c
 8003044:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003048:	f640 1c43 	movw	ip, #2371	; 0x943
									Demod_Type = DEMOD_AM;
 800304c:	f640 370e 	movw	r7, #2830	; 0xb0e
		a[0] = a0__15kHz;
 8003050:	f2cc 0c9d 	movt	ip, #49309	; 0xc09d
									Demod_Type = DEMOD_AM;
 8003054:	f2c2 0700 	movt	r7, #8192	; 0x2000
		a[0] = a0__15kHz;
 8003058:	f8c3 c000 	str.w	ip, [r3]
		a[1] = a1__15kHz;
 800305c:	f8c3 e004 	str.w	lr, [r3, #4]
		a[2] = a2__15kHz;
 8003060:	609e      	str	r6, [r3, #8]
		a[3] = a3__15kHz;
 8003062:	60dd      	str	r5, [r3, #12]
		a[4] = a4__15kHz;
 8003064:	611c      	str	r4, [r3, #16]
									UART_printf("demod_type: AM\r\n");
 8003066:	f24f 009c 	movw	r0, #61596	; 0xf09c
									Demod_Type = DEMOD_AM;
 800306a:	2301      	movs	r3, #1
									UART_printf("demod_type: AM\r\n");
 800306c:	f6c0 0000 	movt	r0, #2048	; 0x800
									Demod_Type = DEMOD_AM;
 8003070:	703b      	strb	r3, [r7, #0]
									UART_printf("demod_type: AM\r\n");
 8003072:	e4ad      	b.n	80029d0 <cmd_proc+0xc8>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003074:	f7ff fb84 	bl	8002780 <MxL_TIMEOUT_UserCallback>
						UART_printf("0x%02X=0x%02X\r\n", i, reg_curr);
 8003078:	4621      	mov	r1, r4
 800307a:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
					for (i=0 ; i<MxL5007_regs_num ; i++)
 800307e:	3401      	adds	r4, #1
						UART_printf("0x%02X=0x%02X\r\n", i, reg_curr);
 8003080:	4628      	mov	r0, r5
 8003082:	f000 ff57 	bl	8003f34 <UART_printf>
					for (i=0 ; i<MxL5007_regs_num ; i++)
 8003086:	2cda      	cmp	r4, #218	; 0xda
 8003088:	f47f acf4 	bne.w	8002a74 <cmd_proc+0x16c>
 800308c:	e497      	b.n	80029be <cmd_proc+0xb6>
					UART_printf("number of diff=%d\r\n", k);
 800308e:	f24f 20ac 	movw	r0, #62124	; 0xf2ac
 8003092:	4639      	mov	r1, r7
 8003094:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003098:	f000 ff4c 	bl	8003f34 <UART_printf>
				break;
 800309c:	e48f      	b.n	80029be <cmd_proc+0xb6>
						double frequency = atof(argv[1]);
 800309e:	9816      	ldr	r0, [sp, #88]	; 0x58
 80030a0:	f005 ff04 	bl	8008eac <atof>
						double step = fabs(atof(argv[2]));
 80030a4:	9817      	ldr	r0, [sp, #92]	; 0x5c
						double frequency = atof(argv[1]);
 80030a6:	ec59 8b10 	vmov	r8, r9, d0
						double step = fabs(atof(argv[2]));
 80030aa:	f005 feff 	bl	8008eac <atof>
 80030ae:	ec53 2b10 	vmov	r2, r3, d0
 80030b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80030b6:	ee0c 3a90 	vmov	s25, r3
 80030ba:	eeb0 ca40 	vmov.f32	s24, s0
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz\r\n\r\n", frequency, step);
 80030be:	f24f 102c 	movw	r0, #61740	; 0xf12c
							UART_printf("%.6f MHz", frequency);
 80030c2:	f24f 1158 	movw	r1, #61784	; 0xf158
 80030c6:	f6c0 0100 	movt	r1, #2048	; 0x800
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz\r\n\r\n", frequency, step);
 80030ca:	4642      	mov	r2, r8
 80030cc:	464b      	mov	r3, r9
 80030ce:	eeb0 7a4c 	vmov.f32	s14, s24
 80030d2:	eef0 7a6c 	vmov.f32	s15, s25
 80030d6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80030da:	ed8d 7b00 	vstr	d7, [sp]
							UART_printf("%.6f MHz", frequency);
 80030de:	9104      	str	r1, [sp, #16]
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz\r\n\r\n", frequency, step);
 80030e0:	f000 ff28 	bl	8003f34 <UART_printf>
							MxL_Status = MxL_Tuner_RFTune(&myTuner, (uint32_t) (frequency*1.0E6), MxL_BW_6MHz);
 80030e4:	f248 4380 	movw	r3, #33920	; 0x8480
 80030e8:	2200      	movs	r2, #0
 80030ea:	f2c4 132e 	movt	r3, #16686	; 0x412e
 80030ee:	ec43 2b19 	vmov	d9, r2, r3
	return 20.0*log10f(module/120.0);
 80030f2:	f241 1311 	movw	r3, #4369	; 0x1111
 80030f6:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 80030fa:	f6c3 7381 	movt	r3, #16257	; 0x3f81
 80030fe:	ec43 2b1b 	vmov	d11, r2, r3
 8003102:	2300      	movs	r3, #0
 8003104:	2200      	movs	r2, #0
 8003106:	f2c4 0339 	movt	r3, #16441	; 0x4039
 800310a:	f10d 0641 	add.w	r6, sp, #65	; 0x41
							MxL_Status = MxL_Tuner_RFTune(&myTuner, (uint32_t) (frequency*1.0E6), MxL_BW_6MHz);
 800310e:	f640 17b0 	movw	r7, #2480	; 0x9b0
 8003112:	f640 3510 	movw	r5, #2832	; 0xb10
 8003116:	ec43 2b1d 	vmov	d13, r2, r3
 800311a:	f8dd b010 	ldr.w	fp, [sp, #16]
 800311e:	940e      	str	r4, [sp, #56]	; 0x38
 8003120:	ee0a 6a10 	vmov	s20, r6
 8003124:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8003128:	f2c2 0500 	movt	r5, #8192	; 0x2000
 800312c:	f10d 0642 	add.w	r6, sp, #66	; 0x42
 8003130:	ec53 2b19 	vmov	r2, r3, d9
 8003134:	4640      	mov	r0, r8
 8003136:	4649      	mov	r1, r9
 8003138:	f7fd fa6e 	bl	8000618 <__aeabi_dmul>
 800313c:	f7fd fd44 	bl	8000bc8 <__aeabi_d2uiz>
 8003140:	2206      	movs	r2, #6
 8003142:	4601      	mov	r1, r0
 8003144:	4638      	mov	r0, r7
 8003146:	f7ff fa1f 	bl	8002588 <MxL_Tuner_RFTune>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800314a:	2800      	cmp	r0, #0
 800314c:	d178      	bne.n	8003240 <cmd_proc+0x938>
							UART_printf("%.6f MHz", frequency);
 800314e:	4658      	mov	r0, fp
 8003150:	4642      	mov	r2, r8
 8003152:	464b      	mov	r3, r9
 8003154:	f000 feee 	bl	8003f34 <UART_printf>
							MxL_Status = MxL_RFSynth_Lock_Status(&myTuner, &RFSynthLock);
 8003158:	ee1a 1a10 	vmov	r1, s20
 800315c:	4638      	mov	r0, r7
 800315e:	f7ff fa8d 	bl	800267c <MxL_RFSynth_Lock_Status>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003162:	2800      	cmp	r0, #0
 8003164:	d169      	bne.n	800323a <cmd_proc+0x932>
							MxL_Status = MxL_REFSynth_Lock_Status(&myTuner, &REFSynthLock);
 8003166:	4631      	mov	r1, r6
 8003168:	4638      	mov	r0, r7
 800316a:	f7ff faa1 	bl	80026b0 <MxL_REFSynth_Lock_Status>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800316e:	2800      	cmp	r0, #0
 8003170:	d160      	bne.n	8003234 <cmd_proc+0x92c>
							if ( (RFSynthLock == false) || (REFSynthLock == false) )
 8003172:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 825f 	beq.w	800363a <cmd_proc+0xd32>
 800317c:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8003180:	2a00      	cmp	r2, #0
 8003182:	f000 8250 	beq.w	8003626 <cmd_proc+0xd1e>
	float module = 0;
 8003186:	2300      	movs	r3, #0
 8003188:	f640 3a1c 	movw	sl, #2844	; 0xb1c
 800318c:	ee08 3a10 	vmov	s16, r3
 8003190:	f2c2 0a00 	movt	sl, #8192	; 0x2000
 8003194:	2478      	movs	r4, #120	; 0x78
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 8003196:	edda 7a00 	vldr	s15, [sl]
 800319a:	ed95 7a00 	vldr	s14, [r5]
 800319e:	ee67 7aa7 	vmul.f32	s15, s15, s15
		HAL_Delay(1);
 80031a2:	2001      	movs	r0, #1
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 80031a4:	eee7 7a07 	vfma.f32	s15, s14, s14
 80031a8:	eeb1 7ae7 	vsqrt.f32	s14, s15
 80031ac:	ee38 8a07 	vadd.f32	s16, s16, s14
		HAL_Delay(1);
 80031b0:	f002 fa80 	bl	80056b4 <HAL_Delay>
	for (i = 0; i < 120; i++) //calculating mean module value for scan and tune commands
 80031b4:	1e63      	subs	r3, r4, #1
 80031b6:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 80031ba:	d1ec      	bne.n	8003196 <cmd_proc+0x88e>
	return 20.0*log10f(module/120.0);
 80031bc:	ee18 0a10 	vmov	r0, s16
 80031c0:	f7fd f9d2 	bl	8000568 <__aeabi_f2d>
 80031c4:	ec53 2b1b 	vmov	r2, r3, d11
 80031c8:	f7fd fa26 	bl	8000618 <__aeabi_dmul>
 80031cc:	f7fd fd1c 	bl	8000c08 <__aeabi_d2f>
 80031d0:	ee00 0a10 	vmov	s0, r0
 80031d4:	f00a fcce 	bl	800db74 <log10f>
 80031d8:	eef3 7a04 	vmov.f32	s15, #52	; 0x41a00000  20.0
							UART_printf(" ; Mod: %.2f -> n/p - next/prev step ; s - stop\r\n", calculate_mean_module());
 80031dc:	ee60 7a27 	vmul.f32	s15, s0, s15
 80031e0:	ee17 0a90 	vmov	r0, s15
 80031e4:	f7fd f9c0 	bl	8000568 <__aeabi_f2d>
 80031e8:	4602      	mov	r2, r0
 80031ea:	f24f 1064 	movw	r0, #61796	; 0xf164
 80031ee:	460b      	mov	r3, r1
 80031f0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80031f4:	f000 fe9e 	bl	8003f34 <UART_printf>
							while ( ((rxchar_loc = usart_getc()) == EOF) || ((rxchar_loc != 'n') && (rxchar_loc != 'p') && (rxchar_loc != 's')) );
 80031f8:	e004      	b.n	8003204 <cmd_proc+0x8fc>
 80031fa:	2870      	cmp	r0, #112	; 0x70
 80031fc:	d023      	beq.n	8003246 <cmd_proc+0x93e>
 80031fe:	2873      	cmp	r0, #115	; 0x73
 8003200:	f43f abdb 	beq.w	80029ba <cmd_proc+0xb2>
 8003204:	f002 f97e 	bl	8005504 <usart_getc>
 8003208:	b2c0      	uxtb	r0, r0
 800320a:	286e      	cmp	r0, #110	; 0x6e
 800320c:	d1f5      	bne.n	80031fa <cmd_proc+0x8f2>
							usart_flush_RX_buffer();
 800320e:	f002 f969 	bl	80054e4 <usart_flush_RX_buffer>
							if (rxchar_loc == 'n') frequency += step;
 8003212:	ec53 2b1c 	vmov	r2, r3, d12
 8003216:	4640      	mov	r0, r8
 8003218:	4649      	mov	r1, r9
 800321a:	f7fd f847 	bl	80002ac <__adddf3>
 800321e:	ec53 2b1d 	vmov	r2, r3, d13
 8003222:	4680      	mov	r8, r0
 8003224:	4689      	mov	r9, r1
							if (frequency < 25.0) frequency = 25.0;
 8003226:	f7fd fc7d 	bl	8000b24 <__aeabi_dcmpge>
 800322a:	2800      	cmp	r0, #0
 800322c:	d180      	bne.n	8003130 <cmd_proc+0x828>
 800322e:	ec59 8b1d 	vmov	r8, r9, d13
						} while( (rxchar_loc == 'n') || (rxchar_loc == 'p') );
 8003232:	e77d      	b.n	8003130 <cmd_proc+0x828>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003234:	f7ff faa4 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003238:	e79b      	b.n	8003172 <cmd_proc+0x86a>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800323a:	f7ff faa1 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 800323e:	e792      	b.n	8003166 <cmd_proc+0x85e>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003240:	f7ff fa9e 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003244:	e783      	b.n	800314e <cmd_proc+0x846>
							usart_flush_RX_buffer();
 8003246:	f002 f94d 	bl	80054e4 <usart_flush_RX_buffer>
							if (rxchar_loc == 'p') frequency -= step;
 800324a:	ec53 2b1c 	vmov	r2, r3, d12
 800324e:	4640      	mov	r0, r8
 8003250:	4649      	mov	r1, r9
 8003252:	f7fd f829 	bl	80002a8 <__aeabi_dsub>
 8003256:	e7e2      	b.n	800321e <cmd_proc+0x916>
						reg = (int)strtoul(argv[1], NULL, 0);
 8003258:	2200      	movs	r2, #0
 800325a:	4611      	mov	r1, r2
 800325c:	9816      	ldr	r0, [sp, #88]	; 0x58
 800325e:	f007 fc91 	bl	800ab84 <strtoul>
						data = strtoul(argv[2], NULL, 0) & 0xFF;
 8003262:	2200      	movs	r2, #0
						reg = (int)strtoul(argv[1], NULL, 0);
 8003264:	b2c4      	uxtb	r4, r0
						data = strtoul(argv[2], NULL, 0) & 0xFF;
 8003266:	4611      	mov	r1, r2
 8003268:	2cd9      	cmp	r4, #217	; 0xd9
 800326a:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800326c:	bf28      	it	cs
 800326e:	24d9      	movcs	r4, #217	; 0xd9
 8003270:	f007 fc88 	bl	800ab84 <strtoul>
 8003274:	b2c2      	uxtb	r2, r0
						MxL_Status = MxL_Set_Register(&myTuner, reg, data);
 8003276:	f640 10b0 	movw	r0, #2480	; 0x9b0
 800327a:	4621      	mov	r1, r4
 800327c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003280:	9204      	str	r2, [sp, #16]
 8003282:	f7ff f939 	bl	80024f8 <MxL_Set_Register>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003286:	9a04      	ldr	r2, [sp, #16]
 8003288:	2800      	cmp	r0, #0
 800328a:	f040 81e6 	bne.w	800365a <cmd_proc+0xd52>
						UART_printf("write: 0x%02X 0x%02lX\r\n", reg, data);
 800328e:	f24f 3010 	movw	r0, #62224	; 0xf310
 8003292:	4621      	mov	r1, r4
 8003294:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8003298:	b01b      	add	sp, #108	; 0x6c
 800329a:	ecbd 8b0c 	vpop	{d8-d13}
 800329e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
						UART_printf("write: 0x%02X 0x%02lX\r\n", reg, data);
 80032a2:	f000 be47 	b.w	8003f34 <UART_printf>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80032a6:	f7ff fa6b 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 80032aa:	e409      	b.n	8002ac0 <cmd_proc+0x1b8>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80032ac:	f7ff fa68 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 80032b0:	e572      	b.n	8002d98 <cmd_proc+0x490>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80032b2:	f7ff fa65 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 80032b6:	e564      	b.n	8002d82 <cmd_proc+0x47a>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80032b8:	f7ff fa62 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 80032bc:	e556      	b.n	8002d6c <cmd_proc+0x464>
					if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80032be:	f7ff fa5f 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 80032c2:	e545      	b.n	8002d50 <cmd_proc+0x448>
						UART_printf("volume - missing arg(s)\r\n");
 80032c4:	f24f 002c 	movw	r0, #61484	; 0xf02c
 80032c8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80032cc:	f7ff bb80 	b.w	80029d0 <cmd_proc+0xc8>
						double frequency = atof(argv[1]);
 80032d0:	9816      	ldr	r0, [sp, #88]	; 0x58
 80032d2:	f005 fdeb 	bl	8008eac <atof>
						double step = fabs(atof(argv[2]));
 80032d6:	9817      	ldr	r0, [sp, #92]	; 0x5c
						double frequency = atof(argv[1]);
 80032d8:	ec59 8b10 	vmov	r8, r9, d0
						double step = fabs(atof(argv[2]));
 80032dc:	f005 fde6 	bl	8008eac <atof>
 80032e0:	ec53 2b10 	vmov	r2, r3, d0
						float module_threshold = atof(argv[3]);
 80032e4:	9818      	ldr	r0, [sp, #96]	; 0x60
						double step = fabs(atof(argv[2]));
 80032e6:	ed8d 0a04 	vstr	s0, [sp, #16]
 80032ea:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032ee:	9305      	str	r3, [sp, #20]
						float module_threshold = atof(argv[3]);
 80032f0:	f005 fddc 	bl	8008eac <atof>
 80032f4:	ec51 0b10 	vmov	r0, r1, d0
 80032f8:	f7fd fc86 	bl	8000c08 <__aeabi_d2f>
 80032fc:	ee08 0a90 	vmov	s17, r0
						uint8_t Mute_Dis_Ena = atof(argv[4]);
 8003300:	9819      	ldr	r0, [sp, #100]	; 0x64
 8003302:	f005 fdd3 	bl	8008eac <atof>
 8003306:	ec51 0b10 	vmov	r0, r1, d0
 800330a:	f7fd fc5d 	bl	8000bc8 <__aeabi_d2uiz>
 800330e:	b2c5      	uxtb	r5, r0
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz ; Mod_thresh: %.2f ; s - stop ; p - pause\r\n\r\n", frequency, step, module_threshold);
 8003310:	ee18 0a90 	vmov	r0, s17
						uint8_t Mute_Dis_Ena = atof(argv[4]);
 8003314:	950e      	str	r5, [sp, #56]	; 0x38
						UART_printf("start_freq: %.6f MHz ; step: %.6f MHz ; Mod_thresh: %.2f ; s - stop ; p - pause\r\n\r\n", frequency, step, module_threshold);
 8003316:	f7fd f927 	bl	8000568 <__aeabi_f2d>
 800331a:	ed9d 7b04 	vldr	d7, [sp, #16]
 800331e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003322:	f24f 10b0 	movw	r0, #61872	; 0xf1b0
 8003326:	ed8d 7b00 	vstr	d7, [sp]
 800332a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800332e:	4642      	mov	r2, r8
 8003330:	464b      	mov	r3, r9
 8003332:	f000 fdff 	bl	8003f34 <UART_printf>
						if (Mute_Dis_Ena == 1) CS43_Mute();
 8003336:	2d01      	cmp	r5, #1
 8003338:	f000 81a1 	beq.w	800367e <cmd_proc+0xd76>
 800333c:	f10d 0341 	add.w	r3, sp, #65	; 0x41
 8003340:	ee0a 3a10 	vmov	s20, r3
							MxL_Status = MxL_Tuner_RFTune(&myTuner, (uint32_t) (frequency*1.0E6), MxL_BW_6MHz);
 8003344:	f248 4380 	movw	r3, #33920	; 0x8480
 8003348:	2200      	movs	r2, #0
 800334a:	f2c4 132e 	movt	r3, #16686	; 0x412e
 800334e:	ec43 2b1b 	vmov	d11, r2, r3
	return 20.0*log10f(module/120.0);
 8003352:	f241 1311 	movw	r3, #4369	; 0x1111
 8003356:	f04f 3211 	mov.w	r2, #286331153	; 0x11111111
 800335a:	f6c3 7381 	movt	r3, #16257	; 0x3f81
 800335e:	ec43 2b1c 	vmov	d12, r2, r3
 8003362:	2300      	movs	r3, #0
							UART_printf("SCANNING: %.6f MHz", frequency);
 8003364:	f24f 2104 	movw	r1, #61956	; 0xf204
 8003368:	2200      	movs	r2, #0
 800336a:	f2c4 033e 	movt	r3, #16446	; 0x403e
							MxL_Status = MxL_Tuner_RFTune(&myTuner, (uint32_t) (frequency*1.0E6), MxL_BW_6MHz);
 800336e:	f640 17b0 	movw	r7, #2480	; 0x9b0
							UART_printf("SCANNING: %.6f MHz", frequency);
 8003372:	f6c0 0100 	movt	r1, #2048	; 0x800
 8003376:	f640 3510 	movw	r5, #2832	; 0xb10
 800337a:	ec43 2b19 	vmov	d9, r2, r3
							MxL_Status = MxL_Tuner_RFTune(&myTuner, (uint32_t) (frequency*1.0E6), MxL_BW_6MHz);
 800337e:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8003382:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8003386:	f10d 0642 	add.w	r6, sp, #66	; 0x42
 800338a:	940f      	str	r4, [sp, #60]	; 0x3c
 800338c:	468b      	mov	fp, r1
 800338e:	ec53 2b1b 	vmov	r2, r3, d11
 8003392:	4640      	mov	r0, r8
 8003394:	4649      	mov	r1, r9
 8003396:	f7fd f93f 	bl	8000618 <__aeabi_dmul>
 800339a:	f7fd fc15 	bl	8000bc8 <__aeabi_d2uiz>
 800339e:	2206      	movs	r2, #6
 80033a0:	4601      	mov	r1, r0
 80033a2:	4638      	mov	r0, r7
 80033a4:	f7ff f8f0 	bl	8002588 <MxL_Tuner_RFTune>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80033a8:	2800      	cmp	r0, #0
 80033aa:	f040 80b3 	bne.w	8003514 <cmd_proc+0xc0c>
							UART_printf("SCANNING: %.6f MHz", frequency);
 80033ae:	4658      	mov	r0, fp
 80033b0:	4642      	mov	r2, r8
 80033b2:	464b      	mov	r3, r9
 80033b4:	f000 fdbe 	bl	8003f34 <UART_printf>
							MxL_Status = MxL_RFSynth_Lock_Status(&myTuner, &RFSynthLock);
 80033b8:	ee1a 1a10 	vmov	r1, s20
 80033bc:	4638      	mov	r0, r7
 80033be:	f7ff f95d 	bl	800267c <MxL_RFSynth_Lock_Status>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80033c2:	2800      	cmp	r0, #0
 80033c4:	f040 80a3 	bne.w	800350e <cmd_proc+0xc06>
							MxL_Status = MxL_REFSynth_Lock_Status(&myTuner, &REFSynthLock);
 80033c8:	4631      	mov	r1, r6
 80033ca:	4638      	mov	r0, r7
 80033cc:	f7ff f970 	bl	80026b0 <MxL_REFSynth_Lock_Status>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80033d0:	2800      	cmp	r0, #0
 80033d2:	f040 80a2 	bne.w	800351a <cmd_proc+0xc12>
							MxL_Status = MxL_REFSynth_Lock_Status(&myTuner, &REFSynthLock);
 80033d6:	4631      	mov	r1, r6
 80033d8:	4638      	mov	r0, r7
 80033da:	f7ff f969 	bl	80026b0 <MxL_REFSynth_Lock_Status>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 80033de:	2800      	cmp	r0, #0
 80033e0:	f040 8092 	bne.w	8003508 <cmd_proc+0xc00>
							if ( (RFSynthLock == false) || (REFSynthLock == false) )
 80033e4:	f89d 3041 	ldrb.w	r3, [sp, #65]	; 0x41
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f000 8144 	beq.w	8003676 <cmd_proc+0xd6e>
 80033ee:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 80033f2:	2a00      	cmp	r2, #0
 80033f4:	f000 8135 	beq.w	8003662 <cmd_proc+0xd5a>
							HAL_Delay(200);
 80033f8:	20c8      	movs	r0, #200	; 0xc8
 80033fa:	f002 f95b 	bl	80056b4 <HAL_Delay>
	float module = 0;
 80033fe:	2300      	movs	r3, #0
 8003400:	f640 3a1c 	movw	sl, #2844	; 0xb1c
 8003404:	ee08 3a10 	vmov	s16, r3
 8003408:	f2c2 0a00 	movt	sl, #8192	; 0x2000
							HAL_Delay(200);
 800340c:	2478      	movs	r4, #120	; 0x78
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 800340e:	edda 7a00 	vldr	s15, [sl]
 8003412:	ed95 7a00 	vldr	s14, [r5]
 8003416:	ee67 7aa7 	vmul.f32	s15, s15, s15
		HAL_Delay(1);
 800341a:	2001      	movs	r0, #1
		module += sqrtf(I*I + Q*Q); //it's poor solution but that's not enough computing power for doing it real time in ADC's callbacks
 800341c:	eee7 7a07 	vfma.f32	s15, s14, s14
 8003420:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8003424:	ee38 8a07 	vadd.f32	s16, s16, s14
		HAL_Delay(1);
 8003428:	f002 f944 	bl	80056b4 <HAL_Delay>
	for (i = 0; i < 120; i++) //calculating mean module value for scan and tune commands
 800342c:	1e63      	subs	r3, r4, #1
 800342e:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
 8003432:	d1ec      	bne.n	800340e <cmd_proc+0xb06>
	return 20.0*log10f(module/120.0);
 8003434:	ee18 0a10 	vmov	r0, s16
 8003438:	f7fd f896 	bl	8000568 <__aeabi_f2d>
 800343c:	ec53 2b1c 	vmov	r2, r3, d12
 8003440:	f7fd f8ea 	bl	8000618 <__aeabi_dmul>
 8003444:	f7fd fbe0 	bl	8000c08 <__aeabi_d2f>
 8003448:	ee00 0a10 	vmov	s0, r0
 800344c:	f00a fb92 	bl	800db74 <log10f>
 8003450:	eeb3 8a04 	vmov.f32	s16, #52	; 0x41a00000  20.0
 8003454:	ee20 8a08 	vmul.f32	s16, s0, s16
							UART_printf(" ; Mod: %.2f\r\n", module);
 8003458:	ee18 0a10 	vmov	r0, s16
 800345c:	f7fd f884 	bl	8000568 <__aeabi_f2d>
 8003460:	4602      	mov	r2, r0
 8003462:	f24f 2018 	movw	r0, #61976	; 0xf218
 8003466:	460b      	mov	r3, r1
 8003468:	f6c0 0000 	movt	r0, #2048	; 0x800
 800346c:	f000 fd62 	bl	8003f34 <UART_printf>
							led_toggle(LED1);
 8003470:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003474:	f000 f9cc 	bl	8003810 <led_toggle>
							if((rxchar_loc = usart_getc())!= EOF)
 8003478:	f002 f844 	bl	8005504 <usart_getc>
 800347c:	b2c3      	uxtb	r3, r0
								if (rxchar_loc == 's') break;
 800347e:	2b73      	cmp	r3, #115	; 0x73
 8003480:	f43f abdc 	beq.w	8002c3c <cmd_proc+0x334>
								if (rxchar_loc == 'p')
 8003484:	2b70      	cmp	r3, #112	; 0x70
 8003486:	d04b      	beq.n	8003520 <cmd_proc+0xc18>
							if (module > module_threshold)
 8003488:	eef4 8ac8 	vcmpe.f32	s17, s16
 800348c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003490:	d525      	bpl.n	80034de <cmd_proc+0xbd6>
								if (Mute_Dis_Ena == 1) CS43_Unmute();
 8003492:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003494:	2b01      	cmp	r3, #1
 8003496:	f000 808a 	beq.w	80035ae <cmd_proc+0xca6>
								UART_printf("***SCANNING HAS STOPPED***");
 800349a:	f24f 2064 	movw	r0, #62052	; 0xf264
 800349e:	f6c0 0000 	movt	r0, #2048	; 0x800
 80034a2:	f000 fd47 	bl	8003f34 <UART_printf>
	UART_printf(" -> u/d - up/down ; s - stop\r\n\r\n");
 80034a6:	f24f 2040 	movw	r0, #62016	; 0xf240
 80034aa:	f6c0 0000 	movt	r0, #2048	; 0x800
 80034ae:	f000 fd41 	bl	8003f34 <UART_printf>
	while ( ((rxchar_loc = usart_getc()) == EOF) || ((rxchar_loc != 'u') && (rxchar_loc != 'd') && (rxchar_loc != 's')) );
 80034b2:	e003      	b.n	80034bc <cmd_proc+0xbb4>
 80034b4:	2864      	cmp	r0, #100	; 0x64
 80034b6:	d060      	beq.n	800357a <cmd_proc+0xc72>
 80034b8:	2873      	cmp	r0, #115	; 0x73
 80034ba:	d057      	beq.n	800356c <cmd_proc+0xc64>
 80034bc:	f002 f822 	bl	8005504 <usart_getc>
 80034c0:	b2c0      	uxtb	r0, r0
 80034c2:	2875      	cmp	r0, #117	; 0x75
 80034c4:	d1f6      	bne.n	80034b4 <cmd_proc+0xbac>
	if (rxchar_loc == 'u') *step = fabs(*step);
 80034c6:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 80034ca:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80034ce:	9106      	str	r1, [sp, #24]
 80034d0:	9307      	str	r3, [sp, #28]
 80034d2:	ed9d 7b06 	vldr	d7, [sp, #24]
 80034d6:	ed8d 7b04 	vstr	d7, [sp, #16]
	usart_flush_RX_buffer();
 80034da:	f002 f803 	bl	80054e4 <usart_flush_RX_buffer>
							if (Mute_Dis_Ena == 1) CS43_Mute();
 80034de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80034e0:	2b01      	cmp	r3, #1
 80034e2:	d047      	beq.n	8003574 <cmd_proc+0xc6c>
							frequency += step;
 80034e4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80034e8:	4640      	mov	r0, r8
 80034ea:	4649      	mov	r1, r9
 80034ec:	f7fc fede 	bl	80002ac <__adddf3>
 80034f0:	ec53 2b19 	vmov	r2, r3, d9
 80034f4:	4680      	mov	r8, r0
 80034f6:	4689      	mov	r9, r1
							if (frequency < 30.0) frequency = 30.0;
 80034f8:	f7fd fb14 	bl	8000b24 <__aeabi_dcmpge>
 80034fc:	2800      	cmp	r0, #0
 80034fe:	f47f af46 	bne.w	800338e <cmd_proc+0xa86>
 8003502:	ec59 8b19 	vmov	r8, r9, d9
 8003506:	e742      	b.n	800338e <cmd_proc+0xa86>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003508:	f7ff f93a 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 800350c:	e76a      	b.n	80033e4 <cmd_proc+0xadc>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800350e:	f7ff f937 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003512:	e759      	b.n	80033c8 <cmd_proc+0xac0>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003514:	f7ff f934 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003518:	e749      	b.n	80033ae <cmd_proc+0xaa6>
							if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800351a:	f7ff f931 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 800351e:	e75a      	b.n	80033d6 <cmd_proc+0xace>
									if (Mute_Dis_Ena == 1) CS43_Unmute();
 8003520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003522:	2b01      	cmp	r3, #1
 8003524:	d06b      	beq.n	80035fe <cmd_proc+0xcf6>
									UART_printf("***SCANNING PAUSED***");
 8003526:	f24f 2028 	movw	r0, #61992	; 0xf228
 800352a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800352e:	f000 fd01 	bl	8003f34 <UART_printf>
	UART_printf(" -> u/d - up/down ; s - stop\r\n\r\n");
 8003532:	f24f 2040 	movw	r0, #62016	; 0xf240
 8003536:	f6c0 0000 	movt	r0, #2048	; 0x800
 800353a:	f000 fcfb 	bl	8003f34 <UART_printf>
	while ( ((rxchar_loc = usart_getc()) == EOF) || ((rxchar_loc != 'u') && (rxchar_loc != 'd') && (rxchar_loc != 's')) );
 800353e:	e003      	b.n	8003548 <cmd_proc+0xc40>
 8003540:	2864      	cmp	r0, #100	; 0x64
 8003542:	d027      	beq.n	8003594 <cmd_proc+0xc8c>
 8003544:	2873      	cmp	r0, #115	; 0x73
 8003546:	d011      	beq.n	800356c <cmd_proc+0xc64>
 8003548:	f001 ffdc 	bl	8005504 <usart_getc>
 800354c:	b2c0      	uxtb	r0, r0
 800354e:	2875      	cmp	r0, #117	; 0x75
 8003550:	d1f6      	bne.n	8003540 <cmd_proc+0xc38>
	if (rxchar_loc == 'u') *step = fabs(*step);
 8003552:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8003556:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800355a:	9108      	str	r1, [sp, #32]
 800355c:	9309      	str	r3, [sp, #36]	; 0x24
 800355e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8003562:	ed8d 7b04 	vstr	d7, [sp, #16]
	usart_flush_RX_buffer();
 8003566:	f001 ffbd 	bl	80054e4 <usart_flush_RX_buffer>
	return rxchar_loc;
 800356a:	e78d      	b.n	8003488 <cmd_proc+0xb80>
	usart_flush_RX_buffer();
 800356c:	f001 ffba 	bl	80054e4 <usart_flush_RX_buffer>
	return rxchar_loc;
 8003570:	f7ff bb64 	b.w	8002c3c <cmd_proc+0x334>
							if (Mute_Dis_Ena == 1) CS43_Mute();
 8003574:	f7fe f836 	bl	80015e4 <CS43_Mute>
 8003578:	e7b4      	b.n	80034e4 <cmd_proc+0xbdc>
	if (rxchar_loc == 'd') *step *= -1;
 800357a:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 800357e:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 8003582:	910a      	str	r1, [sp, #40]	; 0x28
 8003584:	930b      	str	r3, [sp, #44]	; 0x2c
 8003586:	ed9d 7b0a 	vldr	d7, [sp, #40]	; 0x28
 800358a:	ed8d 7b04 	vstr	d7, [sp, #16]
	usart_flush_RX_buffer();
 800358e:	f001 ffa9 	bl	80054e4 <usart_flush_RX_buffer>
	return rxchar_loc;
 8003592:	e7a4      	b.n	80034de <cmd_proc+0xbd6>
	if (rxchar_loc == 'd') *step *= -1;
 8003594:	e9dd 1204 	ldrd	r1, r2, [sp, #16]
 8003598:	f102 4300 	add.w	r3, r2, #2147483648	; 0x80000000
 800359c:	910c      	str	r1, [sp, #48]	; 0x30
 800359e:	930d      	str	r3, [sp, #52]	; 0x34
 80035a0:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 80035a4:	ed8d 7b04 	vstr	d7, [sp, #16]
	usart_flush_RX_buffer();
 80035a8:	f001 ff9c 	bl	80054e4 <usart_flush_RX_buffer>
	return rxchar_loc;
 80035ac:	e76c      	b.n	8003488 <cmd_proc+0xb80>
								if (Mute_Dis_Ena == 1) CS43_Unmute();
 80035ae:	f7fe f877 	bl	80016a0 <CS43_Unmute>
 80035b2:	e772      	b.n	800349a <cmd_proc+0xb92>
						UART_printf("read - missing arg(s)\r\n");
 80035b4:	f24f 20c0 	movw	r0, #62144	; 0xf2c0
 80035b8:	f6c0 0000 	movt	r0, #2048	; 0x800
 80035bc:	f7ff ba08 	b.w	80029d0 <cmd_proc+0xc8>
 80035c0:	f24c 238f 	movw	r3, #49807	; 0xc28f
 80035c4:	f64b 0751 	movw	r7, #47185	; 0xb851
 80035c8:	f64f 25e1 	movw	r5, #64225	; 0xfae1
 80035cc:	f2cb 4375 	movt	r3, #46197	; 0xb475
 80035d0:	ee08 3a10 	vmov	s16, r3
 80035d4:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
 80035d8:	f6cb 678e 	movt	r7, #48782	; 0xbe8e
 80035dc:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
 80035e0:	f2c4 0526 	movt	r5, #16422	; 0x4026
 80035e4:	e466      	b.n	8002eb4 <cmd_proc+0x5ac>
						UART_printf("set_gain - missing arg(s)\r\n");
 80035e6:	f64e 70c0 	movw	r0, #61376	; 0xefc0
 80035ea:	f6c0 0000 	movt	r0, #2048	; 0x800
 80035ee:	f7ff b9ef 	b.w	80029d0 <cmd_proc+0xc8>
						UART_printf("freq - missing arg(s)\r\n");
 80035f2:	f64e 707c 	movw	r0, #61308	; 0xef7c
 80035f6:	f6c0 0000 	movt	r0, #2048	; 0x800
 80035fa:	f7ff b9e9 	b.w	80029d0 <cmd_proc+0xc8>
									if (Mute_Dis_Ena == 1) CS43_Unmute();
 80035fe:	f7fe f84f 	bl	80016a0 <CS43_Unmute>
 8003602:	e790      	b.n	8003526 <cmd_proc+0xc1e>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003604:	f7ff f8bc 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003608:	f7ff bb58 	b.w	8002cbc <cmd_proc+0x3b4>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800360c:	f7ff f8b8 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003610:	f7ff bb49 	b.w	8002ca6 <cmd_proc+0x39e>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003614:	f7ff f8b4 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003618:	f7ff bb32 	b.w	8002c80 <cmd_proc+0x378>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800361c:	f7ff f8b0 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 8003620:	9904      	ldr	r1, [sp, #16]
 8003622:	f7ff ba6f 	b.w	8002b04 <cmd_proc+0x1fc>
 8003626:	2401      	movs	r4, #1
								UART_printf("\r\nrfLock=%d   refLock=%d\r\n", RFSynthLock, REFSynthLock);
 8003628:	f64e 70a4 	movw	r0, #61348	; 0xefa4
 800362c:	4621      	mov	r1, r4
 800362e:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003632:	f000 fc7f 	bl	8003f34 <UART_printf>
								break;
 8003636:	f7ff b9c2 	b.w	80029be <cmd_proc+0xb6>
							if ( (RFSynthLock == false) || (REFSynthLock == false) )
 800363a:	9c0e      	ldr	r4, [sp, #56]	; 0x38
 800363c:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 8003640:	e7f2      	b.n	8003628 <cmd_proc+0xd20>
						UART_printf("demod_type - missing arg(s)\r\n");
 8003642:	f24f 007c 	movw	r0, #61564	; 0xf07c
 8003646:	f6c0 0000 	movt	r0, #2048	; 0x800
 800364a:	f7ff b9c1 	b.w	80029d0 <cmd_proc+0xc8>
							UART_printf("demod_type - unknown type param\r\n");
 800364e:	f24f 3060 	movw	r0, #62304	; 0xf360
 8003652:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003656:	f7ff b9bb 	b.w	80029d0 <cmd_proc+0xc8>
						if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 800365a:	f7ff f891 	bl	8002780 <MxL_TIMEOUT_UserCallback>
 800365e:	9a04      	ldr	r2, [sp, #16]
 8003660:	e615      	b.n	800328e <cmd_proc+0x986>
 8003662:	2401      	movs	r4, #1
								UART_printf("\r\nrfLock=%d   refLock=%d\r\n", RFSynthLock, REFSynthLock);
 8003664:	f64e 70a4 	movw	r0, #61348	; 0xefa4
 8003668:	4621      	mov	r1, r4
 800366a:	f6c0 0000 	movt	r0, #2048	; 0x800
 800366e:	f000 fc61 	bl	8003f34 <UART_printf>
								break;
 8003672:	f7ff bae3 	b.w	8002c3c <cmd_proc+0x334>
							if ( (RFSynthLock == false) || (REFSynthLock == false) )
 8003676:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 8003678:	f89d 2042 	ldrb.w	r2, [sp, #66]	; 0x42
 800367c:	e7f2      	b.n	8003664 <cmd_proc+0xd5c>
						if (Mute_Dis_Ena == 1) CS43_Mute();
 800367e:	f7fd ffb1 	bl	80015e4 <CS43_Mute>
 8003682:	e65b      	b.n	800333c <cmd_proc+0xa34>
										CW_trig_lower_level = (int)strtoul(argv[2], NULL, 0) & 0xFF; //trigger lower level
 8003684:	2200      	movs	r2, #0
 8003686:	4611      	mov	r1, r2
 8003688:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800368a:	f007 fa7b 	bl	800ab84 <strtoul>
 800368e:	f240 0758 	movw	r7, #88	; 0x58
										CW_trig_upper_level = CW_trig_lower_level + ((int)strtoul(argv[3], NULL, 0) & 0xFF); //trigger lower level + hyst
 8003692:	2200      	movs	r2, #0
										CW_trig_lower_level = (int)strtoul(argv[2], NULL, 0) & 0xFF; //trigger lower level
 8003694:	f2c2 0700 	movt	r7, #8192	; 0x2000
 8003698:	b2c6      	uxtb	r6, r0
										CW_trig_upper_level = CW_trig_lower_level + ((int)strtoul(argv[3], NULL, 0) & 0xFF); //trigger lower level + hyst
 800369a:	4611      	mov	r1, r2
 800369c:	9818      	ldr	r0, [sp, #96]	; 0x60
										CW_trig_lower_level = (int)strtoul(argv[2], NULL, 0) & 0xFF; //trigger lower level
 800369e:	703e      	strb	r6, [r7, #0]
										CW_trig_upper_level = CW_trig_lower_level + ((int)strtoul(argv[3], NULL, 0) & 0xFF); //trigger lower level + hyst
 80036a0:	f007 fa70 	bl	800ab84 <strtoul>
 80036a4:	f240 035a 	movw	r3, #90	; 0x5a
 80036a8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036ac:	fa56 f280 	uxtab	r2, r6, r0
 80036b0:	801a      	strh	r2, [r3, #0]
		a[3] = a3__15kHz;
 80036b2:	f24e 33d7 	movw	r3, #58327	; 0xe3d7
 80036b6:	f2c4 0395 	movt	r3, #16533	; 0x4095
 80036ba:	4699      	mov	r9, r3
		a[4] = a4__15kHz;
 80036bc:	f64d 632a 	movw	r3, #56874	; 0xde2a
 80036c0:	f6cb 736c 	movt	r3, #49004	; 0xbf6c
 80036c4:	461e      	mov	r6, r3
		b[0] = b0__15kHz;
 80036c6:	f640 3370 	movw	r3, #2928	; 0xb70
 80036ca:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80036ce:	f64c 3528 	movw	r5, #52008	; 0xcb28
		b[1] = b1__15kHz;
 80036d2:	f643 54f3 	movw	r4, #15859	; 0x3df3
		b[2] = b2__15kHz;
 80036d6:	f643 50f3 	movw	r0, #15859	; 0x3df3
 80036da:	f2c3 40d4 	movt	r0, #13524	; 0x34d4
		b[0] = b0__15kHz;
 80036de:	f2c3 3529 	movt	r5, #13097	; 0x3329
		b[1] = b1__15kHz;
 80036e2:	f2c3 4454 	movt	r4, #13396	; 0x3454
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 80036e6:	7839      	ldrb	r1, [r7, #0]
		b[2] = b2__15kHz;
 80036e8:	6098      	str	r0, [r3, #8]
		b[3] = b3__15kHz;
 80036ea:	60d8      	str	r0, [r3, #12]
		b[0] = b0__15kHz;
 80036ec:	601d      	str	r5, [r3, #0]
		b[1] = b1__15kHz;
 80036ee:	605c      	str	r4, [r3, #4]
		b[4] = b4__15kHz;
 80036f0:	611c      	str	r4, [r3, #16]
		b[5] = b5__15kHz;
 80036f2:	615d      	str	r5, [r3, #20]
		a[0] = a0__15kHz;
 80036f4:	f640 335c 	movw	r3, #2908	; 0xb5c
 80036f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
										Demod_Type = DEMOD_CW;
 80036fc:	f640 3e0e 	movw	lr, #2830	; 0xb0e
		a[0] = a0__15kHz;
 8003700:	f640 1843 	movw	r8, #2371	; 0x943
		a[1] = a1__15kHz;
 8003704:	f645 7cae 	movw	ip, #24494	; 0x5fae
		a[2] = a2__15kHz;
 8003708:	f64f 7714 	movw	r7, #65300	; 0xff14
										Demod_Type = DEMOD_CW;
 800370c:	f2c2 0e00 	movt	lr, #8192	; 0x2000
		a[0] = a0__15kHz;
 8003710:	f2cc 089d 	movt	r8, #49309	; 0xc09d
		a[1] = a1__15kHz;
 8003714:	f2c4 1c1a 	movt	ip, #16666	; 0x411a
		a[2] = a2__15kHz;
 8003718:	f2cc 1717 	movt	r7, #49431	; 0xc117
		a[0] = a0__15kHz;
 800371c:	f8c3 8000 	str.w	r8, [r3]
		a[1] = a1__15kHz;
 8003720:	f8c3 c004 	str.w	ip, [r3, #4]
		a[2] = a2__15kHz;
 8003724:	609f      	str	r7, [r3, #8]
		a[3] = a3__15kHz;
 8003726:	f8c3 900c 	str.w	r9, [r3, #12]
		a[4] = a4__15kHz;
 800372a:	611e      	str	r6, [r3, #16]
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 800372c:	f24f 00fc 	movw	r0, #61692	; 0xf0fc
										Demod_Type = DEMOD_CW;
 8003730:	2303      	movs	r3, #3
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 8003732:	1a52      	subs	r2, r2, r1
 8003734:	f6c0 0000 	movt	r0, #2048	; 0x800
										Demod_Type = DEMOD_CW;
 8003738:	f88e 3000 	strb.w	r3, [lr]
										UART_printf("demod_type: CW %d %d\r\n", CW_trig_lower_level, CW_trig_upper_level-CW_trig_lower_level);
 800373c:	e5ac      	b.n	8003298 <cmd_proc+0x990>
						float MxL_gain = Total_Gain - (IF_Gain + Attenuation);
 800373e:	4632      	mov	r2, r6
 8003740:	463b      	mov	r3, r7
 8003742:	4620      	mov	r0, r4
 8003744:	4629      	mov	r1, r5
 8003746:	f7fc fdaf 	bl	80002a8 <__aeabi_dsub>
 800374a:	f7fd fa5d 	bl	8000c08 <__aeabi_d2f>
 800374e:	ee08 0a10 	vmov	s16, r0
						UART_printf("set_gain:  MxL->%.2f dB  Total->%.2f dB\r\n", MxL_gain, Total_Gain);
 8003752:	f7fc ff09 	bl	8000568 <__aeabi_f2d>
 8003756:	4606      	mov	r6, r0
 8003758:	460f      	mov	r7, r1
 800375a:	f7ff bbab 	b.w	8002eb4 <cmd_proc+0x5ac>
 800375e:	bf00      	nop

08003760 <init_cmd>:
	cmd_wptr = &cmd_buffer[0];
 8003760:	f240 330c 	movw	r3, #780	; 0x30c
 8003764:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003768:	f240 22bc 	movw	r2, #700	; 0x2bc
	UART_printf("\r\nCommand>");
 800376c:	f64e 4028 	movw	r0, #60456	; 0xec28
	cmd_wptr = &cmd_buffer[0];
 8003770:	f2c2 0200 	movt	r2, #8192	; 0x2000
	UART_printf("\r\nCommand>");
 8003774:	f6c0 0000 	movt	r0, #2048	; 0x800
	cmd_wptr = &cmd_buffer[0];
 8003778:	601a      	str	r2, [r3, #0]
	UART_printf("\r\nCommand>");
 800377a:	f000 bbdb 	b.w	8003f34 <UART_printf>
 800377e:	bf00      	nop

08003780 <cmd_parse>:
}

void cmd_parse(char ch)
{
	/* accumulate chars until cr, handle backspace */
	if(ch == '\b')
 8003780:	2808      	cmp	r0, #8
{
 8003782:	b510      	push	{r4, lr}
	if(ch == '\b')
 8003784:	d00e      	beq.n	80037a4 <cmd_parse+0x24>
		{
			UART_printf("\b \b");		/* Erase & backspace */
			cmd_wptr--;		/* remove previous char */
		}
	}
	else if(ch == '\r')
 8003786:	280d      	cmp	r0, #13
 8003788:	d02b      	beq.n	80037e2 <cmd_parse+0x62>
		cmd_prompt();
	}
	else
	{
		/* check for buffer full (leave room for null) */
		if(cmd_wptr - &cmd_buffer[0] < 254)
 800378a:	f240 320c 	movw	r2, #780	; 0x30c
 800378e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8003792:	f240 23bc 	movw	r3, #700	; 0x2bc
 8003796:	6814      	ldr	r4, [r2, #0]
 8003798:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800379c:	1ae3      	subs	r3, r4, r3
 800379e:	2bfd      	cmp	r3, #253	; 0xfd
 80037a0:	dd16      	ble.n	80037d0 <cmd_parse+0x50>
		{
			*cmd_wptr++ = ch;	/* store to buffer */
			usart_putc(NULL, ch);   /* echo */
		}
	}
}
 80037a2:	bd10      	pop	{r4, pc}
		if(cmd_wptr - &cmd_buffer[0] > 0)
 80037a4:	f240 340c 	movw	r4, #780	; 0x30c
 80037a8:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80037ac:	f240 22bc 	movw	r2, #700	; 0x2bc
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80037b6:	1a9b      	subs	r3, r3, r2
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	ddf2      	ble.n	80037a2 <cmd_parse+0x22>
			UART_printf("\b \b");		/* Erase & backspace */
 80037bc:	f24f 30a8 	movw	r0, #62376	; 0xf3a8
 80037c0:	f6c0 0000 	movt	r0, #2048	; 0x800
 80037c4:	f000 fbb6 	bl	8003f34 <UART_printf>
			cmd_wptr--;		/* remove previous char */
 80037c8:	6823      	ldr	r3, [r4, #0]
 80037ca:	3b01      	subs	r3, #1
 80037cc:	6023      	str	r3, [r4, #0]
}
 80037ce:	bd10      	pop	{r4, pc}
			*cmd_wptr++ = ch;	/* store to buffer */
 80037d0:	1c63      	adds	r3, r4, #1
 80037d2:	6013      	str	r3, [r2, #0]
 80037d4:	7020      	strb	r0, [r4, #0]
			usart_putc(NULL, ch);   /* echo */
 80037d6:	4601      	mov	r1, r0
}
 80037d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			usart_putc(NULL, ch);   /* echo */
 80037dc:	2000      	movs	r0, #0
 80037de:	f001 beaf 	b.w	8005540 <usart_putc>
		*cmd_wptr = '\0';	/* null terminate, no inc */
 80037e2:	f240 340c 	movw	r4, #780	; 0x30c
 80037e6:	f2c2 0400 	movt	r4, #8192	; 0x2000
 80037ea:	2200      	movs	r2, #0
 80037ec:	6823      	ldr	r3, [r4, #0]
 80037ee:	701a      	strb	r2, [r3, #0]
		cmd_proc();
 80037f0:	f7ff f88a 	bl	8002908 <cmd_proc>
	cmd_wptr = &cmd_buffer[0];
 80037f4:	f240 23bc 	movw	r3, #700	; 0x2bc
	UART_printf("\r\nCommand>");
 80037f8:	f64e 4028 	movw	r0, #60456	; 0xec28
	cmd_wptr = &cmd_buffer[0];
 80037fc:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003800:	6023      	str	r3, [r4, #0]
	UART_printf("\r\nCommand>");
 8003802:	f6c0 0000 	movt	r0, #2048	; 0x800
}
 8003806:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	UART_printf("\r\nCommand>");
 800380a:	f000 bb93 	b.w	8003f34 <UART_printf>
 800380e:	bf00      	nop

08003810 <led_toggle>:

/*
 * Toggle LED
 */
void led_toggle(uint16_t LED)
{
 8003810:	4601      	mov	r1, r0
	HAL_GPIO_TogglePin(LED_LD4_GPIO_Port, LED);
 8003812:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003816:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800381a:	f002 be19 	b.w	8006450 <HAL_GPIO_TogglePin>
 800381e:	bf00      	nop

08003820 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003820:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003822:	2300      	movs	r3, #0
{
 8003824:	b095      	sub	sp, #84	; 0x54
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003826:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 800382a:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800382e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003832:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003836:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800383a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 800383e:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003840:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	6c08      	ldr	r0, [r1, #64]	; 0x40
 8003844:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8003848:	6408      	str	r0, [r1, #64]	; 0x40
 800384a:	6c09      	ldr	r1, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800384c:	f44f 42e0 	mov.w	r2, #28672	; 0x7000
  __HAL_RCC_PWR_CLK_ENABLE();
 8003850:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8003854:	9100      	str	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003856:	f2c4 0200 	movt	r2, #16384	; 0x4000
  __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800385c:	9301      	str	r3, [sp, #4]
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003864:	6013      	str	r3, [r2, #0]
 8003866:	6813      	ldr	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003868:	2102      	movs	r1, #2
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800386a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800386e:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003872:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003874:	9301      	str	r3, [sp, #4]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003876:	2401      	movs	r4, #1
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003878:	e9cd 100e 	strd	r1, r0, [sp, #56]	; 0x38
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800387c:	f44f 3580 	mov.w	r5, #65536	; 0x10000
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003880:	23a8      	movs	r3, #168	; 0xa8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003882:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003884:	e9cd 4508 	strd	r4, r5, [sp, #32]
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003888:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800388c:	e9cd 1212 	strd	r1, r2, [sp, #72]	; 0x48
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003890:	9c01      	ldr	r4, [sp, #4]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003892:	f003 ffb7 	bl	8007804 <HAL_RCC_OscConfig>
 8003896:	b108      	cbz	r0, 800389c <SystemClock_Config+0x7c>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003898:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800389a:	e7fe      	b.n	800389a <SystemClock_Config+0x7a>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800389c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038a0:	2200      	movs	r2, #0
 80038a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80038a6:	240f      	movs	r4, #15
 80038a8:	2502      	movs	r5, #2
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038ae:	a802      	add	r0, sp, #8
 80038b0:	2105      	movs	r1, #5
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038b2:	e9cd 4502 	strd	r4, r5, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80038b6:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038b8:	f004 fa0c 	bl	8007cd4 <HAL_RCC_ClockConfig>
 80038bc:	b108      	cbz	r0, 80038c2 <SystemClock_Config+0xa2>
 80038be:	b672      	cpsid	i
  while (1)
 80038c0:	e7fe      	b.n	80038c0 <SystemClock_Config+0xa0>
}
 80038c2:	b015      	add	sp, #84	; 0x54
 80038c4:	bd30      	pop	{r4, r5, pc}
 80038c6:	bf00      	nop

080038c8 <main>:
{
 80038c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038cc:	ed2d 8b02 	vpush	{d8}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038d0:	2400      	movs	r4, #0
{
 80038d2:	b0a8      	sub	sp, #160	; 0xa0
  HAL_Init();
 80038d4:	f001 febe 	bl	8005654 <HAL_Init>
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038d8:	f44f 5560 	mov.w	r5, #14336	; 0x3800
  SystemClock_Config();
 80038dc:	f7ff ffa0 	bl	8003820 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e0:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
 80038e4:	e9cd 4422 	strd	r4, r4, [sp, #136]	; 0x88
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038e8:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80038ec:	9415      	str	r4, [sp, #84]	; 0x54
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038ee:	9424      	str	r4, [sp, #144]	; 0x90
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80038f0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80038f6:	632b      	str	r3, [r5, #48]	; 0x30
 80038f8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80038fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fe:	9315      	str	r3, [sp, #84]	; 0x54
 8003900:	9b15      	ldr	r3, [sp, #84]	; 0x54
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003902:	9416      	str	r4, [sp, #88]	; 0x58
 8003904:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	632b      	str	r3, [r5, #48]	; 0x30
 800390c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	9316      	str	r3, [sp, #88]	; 0x58
 8003914:	9b16      	ldr	r3, [sp, #88]	; 0x58
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003916:	9417      	str	r4, [sp, #92]	; 0x5c
 8003918:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800391a:	f043 0308 	orr.w	r3, r3, #8
 800391e:	632b      	str	r3, [r5, #48]	; 0x30
 8003920:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003922:	f003 0308 	and.w	r3, r3, #8
 8003926:	9317      	str	r3, [sp, #92]	; 0x5c
 8003928:	9b17      	ldr	r3, [sp, #92]	; 0x5c
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800392a:	9418      	str	r4, [sp, #96]	; 0x60
 800392c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800392e:	f043 0304 	orr.w	r3, r3, #4
 8003932:	632b      	str	r3, [r5, #48]	; 0x30
 8003934:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003936:	f003 0304 	and.w	r3, r3, #4
 800393a:	9318      	str	r3, [sp, #96]	; 0x60
 800393c:	9b18      	ldr	r3, [sp, #96]	; 0x60
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800393e:	9419      	str	r4, [sp, #100]	; 0x64
 8003940:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003942:	f043 0302 	orr.w	r3, r3, #2
 8003946:	632b      	str	r3, [r5, #48]	; 0x30
 8003948:	6b2b      	ldr	r3, [r5, #48]	; 0x30
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 800394a:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800394e:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 8003952:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003956:	9319      	str	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 8003958:	2201      	movs	r2, #1
 800395a:	f2c4 0002 	movt	r0, #16386	; 0x4002
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800395e:	9b19      	ldr	r3, [sp, #100]	; 0x64
  HAL_GPIO_WritePin(LED_LD4_GPIO_Port, LED_LD4_Pin, GPIO_PIN_SET);
 8003960:	f002 fd72 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, TEST_Pin|CS43L22_reset_Pin, GPIO_PIN_RESET);
 8003964:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8003968:	4622      	mov	r2, r4
 800396a:	f248 0110 	movw	r1, #32784	; 0x8010
 800396e:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003972:	f002 fd69 	bl	8006448 <HAL_GPIO_WritePin>
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003976:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  GPIO_InitStruct.Pin = LED_LD4_Pin|CS43L22_reset_Pin;
 800397a:	f241 0210 	movw	r2, #4112	; 0x1010
 800397e:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003980:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8003984:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = LED_LD4_Pin|CS43L22_reset_Pin;
 8003986:	f04f 0800 	mov.w	r8, #0
 800398a:	f04f 0900 	mov.w	r9, #0
 800398e:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
 8003992:	e9cd 8922 	strd	r8, r9, [sp, #136]	; 0x88
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003996:	f002 fc17 	bl	80061c8 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = TEST_Pin;
 800399a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800399e:	2301      	movs	r3, #1
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80039a0:	f44f 6040 	mov.w	r0, #3072	; 0xc00
  GPIO_InitStruct.Pin = TEST_Pin;
 80039a4:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80039a8:	f2c4 0002 	movt	r0, #16386	; 0x4002
  GPIO_InitStruct.Pin = TEST_Pin;
 80039ac:	2200      	movs	r2, #0
 80039ae:	2303      	movs	r3, #3
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80039b0:	a920      	add	r1, sp, #128	; 0x80
  GPIO_InitStruct.Pin = TEST_Pin;
 80039b2:	e9cd 2322 	strd	r2, r3, [sp, #136]	; 0x88
  HAL_GPIO_Init(TEST_GPIO_Port, &GPIO_InitStruct);
 80039b6:	f002 fc07 	bl	80061c8 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 80039ba:	9413      	str	r4, [sp, #76]	; 0x4c
 80039bc:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80039be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80039c2:	632b      	str	r3, [r5, #48]	; 0x30
 80039c4:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80039c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039ca:	9313      	str	r3, [sp, #76]	; 0x4c
 80039cc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039ce:	9414      	str	r4, [sp, #80]	; 0x50
 80039d0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80039d2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80039d6:	632b      	str	r3, [r5, #48]	; 0x30
 80039d8:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80039da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80039de:	4622      	mov	r2, r4
 80039e0:	4621      	mov	r1, r4
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039e2:	9314      	str	r3, [sp, #80]	; 0x50
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80039e4:	2010      	movs	r0, #16
  __HAL_RCC_DMA2_CLK_ENABLE();
 80039e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80039e8:	f002 f8f2 	bl	8005bd0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80039ec:	2010      	movs	r0, #16
 80039ee:	f002 f92f 	bl	8005c50 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80039f2:	4622      	mov	r2, r4
 80039f4:	4621      	mov	r1, r4
 80039f6:	2038      	movs	r0, #56	; 0x38
 80039f8:	f002 f8ea 	bl	8005bd0 <HAL_NVIC_SetPriority>
  hi2c1.Instance = I2C1;
 80039fc:	f240 76ec 	movw	r6, #2028	; 0x7ec
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8003a00:	2038      	movs	r0, #56	; 0x38
 8003a02:	f002 f925 	bl	8005c50 <HAL_NVIC_EnableIRQ>
  hi2c1.Instance = I2C1;
 8003a06:	f2c2 0600 	movt	r6, #8192	; 0x2000
  hi2c1.Init.ClockSpeed = 150000;
 8003a0a:	f644 1af0 	movw	sl, #18928	; 0x49f0
  hi2c1.Instance = I2C1;
 8003a0e:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
  hi2c1.Init.ClockSpeed = 150000;
 8003a12:	f2c0 0a02 	movt	sl, #2
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a16:	f44f 4780 	mov.w	r7, #16384	; 0x4000
  hi2c1.Instance = I2C1;
 8003a1a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a1e:	4630      	mov	r0, r6
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003a20:	e9c6 a401 	strd	sl, r4, [r6, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003a24:	e9c6 4703 	strd	r4, r7, [r6, #12]
  hi2c1.Init.OwnAddress2 = 0;
 8003a28:	e9c6 4405 	strd	r4, r4, [r6, #20]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a2c:	e9c6 4407 	strd	r4, r4, [r6, #28]
  hi2c1.Instance = I2C1;
 8003a30:	6033      	str	r3, [r6, #0]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a32:	f002 fe0d 	bl	8006650 <HAL_I2C_Init>
 8003a36:	b108      	cbz	r0, 8003a3c <main+0x174>
 8003a38:	b672      	cpsid	i
  while (1)
 8003a3a:	e7fe      	b.n	8003a3a <main+0x172>
  hi2s3.Instance = SPI3;
 8003a3c:	f640 0394 	movw	r3, #2196	; 0x894
 8003a40:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003a44:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8003a48:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8003a4c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003a4e:	f44f 42ee 	mov.w	r2, #30464	; 0x7700
 8003a52:	f2c0 0201 	movt	r2, #1
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8003a56:	e9c3 0002 	strd	r0, r0, [r3, #8]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8003a5a:	e9c3 0006 	strd	r0, r0, [r3, #24]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8003a5e:	6218      	str	r0, [r3, #32]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8003a60:	615a      	str	r2, [r3, #20]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003a62:	4618      	mov	r0, r3
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8003a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a68:	605a      	str	r2, [r3, #4]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8003a6a:	611a      	str	r2, [r3, #16]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8003a6c:	f003 fbb4 	bl	80071d8 <HAL_I2S_Init>
 8003a70:	b108      	cbz	r0, 8003a76 <main+0x1ae>
 8003a72:	b672      	cpsid	i
  while (1)
 8003a74:	e7fe      	b.n	8003a74 <main+0x1ac>
  hadc1.Instance = ADC1;
 8003a76:	f240 64d0 	movw	r4, #1744	; 0x6d0
 8003a7a:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003a7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a82:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8003a86:	6023      	str	r3, [r4, #0]
  hadc1.Init.NbrOfConversion = 1;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	61e3      	str	r3, [r4, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8003a8c:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003a90:	6163      	str	r3, [r4, #20]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8003a92:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003a96:	6063      	str	r3, [r4, #4]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003a98:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003a9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
  ADC_ChannelConfTypeDef sConfig = {0};
 8003aa0:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
 8003aa4:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003aa8:	60a0      	str	r0, [r4, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8003aaa:	6120      	str	r0, [r4, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003aac:	7620      	strb	r0, [r4, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003aae:	f884 0020 	strb.w	r0, [r4, #32]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ab2:	60e0      	str	r0, [r4, #12]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8003ab4:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003ab8:	4620      	mov	r0, r4
 8003aba:	f001 fe0f 	bl	80056dc <HAL_ADC_Init>
 8003abe:	b108      	cbz	r0, 8003ac4 <main+0x1fc>
 8003ac0:	b672      	cpsid	i
  while (1)
 8003ac2:	e7fe      	b.n	8003ac2 <main+0x1fa>
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8003ac4:	9022      	str	r0, [sp, #136]	; 0x88
  sConfig.Channel = ADC_CHANNEL_2;
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	2301      	movs	r3, #1
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003aca:	4620      	mov	r0, r4
 8003acc:	a920      	add	r1, sp, #128	; 0x80
  sConfig.Channel = ADC_CHANNEL_2;
 8003ace:	e9cd 2320 	strd	r2, r3, [sp, #128]	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003ad2:	f001 ffb7 	bl	8005a44 <HAL_ADC_ConfigChannel>
 8003ad6:	b9e0      	cbnz	r0, 8003b12 <main+0x24a>
  htim3.Instance = TIM3;
 8003ad8:	f640 04dc 	movw	r4, #2268	; 0x8dc
 8003adc:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003ae0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003ae4:	f2c4 0300 	movt	r3, #16384	; 0x4000
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003ae8:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
 8003aec:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003af0:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
  htim3.Init.Prescaler = 0;
 8003af4:	6060      	str	r0, [r4, #4]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003af6:	6120      	str	r0, [r4, #16]
  htim3.Instance = TIM3;
 8003af8:	6023      	str	r3, [r4, #0]
  htim3.Init.Period = 98;
 8003afa:	2010      	movs	r0, #16
 8003afc:	2362      	movs	r3, #98	; 0x62
 8003afe:	e9c4 0302 	strd	r0, r3, [r4, #8]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b02:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b04:	4620      	mov	r0, r4
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003b06:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003b08:	f004 fab4 	bl	8008074 <HAL_TIM_Base_Init>
 8003b0c:	b118      	cbz	r0, 8003b16 <main+0x24e>
 8003b0e:	b672      	cpsid	i
  while (1)
 8003b10:	e7fe      	b.n	8003b10 <main+0x248>
 8003b12:	b672      	cpsid	i
 8003b14:	e7fe      	b.n	8003b14 <main+0x24c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b16:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b1a:	a920      	add	r1, sp, #128	; 0x80
 8003b1c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003b1e:	9320      	str	r3, [sp, #128]	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003b20:	f004 fdd6 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 8003b24:	b108      	cbz	r0, 8003b2a <main+0x262>
 8003b26:	b672      	cpsid	i
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <main+0x260>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	2220      	movs	r2, #32
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b2e:	4620      	mov	r0, r4
 8003b30:	a91c      	add	r1, sp, #112	; 0x70
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003b32:	e9cd 231c 	strd	r2, r3, [sp, #112]	; 0x70
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003b36:	f004 fe7b 	bl	8008830 <HAL_TIMEx_MasterConfigSynchronization>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	b108      	cbz	r0, 8003b42 <main+0x27a>
 8003b3e:	b672      	cpsid	i
  while (1)
 8003b40:	e7fe      	b.n	8003b40 <main+0x278>
  hi2c3.Instance = I2C3;
 8003b42:	f640 0040 	movw	r0, #2112	; 0x840
 8003b46:	f2c2 0000 	movt	r0, #8192	; 0x2000
  hi2c3.Init.OwnAddress1 = 0;
 8003b4a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c3.Init.OwnAddress2 = 0;
 8003b4e:	e9c0 3305 	strd	r3, r3, [r0, #20]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b52:	e9c0 3307 	strd	r3, r3, [r0, #28]
  hi2c3.Instance = I2C3;
 8003b56:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 8003b5a:	f2c4 0300 	movt	r3, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 150000;
 8003b5e:	f8c0 a004 	str.w	sl, [r0, #4]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b62:	6107      	str	r7, [r0, #16]
  hi2c3.Instance = I2C3;
 8003b64:	6003      	str	r3, [r0, #0]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8003b66:	f002 fd73 	bl	8006650 <HAL_I2C_Init>
 8003b6a:	b108      	cbz	r0, 8003b70 <main+0x2a8>
 8003b6c:	b672      	cpsid	i
  while (1)
 8003b6e:	e7fe      	b.n	8003b6e <main+0x2a6>
  hdac.Instance = DAC;
 8003b70:	f240 7418 	movw	r4, #1816	; 0x718
 8003b74:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003b78:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
  DAC_ChannelConfTypeDef sConfig = {0};
 8003b7c:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
  hdac.Instance = DAC;
 8003b80:	f2c4 0300 	movt	r3, #16384	; 0x4000
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003b84:	4620      	mov	r0, r4
  hdac.Instance = DAC;
 8003b86:	6023      	str	r3, [r4, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8003b88:	f002 f88c 	bl	8005ca4 <HAL_DAC_Init>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	b108      	cbz	r0, 8003b94 <main+0x2cc>
 8003b90:	b672      	cpsid	i
  while (1)
 8003b92:	e7fe      	b.n	8003b92 <main+0x2ca>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b94:	4620      	mov	r0, r4
 8003b96:	a920      	add	r1, sp, #128	; 0x80
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003b98:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8003b9c:	f002 f8c8 	bl	8005d30 <HAL_DAC_ConfigChannel>
 8003ba0:	b108      	cbz	r0, 8003ba6 <main+0x2de>
 8003ba2:	b672      	cpsid	i
  while (1)
 8003ba4:	e7fe      	b.n	8003ba4 <main+0x2dc>
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8003ba6:	f240 7018 	movw	r0, #1816	; 0x718
 8003baa:	2210      	movs	r2, #16
 8003bac:	a920      	add	r1, sp, #128	; 0x80
 8003bae:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003bb2:	f002 f8bd 	bl	8005d30 <HAL_DAC_ConfigChannel>
 8003bb6:	b108      	cbz	r0, 8003bbc <main+0x2f4>
 8003bb8:	b672      	cpsid	i
  while (1)
 8003bba:	e7fe      	b.n	8003bba <main+0x2f2>
  huart5.Instance = UART5;
 8003bbc:	f640 156c 	movw	r5, #2412	; 0x96c
 8003bc0:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8003bc4:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8003bc8:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bcc:	602b      	str	r3, [r5, #0]
  huart5.Init.BaudRate = 115200;
 8003bce:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003bd2:	e9c5 0002 	strd	r0, r0, [r5, #8]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bd6:	e9c5 0006 	strd	r0, r0, [r5, #24]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003bda:	6128      	str	r0, [r5, #16]
  huart5.Init.BaudRate = 115200;
 8003bdc:	606b      	str	r3, [r5, #4]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003bde:	4628      	mov	r0, r5
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003be0:	230c      	movs	r3, #12
 8003be2:	616b      	str	r3, [r5, #20]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003be4:	f004 fe70 	bl	80088c8 <HAL_UART_Init>
 8003be8:	b108      	cbz	r0, 8003bee <main+0x326>
 8003bea:	b672      	cpsid	i
  while (1)
 8003bec:	e7fe      	b.n	8003bec <main+0x324>
  htim4.Instance = TIM4;
 8003bee:	f640 1424 	movw	r4, #2340	; 0x924
 8003bf2:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8003bf6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003bfa:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8003bfe:	6023      	str	r3, [r4, #0]
  htim4.Init.Period = 8191;
 8003c00:	f641 73ff 	movw	r3, #8191	; 0x1fff
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003c04:	e9cd 001c 	strd	r0, r0, [sp, #112]	; 0x70
 8003c08:	e9cd 001e 	strd	r0, r0, [sp, #120]	; 0x78
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c0c:	e9cd 0020 	strd	r0, r0, [sp, #128]	; 0x80
 8003c10:	e9cd 0022 	strd	r0, r0, [sp, #136]	; 0x88
 8003c14:	e9cd 0024 	strd	r0, r0, [sp, #144]	; 0x90
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c18:	e9c4 0001 	strd	r0, r0, [r4, #4]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c1c:	901a      	str	r0, [sp, #104]	; 0x68
  TIM_OC_InitTypeDef sConfigOC = {0};
 8003c1e:	9026      	str	r0, [sp, #152]	; 0x98
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003c20:	901b      	str	r0, [sp, #108]	; 0x6c
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c22:	6120      	str	r0, [r4, #16]
  htim4.Init.Period = 8191;
 8003c24:	60e3      	str	r3, [r4, #12]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c26:	4620      	mov	r0, r4
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003c28:	2380      	movs	r3, #128	; 0x80
 8003c2a:	61a3      	str	r3, [r4, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8003c2c:	f004 fa22 	bl	8008074 <HAL_TIM_Base_Init>
 8003c30:	b108      	cbz	r0, 8003c36 <main+0x36e>
 8003c32:	b672      	cpsid	i
  while (1)
 8003c34:	e7fe      	b.n	8003c34 <main+0x36c>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c36:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c3a:	a91c      	add	r1, sp, #112	; 0x70
 8003c3c:	4620      	mov	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003c3e:	931c      	str	r3, [sp, #112]	; 0x70
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8003c40:	f004 fd46 	bl	80086d0 <HAL_TIM_ConfigClockSource>
 8003c44:	b108      	cbz	r0, 8003c4a <main+0x382>
 8003c46:	b672      	cpsid	i
  while (1)
 8003c48:	e7fe      	b.n	8003c48 <main+0x380>
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	f004 fafc 	bl	8008248 <HAL_TIM_PWM_Init>
 8003c50:	b108      	cbz	r0, 8003c56 <main+0x38e>
 8003c52:	b672      	cpsid	i
  while (1)
 8003c54:	e7fe      	b.n	8003c54 <main+0x38c>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c56:	2200      	movs	r2, #0
 8003c58:	2300      	movs	r3, #0
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c5a:	a91a      	add	r1, sp, #104	; 0x68
 8003c5c:	4620      	mov	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5e:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003c62:	f004 fde5 	bl	8008830 <HAL_TIMEx_MasterConfigSynchronization>
 8003c66:	b108      	cbz	r0, 8003c6c <main+0x3a4>
 8003c68:	b672      	cpsid	i
  while (1)
 8003c6a:	e7fe      	b.n	8003c6a <main+0x3a2>
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003c6c:	9022      	str	r0, [sp, #136]	; 0x88
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003c6e:	9024      	str	r0, [sp, #144]	; 0x90
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c70:	2204      	movs	r2, #4
 8003c72:	a920      	add	r1, sp, #128	; 0x80
 8003c74:	4620      	mov	r0, r4
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003c76:	f04f 0860 	mov.w	r8, #96	; 0x60
 8003c7a:	f04f 0900 	mov.w	r9, #0
 8003c7e:	e9cd 8920 	strd	r8, r9, [sp, #128]	; 0x80
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8003c82:	f004 fc01 	bl	8008488 <HAL_TIM_PWM_ConfigChannel>
 8003c86:	4607      	mov	r7, r0
 8003c88:	b108      	cbz	r0, 8003c8e <main+0x3c6>
 8003c8a:	b672      	cpsid	i
  while (1)
 8003c8c:	e7fe      	b.n	8003c8c <main+0x3c4>
  HAL_TIM_MspPostInit(&htim4);
 8003c8e:	4620      	mov	r0, r4
 8003c90:	f000 fb82 	bl	8004398 <HAL_TIM_MspPostInit>
  usart_init(&huart5);
 8003c94:	4628      	mov	r0, r5
 8003c96:	f001 fbff 	bl	8005498 <usart_init>
  HAL_UART_Receive_IT(&huart5, (uint8_t*) &rxchar, 1);
 8003c9a:	f640 3194 	movw	r1, #2964	; 0xb94
 8003c9e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	4628      	mov	r0, r5
 8003ca6:	f004 fed1 	bl	8008a4c <HAL_UART_Receive_IT>
  UART_printf("\r\n");
 8003caa:	f24f 4070 	movw	r0, #62576	; 0xf470
 8003cae:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003cb2:	f000 f93f 	bl	8003f34 <UART_printf>
  UART_printf("+--------------------------------------+\r\n");
 8003cb6:	f24f 4048 	movw	r0, #62536	; 0xf448
 8003cba:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003cbe:	f000 f939 	bl	8003f34 <UART_printf>
  UART_printf("|     Experimental SDR receiver        |\r\n");
 8003cc2:	f24f 4074 	movw	r0, #62580	; 0xf474
 8003cc6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003cca:	f000 f933 	bl	8003f34 <UART_printf>
  UART_printf("| based on the STM32F407 and MxL5007T. |\r\n");
 8003cce:	f24f 40a0 	movw	r0, #62624	; 0xf4a0
 8003cd2:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003cd6:	f000 f92d 	bl	8003f34 <UART_printf>
  myTuner.I2C_Addr = MxL_I2C_ADDR_96; //Set Tuner's I2C Address
 8003cda:	f640 14b0 	movw	r4, #2480	; 0x9b0
  UART_printf("+--------------------------------------+\r\n");
 8003cde:	f24f 4048 	movw	r0, #62536	; 0xf448
  myTuner.I2C_Addr = MxL_I2C_ADDR_96; //Set Tuner's I2C Address
 8003ce2:	f2c2 0400 	movt	r4, #8192	; 0x2000
  UART_printf("+--------------------------------------+\r\n");
 8003ce6:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003cea:	f000 f923 	bl	8003f34 <UART_printf>
  myTuner.I2C_Addr = MxL_I2C_ADDR_96; //Set Tuner's I2C Address
 8003cee:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8003cf2:	8023      	strh	r3, [r4, #0]
  myTuner.Xtal_Freq = MxL_XTAL_24_MHZ; //Set Tuner's XTAL freq
 8003cf4:	f44f 5258 	mov.w	r2, #13824	; 0x3600
 8003cf8:	f64a 2320 	movw	r3, #43552	; 0xaa20
 8003cfc:	f2c0 126e 	movt	r2, #366	; 0x16e
 8003d00:	f2c0 0344 	movt	r3, #68	; 0x44
 8003d04:	e9c4 2302 	strd	r2, r3, [r4, #8]
  myTuner.ClkOut_Setting = MxL_CLKOUT_DISABLE; //Set Tuner's Clock out setting
 8003d08:	f8a4 7011 	strh.w	r7, [r4, #17]
  HAL_Delay(300); //Without delay after power up MxL5007 doesn't give ACK.
 8003d0c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8003d10:	f001 fcd0 	bl	80056b4 <HAL_Delay>
  MxL5007_ChipVersion MxL_ChipVersion = MxL_Check_ChipVersion(&myTuner);
 8003d14:	4620      	mov	r0, r4
 8003d16:	f7fe fc53 	bl	80025c0 <MxL_Check_ChipVersion>
 8003d1a:	4604      	mov	r4, r0
  MxL_Print_ChipVersion(MxL_ChipVersion);
 8003d1c:	f7fe fc6e 	bl	80025fc <MxL_Print_ChipVersion>
  if (MxL_ChipVersion == MxL_UNKNOWN_ID) MxL_TIMEOUT_UserCallback();
 8003d20:	b90c      	cbnz	r4, 8003d26 <main+0x45e>
 8003d22:	f7fe fd2d 	bl	8002780 <MxL_TIMEOUT_UserCallback>
  MxL_ERR_MSG MxL_Status = MxL_Tuner_Init(&myTuner);
 8003d26:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8003d2a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d2e:	f7fe fc01 	bl	8002534 <MxL_Tuner_Init>
  if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003d32:	b108      	cbz	r0, 8003d38 <main+0x470>
 8003d34:	f7fe fd24 	bl	8002780 <MxL_TIMEOUT_UserCallback>
  MxL_Status = MxL_Tuner_RFTune(&myTuner, 100*MHz, MxL_BW_6MHz);
 8003d38:	f44f 4161 	mov.w	r1, #57600	; 0xe100
 8003d3c:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8003d40:	2206      	movs	r2, #6
 8003d42:	f2c0 51f5 	movt	r1, #1525	; 0x5f5
 8003d46:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d4a:	f7fe fc1d 	bl	8002588 <MxL_Tuner_RFTune>
  if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003d4e:	b108      	cbz	r0, 8003d54 <main+0x48c>
 8003d50:	f7fe fd16 	bl	8002780 <MxL_TIMEOUT_UserCallback>
  MxL_Status = MxL_RFSynth_Lock_Status(&myTuner, &RFSynthLock);
 8003d54:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8003d58:	a91c      	add	r1, sp, #112	; 0x70
 8003d5a:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d5e:	f7fe fc8d 	bl	800267c <MxL_RFSynth_Lock_Status>
  if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003d62:	b108      	cbz	r0, 8003d68 <main+0x4a0>
 8003d64:	f7fe fd0c 	bl	8002780 <MxL_TIMEOUT_UserCallback>
  MxL_Status = MxL_REFSynth_Lock_Status(&myTuner, &REFSynthLock);
 8003d68:	f640 10b0 	movw	r0, #2480	; 0x9b0
 8003d6c:	a920      	add	r1, sp, #128	; 0x80
 8003d6e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003d72:	f7fe fc9d 	bl	80026b0 <MxL_REFSynth_Lock_Status>
  if (MxL_Status != MxL_OK) MxL_TIMEOUT_UserCallback();
 8003d76:	b108      	cbz	r0, 8003d7c <main+0x4b4>
 8003d78:	f7fe fd02 	bl	8002780 <MxL_TIMEOUT_UserCallback>
  UART_printf("rfLock=%d   refLock=%d\r\n", RFSynthLock, RFSynthLock);
 8003d7c:	f89d 2070 	ldrb.w	r2, [sp, #112]	; 0x70
 8003d80:	f24f 0010 	movw	r0, #61456	; 0xf010
 8003d84:	4611      	mov	r1, r2
 8003d86:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003d8a:	f000 f8d3 	bl	8003f34 <UART_printf>
  UART_printf("MxL5007T initialized.\r\n");
 8003d8e:	f24f 40cc 	movw	r0, #62668	; 0xf4cc
 8003d92:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003d96:	f000 f8cd 	bl	8003f34 <UART_printf>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); //starting PWM for IF_AGC pin voltage settings
 8003d9a:	f640 1024 	movw	r0, #2340	; 0x924
 8003d9e:	2104      	movs	r1, #4
 8003da0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003da4:	f004 faf4 	bl	8008390 <HAL_TIM_PWM_Start>
  MxL_SetGain(75.0 - (IF_Gain + Attenuation)); //total gain 75 dB
 8003da8:	f640 233d 	movw	r3, #2621	; 0xa3d
 8003dac:	f2c4 237e 	movt	r3, #17022	; 0x427e
 8003db0:	ee00 3a10 	vmov	s0, r3
 8003db4:	f7fe fc96 	bl	80026e4 <MxL_SetGain>
  CS43_Init(hi2c1, MODE_ANALOG_);
 8003db8:	f240 71fc 	movw	r1, #2044	; 0x7fc
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003dc2:	2244      	movs	r2, #68	; 0x44
 8003dc4:	4668      	mov	r0, sp
 8003dc6:	9311      	str	r3, [sp, #68]	; 0x44
 8003dc8:	f005 f89e 	bl	8008f08 <memcpy>
 8003dcc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8003dd0:	f7fd f92a 	bl	8001028 <CS43_Init>
  CS43_SetVolume(CS43_default_vol); //maximum value without distortion for 3.00 Vpp from DAC is CS43_default_vol=48 for DISCOVERY BOARD
 8003dd4:	2030      	movs	r0, #48	; 0x30
 8003dd6:	f7fd fb11 	bl	80013fc <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8003dda:	2003      	movs	r0, #3
 8003ddc:	f7fd fad2 	bl	8001384 <CS43_Enable_RightLeft>
  CS43_Start();
 8003de0:	f7fd fb6a 	bl	80014b8 <CS43_Start>
  UART_printf("CS43L22 initialized.\r\n");
 8003de4:	f24f 40e4 	movw	r0, #62692	; 0xf4e4
 8003de8:	f6c0 0000 	movt	r0, #2048	; 0x800
 8003dec:	f000 f8a2 	bl	8003f34 <UART_printf>
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8003df0:	f64f 031a 	movw	r3, #63514	; 0xf81a
 8003df4:	f6c3 6342 	movt	r3, #15938	; 0x3e42
 8003df8:	f640 16c8 	movw	r6, #2504	; 0x9c8
 8003dfc:	f240 6544 	movw	r5, #1604	; 0x644
 8003e00:	ee08 3a10 	vmov	s16, r3
 8003e04:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8003e08:	f2c2 0500 	movt	r5, #8192	; 0x2000
  for (uint8_t i=0; i<N_cos_sin; i++)
 8003e0c:	2400      	movs	r4, #0
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8003e0e:	f04f 0821 	mov.w	r8, #33	; 0x21
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8003e12:	ee07 7a90 	vmov	s15, r7
 8003e16:	eef8 8ae7 	vcvt.f32.s32	s17, s15
  for (uint8_t i=0; i<N_cos_sin; i++)
 8003e1a:	3401      	adds	r4, #1
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8003e1c:	ee68 8a88 	vmul.f32	s17, s17, s16
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8003e20:	370a      	adds	r7, #10
	  sine_arr[i] = sinf(dx*k); //calculating look-up tables with reordering
 8003e22:	eeb0 0a68 	vmov.f32	s0, s17
 8003e26:	f009 fe33 	bl	800da90 <sinf>
 8003e2a:	eef0 7a40 	vmov.f32	s15, s0
 8003e2e:	ece6 7a01 	vstmia	r6!, {s15}
	  cosine_arr[i] = cosf(dx*k);
 8003e32:	eeb0 0a68 	vmov.f32	s0, s17
 8003e36:	f009 fde7 	bl	800da08 <cosf>
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8003e3a:	fbb7 f3f8 	udiv	r3, r7, r8
  for (uint8_t i=0; i<N_cos_sin; i++)
 8003e3e:	b2e4      	uxtb	r4, r4
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8003e40:	eb03 1343 	add.w	r3, r3, r3, lsl #5
 8003e44:	1aff      	subs	r7, r7, r3
  for (uint8_t i=0; i<N_cos_sin; i++)
 8003e46:	2c21      	cmp	r4, #33	; 0x21
	  cosine_arr[i] = cosf(dx*k);
 8003e48:	eca5 0a01 	vstmia	r5!, {s0}
	  k = (k + Step_cos_sin) % N_cos_sin; //adding modulo N_cos_sin=33 - unnecessary during real time computing so it can be replace just by counter increment
 8003e4c:	b2ff      	uxtb	r7, r7
  for (uint8_t i=0; i<N_cos_sin; i++)
 8003e4e:	d1e0      	bne.n	8003e12 <main+0x54a>
  for (uint8_t i=0; i<N_asin; i++) asin_arr[i] = asinf(dx*i - 1.0); //calculating look-up table for arsine (needed for FM)
 8003e50:	f247 430e 	movw	r3, #29710	; 0x740e
 8003e54:	f6c3 435a 	movt	r3, #15450	; 0x3c5a
 8003e58:	f240 35ec 	movw	r5, #1004	; 0x3ec
 8003e5c:	ee08 3a10 	vmov	s16, r3
 8003e60:	f2c2 0500 	movt	r5, #8192	; 0x2000
  for (uint8_t i=0; i<N_cos_sin; i++)
 8003e64:	2400      	movs	r4, #0
  for (uint8_t i=0; i<N_asin; i++) asin_arr[i] = asinf(dx*i - 1.0); //calculating look-up table for arsine (needed for FM)
 8003e66:	eeff 8a00 	vmov.f32	s17, #240	; 0xbf800000 -1.0
 8003e6a:	ee07 4a90 	vmov	s15, r4
 8003e6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003e72:	eeb0 0a68 	vmov.f32	s0, s17
 8003e76:	eea7 0a88 	vfma.f32	s0, s15, s16
 8003e7a:	f009 fe4f 	bl	800db1c <asinf>
 8003e7e:	3401      	adds	r4, #1
 8003e80:	2c96      	cmp	r4, #150	; 0x96
 8003e82:	eca5 0a01 	vstmia	r5!, {s0}
 8003e86:	d1f0      	bne.n	8003e6a <main+0x5a2>
  set_IQ_filters_coeff(b, a, Demod_Type);
 8003e88:	f640 330e 	movw	r3, #2830	; 0xb0e
 8003e8c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8003e90:	f640 315c 	movw	r1, #2908	; 0xb5c
 8003e94:	f640 3070 	movw	r0, #2928	; 0xb70
 8003e98:	781a      	ldrb	r2, [r3, #0]
 8003e9a:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003e9e:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ea2:	f7fe fcc7 	bl	8002834 <set_IQ_filters_coeff>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8003ea6:	f240 7018 	movw	r0, #1816	; 0x718
 8003eaa:	2100      	movs	r1, #0
 8003eac:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003eb0:	f001 ff0e 	bl	8005cd0 <HAL_DAC_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_2);
 8003eb4:	f240 7018 	movw	r0, #1816	; 0x718
 8003eb8:	2110      	movs	r1, #16
 8003eba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ebe:	f001 ff07 	bl	8005cd0 <HAL_DAC_Start>
  HAL_I2S_Transmit_DMA(&hi2s3, (uint16_t *)dataI2S, 4); //starting I2S 16-bits dummy words sending with circular buffer just for MCLK clock for CS43L22
 8003ec2:	f240 61c8 	movw	r1, #1736	; 0x6c8
 8003ec6:	f640 0094 	movw	r0, #2196	; 0x894
 8003eca:	2204      	movs	r2, #4
 8003ecc:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003ed0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ed4:	f003 fa22 	bl	800731c <HAL_I2S_Transmit_DMA>
  HAL_TIM_Base_Start(&htim3); //starting timer for ADC triggering
 8003ed8:	f640 00dc 	movw	r0, #2268	; 0x8dc
 8003edc:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ee0:	f004 f96c 	bl	80081bc <HAL_TIM_Base_Start>
  HAL_ADC_Start_DMA(&hadc1, v_in_samples, 8); //starting DMA for ADC with circular buffer
 8003ee4:	f640 214c 	movw	r1, #2636	; 0xa4c
 8003ee8:	f240 60d0 	movw	r0, #1744	; 0x6d0
 8003eec:	2208      	movs	r2, #8
 8003eee:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8003ef2:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8003ef6:	f001 fc9f 	bl	8005838 <HAL_ADC_Start_DMA>
  init_cmd();
 8003efa:	f7ff fc31 	bl	8003760 <init_cmd>
  tick = HAL_GetTick() + 100;
 8003efe:	f001 fbd3 	bl	80056a8 <HAL_GetTick>
 8003f02:	f100 0464 	add.w	r4, r0, #100	; 0x64
	if((rxchar_loc = usart_getc())!= EOF)
 8003f06:	f001 fafd 	bl	8005504 <usart_getc>
 8003f0a:	1c43      	adds	r3, r0, #1
		cmd_parse(rxchar_loc);
 8003f0c:	b2c0      	uxtb	r0, r0
	if((rxchar_loc = usart_getc())!= EOF)
 8003f0e:	d001      	beq.n	8003f14 <main+0x64c>
		cmd_parse(rxchar_loc);
 8003f10:	f7ff fc36 	bl	8003780 <cmd_parse>
	if(tick < HAL_GetTick())
 8003f14:	f001 fbc8 	bl	80056a8 <HAL_GetTick>
 8003f18:	4284      	cmp	r4, r0
 8003f1a:	d2f4      	bcs.n	8003f06 <main+0x63e>
		  led_toggle(LED1);
 8003f1c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8003f20:	f7ff fc76 	bl	8003810 <led_toggle>
		  tick = HAL_GetTick() + 100;
 8003f24:	f001 fbc0 	bl	80056a8 <HAL_GetTick>
 8003f28:	f100 0464 	add.w	r4, r0, #100	; 0x64
 8003f2c:	e7eb      	b.n	8003f06 <main+0x63e>
 8003f2e:	bf00      	nop

08003f30 <Error_Handler>:
 8003f30:	b672      	cpsid	i
  while (1)
 8003f32:	e7fe      	b.n	8003f32 <Error_Handler+0x2>

08003f34 <UART_printf>:
#include "usart.h"

static char UART_printf_tmp_buf[150];

void UART_printf(const char *format, ...)
{
 8003f34:	b40f      	push	{r0, r1, r2, r3}
 8003f36:	b510      	push	{r4, lr}
 8003f38:	b082      	sub	sp, #8
 8003f3a:	aa04      	add	r2, sp, #16
   va_list args;
   va_start(args, format);
   vsprintf(UART_printf_tmp_buf, format, args);
 8003f3c:	f640 246c 	movw	r4, #2668	; 0xa6c
 8003f40:	f2c2 0400 	movt	r4, #8192	; 0x2000
{
 8003f44:	f852 1b04 	ldr.w	r1, [r2], #4
   va_start(args, format);
 8003f48:	9201      	str	r2, [sp, #4]
   vsprintf(UART_printf_tmp_buf, format, args);
 8003f4a:	4620      	mov	r0, r4
 8003f4c:	f006 fe3a 	bl	800abc4 <vsiprintf>
   va_end(args);

   char *tmp_pointer = UART_printf_tmp_buf;
   while(*tmp_pointer != '\0') usart_putc(0, *tmp_pointer++);
 8003f50:	7821      	ldrb	r1, [r4, #0]
 8003f52:	b131      	cbz	r1, 8003f62 <UART_printf+0x2e>
 8003f54:	2000      	movs	r0, #0
 8003f56:	f001 faf3 	bl	8005540 <usart_putc>
 8003f5a:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 8003f5e:	2900      	cmp	r1, #0
 8003f60:	d1f8      	bne.n	8003f54 <UART_printf+0x20>
}
 8003f62:	b002      	add	sp, #8
 8003f64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003f68:	b004      	add	sp, #16
 8003f6a:	4770      	bx	lr

08003f6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f6c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f6e:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003f72:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003f76:	2100      	movs	r1, #0
 8003f78:	9100      	str	r1, [sp, #0]
 8003f7a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003f80:	645a      	str	r2, [r3, #68]	; 0x44
 8003f82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f84:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003f88:	9200      	str	r2, [sp, #0]
 8003f8a:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f8c:	9101      	str	r1, [sp, #4]
 8003f8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003f90:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f94:	641a      	str	r2, [r3, #64]	; 0x40
 8003f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	9301      	str	r3, [sp, #4]
 8003f9e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003fa0:	b002      	add	sp, #8
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003fa4:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003fa6:	6802      	ldr	r2, [r0, #0]
 8003fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
{
 8003fac:	b088      	sub	sp, #32
  if(hadc->Instance==ADC1)
 8003fae:	f2c4 0301 	movt	r3, #16385	; 0x4001
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb2:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003fb4:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb6:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003fba:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003fbe:	9406      	str	r4, [sp, #24]
  if(hadc->Instance==ADC1)
 8003fc0:	d001      	beq.n	8003fc6 <HAL_ADC_MspInit+0x22>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003fc2:	b008      	add	sp, #32
 8003fc4:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003fc6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003fca:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8003fce:	9400      	str	r4, [sp, #0]
 8003fd0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd6:	645a      	str	r2, [r3, #68]	; 0x44
 8003fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fda:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003fde:	9200      	str	r2, [sp, #0]
 8003fe0:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe2:	9401      	str	r4, [sp, #4]
 8003fe4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fe6:	f042 0201 	orr.w	r2, r2, #1
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
 8003fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fee:	4605      	mov	r5, r0
 8003ff0:	f003 0301 	and.w	r3, r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ff4:	4620      	mov	r0, r4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ff8:	2204      	movs	r2, #4
 8003ffa:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ffc:	f2c4 0002 	movt	r0, #16386	; 0x4002
 8004000:	a902      	add	r1, sp, #8
    hdma_adc1.Instance = DMA2_Stream0;
 8004002:	f240 762c 	movw	r6, #1836	; 0x72c
 8004006:	f2c2 0600 	movt	r6, #8192	; 0x2000
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800400a:	e9cd 2302 	strd	r2, r3, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400e:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004010:	f002 f8da 	bl	80061c8 <HAL_GPIO_Init>
    hdma_adc1.Instance = DMA2_Stream0;
 8004014:	f246 4310 	movw	r3, #25616	; 0x6410
 8004018:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800401c:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8004020:	e9c6 3400 	strd	r3, r4, [r6]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8004024:	6132      	str	r2, [r6, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8004026:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800402a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800402e:	e9c6 2305 	strd	r2, r3, [r6, #20]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004032:	2304      	movs	r3, #4
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8004034:	f44f 7280 	mov.w	r2, #256	; 0x100
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004038:	6273      	str	r3, [r6, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800403a:	4630      	mov	r0, r6
    hdma_adc1.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_HALFFULL;
 800403c:	2301      	movs	r3, #1
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800403e:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8004042:	e9c6 2407 	strd	r2, r4, [r6, #28]
    hdma_adc1.Init.MemBurst = DMA_MBURST_SINGLE;
 8004046:	e9c6 340a 	strd	r3, r4, [r6, #40]	; 0x28
    hdma_adc1.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800404a:	6334      	str	r4, [r6, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800404c:	f001 fe96 	bl	8005d7c <HAL_DMA_Init>
 8004050:	b918      	cbnz	r0, 800405a <HAL_ADC_MspInit+0xb6>
    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8004052:	63ae      	str	r6, [r5, #56]	; 0x38
 8004054:	63b5      	str	r5, [r6, #56]	; 0x38
}
 8004056:	b008      	add	sp, #32
 8004058:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 800405a:	f7ff ff69 	bl	8003f30 <Error_Handler>
 800405e:	e7f8      	b.n	8004052 <HAL_ADC_MspInit+0xae>

08004060 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004060:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hdac->Instance==DAC)
 8004062:	6801      	ldr	r1, [r0, #0]
 8004064:	f44f 42e8 	mov.w	r2, #29696	; 0x7400
{
 8004068:	b089      	sub	sp, #36	; 0x24
  if(hdac->Instance==DAC)
 800406a:	f2c4 0200 	movt	r2, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800406e:	2300      	movs	r3, #0
  if(hdac->Instance==DAC)
 8004070:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004072:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004076:	e9cd 3304 	strd	r3, r3, [sp, #16]
 800407a:	9306      	str	r3, [sp, #24]
  if(hdac->Instance==DAC)
 800407c:	d001      	beq.n	8004082 <HAL_DAC_MspInit+0x22>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800407e:	b009      	add	sp, #36	; 0x24
 8004080:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_DAC_CLK_ENABLE();
 8004082:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8004086:	f2c4 0202 	movt	r2, #16386	; 0x4002
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	6c10      	ldr	r0, [r2, #64]	; 0x40
 800408e:	f040 5000 	orr.w	r0, r0, #536870912	; 0x20000000
 8004092:	6410      	str	r0, [r2, #64]	; 0x40
 8004094:	6c10      	ldr	r0, [r2, #64]	; 0x40
 8004096:	f000 5000 	and.w	r0, r0, #536870912	; 0x20000000
 800409a:	9000      	str	r0, [sp, #0]
 800409c:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800409e:	9301      	str	r3, [sp, #4]
 80040a0:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6313      	str	r3, [r2, #48]	; 0x30
 80040a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040aa:	2000      	movs	r0, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ac:	f003 0301 	and.w	r3, r3, #1
 80040b0:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b2:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80040b4:	2430      	movs	r4, #48	; 0x30
 80040b6:	2503      	movs	r5, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040b8:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80040bc:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c0:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040c2:	f002 f881 	bl	80061c8 <HAL_GPIO_Init>
}
 80040c6:	b009      	add	sp, #36	; 0x24
 80040c8:	bd30      	pop	{r4, r5, pc}
 80040ca:	bf00      	nop

080040cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040cc:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hi2c->Instance==I2C1)
 80040ce:	6802      	ldr	r2, [r0, #0]
 80040d0:	f44f 43a8 	mov.w	r3, #21504	; 0x5400
{
 80040d4:	b08c      	sub	sp, #48	; 0x30
  if(hi2c->Instance==I2C1)
 80040d6:	f2c4 0300 	movt	r3, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040da:	2400      	movs	r4, #0
  if(hi2c->Instance==I2C1)
 80040dc:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040de:	e9cd 4406 	strd	r4, r4, [sp, #24]
 80040e2:	e9cd 4408 	strd	r4, r4, [sp, #32]
 80040e6:	940a      	str	r4, [sp, #40]	; 0x28
  if(hi2c->Instance==I2C1)
 80040e8:	d007      	beq.n	80040fa <HAL_I2C_MspInit+0x2e>
    __HAL_RCC_I2C1_CLK_ENABLE();
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
  else if(hi2c->Instance==I2C3)
 80040ea:	f44f 43b8 	mov.w	r3, #23552	; 0x5c00
 80040ee:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80040f2:	429a      	cmp	r2, r3
 80040f4:	d02b      	beq.n	800414e <HAL_I2C_MspInit+0x82>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 80040f6:	b00c      	add	sp, #48	; 0x30
 80040f8:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040fa:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 80040fe:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8004102:	9401      	str	r4, [sp, #4]
 8004104:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004106:	f043 0302 	orr.w	r3, r3, #2
 800410a:	632b      	str	r3, [r5, #48]	; 0x30
 800410c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = SCL_Pin|SDA_Pin;
 8004114:	f44f 7210 	mov.w	r2, #576	; 0x240
 8004118:	2312      	movs	r3, #18
 800411a:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800411e:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004122:	2303      	movs	r3, #3
 8004124:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004126:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004128:	2304      	movs	r3, #4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800412a:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800412e:	930a      	str	r3, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004130:	9a01      	ldr	r2, [sp, #4]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004132:	f002 f849 	bl	80061c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004136:	9402      	str	r4, [sp, #8]
 8004138:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 800413a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800413e:	642b      	str	r3, [r5, #64]	; 0x40
 8004140:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8004142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004146:	9302      	str	r3, [sp, #8]
 8004148:	9b02      	ldr	r3, [sp, #8]
}
 800414a:	b00c      	add	sp, #48	; 0x30
 800414c:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800414e:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8004152:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8004156:	9403      	str	r4, [sp, #12]
 8004158:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800415a:	f043 0304 	orr.w	r3, r3, #4
 800415e:	632b      	str	r3, [r5, #48]	; 0x30
 8004160:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004162:	f003 0304 	and.w	r3, r3, #4
 8004166:	9303      	str	r3, [sp, #12]
 8004168:	9b03      	ldr	r3, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800416a:	9404      	str	r4, [sp, #16]
 800416c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800416e:	f043 0301 	orr.w	r3, r3, #1
 8004172:	632b      	str	r3, [r5, #48]	; 0x30
 8004174:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8004176:	f003 0301 	and.w	r3, r3, #1
 800417a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800417c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004180:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004182:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004186:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800418a:	2604      	movs	r6, #4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800418c:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800418e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004190:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004194:	9309      	str	r3, [sp, #36]	; 0x24
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004196:	960a      	str	r6, [sp, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004198:	9b04      	ldr	r3, [sp, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800419a:	f002 f815 	bl	80061c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800419e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80041a2:	2312      	movs	r3, #18
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041a4:	2000      	movs	r0, #0
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041a6:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041aa:	a906      	add	r1, sp, #24
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041ac:	2200      	movs	r2, #0
 80041ae:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041b0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80041b4:	e9cd 2308 	strd	r2, r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80041b8:	960a      	str	r6, [sp, #40]	; 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80041ba:	f002 f805 	bl	80061c8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80041be:	9405      	str	r4, [sp, #20]
 80041c0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80041c2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80041c6:	642b      	str	r3, [r5, #64]	; 0x40
 80041c8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80041ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ce:	9305      	str	r3, [sp, #20]
 80041d0:	9b05      	ldr	r3, [sp, #20]
}
 80041d2:	b00c      	add	sp, #48	; 0x30
 80041d4:	bd70      	pop	{r4, r5, r6, pc}
 80041d6:	bf00      	nop

080041d8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80041d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
  if(hi2s->Instance==SPI3)
 80041dc:	6801      	ldr	r1, [r0, #0]
 80041de:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
{
 80041e2:	b08f      	sub	sp, #60	; 0x3c
  if(hi2s->Instance==SPI3)
 80041e4:	f2c4 0200 	movt	r2, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041e8:	2300      	movs	r3, #0
  if(hi2s->Instance==SPI3)
 80041ea:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041ec:	e9cd 3308 	strd	r3, r3, [sp, #32]
 80041f0:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 80041f4:	930c      	str	r3, [sp, #48]	; 0x30
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80041f6:	9307      	str	r3, [sp, #28]
  if(hi2s->Instance==SPI3)
 80041f8:	d002      	beq.n	8004200 <HAL_I2S_MspInit+0x28>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80041fa:	b00f      	add	sp, #60	; 0x3c
 80041fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004200:	23c0      	movs	r3, #192	; 0xc0
 8004202:	2201      	movs	r2, #1
 8004204:	e9cd 2304 	strd	r2, r3, [sp, #16]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8004208:	4604      	mov	r4, r0
 800420a:	2302      	movs	r3, #2
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800420c:	a804      	add	r0, sp, #16
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800420e:	9306      	str	r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004210:	f003 fe46 	bl	8007ea0 <HAL_RCCEx_PeriphCLKConfig>
 8004214:	2800      	cmp	r0, #0
 8004216:	f040 8086 	bne.w	8004326 <HAL_I2S_MspInit+0x14e>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800421a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800421e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004222:	2600      	movs	r6, #0
 8004224:	9600      	str	r6, [sp, #0]
 8004226:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004228:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800422c:	641a      	str	r2, [r3, #64]	; 0x40
 800422e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004230:	f402 4200 	and.w	r2, r2, #32768	; 0x8000
 8004234:	9200      	str	r2, [sp, #0]
 8004236:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004238:	9601      	str	r6, [sp, #4]
 800423a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800423c:	f042 0204 	orr.w	r2, r2, #4
 8004240:	631a      	str	r2, [r3, #48]	; 0x30
 8004242:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004244:	f002 0204 	and.w	r2, r2, #4
 8004248:	9201      	str	r2, [sp, #4]
 800424a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800424c:	9602      	str	r6, [sp, #8]
 800424e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004250:	f042 0201 	orr.w	r2, r2, #1
 8004254:	631a      	str	r2, [r3, #48]	; 0x30
 8004256:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004258:	f002 0201 	and.w	r2, r2, #1
 800425c:	9202      	str	r2, [sp, #8]
 800425e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004260:	9603      	str	r6, [sp, #12]
 8004262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004264:	f042 0202 	orr.w	r2, r2, #2
 8004268:	631a      	str	r2, [r3, #48]	; 0x30
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800426c:	f44f 6000 	mov.w	r0, #2048	; 0x800
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8004276:	f44f 6290 	mov.w	r2, #1152	; 0x480
 800427a:	f04f 0800 	mov.w	r8, #0
 800427e:	f04f 0900 	mov.w	r9, #0
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004282:	2706      	movs	r7, #6
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 8004284:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004286:	f2c4 0002 	movt	r0, #16386	; 0x4002
 800428a:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10;
 800428c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004290:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004294:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8004296:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004298:	f001 ff96 	bl	80061c8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800429c:	4630      	mov	r0, r6
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800429e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80042a2:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042a4:	f2c4 0002 	movt	r0, #16386	; 0x4002
 80042a8:	a908      	add	r1, sp, #32
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80042aa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042ae:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042b2:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042b4:	f001 ff88 	bl	80061c8 <HAL_GPIO_Init>
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042b8:	f44f 6080 	mov.w	r0, #1024	; 0x400
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042bc:	2220      	movs	r2, #32
 80042be:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80042c4:	f240 758c 	movw	r5, #1932	; 0x78c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c8:	a908      	add	r1, sp, #32
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80042ca:	f2c2 0500 	movt	r5, #8192	; 0x2000
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80042ce:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80042d2:	e9cd 890a 	strd	r8, r9, [sp, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80042d6:	970c      	str	r7, [sp, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042d8:	f001 ff76 	bl	80061c8 <HAL_GPIO_Init>
    hdma_spi3_tx.Instance = DMA1_Stream5;
 80042dc:	f246 0388 	movw	r3, #24712	; 0x6088
 80042e0:	f2c4 0302 	movt	r3, #16386	; 0x4002
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042e4:	2240      	movs	r2, #64	; 0x40
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 80042e6:	e9c5 3600 	strd	r3, r6, [r5]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80042ea:	60aa      	str	r2, [r5, #8]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042ec:	f44f 6300 	mov.w	r3, #2048	; 0x800
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80042f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042f4:	e9c5 6203 	strd	r6, r2, [r5, #12]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80042f8:	616b      	str	r3, [r5, #20]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80042fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80042fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004302:	e9c5 2306 	strd	r2, r3, [r5, #24]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004306:	4628      	mov	r0, r5
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8004308:	2204      	movs	r2, #4
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 800430a:	2303      	movs	r3, #3
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800430c:	e9c5 6208 	strd	r6, r2, [r5, #32]
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 8004310:	e9c5 660b 	strd	r6, r6, [r5, #44]	; 0x2c
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8004314:	62ab      	str	r3, [r5, #40]	; 0x28
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 8004316:	f001 fd31 	bl	8005d7c <HAL_DMA_Init>
 800431a:	b938      	cbnz	r0, 800432c <HAL_I2S_MspInit+0x154>
    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 800431c:	63a5      	str	r5, [r4, #56]	; 0x38
 800431e:	63ac      	str	r4, [r5, #56]	; 0x38
}
 8004320:	b00f      	add	sp, #60	; 0x3c
 8004322:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      Error_Handler();
 8004326:	f7ff fe03 	bl	8003f30 <Error_Handler>
 800432a:	e776      	b.n	800421a <HAL_I2S_MspInit+0x42>
      Error_Handler();
 800432c:	f7ff fe00 	bl	8003f30 <Error_Handler>
 8004330:	e7f4      	b.n	800431c <HAL_I2S_MspInit+0x144>
 8004332:	bf00      	nop

08004334 <HAL_TIM_Base_MspInit>:
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
  if(htim_base->Instance==TIM3)
 8004334:	6802      	ldr	r2, [r0, #0]
 8004336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800433a:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800433e:	429a      	cmp	r2, r3
{
 8004340:	b082      	sub	sp, #8
  if(htim_base->Instance==TIM3)
 8004342:	d018      	beq.n	8004376 <HAL_TIM_Base_MspInit+0x42>
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
  else if(htim_base->Instance==TIM4)
 8004344:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004348:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_TIM_Base_MspInit+0x20>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8004350:	b002      	add	sp, #8
 8004352:	4770      	bx	lr
    __HAL_RCC_TIM4_CLK_ENABLE();
 8004354:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8004358:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800435c:	2200      	movs	r2, #0
 800435e:	9201      	str	r2, [sp, #4]
 8004360:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004362:	f042 0204 	orr.w	r2, r2, #4
 8004366:	641a      	str	r2, [r3, #64]	; 0x40
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	f003 0304 	and.w	r3, r3, #4
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	9b01      	ldr	r3, [sp, #4]
}
 8004372:	b002      	add	sp, #8
 8004374:	4770      	bx	lr
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004376:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800437a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800437e:	2200      	movs	r2, #0
 8004380:	9200      	str	r2, [sp, #0]
 8004382:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004384:	f042 0202 	orr.w	r2, r2, #2
 8004388:	641a      	str	r2, [r3, #64]	; 0x40
 800438a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	9b00      	ldr	r3, [sp, #0]
}
 8004394:	b002      	add	sp, #8
 8004396:	4770      	bx	lr

08004398 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004398:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM4)
 800439a:	6801      	ldr	r1, [r0, #0]
 800439c:	f44f 6200 	mov.w	r2, #2048	; 0x800
{
 80043a0:	b089      	sub	sp, #36	; 0x24
  if(htim->Instance==TIM4)
 80043a2:	f2c4 0200 	movt	r2, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043a6:	2300      	movs	r3, #0
  if(htim->Instance==TIM4)
 80043a8:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043aa:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80043ae:	e9cd 3304 	strd	r3, r3, [sp, #16]
 80043b2:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM4)
 80043b4:	d001      	beq.n	80043ba <HAL_TIM_MspPostInit+0x22>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80043b6:	b009      	add	sp, #36	; 0x24
 80043b8:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043ba:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80043be:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80043c2:	9301      	str	r3, [sp, #4]
 80043c4:	6b13      	ldr	r3, [r2, #48]	; 0x30
 80043c6:	f043 0302 	orr.w	r3, r3, #2
 80043ca:	6313      	str	r3, [r2, #48]	; 0x30
 80043cc:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ce:	f44f 6080 	mov.w	r0, #1024	; 0x400
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043d2:	f003 0302 	and.w	r3, r3, #2
 80043d6:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80043d8:	2480      	movs	r4, #128	; 0x80
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043da:	2302      	movs	r3, #2
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80043dc:	2502      	movs	r5, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043de:	a902      	add	r1, sp, #8
 80043e0:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80043e4:	e9cd 4502 	strd	r4, r5, [sp, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80043e8:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80043ea:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80043ec:	f001 feec 	bl	80061c8 <HAL_GPIO_Init>
}
 80043f0:	b009      	add	sp, #36	; 0x24
 80043f2:	bd30      	pop	{r4, r5, pc}

080043f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80043f4:	b530      	push	{r4, r5, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==UART5)
 80043f6:	6802      	ldr	r2, [r0, #0]
 80043f8:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
{
 80043fc:	b08b      	sub	sp, #44	; 0x2c
  if(huart->Instance==UART5)
 80043fe:	f2c4 0300 	movt	r3, #16384	; 0x4000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004402:	2400      	movs	r4, #0
  if(huart->Instance==UART5)
 8004404:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004406:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800440a:	e9cd 4406 	strd	r4, r4, [sp, #24]
 800440e:	9408      	str	r4, [sp, #32]
  if(huart->Instance==UART5)
 8004410:	d001      	beq.n	8004416 <HAL_UART_MspInit+0x22>
  /* USER CODE BEGIN UART5_MspInit 1 */

  /* USER CODE END UART5_MspInit 1 */
  }

}
 8004412:	b00b      	add	sp, #44	; 0x2c
 8004414:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_UART5_CLK_ENABLE();
 8004416:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800441a:	f2c4 0302 	movt	r3, #16386	; 0x4002
 800441e:	9401      	str	r4, [sp, #4]
 8004420:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004422:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8004426:	641a      	str	r2, [r3, #64]	; 0x40
 8004428:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800442a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800442e:	9201      	str	r2, [sp, #4]
 8004430:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004432:	9402      	str	r4, [sp, #8]
 8004434:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004436:	f042 0204 	orr.w	r2, r2, #4
 800443a:	631a      	str	r2, [r3, #48]	; 0x30
 800443c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800443e:	f002 0204 	and.w	r2, r2, #4
 8004442:	9202      	str	r2, [sp, #8]
 8004444:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004446:	9403      	str	r4, [sp, #12]
 8004448:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800444a:	f042 0208 	orr.w	r2, r2, #8
 800444e:	631a      	str	r2, [r3, #48]	; 0x30
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	f003 0308 	and.w	r3, r3, #8
 8004456:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004458:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800445c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800445e:	f44f 6000 	mov.w	r0, #2048	; 0x800
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004462:	e9cd 2304 	strd	r2, r3, [sp, #16]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004466:	2508      	movs	r5, #8
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8004468:	9b03      	ldr	r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800446a:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800446c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800446e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004470:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004474:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004476:	f001 fea7 	bl	80061c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800447a:	2204      	movs	r2, #4
 800447c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800447e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004482:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004486:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004488:	2303      	movs	r3, #3
 800448a:	2200      	movs	r2, #0
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800448c:	f2c4 0002 	movt	r0, #16386	; 0x4002
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004490:	e9cd 2306 	strd	r2, r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004494:	9508      	str	r5, [sp, #32]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004496:	f001 fe97 	bl	80061c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800449a:	4622      	mov	r2, r4
 800449c:	4621      	mov	r1, r4
 800449e:	2035      	movs	r0, #53	; 0x35
 80044a0:	f001 fb96 	bl	8005bd0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80044a4:	2035      	movs	r0, #53	; 0x35
 80044a6:	f001 fbd3 	bl	8005c50 <HAL_NVIC_EnableIRQ>
}
 80044aa:	b00b      	add	sp, #44	; 0x2c
 80044ac:	bd30      	pop	{r4, r5, pc}
 80044ae:	bf00      	nop

080044b0 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80044b0:	e7fe      	b.n	80044b0 <NMI_Handler>
 80044b2:	bf00      	nop

080044b4 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80044b4:	e7fe      	b.n	80044b4 <HardFault_Handler>
 80044b6:	bf00      	nop

080044b8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80044b8:	e7fe      	b.n	80044b8 <MemManage_Handler>
 80044ba:	bf00      	nop

080044bc <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80044bc:	e7fe      	b.n	80044bc <BusFault_Handler>
 80044be:	bf00      	nop

080044c0 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80044c0:	e7fe      	b.n	80044c0 <UsageFault_Handler>
 80044c2:	bf00      	nop

080044c4 <SVC_Handler>:

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop

080044c8 <DebugMon_Handler>:
 80044c8:	4770      	bx	lr
 80044ca:	bf00      	nop

080044cc <PendSV_Handler>:
 80044cc:	4770      	bx	lr
 80044ce:	bf00      	nop

080044d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80044d0:	f001 b8dc 	b.w	800568c <HAL_IncTick>

080044d4 <DMA1_Stream5_IRQHandler>:
void DMA1_Stream5_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 80044d4:	f240 708c 	movw	r0, #1932	; 0x78c
 80044d8:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044dc:	f001 bd82 	b.w	8005fe4 <HAL_DMA_IRQHandler>

080044e0 <UART5_IRQHandler>:
void UART5_IRQHandler(void)
{
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80044e0:	f640 106c 	movw	r0, #2412	; 0x96c
 80044e4:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044e8:	f004 bb4e 	b.w	8008b88 <HAL_UART_IRQHandler>

080044ec <DMA2_Stream0_IRQHandler>:
void DMA2_Stream0_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80044ec:	f240 702c 	movw	r0, #1836	; 0x72c
 80044f0:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80044f4:	f001 bd76 	b.w	8005fe4 <HAL_DMA_IRQHandler>

080044f8 <HAL_ADC_ConvHalfCpltCallback>:
}

/* USER CODE BEGIN 1 */

void HAL_ADC_ConvHalfCpltCallback (ADC_HandleTypeDef * hadc)
{
 80044f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
		Q_tmp = sig_in*sine_arr[cnt];
		if (++cnt == N_cos_sin) cnt = 0;

		//I low pass filter
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80044fc:	f640 335c 	movw	r3, #2908	; 0xb5c
 8004500:	f640 3144 	movw	r1, #2884	; 0xb44
 8004504:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004508:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
 800450c:	ed2d 8b0e 	vpush	{d8-d14}
 8004510:	ed91 2a01 	vldr	s4, [r1, #4]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004514:	edd3 ba02 	vldr	s23, [r3, #8]
 8004518:	edd3 aa01 	vldr	s21, [r3, #4]
 800451c:	ed93 3a00 	vldr	s6, [r3]
 8004520:	edd1 2a00 	vldr	s5, [r1]
 8004524:	ed93 ca03 	vldr	s24, [r3, #12]
 8004528:	edd1 5a02 	vldr	s11, [r1, #8]
 800452c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004530:	edd1 6a03 	vldr	s13, [r1, #12]
		Z_I[2] = Z_I[1];
		Z_I[1] = Z_I[0];
		Z_I[0] = I_tmp;

		//Q low pass filter
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004534:	ee22 aa2b 	vmul.f32	s20, s4, s23
 8004538:	ee22 4a2a 	vmul.f32	s8, s4, s21
 800453c:	eea2 aaaa 	vfma.f32	s20, s5, s21
	GPIOD->BSRR = 1<<15; //calculation time measurement
 8004540:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004544:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004548:	eea2 4a83 	vfma.f32	s8, s5, s6
 800454c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8004550:	f640 2c4c 	movw	ip, #2636	; 0xa4c
 8004554:	eea5 aa8c 	vfma.f32	s20, s11, s24
	GPIOD->BSRR = 1<<15; //calculation time measurement
 8004558:	6190      	str	r0, [r2, #24]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 800455a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 800455e:	eea5 4aab 	vfma.f32	s8, s11, s23
 8004562:	f640 0301 	movw	r3, #2049	; 0x801
 8004566:	f6c3 2300 	movt	r3, #14848	; 0x3a00
 800456a:	eea6 aa87 	vfma.f32	s20, s13, s14
 800456e:	f640 3588 	movw	r5, #2952	; 0xb88
 8004572:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8004576:	eea6 4a8c 	vfma.f32	s8, s13, s24
 800457a:	782e      	ldrb	r6, [r5, #0]
 800457c:	eddc 6a00 	vldr	s13, [ip]
 8004580:	eddc 4a02 	vldr	s9, [ip, #8]
 8004584:	ee0d 3a10 	vmov	s26, r3
 8004588:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 800458c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004590:	eef0 0a46 	vmov.f32	s1, s12
 8004594:	eee6 0a8d 	vfma.f32	s1, s13, s26
		Q_tmp = sig_in*sine_arr[cnt];
 8004598:	f640 19c8 	movw	r9, #2504	; 0x9c8
 800459c:	f2c2 0900 	movt	r9, #8192	; 0x2000
 80045a0:	edd1 6a04 	vldr	s13, [r1, #16]
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 80045a4:	eeb0 5a44 	vmov.f32	s10, s8
 80045a8:	eea6 5a87 	vfma.f32	s10, s13, s14
		Q_tmp = sig_in*sine_arr[cnt];
 80045ac:	eb09 0386 	add.w	r3, r9, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 80045b0:	1c70      	adds	r0, r6, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 80045b2:	ee62 6a0c 	vmul.f32	s13, s4, s24
		Q_tmp = sig_in*sine_arr[cnt];
 80045b6:	ed93 4a00 	vldr	s8, [r3]
 80045ba:	eee2 6aab 	vfma.f32	s13, s5, s23
		if (++cnt == N_cos_sin) cnt = 0;
 80045be:	b2c0      	uxtb	r0, r0
 80045c0:	2821      	cmp	r0, #33	; 0x21
		Q_tmp = sig_in*sine_arr[cnt];
 80045c2:	ee20 4a84 	vmul.f32	s8, s1, s8
 80045c6:	eee5 6a87 	vfma.f32	s13, s11, s14
 80045ca:	f640 3230 	movw	r2, #2864	; 0xb30
 80045ce:	f2c2 0200 	movt	r2, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 80045d2:	eddc 5a01 	vldr	s11, [ip, #4]
 80045d6:	edd2 7a01 	vldr	s15, [r2, #4]
 80045da:	ed92 ba00 	vldr	s22, [r2]
 80045de:	edd2 ca02 	vldr	s25, [r2, #8]
 80045e2:	ed92 1a03 	vldr	s2, [r2, #12]
 80045e6:	ed92 0a04 	vldr	s0, [r2, #16]
 80045ea:	eef8 5a65 	vcvt.f32.u32	s11, s11
 80045ee:	eeb0 8a46 	vmov.f32	s16, s12
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 80045f2:	ee34 4a45 	vsub.f32	s8, s8, s10
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 80045f6:	eea5 8a8d 	vfma.f32	s16, s11, s26
		if (++cnt == N_cos_sin) cnt = 0;
 80045fa:	bf08      	it	eq
 80045fc:	2000      	moveq	r0, #0
		Q_tmp = sig_in*sine_arr[cnt];
 80045fe:	eb09 0380 	add.w	r3, r9, r0, lsl #2
 8004602:	eef0 3a4a 	vmov.f32	s7, s20
 8004606:	eee3 3a04 	vfma.f32	s7, s6, s8
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 800460a:	f240 6844 	movw	r8, #1604	; 0x644
 800460e:	f2c2 0800 	movt	r8, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 8004612:	ed93 aa00 	vldr	s20, [r3]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004616:	ee6a 5aa7 	vmul.f32	s11, s21, s15
		Q_tmp = sig_in*sine_arr[cnt];
 800461a:	ee28 aa0a 	vmul.f32	s20, s16, s20
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 800461e:	eef8 4a64 	vcvt.f32.u32	s9, s9
 8004622:	eeeb 5a03 	vfma.f32	s11, s22, s6
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8004626:	eb08 0686 	add.w	r6, r8, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 800462a:	1c43      	adds	r3, r0, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 800462c:	ee3a aa63 	vsub.f32	s20, s20, s7
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8004630:	eef0 3a46 	vmov.f32	s7, s12
 8004634:	eee4 3a8d 	vfma.f32	s7, s9, s26
		if (++cnt == N_cos_sin) cnt = 0;
 8004638:	b2db      	uxtb	r3, r3
 800463a:	2b21      	cmp	r3, #33	; 0x21
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 800463c:	ee67 4aab 	vmul.f32	s9, s15, s23
 8004640:	eeec 5aab 	vfma.f32	s11, s25, s23
		if (++cnt == N_cos_sin) cnt = 0;
 8004644:	bf08      	it	eq
 8004646:	2300      	moveq	r3, #0
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8004648:	eb08 0783 	add.w	r7, r8, r3, lsl #2
 800464c:	eeeb 4a2a 	vfma.f32	s9, s22, s21
 8004650:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004654:	f640 3414 	movw	r4, #2836	; 0xb14
 8004658:	eee1 5a0c 	vfma.f32	s11, s2, s24
 800465c:	f640 3e10 	movw	lr, #2832	; 0xb10
 8004660:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004664:	eeec 4a8c 	vfma.f32	s9, s25, s24
 8004668:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 800466c:	eee0 5a07 	vfma.f32	s11, s0, s14
 8004670:	eee1 4a07 	vfma.f32	s9, s2, s14
 8004674:	ed96 1a00 	vldr	s2, [r6]
 8004678:	edd4 1a00 	vldr	s3, [r4]
 800467c:	ee60 0a81 	vmul.f32	s1, s1, s2
		Q_tmp = sig_in*sine_arr[cnt];
 8004680:	eb09 0683 	add.w	r6, r9, r3, lsl #2
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004684:	ee70 5ae5 	vsub.f32	s11, s1, s11
		if (++cnt == N_cos_sin) cnt = 0;
 8004688:	3301      	adds	r3, #1
 800468a:	b2db      	uxtb	r3, r3
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 800468c:	ee22 5a07 	vmul.f32	s10, s4, s14
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 8004690:	ed90 1a00 	vldr	s2, [r0]
		if (++cnt == N_cos_sin) cnt = 0;
 8004694:	2b21      	cmp	r3, #33	; 0x21
 8004696:	eee3 4a25 	vfma.f32	s9, s6, s11
 800469a:	bf08      	it	eq
 800469c:	2300      	moveq	r3, #0
		Q_tmp = sig_in*sine_arr[cnt];
 800469e:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 80046a2:	eea2 5a8c 	vfma.f32	s10, s5, s24
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 80046a6:	eb08 0883 	add.w	r8, r8, r3, lsl #2
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80046aa:	f640 3070 	movw	r0, #2928	; 0xb70
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 80046ae:	ee28 8a01 	vmul.f32	s16, s16, s2
		if (++cnt == N_cos_sin) cnt = 0;
 80046b2:	3301      	adds	r3, #1
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80046b4:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if (++cnt == N_cos_sin) cnt = 0;
 80046b8:	b2db      	uxtb	r3, r3
 80046ba:	eeea 6a84 	vfma.f32	s13, s21, s8
 80046be:	2b21      	cmp	r3, #33	; 0x21
 80046c0:	bf08      	it	eq
 80046c2:	2300      	moveq	r3, #0
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80046c4:	ee78 4a64 	vsub.f32	s9, s16, s9
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80046c8:	edd0 0a00 	vldr	s1, [r0]
 80046cc:	ed90 0a01 	vldr	s0, [r0, #4]
 80046d0:	ed90 9a02 	vldr	s18, [r0, #8]
 80046d4:	edd0 9a03 	vldr	s19, [r0, #12]
 80046d8:	edd0 8a04 	vldr	s17, [r0, #16]
 80046dc:	ed90 8a05 	vldr	s16, [r0, #20]
 80046e0:	ed9e 1a00 	vldr	s2, [lr]
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 80046e4:	ed97 ea00 	vldr	s28, [r7]
 80046e8:	ed84 1a00 	vstr	s2, [r4]
 80046ec:	eeab 5a84 	vfma.f32	s10, s23, s8
 80046f0:	702b      	strb	r3, [r5, #0]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 80046f2:	f8dc 300c 	ldr.w	r3, [ip, #12]
		Q_tmp = sig_in*sine_arr[cnt];
 80046f6:	edd6 da00 	vldr	s27, [r6]
 80046fa:	edc2 4a02 	vstr	s9, [r2, #8]
 80046fe:	eee3 6a0a 	vfma.f32	s13, s6, s20
	}

	float phase;
	int32_t DAC_value;

	switch(Demod_Type)
 8004702:	f640 340e 	movw	r4, #2830	; 0xb0e
 8004706:	f2c2 0400 	movt	r4, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 800470a:	ee63 daad 	vmul.f32	s27, s7, s27
 800470e:	eeaa 5a8a 	vfma.f32	s10, s21, s20
			Q_Z2 = Q_Z1;
 8004712:	f640 3024 	movw	r0, #2852	; 0xb24
	switch(Demod_Type)
 8004716:	7824      	ldrb	r4, [r4, #0]
 8004718:	edc2 5a03 	vstr	s11, [r2, #12]
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 800471c:	ee7d 6ae6 	vsub.f32	s13, s27, s13
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8004720:	ee0d 3a90 	vmov	s27, r3
 8004724:	eea3 5a26 	vfma.f32	s10, s6, s13
			Q_Z1 = Q;
 8004728:	f640 331c 	movw	r3, #2844	; 0xb1c
 800472c:	f2c2 0300 	movt	r3, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8004730:	eef8 da6d 	vcvt.f32.u32	s27, s27
		Z_Q[1] = Z_Q[0];
 8004734:	edc1 6a01 	vstr	s13, [r1, #4]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale; //scaling from 0...4095 to +/-1.000
 8004738:	eead 6a8d 	vfma.f32	s12, s27, s26
			Q_Z2 = Q_Z1;
 800473c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004740:	eeb0 da45 	vmov.f32	s26, s10
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004744:	ee27 5a8c 	vmul.f32	s10, s15, s24
 8004748:	ed82 ba04 	vstr	s22, [r2, #16]
 800474c:	eeab 5a2b 	vfma.f32	s10, s22, s23
		Z_Q[4] = Z_Q[3];
 8004750:	edc1 2a04 	vstr	s5, [r1, #16]
 8004754:	eeac 5a87 	vfma.f32	s10, s25, s14
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004758:	ee27 7a87 	vmul.f32	s14, s15, s14
		Z_Q[3] = Z_Q[2];
 800475c:	ed81 4a03 	vstr	s8, [r1, #12]
 8004760:	eeab 7a0c 	vfma.f32	s14, s22, s24
		Z_Q[2] = Z_Q[1];
 8004764:	ed81 aa02 	vstr	s20, [r1, #8]
		Q_tmp = sig_in*sine_arr[cnt];
 8004768:	edd9 ca00 	vldr	s25, [r9]
 800476c:	eeab 7aa5 	vfma.f32	s14, s23, s11
 8004770:	ee66 ba2c 	vmul.f32	s23, s12, s25
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8004774:	ee60 6a26 	vmul.f32	s13, s0, s13
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004778:	ee7b bacd 	vsub.f32	s23, s23, s26
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 800477c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004780:	eeaa 5aa5 	vfma.f32	s10, s21, s11
 8004784:	eee8 7a8b 	vfma.f32	s15, s17, s22
 8004788:	eee0 6aab 	vfma.f32	s13, s1, s23
 800478c:	eee9 7aa5 	vfma.f32	s15, s19, s11
 8004790:	eee9 6a0a 	vfma.f32	s13, s18, s20
 8004794:	eea3 5a24 	vfma.f32	s10, s6, s9
 8004798:	eeaa 7aa4 	vfma.f32	s14, s21, s9
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 800479c:	ee63 3a8e 	vmul.f32	s7, s7, s28
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80047a0:	eee9 6a84 	vfma.f32	s13, s19, s8
 80047a4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 80047a8:	eee9 7a24 	vfma.f32	s15, s18, s9
		Z_Q[0] = Q_tmp;
 80047ac:	edc1 ba00 	vstr	s23, [r1]
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 80047b0:	edd8 5a00 	vldr	s11, [r8]
 80047b4:	edc2 3a01 	vstr	s7, [r2, #4]
 80047b8:	eea3 7a83 	vfma.f32	s14, s7, s6
			Q_Z2 = Q_Z1;
 80047bc:	f640 3120 	movw	r1, #2848	; 0xb20
 80047c0:	f2c2 0100 	movt	r1, #8192	; 0x2000
		I_tmp = sig_in*cosine_arr[cnt]; //multiplication by sine and cosine before LPF
 80047c4:	ee26 6a25 	vmul.f32	s12, s12, s11
 80047c8:	eee8 6aa2 	vfma.f32	s13, s17, s5
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 80047cc:	eee0 7a23 	vfma.f32	s15, s0, s7
 80047d0:	ee36 7a47 	vsub.f32	s14, s12, s14
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 80047d4:	eee8 6a02 	vfma.f32	s13, s16, s4
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 80047d8:	eee0 7a87 	vfma.f32	s15, s1, s14
			Q_Z2 = Q_Z1;
 80047dc:	edd1 5a00 	vldr	s11, [r1]
			Q_Z1 = Q;
 80047e0:	ed93 6a00 	vldr	s12, [r3]
 80047e4:	ed82 7a00 	vstr	s14, [r2]
 80047e8:	f640 3218 	movw	r2, #2840	; 0xb18
 80047ec:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80047f0:	edce 7a00 	vstr	s15, [lr]
			Q_Z2 = Q_Z1;
 80047f4:	edc2 1a00 	vstr	s3, [r2]
 80047f8:	edc0 5a00 	vstr	s11, [r0]
			Q_Z1 = Q;
 80047fc:	ed81 6a00 	vstr	s12, [r1]
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8004800:	edc3 6a00 	vstr	s13, [r3]
	switch(Demod_Type)
 8004804:	2c03      	cmp	r4, #3
 8004806:	f200 809f 	bhi.w	8004948 <HAL_ADC_ConvHalfCpltCallback+0x450>
 800480a:	e8df f014 	tbh	[pc, r4, lsl #1]
 800480e:	015d      	.short	0x015d
 8004810:	01300004 	.word	0x01300004
 8004814:	00a8      	.short	0x00a8
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
		break;

	//AM detector
	case DEMOD_AM: //simple AM detector based on module
			module = sqrtf(I*I + Q*Q);
 8004816:	ee66 6aa6 	vmul.f32	s13, s13, s13

			//digital AGC - more likely automatic scaling
			if (module > module_max_tmp) module_max_tmp = module;
 800481a:	f640 3190 	movw	r1, #2960	; 0xb90
			module = sqrtf(I*I + Q*Q);
 800481e:	eee7 6aa7 	vfma.f32	s13, s15, s15
			AM_mod_max_cnt++;
 8004822:	f640 3308 	movw	r3, #2824	; 0xb08
			if (module > module_max_tmp) module_max_tmp = module;
 8004826:	f2c2 0100 	movt	r1, #8192	; 0x2000
			AM_mod_max_cnt++;
 800482a:	f2c2 0300 	movt	r3, #8192	; 0x2000
			module = sqrtf(I*I + Q*Q);
 800482e:	eeb1 6ae6 	vsqrt.f32	s12, s13
			AM_mod_max_cnt++;
 8004832:	681a      	ldr	r2, [r3, #0]
			if (AM_mod_max_cnt == AM_max_cnt_sample)
 8004834:	f64e 2060 	movw	r0, #60000	; 0xea60
			AM_mod_max_cnt++;
 8004838:	3201      	adds	r2, #1
			module = sqrtf(I*I + Q*Q);
 800483a:	f640 348c 	movw	r4, #2956	; 0xb8c
 800483e:	f2c2 0400 	movt	r4, #8192	; 0x2000
			AM_mod_max_cnt++;
 8004842:	601a      	str	r2, [r3, #0]
			if (module > module_max_tmp) module_max_tmp = module;
 8004844:	edd1 7a00 	vldr	s15, [r1]
 8004848:	eeb4 6ae7 	vcmpe.f32	s12, s15
 800484c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004850:	bfc4      	itt	gt
 8004852:	eef0 7a46 	vmovgt.f32	s15, s12
 8004856:	ed81 6a00 	vstrgt	s12, [r1]
			if (AM_mod_max_cnt == AM_max_cnt_sample)
 800485a:	4282      	cmp	r2, r0
 800485c:	f000 81bf 	beq.w	8004bde <HAL_ADC_ConvHalfCpltCallback+0x6e6>
			module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
			Z2_audio = Z1_audio;
			Z1_audio = tmp;


			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004860:	f640 3304 	movw	r3, #2820	; 0xb04
 8004864:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004868:	edd3 3a00 	vldr	s7, [r3]
			tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 800486c:	f24b 5342 	movw	r3, #46402	; 0xb542
 8004870:	f6c3 7362 	movt	r3, #16226	; 0x3f62
 8004874:	ee07 3a90 	vmov	s15, r3
 8004878:	f646 1391 	movw	r3, #27025	; 0x6991
 800487c:	f6cb 73ef 	movt	r3, #49135	; 0xbfef
 8004880:	ee06 3a90 	vmov	s13, r3
 8004884:	f640 312c 	movw	r1, #2860	; 0xb2c
			tmp = module - Z_audio*a_AM_HPF;
 8004888:	f640 3058 	movw	r0, #2904	; 0xb58
 800488c:	f649 634b 	movw	r3, #40523	; 0x9e4b
 8004890:	f2c2 0000 	movt	r0, #8192	; 0x2000
			tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 8004894:	f2c2 0100 	movt	r1, #8192	; 0x2000
			tmp = module - Z_audio*a_AM_HPF;
 8004898:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
			tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 800489c:	ed91 7a00 	vldr	s14, [r1]
			tmp = module - Z_audio*a_AM_HPF;
 80048a0:	ed90 4a00 	vldr	s8, [r0]
 80048a4:	ee05 3a10 	vmov	s10, r3
			tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 80048a8:	f640 3228 	movw	r2, #2856	; 0xb28
 80048ac:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80048b0:	edd2 4a00 	vldr	s9, [r2]
			tmp = module - Z_audio*a_AM_HPF;
 80048b4:	eea4 6a05 	vfma.f32	s12, s8, s10
 80048b8:	f64c 7325 	movw	r3, #53029	; 0xcf25
 80048bc:	f6cb 737f 	movt	r3, #49023	; 0xbf7f
			tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 80048c0:	ee67 7a27 	vmul.f32	s15, s14, s15
			tmp = module - Z_audio*a_AM_HPF;
 80048c4:	eef0 5a46 	vmov.f32	s11, s12
			Z_audio = tmp;
 80048c8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80048cc:	ee06 3a90 	vmov	s13, r3
			tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 80048d0:	f64c 7325 	movw	r3, #53029	; 0xcf25
 80048d4:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
 80048d8:	ee06 3a10 	vmov	s12, r3
			module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
 80048dc:	f641 5310 	movw	r3, #7440	; 0x1d10
 80048e0:	f6c3 3351 	movt	r3, #15185	; 0x3b51
 80048e4:	ee05 3a10 	vmov	s10, r3
 80048e8:	eed4 7a26 	vfnms.f32	s15, s8, s13
 80048ec:	f641 5310 	movw	r3, #7440	; 0x1d10
 80048f0:	f6c3 33d1 	movt	r3, #15313	; 0x3bd1
 80048f4:	ee67 6a05 	vmul.f32	s13, s14, s10
 80048f8:	ee07 3a10 	vmov	s14, r3
			tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 80048fc:	eee5 7a86 	vfma.f32	s15, s11, s12
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004900:	2300      	movs	r3, #0
 8004902:	f2c4 53c8 	movt	r3, #17864	; 0x45c8
 8004906:	eee4 6a87 	vfma.f32	s13, s9, s14
 800490a:	ee06 3a10 	vmov	s12, r3
			module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
 800490e:	eee7 6a85 	vfma.f32	s13, s15, s10
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004912:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8004916:	ee07 3a10 	vmov	s14, r3
 800491a:	ee26 6a86 	vmul.f32	s12, s13, s12
			Z_audio = tmp;
 800491e:	edc0 5a00 	vstr	s11, [r0]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004922:	eea6 7a23 	vfma.f32	s14, s12, s7
			//if (DAC_value > 4095) DAC_value = 4095; //it would be better with this limiter but it's not enough time to do that
			if (DAC_value < 0) DAC_value = 0;
			DAC->DHR12R1 = DAC_value;
 8004926:	f44f 40e8 	mov.w	r0, #29696	; 0x7400
 800492a:	f2c4 0000 	movt	r0, #16384	; 0x4000
			module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
 800492e:	edc4 6a00 	vstr	s13, [r4]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004932:	eebd 7ac7 	vcvt.s32.f32	s14, s14
			Z2_audio = Z1_audio;
 8004936:	edc1 4a00 	vstr	s9, [r1]
			DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 800493a:	ee17 3a10 	vmov	r3, s14
			DAC->DHR12R1 = DAC_value;
 800493e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
			Z1_audio = tmp;
 8004942:	edc2 7a00 	vstr	s15, [r2]
			DAC->DHR12R1 = DAC_value;
 8004946:	6083      	str	r3, [r0, #8]
	default:
		break;
	}

	GPIOD->BSRR = 1<<31; //calculation time measurement
}
 8004948:	ecbd 8b0e 	vpop	{d8-d14}
	GPIOD->BSRR = 1<<31; //calculation time measurement
 800494c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8004950:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8004954:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004958:	619a      	str	r2, [r3, #24]
}
 800495a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		module = sqrtf(I*I + Q*Q);
 800495e:	ee66 6aa6 	vmul.f32	s13, s13, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8004962:	f640 312c 	movw	r1, #2860	; 0xb2c
		module = sqrtf(I*I + Q*Q);
 8004966:	eee7 6aa7 	vfma.f32	s13, s15, s15
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 800496a:	f648 63bc 	movw	r3, #36540	; 0x8ebc
 800496e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004972:	f6c3 737e 	movt	r3, #16254	; 0x3f7e
		module = sqrtf(I*I + Q*Q);
 8004976:	eeb1 6ae6 	vsqrt.f32	s12, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 800497a:	f640 3228 	movw	r2, #2856	; 0xb28
 800497e:	f244 60b4 	movw	r0, #18100	; 0x46b4
 8004982:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004986:	f6cb 70ff 	movt	r0, #49151	; 0xbfff
 800498a:	edd1 7a00 	vldr	s15, [r1]
 800498e:	edd2 5a00 	vldr	s11, [r2]
 8004992:	ee07 3a10 	vmov	s14, r3
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8004996:	f240 035c 	movw	r3, #92	; 0x5c
 800499a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800499e:	ee06 0a90 	vmov	s13, r0
 80049a2:	ed93 5a02 	vldr	s10, [r3, #8]
		Z2_audio = Z1_audio;
 80049a6:	edc1 5a00 	vstr	s11, [r1]
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 80049aa:	ee27 7a87 	vmul.f32	s14, s15, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80049ae:	ee67 7a85 	vmul.f32	s15, s15, s10
 80049b2:	eea5 7aa6 	vfma.f32	s14, s11, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80049b6:	f240 005a 	movw	r0, #90	; 0x5a
 80049ba:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80049be:	ed93 5a01 	vldr	s10, [r3, #4]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80049c2:	edd3 6a00 	vldr	s13, [r3]
 80049c6:	eee5 7a85 	vfma.f32	s15, s11, s10
 80049ca:	2300      	movs	r3, #0
 80049cc:	f2c4 33fa 	movt	r3, #17402	; 0x43fa
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 80049d0:	ee36 7a47 	vsub.f32	s14, s12, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80049d4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80049d8:	ee06 3a90 	vmov	s13, r3
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80049dc:	8803      	ldrh	r3, [r0, #0]
		Z1_audio = tmp;
 80049de:	ed82 7a00 	vstr	s14, [r2]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80049e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80049e6:	ee06 3a90 	vmov	s13, r3
 80049ea:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80049ee:	f640 330d 	movw	r3, #2829	; 0xb0d
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80049f2:	f640 308c 	movw	r0, #2956	; 0xb8c
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80049f6:	eef4 7ae6 	vcmpe.f32	s15, s13
 80049fa:	f2c2 0300 	movt	r3, #8192	; 0x2000
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80049fe:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8004a02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a06:	781a      	ldrb	r2, [r3, #0]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8004a08:	edc0 7a00 	vstr	s15, [r0]
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8004a0c:	f340 80e3 	ble.w	8004bd6 <HAL_ADC_ConvHalfCpltCallback+0x6de>
 8004a10:	b932      	cbnz	r2, 8004a20 <HAL_ADC_ConvHalfCpltCallback+0x528>
			DAC->DHR12R1 = 0;
 8004a12:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8004a16:	f2c4 0100 	movt	r1, #16384	; 0x4000
			CW_triggered = true;
 8004a1a:	2001      	movs	r0, #1
 8004a1c:	7018      	strb	r0, [r3, #0]
			DAC->DHR12R1 = 0;
 8004a1e:	608a      	str	r2, [r1, #8]
			CW_decim_cnt++;
 8004a20:	f640 310c 	movw	r1, #2828	; 0xb0c
 8004a24:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004a28:	780a      	ldrb	r2, [r1, #0]
 8004a2a:	3201      	adds	r2, #1
 8004a2c:	b2d2      	uxtb	r2, r2
			if (CW_decim_cnt == 107)
 8004a2e:	2a6b      	cmp	r2, #107	; 0x6b
			CW_decim_cnt++;
 8004a30:	700a      	strb	r2, [r1, #0]
			if (CW_decim_cnt == 107)
 8004a32:	d10b      	bne.n	8004a4c <HAL_ADC_ConvHalfCpltCallback+0x554>
				DAC->DHR12R1 ^= 0xFFF;
 8004a34:	f44f 40e8 	mov.w	r0, #29696	; 0x7400
 8004a38:	f2c4 0000 	movt	r0, #16384	; 0x4000
				CW_decim_cnt = 0;
 8004a3c:	2400      	movs	r4, #0
				DAC->DHR12R1 ^= 0xFFF;
 8004a3e:	6882      	ldr	r2, [r0, #8]
 8004a40:	f482 627f 	eor.w	r2, r2, #4080	; 0xff0
 8004a44:	f082 020f 	eor.w	r2, r2, #15
 8004a48:	6082      	str	r2, [r0, #8]
				CW_decim_cnt = 0;
 8004a4a:	700c      	strb	r4, [r1, #0]
			if (module < CW_trig_lower_level) CW_triggered = false;
 8004a4c:	f240 0258 	movw	r2, #88	; 0x58
 8004a50:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004a54:	7812      	ldrb	r2, [r2, #0]
 8004a56:	ee07 2a10 	vmov	s14, r2
 8004a5a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8004a5e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004a62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a66:	bf44      	itt	mi
 8004a68:	2200      	movmi	r2, #0
 8004a6a:	701a      	strbmi	r2, [r3, #0]
 8004a6c:	e76c      	b.n	8004948 <HAL_ADC_ConvHalfCpltCallback+0x450>
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 8004a6e:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8004a72:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8004a76:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
 8004a7a:	f2c4 5255 	movt	r2, #17749	; 0x4555
 8004a7e:	ee05 2a90 	vmov	s11, r2
 8004a82:	ee06 3a10 	vmov	s12, r3
 8004a86:	ee07 3a10 	vmov	s14, r3
 8004a8a:	eea7 6aa5 	vfma.f32	s12, s15, s11
			DAC->DHR12R1 = DAC_value;
 8004a8e:	f640 70ff 	movw	r0, #4095	; 0xfff
 8004a92:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 8004a96:	eea6 7aa5 	vfma.f32	s14, s13, s11
			DAC->DHR12R1 = DAC_value;
 8004a9a:	f2c4 0100 	movt	r1, #16384	; 0x4000
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 8004a9e:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 8004aa2:	ee17 2a90 	vmov	r2, s15
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 8004aa6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 8004aaa:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 8004aae:	ee17 3a90 	vmov	r3, s15
			DAC->DHR12R1 = DAC_value;
 8004ab2:	4282      	cmp	r2, r0
 8004ab4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004ab8:	bfa8      	it	ge
 8004aba:	4602      	movge	r2, r0
			DAC->DHR12R2 = DAC_value;
 8004abc:	4283      	cmp	r3, r0
 8004abe:	bfa8      	it	ge
 8004ac0:	4603      	movge	r3, r0
			DAC->DHR12R1 = DAC_value;
 8004ac2:	608a      	str	r2, [r1, #8]
			DAC->DHR12R2 = DAC_value;
 8004ac4:	614b      	str	r3, [r1, #20]
		break;
 8004ac6:	e73f      	b.n	8004948 <HAL_ADC_ConvHalfCpltCallback+0x450>
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 8004ac8:	ee71 7ae7 	vsub.f32	s15, s3, s15
 8004acc:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8004ad0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8004ad4:	ee26 6a06 	vmul.f32	s12, s12, s12
 8004ad8:	eee6 7a81 	vfma.f32	s15, s13, s2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004adc:	2300      	movs	r3, #0
 8004ade:	f2c4 2395 	movt	r3, #17045	; 0x4295
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 8004ae2:	eea1 6a01 	vfma.f32	s12, s2, s2
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004ae6:	f640 302c 	movw	r0, #2860	; 0xb2c
 8004aea:	f2c2 0000 	movt	r0, #8192	; 0x2000
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 8004aee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8004af2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004af6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 8004afa:	ee87 7a86 	vdiv.f32	s14, s15, s12
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004afe:	f640 3128 	movw	r1, #2856	; 0xb28
 8004b02:	f24a 322f 	movw	r2, #41775	; 0xa32f
 8004b06:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004b0a:	f6cb 72d2 	movt	r2, #49106	; 0xbfd2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004b0e:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
 8004b12:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8004b16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b1a:	bf8c      	ite	hi
 8004b1c:	eef0 7a64 	vmovhi.f32	s15, s9
 8004b20:	eef0 7a47 	vmovls.f32	s15, s14
 8004b24:	eef4 7ac5 	vcmpe.f32	s15, s10
 8004b28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b2c:	bfb8      	it	lt
 8004b2e:	eef0 7a45 	vmovlt.f32	s15, s10
 8004b32:	ee05 3a90 	vmov	s11, r3
 8004b36:	ee77 7aa4 	vadd.f32	s15, s15, s9
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004b3a:	f240 738c 	movw	r3, #1932	; 0x78c
 8004b3e:	f6c3 733a 	movt	r3, #16186	; 0x3f3a
 8004b42:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004b46:	ee67 7aa5 	vmul.f32	s15, s15, s11
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004b4a:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 8004b4e:	f6c3 4393 	movt	r3, #15507	; 0x3c93
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004b52:	edd0 6a00 	vldr	s13, [r0]
 8004b56:	edd1 4a00 	vldr	s9, [r1]
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004b5a:	ee05 3a90 	vmov	s11, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004b5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b62:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 8004b66:	f6c3 5313 	movt	r3, #15635	; 0x3d13
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004b6a:	ee26 7a86 	vmul.f32	s14, s13, s12
 8004b6e:	ee05 2a10 	vmov	s10, r2
 8004b72:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8004b76:	ee17 3a90 	vmov	r3, s15
 8004b7a:	f240 32ec 	movw	r2, #1004	; 0x3ec
 8004b7e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004b82:	eea4 7a85 	vfma.f32	s14, s9, s10
 8004b86:	b29b      	uxth	r3, r3
 8004b88:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004b8c:	ee66 6aa5 	vmul.f32	s13, s13, s11
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004b90:	edd3 7a00 	vldr	s15, [r3]
			Z2_audio = Z1_audio;
 8004b94:	edc0 4a00 	vstr	s9, [r0]
 8004b98:	eee4 6a86 	vfma.f32	s13, s9, s12
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 8004b9c:	f64e 7254 	movw	r2, #61268	; 0xef54
 8004ba0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8004ba4:	ee37 7ac7 	vsub.f32	s14, s15, s14
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 8004ba8:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 8004bac:	eee7 6a25 	vfma.f32	s13, s14, s11
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 8004bb0:	f2c4 42a2 	movt	r2, #17570	; 0x44a2
 8004bb4:	ee07 3a90 	vmov	s15, r3
 8004bb8:	ee06 2a10 	vmov	s12, r2
 8004bbc:	eee6 7a86 	vfma.f32	s15, s13, s12
 8004bc0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 8004bc4:	f2c4 0300 	movt	r3, #16384	; 0x4000
			Z1_audio = tmp;
 8004bc8:	ed81 7a00 	vstr	s14, [r1]
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM; //scaling
 8004bcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004bd0:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 8004bd4:	e6b8      	b.n	8004948 <HAL_ADC_ConvHalfCpltCallback+0x450>
		if (CW_triggered)
 8004bd6:	2a00      	cmp	r2, #0
 8004bd8:	f43f aeb6 	beq.w	8004948 <HAL_ADC_ConvHalfCpltCallback+0x450>
 8004bdc:	e720      	b.n	8004a20 <HAL_ADC_ConvHalfCpltCallback+0x528>
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 8004bde:	f243 3233 	movw	r2, #13107	; 0x3333
 8004be2:	f6c3 7233 	movt	r2, #16179	; 0x3f33
 8004be6:	ee07 2a10 	vmov	s14, r2
 8004bea:	eec7 3a27 	vdiv.f32	s7, s14, s15
 8004bee:	f640 3204 	movw	r2, #2820	; 0xb04
				AM_mod_max_cnt = 0;
 8004bf2:	2000      	movs	r0, #0
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 8004bf4:	f2c2 0200 	movt	r2, #8192	; 0x2000
				AM_mod_max_cnt = 0;
 8004bf8:	6018      	str	r0, [r3, #0]
				module_max_tmp = -1.0;
 8004bfa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8004bfe:	edc1 7a00 	vstr	s15, [r1]
				AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 8004c02:	edc2 3a00 	vstr	s7, [r2]
				module_max_tmp = -1.0;
 8004c06:	e631      	b.n	800486c <HAL_ADC_ConvHalfCpltCallback+0x374>

08004c08 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback (ADC_HandleTypeDef * hadc)
{
 8004c08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
		I_tmp = sig_in*cosine_arr[cnt];
		Q_tmp = sig_in*sine_arr[cnt];
		if (++cnt == N_cos_sin) cnt = 0;

		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004c0c:	f640 335c 	movw	r3, #2908	; 0xb5c
 8004c10:	f640 3144 	movw	r1, #2884	; 0xb44
 8004c14:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8004c18:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
 8004c1c:	ed2d 8b0e 	vpush	{d8-d14}
 8004c20:	ed91 2a01 	vldr	s4, [r1, #4]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004c24:	edd3 ba02 	vldr	s23, [r3, #8]
 8004c28:	edd3 aa01 	vldr	s21, [r3, #4]
 8004c2c:	ed93 3a00 	vldr	s6, [r3]
 8004c30:	edd1 2a00 	vldr	s5, [r1]
 8004c34:	ed93 ca03 	vldr	s24, [r3, #12]
 8004c38:	edd1 5a02 	vldr	s11, [r1, #8]
 8004c3c:	ed93 7a04 	vldr	s14, [r3, #16]
 8004c40:	edd1 6a03 	vldr	s13, [r1, #12]
		Z_I[3] = Z_I[2];
		Z_I[2] = Z_I[1];
		Z_I[1] = Z_I[0];
		Z_I[0] = I_tmp;

		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004c44:	ee22 aa2b 	vmul.f32	s20, s4, s23
 8004c48:	ee22 4a2a 	vmul.f32	s8, s4, s21
 8004c4c:	eea2 aaaa 	vfma.f32	s20, s5, s21
	GPIOD->BSRR = 1<<15; //calculation time measurement
 8004c50:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8004c54:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8004c58:	eea2 4a83 	vfma.f32	s8, s5, s6
 8004c5c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004c60:	f640 2c4c 	movw	ip, #2636	; 0xa4c
 8004c64:	eea5 aa8c 	vfma.f32	s20, s11, s24
	GPIOD->BSRR = 1<<15; //calculation time measurement
 8004c68:	6190      	str	r0, [r2, #24]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004c6a:	f2c2 0c00 	movt	ip, #8192	; 0x2000
 8004c6e:	eea5 4aab 	vfma.f32	s8, s11, s23
 8004c72:	f640 0301 	movw	r3, #2049	; 0x801
 8004c76:	f6c3 2300 	movt	r3, #14848	; 0x3a00
 8004c7a:	eea6 aa87 	vfma.f32	s20, s13, s14
 8004c7e:	f640 3588 	movw	r5, #2952	; 0xb88
 8004c82:	f2c2 0500 	movt	r5, #8192	; 0x2000
 8004c86:	eea6 4a8c 	vfma.f32	s8, s13, s24
 8004c8a:	782e      	ldrb	r6, [r5, #0]
 8004c8c:	eddc 6a04 	vldr	s13, [ip, #16]
 8004c90:	eddc 4a06 	vldr	s9, [ip, #24]
 8004c94:	ee0d 3a10 	vmov	s26, r3
 8004c98:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 8004c9c:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004ca0:	eef0 0a46 	vmov.f32	s1, s12
 8004ca4:	eee6 0a8d 	vfma.f32	s1, s13, s26
		Q_tmp = sig_in*sine_arr[cnt];
 8004ca8:	f640 19c8 	movw	r9, #2504	; 0x9c8
 8004cac:	f2c2 0900 	movt	r9, #8192	; 0x2000
 8004cb0:	edd1 6a04 	vldr	s13, [r1, #16]
		I_tmp = sig_in*cosine_arr[cnt];
 8004cb4:	eeb0 5a44 	vmov.f32	s10, s8
 8004cb8:	eea6 5a87 	vfma.f32	s10, s13, s14
		Q_tmp = sig_in*sine_arr[cnt];
 8004cbc:	eb09 0386 	add.w	r3, r9, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 8004cc0:	1c70      	adds	r0, r6, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004cc2:	ee62 6a0c 	vmul.f32	s13, s4, s24
		Q_tmp = sig_in*sine_arr[cnt];
 8004cc6:	ed93 4a00 	vldr	s8, [r3]
 8004cca:	eee2 6aab 	vfma.f32	s13, s5, s23
		if (++cnt == N_cos_sin) cnt = 0;
 8004cce:	b2c0      	uxtb	r0, r0
 8004cd0:	2821      	cmp	r0, #33	; 0x21
		Q_tmp = sig_in*sine_arr[cnt];
 8004cd2:	ee20 4a84 	vmul.f32	s8, s1, s8
 8004cd6:	eee5 6a87 	vfma.f32	s13, s11, s14
 8004cda:	f640 3230 	movw	r2, #2864	; 0xb30
 8004cde:	f2c2 0200 	movt	r2, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004ce2:	eddc 5a05 	vldr	s11, [ip, #20]
 8004ce6:	edd2 7a01 	vldr	s15, [r2, #4]
 8004cea:	ed92 ba00 	vldr	s22, [r2]
 8004cee:	edd2 ca02 	vldr	s25, [r2, #8]
 8004cf2:	ed92 1a03 	vldr	s2, [r2, #12]
 8004cf6:	ed92 0a04 	vldr	s0, [r2, #16]
 8004cfa:	eef8 5a65 	vcvt.f32.u32	s11, s11
 8004cfe:	eeb0 8a46 	vmov.f32	s16, s12
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004d02:	ee34 4a45 	vsub.f32	s8, s8, s10
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004d06:	eea5 8a8d 	vfma.f32	s16, s11, s26
		if (++cnt == N_cos_sin) cnt = 0;
 8004d0a:	bf08      	it	eq
 8004d0c:	2000      	moveq	r0, #0
		Q_tmp = sig_in*sine_arr[cnt];
 8004d0e:	eb09 0380 	add.w	r3, r9, r0, lsl #2
 8004d12:	eef0 3a4a 	vmov.f32	s7, s20
 8004d16:	eee3 3a04 	vfma.f32	s7, s6, s8
		I_tmp = sig_in*cosine_arr[cnt];
 8004d1a:	f240 6844 	movw	r8, #1604	; 0x644
 8004d1e:	f2c2 0800 	movt	r8, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 8004d22:	ed93 aa00 	vldr	s20, [r3]
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004d26:	ee6a 5aa7 	vmul.f32	s11, s21, s15
		Q_tmp = sig_in*sine_arr[cnt];
 8004d2a:	ee28 aa0a 	vmul.f32	s20, s16, s20
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004d2e:	eef8 4a64 	vcvt.f32.u32	s9, s9
 8004d32:	eeeb 5a03 	vfma.f32	s11, s22, s6
		I_tmp = sig_in*cosine_arr[cnt];
 8004d36:	eb08 0686 	add.w	r6, r8, r6, lsl #2
		if (++cnt == N_cos_sin) cnt = 0;
 8004d3a:	1c43      	adds	r3, r0, #1
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004d3c:	ee3a aa63 	vsub.f32	s20, s20, s7
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004d40:	eef0 3a46 	vmov.f32	s7, s12
 8004d44:	eee4 3a8d 	vfma.f32	s7, s9, s26
		if (++cnt == N_cos_sin) cnt = 0;
 8004d48:	b2db      	uxtb	r3, r3
 8004d4a:	2b21      	cmp	r3, #33	; 0x21
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004d4c:	ee67 4aab 	vmul.f32	s9, s15, s23
 8004d50:	eeec 5aab 	vfma.f32	s11, s25, s23
		if (++cnt == N_cos_sin) cnt = 0;
 8004d54:	bf08      	it	eq
 8004d56:	2300      	moveq	r3, #0
		I_tmp = sig_in*cosine_arr[cnt];
 8004d58:	eb08 0783 	add.w	r7, r8, r3, lsl #2
 8004d5c:	eeeb 4a2a 	vfma.f32	s9, s22, s21
 8004d60:	eb08 0080 	add.w	r0, r8, r0, lsl #2
 8004d64:	f640 3414 	movw	r4, #2836	; 0xb14
 8004d68:	eee1 5a0c 	vfma.f32	s11, s2, s24
 8004d6c:	f640 3e10 	movw	lr, #2832	; 0xb10
 8004d70:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8004d74:	eeec 4a8c 	vfma.f32	s9, s25, s24
 8004d78:	f2c2 0e00 	movt	lr, #8192	; 0x2000
 8004d7c:	eee0 5a07 	vfma.f32	s11, s0, s14
 8004d80:	eee1 4a07 	vfma.f32	s9, s2, s14
 8004d84:	ed96 1a00 	vldr	s2, [r6]
 8004d88:	edd4 1a00 	vldr	s3, [r4]
 8004d8c:	ee60 0a81 	vmul.f32	s1, s1, s2
		Q_tmp = sig_in*sine_arr[cnt];
 8004d90:	eb09 0683 	add.w	r6, r9, r3, lsl #2
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004d94:	ee70 5ae5 	vsub.f32	s11, s1, s11
		if (++cnt == N_cos_sin) cnt = 0;
 8004d98:	3301      	adds	r3, #1
 8004d9a:	b2db      	uxtb	r3, r3
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004d9c:	ee22 5a07 	vmul.f32	s10, s4, s14
		I_tmp = sig_in*cosine_arr[cnt];
 8004da0:	ed90 1a00 	vldr	s2, [r0]
		if (++cnt == N_cos_sin) cnt = 0;
 8004da4:	2b21      	cmp	r3, #33	; 0x21
 8004da6:	eee3 4a25 	vfma.f32	s9, s6, s11
 8004daa:	bf08      	it	eq
 8004dac:	2300      	moveq	r3, #0
		Q_tmp = sig_in*sine_arr[cnt];
 8004dae:	eb09 0983 	add.w	r9, r9, r3, lsl #2
 8004db2:	eea2 5a8c 	vfma.f32	s10, s5, s24
		I_tmp = sig_in*cosine_arr[cnt];
 8004db6:	eb08 0883 	add.w	r8, r8, r3, lsl #2
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8004dba:	f640 3070 	movw	r0, #2928	; 0xb70
		I_tmp = sig_in*cosine_arr[cnt];
 8004dbe:	ee28 8a01 	vmul.f32	s16, s16, s2
		if (++cnt == N_cos_sin) cnt = 0;
 8004dc2:	3301      	adds	r3, #1
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8004dc4:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if (++cnt == N_cos_sin) cnt = 0;
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	eeea 6a84 	vfma.f32	s13, s21, s8
 8004dce:	2b21      	cmp	r3, #33	; 0x21
 8004dd0:	bf08      	it	eq
 8004dd2:	2300      	moveq	r3, #0
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004dd4:	ee78 4a64 	vsub.f32	s9, s16, s9
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8004dd8:	edd0 0a00 	vldr	s1, [r0]
 8004ddc:	ed90 0a01 	vldr	s0, [r0, #4]
 8004de0:	ed90 9a02 	vldr	s18, [r0, #8]
 8004de4:	edd0 9a03 	vldr	s19, [r0, #12]
 8004de8:	edd0 8a04 	vldr	s17, [r0, #16]
 8004dec:	ed90 8a05 	vldr	s16, [r0, #20]
 8004df0:	ed9e 1a00 	vldr	s2, [lr]
		I_tmp = sig_in*cosine_arr[cnt];
 8004df4:	ed97 ea00 	vldr	s28, [r7]
 8004df8:	ed84 1a00 	vstr	s2, [r4]
 8004dfc:	eeab 5a84 	vfma.f32	s10, s23, s8
 8004e00:	702b      	strb	r3, [r5, #0]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004e02:	f8dc 301c 	ldr.w	r3, [ip, #28]
		Q_tmp = sig_in*sine_arr[cnt];
 8004e06:	edd6 da00 	vldr	s27, [r6]
 8004e0a:	edc2 4a02 	vstr	s9, [r2, #8]
 8004e0e:	eee3 6a0a 	vfma.f32	s13, s6, s20
	}

	float phase;
	int32_t DAC_value;

	switch(Demod_Type)
 8004e12:	f640 340e 	movw	r4, #2830	; 0xb0e
 8004e16:	f2c2 0400 	movt	r4, #8192	; 0x2000
		Q_tmp = sig_in*sine_arr[cnt];
 8004e1a:	ee63 daad 	vmul.f32	s27, s7, s27
 8004e1e:	eeaa 5a8a 	vfma.f32	s10, s21, s20
			Q_Z2 = Q_Z1;
 8004e22:	f640 3024 	movw	r0, #2852	; 0xb24
	switch(Demod_Type)
 8004e26:	7824      	ldrb	r4, [r4, #0]
 8004e28:	edc2 5a03 	vstr	s11, [r2, #12]
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004e2c:	ee7d 6ae6 	vsub.f32	s13, s27, s13
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004e30:	ee0d 3a90 	vmov	s27, r3
 8004e34:	eea3 5a26 	vfma.f32	s10, s6, s13
			Q_Z1 = Q;
 8004e38:	f640 331c 	movw	r3, #2844	; 0xb1c
 8004e3c:	f2c2 0300 	movt	r3, #8192	; 0x2000
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004e40:	eef8 da6d 	vcvt.f32.u32	s27, s27
		Z_Q[1] = Z_Q[0];
 8004e44:	edc1 6a01 	vstr	s13, [r1, #4]
		sig_in = A_ADC_scale*v_in_samples[n] + B_ADC_scale;
 8004e48:	eead 6a8d 	vfma.f32	s12, s27, s26
			Q_Z2 = Q_Z1;
 8004e4c:	f2c2 0000 	movt	r0, #8192	; 0x2000
 8004e50:	eeb0 da45 	vmov.f32	s26, s10
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004e54:	ee27 5a8c 	vmul.f32	s10, s15, s24
 8004e58:	ed82 ba04 	vstr	s22, [r2, #16]
 8004e5c:	eeab 5a2b 	vfma.f32	s10, s22, s23
		Z_Q[4] = Z_Q[3];
 8004e60:	edc1 2a04 	vstr	s5, [r1, #16]
 8004e64:	eeac 5a87 	vfma.f32	s10, s25, s14
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004e68:	ee27 7a87 	vmul.f32	s14, s15, s14
		Z_Q[3] = Z_Q[2];
 8004e6c:	ed81 4a03 	vstr	s8, [r1, #12]
 8004e70:	eeab 7a0c 	vfma.f32	s14, s22, s24
		Z_Q[2] = Z_Q[1];
 8004e74:	ed81 aa02 	vstr	s20, [r1, #8]
		Q_tmp = sig_in*sine_arr[cnt];
 8004e78:	edd9 ca00 	vldr	s25, [r9]
 8004e7c:	eeab 7aa5 	vfma.f32	s14, s23, s11
 8004e80:	ee66 ba2c 	vmul.f32	s23, s12, s25
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8004e84:	ee60 6a26 	vmul.f32	s13, s0, s13
		for (k = 0;k<5;k++) Q_tmp -= Z_Q[k]*a[k];
 8004e88:	ee7b bacd 	vsub.f32	s23, s23, s26
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8004e8c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8004e90:	eeaa 5aa5 	vfma.f32	s10, s21, s11
 8004e94:	eee8 7a8b 	vfma.f32	s15, s17, s22
 8004e98:	eee0 6aab 	vfma.f32	s13, s1, s23
 8004e9c:	eee9 7aa5 	vfma.f32	s15, s19, s11
 8004ea0:	eee9 6a0a 	vfma.f32	s13, s18, s20
 8004ea4:	eea3 5a24 	vfma.f32	s10, s6, s9
 8004ea8:	eeaa 7aa4 	vfma.f32	s14, s21, s9
		I_tmp = sig_in*cosine_arr[cnt];
 8004eac:	ee63 3a8e 	vmul.f32	s7, s7, s28
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004eb0:	eee9 6a84 	vfma.f32	s13, s19, s8
 8004eb4:	ee73 3ac5 	vsub.f32	s7, s7, s10
 8004eb8:	eee9 7a24 	vfma.f32	s15, s18, s9
		Z_Q[0] = Q_tmp;
 8004ebc:	edc1 ba00 	vstr	s23, [r1]
		I_tmp = sig_in*cosine_arr[cnt];
 8004ec0:	edd8 5a00 	vldr	s11, [r8]
 8004ec4:	edc2 3a01 	vstr	s7, [r2, #4]
 8004ec8:	eea3 7a83 	vfma.f32	s14, s7, s6
			Q_Z2 = Q_Z1;
 8004ecc:	f640 3120 	movw	r1, #2848	; 0xb20
 8004ed0:	f2c2 0100 	movt	r1, #8192	; 0x2000
		I_tmp = sig_in*cosine_arr[cnt];
 8004ed4:	ee26 6a25 	vmul.f32	s12, s12, s11
 8004ed8:	eee8 6aa2 	vfma.f32	s13, s17, s5
		for (k = 0;k<5;k++) I_tmp -= Z_I[k]*a[k];
 8004edc:	eee0 7a23 	vfma.f32	s15, s0, s7
 8004ee0:	ee36 7a47 	vsub.f32	s14, s12, s14
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8004ee4:	eee8 6a02 	vfma.f32	s13, s16, s4
			I = I_tmp*b[0] + Z_I[0]*b[1] + Z_I[1]*b[2] + Z_I[2]*b[3] + Z_I[3]*b[4] + Z_I[4]*b[5];
 8004ee8:	eee0 7a87 	vfma.f32	s15, s1, s14
			Q_Z2 = Q_Z1;
 8004eec:	edd1 5a00 	vldr	s11, [r1]
			Q_Z1 = Q;
 8004ef0:	ed93 6a00 	vldr	s12, [r3]
 8004ef4:	ed82 7a00 	vstr	s14, [r2]
 8004ef8:	f640 3218 	movw	r2, #2840	; 0xb18
 8004efc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004f00:	edce 7a00 	vstr	s15, [lr]
			Q_Z2 = Q_Z1;
 8004f04:	edc2 1a00 	vstr	s3, [r2]
 8004f08:	edc0 5a00 	vstr	s11, [r0]
			Q_Z1 = Q;
 8004f0c:	ed81 6a00 	vstr	s12, [r1]
			Q = Q_tmp*b[0] + Z_Q[0]*b[1] + Z_Q[1]*b[2] + Z_Q[2]*b[3] + Z_Q[3]*b[4] + Z_Q[4]*b[5];
 8004f10:	edc3 6a00 	vstr	s13, [r3]
	switch(Demod_Type)
 8004f14:	2c03      	cmp	r4, #3
 8004f16:	f200 809f 	bhi.w	8005058 <HAL_ADC_ConvCpltCallback+0x450>
 8004f1a:	e8df f014 	tbh	[pc, r4, lsl #1]
 8004f1e:	015d      	.short	0x015d
 8004f20:	01300004 	.word	0x01300004
 8004f24:	00a8      	.short	0x00a8

			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
		break;

	case DEMOD_AM:
		module = sqrtf(I*I + Q*Q);
 8004f26:	ee66 6aa6 	vmul.f32	s13, s13, s13

		//digital AGC - more likely automatic scaling
		if (module > module_max_tmp) module_max_tmp = module;
 8004f2a:	f640 3190 	movw	r1, #2960	; 0xb90
		module = sqrtf(I*I + Q*Q);
 8004f2e:	eee7 6aa7 	vfma.f32	s13, s15, s15
		AM_mod_max_cnt++;
 8004f32:	f640 3308 	movw	r3, #2824	; 0xb08
		if (module > module_max_tmp) module_max_tmp = module;
 8004f36:	f2c2 0100 	movt	r1, #8192	; 0x2000
		AM_mod_max_cnt++;
 8004f3a:	f2c2 0300 	movt	r3, #8192	; 0x2000
		module = sqrtf(I*I + Q*Q);
 8004f3e:	eeb1 6ae6 	vsqrt.f32	s12, s13
		AM_mod_max_cnt++;
 8004f42:	681a      	ldr	r2, [r3, #0]
		if (AM_mod_max_cnt == AM_max_cnt_sample)
 8004f44:	f64e 2060 	movw	r0, #60000	; 0xea60
		AM_mod_max_cnt++;
 8004f48:	3201      	adds	r2, #1
		module = sqrtf(I*I + Q*Q);
 8004f4a:	f640 348c 	movw	r4, #2956	; 0xb8c
 8004f4e:	f2c2 0400 	movt	r4, #8192	; 0x2000
		AM_mod_max_cnt++;
 8004f52:	601a      	str	r2, [r3, #0]
		if (module > module_max_tmp) module_max_tmp = module;
 8004f54:	edd1 7a00 	vldr	s15, [r1]
 8004f58:	eeb4 6ae7 	vcmpe.f32	s12, s15
 8004f5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f60:	bfc4      	itt	gt
 8004f62:	eef0 7a46 	vmovgt.f32	s15, s12
 8004f66:	ed81 6a00 	vstrgt	s12, [r1]
		if (AM_mod_max_cnt == AM_max_cnt_sample)
 8004f6a:	4282      	cmp	r2, r0
 8004f6c:	f000 81bf 	beq.w	80052ee <HAL_ADC_ConvCpltCallback+0x6e6>
		module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
		Z2_audio = Z1_audio;
		Z1_audio = tmp;


		DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8004f70:	f640 3304 	movw	r3, #2820	; 0xb04
 8004f74:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8004f78:	edd3 3a00 	vldr	s7, [r3]
		tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 8004f7c:	f24b 5342 	movw	r3, #46402	; 0xb542
 8004f80:	f6c3 7362 	movt	r3, #16226	; 0x3f62
 8004f84:	ee07 3a90 	vmov	s15, r3
 8004f88:	f646 1391 	movw	r3, #27025	; 0x6991
 8004f8c:	f6cb 73ef 	movt	r3, #49135	; 0xbfef
 8004f90:	ee06 3a90 	vmov	s13, r3
 8004f94:	f640 312c 	movw	r1, #2860	; 0xb2c
		tmp = module - Z_audio*a_AM_HPF;
 8004f98:	f640 3058 	movw	r0, #2904	; 0xb58
 8004f9c:	f649 634b 	movw	r3, #40523	; 0x9e4b
 8004fa0:	f2c2 0000 	movt	r0, #8192	; 0x2000
		tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 8004fa4:	f2c2 0100 	movt	r1, #8192	; 0x2000
		tmp = module - Z_audio*a_AM_HPF;
 8004fa8:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
		tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 8004fac:	ed91 7a00 	vldr	s14, [r1]
		tmp = module - Z_audio*a_AM_HPF;
 8004fb0:	ed90 4a00 	vldr	s8, [r0]
 8004fb4:	ee05 3a10 	vmov	s10, r3
		tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 8004fb8:	f640 3228 	movw	r2, #2856	; 0xb28
 8004fbc:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8004fc0:	edd2 4a00 	vldr	s9, [r2]
		tmp = module - Z_audio*a_AM_HPF;
 8004fc4:	eea4 6a05 	vfma.f32	s12, s8, s10
 8004fc8:	f64c 7325 	movw	r3, #53029	; 0xcf25
 8004fcc:	f6cb 737f 	movt	r3, #49023	; 0xbf7f
		tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 8004fd0:	ee67 7a27 	vmul.f32	s15, s14, s15
		tmp = module - Z_audio*a_AM_HPF;
 8004fd4:	eef0 5a46 	vmov.f32	s11, s12
		Z_audio = tmp;
 8004fd8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8004fdc:	ee06 3a90 	vmov	s13, r3
		tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 8004fe0:	f64c 7325 	movw	r3, #53029	; 0xcf25
 8004fe4:	f6c3 737f 	movt	r3, #16255	; 0x3f7f
 8004fe8:	ee06 3a10 	vmov	s12, r3
		module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
 8004fec:	f641 5310 	movw	r3, #7440	; 0x1d10
 8004ff0:	f6c3 3351 	movt	r3, #15185	; 0x3b51
 8004ff4:	ee05 3a10 	vmov	s10, r3
 8004ff8:	eed4 7a26 	vfnms.f32	s15, s8, s13
 8004ffc:	f641 5310 	movw	r3, #7440	; 0x1d10
 8005000:	f6c3 33d1 	movt	r3, #15313	; 0x3bd1
 8005004:	ee67 6a05 	vmul.f32	s13, s14, s10
 8005008:	ee07 3a10 	vmov	s14, r3
		tmp = module - (Z1_audio*a_AM_LPF[0] + Z2_audio*a_AM_LPF[1]);
 800500c:	eee5 7a86 	vfma.f32	s15, s11, s12
		DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8005010:	2300      	movs	r3, #0
 8005012:	f2c4 53c8 	movt	r3, #17864	; 0x45c8
 8005016:	eee4 6a87 	vfma.f32	s13, s9, s14
 800501a:	ee06 3a10 	vmov	s12, r3
		module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
 800501e:	eee7 6a85 	vfma.f32	s13, s15, s10
		DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8005022:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8005026:	ee07 3a10 	vmov	s14, r3
 800502a:	ee26 6a86 	vmul.f32	s12, s13, s12
		Z_audio = tmp;
 800502e:	edc0 5a00 	vstr	s11, [r0]
		DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8005032:	eea6 7a23 	vfma.f32	s14, s12, s7
		//if (DAC_value > 4095) DAC_value = 4095; //it would be better with this limiter but it's not enough time to do that
		if (DAC_value < 0) DAC_value = 0;
		DAC->DHR12R1 = DAC_value;
 8005036:	f44f 40e8 	mov.w	r0, #29696	; 0x7400
 800503a:	f2c4 0000 	movt	r0, #16384	; 0x4000
		module = tmp*b_AM_LPF[0] + Z1_audio*b_AM_LPF[1] + Z2_audio*b_AM_LPF[2];
 800503e:	edc4 6a00 	vstr	s13, [r4]
		DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 8005042:	eebd 7ac7 	vcvt.s32.f32	s14, s14
		Z2_audio = Z1_audio;
 8005046:	edc1 4a00 	vstr	s9, [r1]
		DAC_value = A_DAC_scale_AM*module*AM_AGC_sig + B_DAC_scale_AM;
 800504a:	ee17 3a10 	vmov	r3, s14
		DAC->DHR12R1 = DAC_value;
 800504e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
		Z1_audio = tmp;
 8005052:	edc2 7a00 	vstr	s15, [r2]
		DAC->DHR12R1 = DAC_value;
 8005056:	6083      	str	r3, [r0, #8]
	default:
		break;
	}

	GPIOD->BSRR = 1<<31; //calculation time measurement
}
 8005058:	ecbd 8b0e 	vpop	{d8-d14}
	GPIOD->BSRR = 1<<31; //calculation time measurement
 800505c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005060:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8005064:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005068:	619a      	str	r2, [r3, #24]
}
 800506a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		module = sqrtf(I*I + Q*Q);
 800506e:	ee66 6aa6 	vmul.f32	s13, s13, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 8005072:	f640 312c 	movw	r1, #2860	; 0xb2c
		module = sqrtf(I*I + Q*Q);
 8005076:	eee7 6aa7 	vfma.f32	s13, s15, s15
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 800507a:	f648 63bc 	movw	r3, #36540	; 0x8ebc
 800507e:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005082:	f6c3 737e 	movt	r3, #16254	; 0x3f7e
		module = sqrtf(I*I + Q*Q);
 8005086:	eeb1 6ae6 	vsqrt.f32	s12, s13
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 800508a:	f640 3228 	movw	r2, #2856	; 0xb28
 800508e:	f244 60b4 	movw	r0, #18100	; 0x46b4
 8005092:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005096:	f6cb 70ff 	movt	r0, #49151	; 0xbfff
 800509a:	edd1 7a00 	vldr	s15, [r1]
 800509e:	edd2 5a00 	vldr	s11, [r2]
 80050a2:	ee07 3a10 	vmov	s14, r3
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80050a6:	f240 035c 	movw	r3, #92	; 0x5c
 80050aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80050ae:	ee06 0a90 	vmov	s13, r0
 80050b2:	ed93 5a02 	vldr	s10, [r3, #8]
		Z2_audio = Z1_audio;
 80050b6:	edc1 5a00 	vstr	s11, [r1]
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 80050ba:	ee27 7a87 	vmul.f32	s14, s15, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80050be:	ee67 7a85 	vmul.f32	s15, s15, s10
 80050c2:	eea5 7aa6 	vfma.f32	s14, s11, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80050c6:	f240 005a 	movw	r0, #90	; 0x5a
 80050ca:	f2c2 0000 	movt	r0, #8192	; 0x2000
 80050ce:	ed93 5a01 	vldr	s10, [r3, #4]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80050d2:	edd3 6a00 	vldr	s13, [r3]
 80050d6:	eee5 7a85 	vfma.f32	s15, s11, s10
 80050da:	2300      	movs	r3, #0
 80050dc:	f2c4 33fa 	movt	r3, #17402	; 0x43fa
		tmp = module - (Z1_audio*a_CW[0] + Z2_audio*a_CW[1]);
 80050e0:	ee36 7a47 	vsub.f32	s14, s12, s14
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80050e4:	eee6 7a87 	vfma.f32	s15, s13, s14
 80050e8:	ee06 3a90 	vmov	s13, r3
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80050ec:	8803      	ldrh	r3, [r0, #0]
		Z1_audio = tmp;
 80050ee:	ed82 7a00 	vstr	s14, [r2]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 80050f2:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 80050f6:	ee06 3a90 	vmov	s13, r3
 80050fa:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80050fe:	f640 330d 	movw	r3, #2829	; 0xb0d
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8005102:	f640 308c 	movw	r0, #2956	; 0xb8c
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8005106:	eef4 7ae6 	vcmpe.f32	s15, s13
 800510a:	f2c2 0300 	movt	r3, #8192	; 0x2000
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 800510e:	f2c2 0000 	movt	r0, #8192	; 0x2000
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 8005112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005116:	781a      	ldrb	r2, [r3, #0]
		module = (tmp*b_CW[0] + Z1_audio*b_CW[1] + Z2_audio*b_CW[2])*CW_A_COEFF;
 8005118:	edc0 7a00 	vstr	s15, [r0]
		if ( (module > CW_trig_upper_level) && (!CW_triggered) )
 800511c:	f340 80e3 	ble.w	80052e6 <HAL_ADC_ConvCpltCallback+0x6de>
 8005120:	b932      	cbnz	r2, 8005130 <HAL_ADC_ConvCpltCallback+0x528>
			DAC->DHR12R1 = 0;
 8005122:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
 8005126:	f2c4 0100 	movt	r1, #16384	; 0x4000
			CW_triggered = true;
 800512a:	2001      	movs	r0, #1
 800512c:	7018      	strb	r0, [r3, #0]
			DAC->DHR12R1 = 0;
 800512e:	608a      	str	r2, [r1, #8]
			CW_decim_cnt++;
 8005130:	f640 310c 	movw	r1, #2828	; 0xb0c
 8005134:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005138:	780a      	ldrb	r2, [r1, #0]
 800513a:	3201      	adds	r2, #1
 800513c:	b2d2      	uxtb	r2, r2
			if (CW_decim_cnt == 107)
 800513e:	2a6b      	cmp	r2, #107	; 0x6b
			CW_decim_cnt++;
 8005140:	700a      	strb	r2, [r1, #0]
			if (CW_decim_cnt == 107)
 8005142:	d10b      	bne.n	800515c <HAL_ADC_ConvCpltCallback+0x554>
				DAC->DHR12R1 ^= 0xFFF;
 8005144:	f44f 40e8 	mov.w	r0, #29696	; 0x7400
 8005148:	f2c4 0000 	movt	r0, #16384	; 0x4000
				CW_decim_cnt = 0;
 800514c:	2400      	movs	r4, #0
				DAC->DHR12R1 ^= 0xFFF;
 800514e:	6882      	ldr	r2, [r0, #8]
 8005150:	f482 627f 	eor.w	r2, r2, #4080	; 0xff0
 8005154:	f082 020f 	eor.w	r2, r2, #15
 8005158:	6082      	str	r2, [r0, #8]
				CW_decim_cnt = 0;
 800515a:	700c      	strb	r4, [r1, #0]
			if (module < CW_trig_lower_level) CW_triggered = false;
 800515c:	f240 0258 	movw	r2, #88	; 0x58
 8005160:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005164:	7812      	ldrb	r2, [r2, #0]
 8005166:	ee07 2a10 	vmov	s14, r2
 800516a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800516e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005176:	bf44      	itt	mi
 8005178:	2200      	movmi	r2, #0
 800517a:	701a      	strbmi	r2, [r3, #0]
 800517c:	e76c      	b.n	8005058 <HAL_ADC_ConvCpltCallback+0x450>
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 800517e:	f44f 4290 	mov.w	r2, #18432	; 0x4800
 8005182:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8005186:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
 800518a:	f2c4 5255 	movt	r2, #17749	; 0x4555
 800518e:	ee05 2a90 	vmov	s11, r2
 8005192:	ee06 3a10 	vmov	s12, r3
 8005196:	ee07 3a10 	vmov	s14, r3
 800519a:	eea7 6aa5 	vfma.f32	s12, s15, s11
			DAC->DHR12R1 = DAC_value;
 800519e:	f640 70ff 	movw	r0, #4095	; 0xfff
 80051a2:	f44f 41e8 	mov.w	r1, #29696	; 0x7400
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 80051a6:	eea6 7aa5 	vfma.f32	s14, s13, s11
			DAC->DHR12R1 = DAC_value;
 80051aa:	f2c4 0100 	movt	r1, #16384	; 0x4000
			DAC_value = A_DAC_scale_IQ*I + B_DAC_scale_IQ;
 80051ae:	eefd 7ac6 	vcvt.s32.f32	s15, s12
 80051b2:	ee17 2a90 	vmov	r2, s15
			DAC_value = A_DAC_scale_IQ*Q + B_DAC_scale_IQ;
 80051b6:	eefd 7ac7 	vcvt.s32.f32	s15, s14
 80051ba:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80051be:	ee17 3a90 	vmov	r3, s15
			DAC->DHR12R1 = DAC_value;
 80051c2:	4282      	cmp	r2, r0
 80051c4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80051c8:	bfa8      	it	ge
 80051ca:	4602      	movge	r2, r0
			DAC->DHR12R2 = DAC_value;
 80051cc:	4283      	cmp	r3, r0
 80051ce:	bfa8      	it	ge
 80051d0:	4603      	movge	r3, r0
			DAC->DHR12R1 = DAC_value;
 80051d2:	608a      	str	r2, [r1, #8]
			DAC->DHR12R2 = DAC_value;
 80051d4:	614b      	str	r3, [r1, #20]
		break;
 80051d6:	e73f      	b.n	8005058 <HAL_ADC_ConvCpltCallback+0x450>
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80051d8:	ee71 7ae7 	vsub.f32	s15, s3, s15
 80051dc:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80051e0:	ee67 7a86 	vmul.f32	s15, s15, s12
 80051e4:	ee26 6a06 	vmul.f32	s12, s12, s12
 80051e8:	eee6 7a81 	vfma.f32	s15, s13, s2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 80051ec:	2300      	movs	r3, #0
 80051ee:	f2c4 2395 	movt	r3, #17045	; 0x4295
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80051f2:	eea1 6a01 	vfma.f32	s12, s2, s2
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 80051f6:	f640 302c 	movw	r0, #2860	; 0xb2c
 80051fa:	f2c2 0000 	movt	r0, #8192	; 0x2000
			phase = K*(I_Z1*(Q - Q_Z2) - (I - I_Z2)*Q_Z1) / (I_Z1*I_Z1 + Q_Z1*Q_Z1);
 80051fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005202:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005206:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 800520a:	ee87 7a86 	vdiv.f32	s14, s15, s12
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 800520e:	f640 3128 	movw	r1, #2856	; 0xb28
 8005212:	f24a 322f 	movw	r2, #41775	; 0xa32f
 8005216:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800521a:	f6cb 72d2 	movt	r2, #49106	; 0xbfd2
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 800521e:	eebf 5a00 	vmov.f32	s10, #240	; 0xbf800000 -1.0
 8005222:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8005226:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800522a:	bf8c      	ite	hi
 800522c:	eef0 7a64 	vmovhi.f32	s15, s9
 8005230:	eef0 7a47 	vmovls.f32	s15, s14
 8005234:	eef4 7ac5 	vcmpe.f32	s15, s10
 8005238:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800523c:	bfb8      	it	lt
 800523e:	eef0 7a45 	vmovlt.f32	s15, s10
 8005242:	ee05 3a90 	vmov	s11, r3
 8005246:	ee77 7aa4 	vadd.f32	s15, s15, s9
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 800524a:	f240 738c 	movw	r3, #1932	; 0x78c
 800524e:	f6c3 733a 	movt	r3, #16186	; 0x3f3a
 8005252:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8005256:	ee67 7aa5 	vmul.f32	s15, s15, s11
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 800525a:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 800525e:	f6c3 4393 	movt	r3, #15507	; 0x3c93
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 8005262:	edd0 6a00 	vldr	s13, [r0]
 8005266:	edd1 4a00 	vldr	s9, [r1]
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 800526a:	ee05 3a90 	vmov	s11, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 800526e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005272:	f44f 437b 	mov.w	r3, #64256	; 0xfb00
 8005276:	f6c3 5313 	movt	r3, #15635	; 0x3d13
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 800527a:	ee26 7a86 	vmul.f32	s14, s13, s12
 800527e:	ee05 2a10 	vmov	s10, r2
 8005282:	ee06 3a10 	vmov	s12, r3
			phase = asin_arr[(uint16_t) (A_asin_arr_scale*phase + B_asin_arr_scale)];
 8005286:	ee17 3a90 	vmov	r3, s15
 800528a:	f240 32ec 	movw	r2, #1004	; 0x3ec
 800528e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005292:	eea4 7a85 	vfma.f32	s14, s9, s10
 8005296:	b29b      	uxth	r3, r3
 8005298:	eb02 0383 	add.w	r3, r2, r3, lsl #2
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 800529c:	ee66 6aa5 	vmul.f32	s13, s13, s11
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 80052a0:	edd3 7a00 	vldr	s15, [r3]
			Z2_audio = Z1_audio;
 80052a4:	edc0 4a00 	vstr	s9, [r0]
 80052a8:	eee4 6a86 	vfma.f32	s13, s9, s12
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80052ac:	f64e 7254 	movw	r2, #61268	; 0xef54
 80052b0:	f44f 4370 	mov.w	r3, #61440	; 0xf000
			tmp = phase - (Z1_audio*a_FM[0] + Z2_audio*a_FM[1]);
 80052b4:	ee37 7ac7 	vsub.f32	s14, s15, s14
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80052b8:	f2c4 43ff 	movt	r3, #17663	; 0x44ff
			phase = tmp*b_FM[0] + Z1_audio*b_FM[1] + Z2_audio*b_FM[2];
 80052bc:	eee7 6a25 	vfma.f32	s13, s14, s11
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80052c0:	f2c4 42a2 	movt	r2, #17570	; 0x44a2
 80052c4:	ee07 3a90 	vmov	s15, r3
 80052c8:	ee06 2a10 	vmov	s12, r2
 80052cc:	eee6 7a86 	vfma.f32	s15, s13, s12
 80052d0:	f44f 43e8 	mov.w	r3, #29696	; 0x7400
 80052d4:	f2c4 0300 	movt	r3, #16384	; 0x4000
			Z1_audio = tmp;
 80052d8:	ed81 7a00 	vstr	s14, [r1]
			DAC->DHR12R1 = A_DAC_scale_FM*phase + B_DAC_scale_FM;
 80052dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052e0:	edc3 7a02 	vstr	s15, [r3, #8]
		break;
 80052e4:	e6b8      	b.n	8005058 <HAL_ADC_ConvCpltCallback+0x450>
		if (CW_triggered)
 80052e6:	2a00      	cmp	r2, #0
 80052e8:	f43f aeb6 	beq.w	8005058 <HAL_ADC_ConvCpltCallback+0x450>
 80052ec:	e720      	b.n	8005130 <HAL_ADC_ConvCpltCallback+0x528>
			AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 80052ee:	f243 3233 	movw	r2, #13107	; 0x3333
 80052f2:	f6c3 7233 	movt	r2, #16179	; 0x3f33
 80052f6:	ee07 2a10 	vmov	s14, r2
 80052fa:	eec7 3a27 	vdiv.f32	s7, s14, s15
 80052fe:	f640 3204 	movw	r2, #2820	; 0xb04
			AM_mod_max_cnt = 0;
 8005302:	2000      	movs	r0, #0
			AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 8005304:	f2c2 0200 	movt	r2, #8192	; 0x2000
			AM_mod_max_cnt = 0;
 8005308:	6018      	str	r0, [r3, #0]
			module_max_tmp = -1.0;
 800530a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800530e:	edc1 7a00 	vstr	s15, [r1]
			AM_AGC_sig = AM_AGC_coeff / module_max_tmp;
 8005312:	edc2 3a00 	vstr	s7, [r2]
			module_max_tmp = -1.0;
 8005316:	e631      	b.n	8004f7c <HAL_ADC_ConvCpltCallback+0x374>

08005318 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005318:	b510      	push	{r4, lr}
	uint8_t rxchar_tmp = rxchar;
 800531a:	f640 3194 	movw	r1, #2964	; 0xb94
 800531e:	f2c2 0100 	movt	r1, #8192	; 0x2000
	HAL_UART_Receive_IT(huart, &rxchar, 1);
 8005322:	2201      	movs	r2, #1
	uint8_t rxchar_tmp = rxchar;
 8005324:	780c      	ldrb	r4, [r1, #0]
	HAL_UART_Receive_IT(huart, &rxchar, 1);
 8005326:	f003 fb91 	bl	8008a4c <HAL_UART_Receive_IT>

	/* check if there's room in the buffer */
	if((RX_wptr != RX_rptr-1) &&
 800532a:	f640 429c 	movw	r2, #3228	; 0xc9c
 800532e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005332:	f640 43a0 	movw	r3, #3232	; 0xca0
 8005336:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800533a:	6812      	ldr	r2, [r2, #0]
 800533c:	6819      	ldr	r1, [r3, #0]
 800533e:	1e50      	subs	r0, r2, #1
 8005340:	4281      	cmp	r1, r0
 8005342:	d00e      	beq.n	8005362 <HAL_UART_RxCpltCallback+0x4a>
	   (RX_wptr - RX_rptr != (RX_BUFLEN-1)))
 8005344:	1a8a      	subs	r2, r1, r2
	if((RX_wptr != RX_rptr-1) &&
 8005346:	2aff      	cmp	r2, #255	; 0xff
 8005348:	d00b      	beq.n	8005362 <HAL_UART_RxCpltCallback+0x4a>
	{
		/* Yes - Queue the new char */
		*RX_wptr++ = rxchar_tmp;
 800534a:	1c4a      	adds	r2, r1, #1
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	700c      	strb	r4, [r1, #0]

		/* Wrap pointer */
		if((RX_wptr - &RX_buffer[0])>=RX_BUFLEN)
 8005350:	6819      	ldr	r1, [r3, #0]
 8005352:	f640 329c 	movw	r2, #2972	; 0xb9c
 8005356:	f2c2 0200 	movt	r2, #8192	; 0x2000
 800535a:	1a89      	subs	r1, r1, r2
 800535c:	29ff      	cmp	r1, #255	; 0xff
			RX_wptr = &RX_buffer[0];
 800535e:	bfc8      	it	gt
 8005360:	601a      	strgt	r2, [r3, #0]
	}
}
 8005362:	bd10      	pop	{r4, pc}

08005364 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
	/* check if there's data in the buffer */
	if(TX_rptr != TX_wptr)
 8005364:	f640 7330 	movw	r3, #3888	; 0xf30
 8005368:	f640 7234 	movw	r2, #3892	; 0xf34
 800536c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005370:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005374:	6819      	ldr	r1, [r3, #0]
 8005376:	6812      	ldr	r2, [r2, #0]
 8005378:	4291      	cmp	r1, r2
 800537a:	d01b      	beq.n	80053b4 <HAL_UART_TxCpltCallback+0x50>
{
 800537c:	b510      	push	{r4, lr}
	{
		/* get data out of the buffer */
		txchar = *TX_rptr++;
 800537e:	1c4a      	adds	r2, r1, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	f891 c000 	ldrb.w	ip, [r1]
 8005386:	f640 3195 	movw	r1, #2965	; 0xb95
		//HAL_UART_Transmit_IT(huart, TX_rptr++, 1);

		/* wrap the pointer */
		if((TX_rptr - &TX_buffer[0])>=TX_BUFLEN)
 800538a:	f640 44a4 	movw	r4, #3236	; 0xca4
		txchar = *TX_rptr++;
 800538e:	f2c2 0100 	movt	r1, #8192	; 0x2000
		if((TX_rptr - &TX_buffer[0])>=TX_BUFLEN)
 8005392:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005396:	eba2 0e04 	sub.w	lr, r2, r4
		txchar = *TX_rptr++;
 800539a:	f881 c000 	strb.w	ip, [r1]
		if((TX_rptr - &TX_buffer[0])>=TX_BUFLEN)
 800539e:	f240 2c89 	movw	ip, #649	; 0x289
			TX_rptr = &TX_buffer[0];
 80053a2:	45e6      	cmp	lr, ip
 80053a4:	bfd8      	it	le
 80053a6:	4614      	movle	r4, r2
 80053a8:	601c      	str	r4, [r3, #0]

		/* send the data */
		HAL_UART_Transmit_IT(huart, &txchar, 1);
 80053aa:	2201      	movs	r2, #1
	}
}
 80053ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		HAL_UART_Transmit_IT(huart, &txchar, 1);
 80053b0:	f003 bb2a 	b.w	8008a08 <HAL_UART_Transmit_IT>
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop

080053b8 <_getpid>:
}

int _getpid(void)
{
  return 1;
}
 80053b8:	2001      	movs	r0, #1
 80053ba:	4770      	bx	lr

080053bc <_kill>:

int _kill(int pid, int sig)
{
 80053bc:	b508      	push	{r3, lr}
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80053be:	f003 fd79 	bl	8008eb4 <__errno>
 80053c2:	2316      	movs	r3, #22
 80053c4:	6003      	str	r3, [r0, #0]
  return -1;
}
 80053c6:	f04f 30ff 	mov.w	r0, #4294967295
 80053ca:	bd08      	pop	{r3, pc}

080053cc <_exit>:

void _exit (int status)
{
 80053cc:	b508      	push	{r3, lr}
  errno = EINVAL;
 80053ce:	f003 fd71 	bl	8008eb4 <__errno>
 80053d2:	2316      	movs	r3, #22
 80053d4:	6003      	str	r3, [r0, #0]
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
 80053d6:	e7fe      	b.n	80053d6 <_exit+0xa>

080053d8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80053d8:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053da:	1e16      	subs	r6, r2, #0
 80053dc:	dd07      	ble.n	80053ee <_read+0x16>
 80053de:	460c      	mov	r4, r1
 80053e0:	198d      	adds	r5, r1, r6
  {
    *ptr++ = __io_getchar();
 80053e2:	f3af 8000 	nop.w
 80053e6:	f804 0b01 	strb.w	r0, [r4], #1
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053ea:	42a5      	cmp	r5, r4
 80053ec:	d1f9      	bne.n	80053e2 <_read+0xa>
  }

  return len;
}
 80053ee:	4630      	mov	r0, r6
 80053f0:	bd70      	pop	{r4, r5, r6, pc}
 80053f2:	bf00      	nop

080053f4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80053f4:	b570      	push	{r4, r5, r6, lr}
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80053f6:	1e16      	subs	r6, r2, #0
 80053f8:	dd07      	ble.n	800540a <_write+0x16>
 80053fa:	460c      	mov	r4, r1
 80053fc:	198d      	adds	r5, r1, r6
  {
    __io_putchar(*ptr++);
 80053fe:	f814 0b01 	ldrb.w	r0, [r4], #1
 8005402:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005406:	42ac      	cmp	r4, r5
 8005408:	d1f9      	bne.n	80053fe <_write+0xa>
  }
  return len;
}
 800540a:	4630      	mov	r0, r6
 800540c:	bd70      	pop	{r4, r5, r6, pc}
 800540e:	bf00      	nop

08005410 <_close>:

int _close(int file)
{
  (void)file;
  return -1;
}
 8005410:	f04f 30ff 	mov.w	r0, #4294967295
 8005414:	4770      	bx	lr
 8005416:	bf00      	nop

08005418 <_fstat>:


int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
 8005418:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800541c:	604b      	str	r3, [r1, #4]
  return 0;
}
 800541e:	2000      	movs	r0, #0
 8005420:	4770      	bx	lr
 8005422:	bf00      	nop

08005424 <_isatty>:

int _isatty(int file)
{
  (void)file;
  return 1;
}
 8005424:	2001      	movs	r0, #1
 8005426:	4770      	bx	lr

08005428 <_lseek>:
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
 8005428:	2000      	movs	r0, #0
 800542a:	4770      	bx	lr

0800542c <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800542c:	f640 3c98 	movw	ip, #2968	; 0xb98
 8005430:	f2c2 0c00 	movt	ip, #8192	; 0x2000
{
 8005434:	b508      	push	{r3, lr}
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005436:	f240 4100 	movw	r1, #1024	; 0x400
 800543a:	f240 0300 	movw	r3, #0
  if (NULL == __sbrk_heap_end)
 800543e:	f8dc 2000 	ldr.w	r2, [ip]
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005442:	f2c2 0302 	movt	r3, #8194	; 0x2002
 8005446:	f2c0 0100 	movt	r1, #0
 800544a:	1a59      	subs	r1, r3, r1
  if (NULL == __sbrk_heap_end)
 800544c:	b132      	cbz	r2, 800545c <_sbrk+0x30>
  {
    __sbrk_heap_end = &_end;
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800544e:	4410      	add	r0, r2
 8005450:	4288      	cmp	r0, r1
 8005452:	d80c      	bhi.n	800546e <_sbrk+0x42>
    errno = ENOMEM;
    return (void *)-1;
  }

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
 8005454:	f8cc 0000 	str.w	r0, [ip]

  return (void *)prev_heap_end;
}
 8005458:	4610      	mov	r0, r2
 800545a:	bd08      	pop	{r3, pc}
    __sbrk_heap_end = &_end;
 800545c:	f640 7250 	movw	r2, #3920	; 0xf50
 8005460:	f2c2 0200 	movt	r2, #8192	; 0x2000
  if (__sbrk_heap_end + incr > max_heap)
 8005464:	4410      	add	r0, r2
 8005466:	4288      	cmp	r0, r1
    __sbrk_heap_end = &_end;
 8005468:	f8cc 2000 	str.w	r2, [ip]
  if (__sbrk_heap_end + incr > max_heap)
 800546c:	d9f2      	bls.n	8005454 <_sbrk+0x28>
    errno = ENOMEM;
 800546e:	f003 fd21 	bl	8008eb4 <__errno>
 8005472:	230c      	movs	r3, #12
    return (void *)-1;
 8005474:	f04f 32ff 	mov.w	r2, #4294967295
    errno = ENOMEM;
 8005478:	6003      	str	r3, [r0, #0]
}
 800547a:	4610      	mov	r0, r2
 800547c:	bd08      	pop	{r3, pc}
 800547e:	bf00      	nop

08005480 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005480:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005484:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005488:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800548c:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8005490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop

08005498 <usart_init>:
void usart_init(UART_HandleTypeDef *huartx_pointer)
{
	huartx = huartx_pointer;

	/* init RX buffer write/read pointers*/
	RX_wptr = &RX_buffer[0];
 8005498:	f640 41a0 	movw	r1, #3232	; 0xca0
{
 800549c:	b500      	push	{lr}
	RX_wptr = &RX_buffer[0];
 800549e:	f2c2 0100 	movt	r1, #8192	; 0x2000
	huartx = huartx_pointer;
 80054a2:	f640 7338 	movw	r3, #3896	; 0xf38
	RX_wptr = &RX_buffer[0];
 80054a6:	f640 329c 	movw	r2, #2972	; 0xb9c
	huartx = huartx_pointer;
 80054aa:	f2c2 0300 	movt	r3, #8192	; 0x2000
	RX_wptr = &RX_buffer[0];
 80054ae:	f2c2 0200 	movt	r2, #8192	; 0x2000
 80054b2:	600a      	str	r2, [r1, #0]
	RX_rptr = &RX_buffer[0];
 80054b4:	f640 4e9c 	movw	lr, #3228	; 0xc9c

	/* init TX buffer */
	TX_wptr = &TX_buffer[0];
 80054b8:	f640 7c34 	movw	ip, #3892	; 0xf34
	TX_rptr = &TX_buffer[0];
 80054bc:	f640 7130 	movw	r1, #3888	; 0xf30
	RX_rptr = &RX_buffer[0];
 80054c0:	f2c2 0e00 	movt	lr, #8192	; 0x2000
	TX_wptr = &TX_buffer[0];
 80054c4:	f2c2 0c00 	movt	ip, #8192	; 0x2000
	huartx = huartx_pointer;
 80054c8:	6018      	str	r0, [r3, #0]
	TX_rptr = &TX_buffer[0];
 80054ca:	f2c2 0100 	movt	r1, #8192	; 0x2000
	TX_wptr = &TX_buffer[0];
 80054ce:	f640 43a4 	movw	r3, #3236	; 0xca4
 80054d2:	f2c2 0300 	movt	r3, #8192	; 0x2000
	RX_rptr = &RX_buffer[0];
 80054d6:	f8ce 2000 	str.w	r2, [lr]
	TX_wptr = &TX_buffer[0];
 80054da:	f8cc 3000 	str.w	r3, [ip]
	TX_rptr = &TX_buffer[0];
 80054de:	600b      	str	r3, [r1, #0]
}
 80054e0:	f85d fb04 	ldr.w	pc, [sp], #4

080054e4 <usart_flush_RX_buffer>:

//USART flush RX buffer
void usart_flush_RX_buffer()
{
	/* reinit RX buffer write/read pointers*/
	RX_wptr = &RX_buffer[0];
 80054e4:	f640 41a0 	movw	r1, #3232	; 0xca0
	RX_rptr = &RX_buffer[0];
 80054e8:	f640 429c 	movw	r2, #3228	; 0xc9c
	RX_wptr = &RX_buffer[0];
 80054ec:	f2c2 0100 	movt	r1, #8192	; 0x2000
 80054f0:	f640 339c 	movw	r3, #2972	; 0xb9c
	RX_rptr = &RX_buffer[0];
 80054f4:	f2c2 0200 	movt	r2, #8192	; 0x2000
	RX_wptr = &RX_buffer[0];
 80054f8:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80054fc:	600b      	str	r3, [r1, #0]
	RX_rptr = &RX_buffer[0];
 80054fe:	6013      	str	r3, [r2, #0]
}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop

08005504 <usart_getc>:
{
	/* interrupt version */
	int retval;
	
	/* check if there's data in the buffer */
	if(RX_rptr != RX_wptr)
 8005504:	f640 439c 	movw	r3, #3228	; 0xc9c
 8005508:	f640 42a0 	movw	r2, #3232	; 0xca0
 800550c:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005510:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005514:	6818      	ldr	r0, [r3, #0]
 8005516:	6812      	ldr	r2, [r2, #0]
 8005518:	4290      	cmp	r0, r2
 800551a:	d00e      	beq.n	800553a <usart_getc+0x36>
	{
		/* get the data */
		retval = *RX_rptr++;
		
		/* wrap the pointer */
		if((RX_rptr - &RX_buffer[0])>=RX_BUFLEN)
 800551c:	f640 319c 	movw	r1, #2972	; 0xb9c
		retval = *RX_rptr++;
 8005520:	1c42      	adds	r2, r0, #1
		if((RX_rptr - &RX_buffer[0])>=RX_BUFLEN)
 8005522:	f2c2 0100 	movt	r1, #8192	; 0x2000
 8005526:	eba2 0c01 	sub.w	ip, r2, r1
		retval = *RX_rptr++;
 800552a:	601a      	str	r2, [r3, #0]
			RX_rptr = &RX_buffer[0];
 800552c:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
 8005530:	bfc8      	it	gt
 8005532:	460a      	movgt	r2, r1
		retval = *RX_rptr++;
 8005534:	7800      	ldrb	r0, [r0, #0]
			RX_rptr = &RX_buffer[0];
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	4770      	bx	lr
	}
	else
		retval = EOF;
 800553a:	f04f 30ff 	mov.w	r0, #4294967295

	return retval;
}
 800553e:	4770      	bx	lr

08005540 <usart_putc>:
 */
void usart_putc(void* p, char c)
{
	/* interrupt version */
	/* check if there's room in the buffer */
	if((TX_wptr != TX_rptr-1) &&
 8005540:	f640 7330 	movw	r3, #3888	; 0xf30
 8005544:	f2c2 0300 	movt	r3, #8192	; 0x2000
{
 8005548:	b570      	push	{r4, r5, r6, lr}
	if((TX_wptr != TX_rptr-1) &&
 800554a:	f640 7434 	movw	r4, #3892	; 0xf34
 800554e:	f2c2 0400 	movt	r4, #8192	; 0x2000
 8005552:	681a      	ldr	r2, [r3, #0]
 8005554:	6823      	ldr	r3, [r4, #0]
 8005556:	1e50      	subs	r0, r2, #1
 8005558:	4283      	cmp	r3, r0
 800555a:	d004      	beq.n	8005566 <usart_putc+0x26>
 800555c:	f46f 7022 	mvn.w	r0, #648	; 0x288
 8005560:	4403      	add	r3, r0
 8005562:	4293      	cmp	r3, r2
 8005564:	d100      	bne.n	8005568 <usart_putc+0x28>

		/* Wrap pointer */
		if((TX_wptr - &TX_buffer[0])>=TX_BUFLEN)
			TX_wptr = &TX_buffer[0];
	}
}
 8005566:	bd70      	pop	{r4, r5, r6, pc}
		if (HAL_UART_GetState(huartx) == HAL_UART_STATE_BUSY_TX_RX)
 8005568:	f640 7638 	movw	r6, #3896	; 0xf38
 800556c:	f2c2 0600 	movt	r6, #8192	; 0x2000
 8005570:	460d      	mov	r5, r1
 8005572:	6830      	ldr	r0, [r6, #0]
 8005574:	f003 fc94 	bl	8008ea0 <HAL_UART_GetState>
 8005578:	2823      	cmp	r0, #35	; 0x23
 800557a:	d10f      	bne.n	800559c <usart_putc+0x5c>
			*TX_wptr++ = c; //Queue the new char if there's transmission in progress
 800557c:	6823      	ldr	r3, [r4, #0]
 800557e:	1c5a      	adds	r2, r3, #1
 8005580:	6022      	str	r2, [r4, #0]
 8005582:	701d      	strb	r5, [r3, #0]
		if((TX_wptr - &TX_buffer[0])>=TX_BUFLEN)
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	f640 43a4 	movw	r3, #3236	; 0xca4
 800558a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800558e:	1ad2      	subs	r2, r2, r3
 8005590:	f240 2189 	movw	r1, #649	; 0x289
 8005594:	428a      	cmp	r2, r1
			TX_wptr = &TX_buffer[0];
 8005596:	bfc8      	it	gt
 8005598:	6023      	strgt	r3, [r4, #0]
}
 800559a:	bd70      	pop	{r4, r5, r6, pc}
			txchar = c;
 800559c:	f640 3195 	movw	r1, #2965	; 0xb95
 80055a0:	f2c2 0100 	movt	r1, #8192	; 0x2000
			HAL_UART_Transmit_IT(huartx, &txchar, 1); //if not just send it
 80055a4:	6830      	ldr	r0, [r6, #0]
			txchar = c;
 80055a6:	700d      	strb	r5, [r1, #0]
			HAL_UART_Transmit_IT(huartx, &txchar, 1); //if not just send it
 80055a8:	2201      	movs	r2, #1
 80055aa:	f003 fa2d 	bl	8008a08 <HAL_UART_Transmit_IT>
 80055ae:	e7e9      	b.n	8005584 <usart_putc+0x44>

080055b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80055b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80055e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80055b4:	480d      	ldr	r0, [pc, #52]	; (80055ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80055b6:	490e      	ldr	r1, [pc, #56]	; (80055f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80055b8:	4a0e      	ldr	r2, [pc, #56]	; (80055f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80055ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80055bc:	e002      	b.n	80055c4 <LoopCopyDataInit>

080055be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80055be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80055c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80055c2:	3304      	adds	r3, #4

080055c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80055c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80055c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80055c8:	d3f9      	bcc.n	80055be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80055ca:	4a0b      	ldr	r2, [pc, #44]	; (80055f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80055cc:	4c0b      	ldr	r4, [pc, #44]	; (80055fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80055ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80055d0:	e001      	b.n	80055d6 <LoopFillZerobss>

080055d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80055d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80055d4:	3204      	adds	r2, #4

080055d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80055d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80055d8:	d3fb      	bcc.n	80055d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80055da:	f7ff ff51 	bl	8005480 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80055de:	f003 fc6f 	bl	8008ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80055e2:	f7fe f971 	bl	80038c8 <main>
  bx  lr    
 80055e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80055e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80055ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80055f0:	20000248 	.word	0x20000248
  ldr r2, =_sidata
 80055f4:	0800fe00 	.word	0x0800fe00
  ldr r2, =_sbss
 80055f8:	20000248 	.word	0x20000248
  ldr r4, =_ebss
 80055fc:	20000f50 	.word	0x20000f50

08005600 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005600:	e7fe      	b.n	8005600 <ADC_IRQHandler>
	...

08005604 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005604:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8005606:	f240 0268 	movw	r2, #104	; 0x68
 800560a:	f240 036c 	movw	r3, #108	; 0x6c
 800560e:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005612:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005616:	6812      	ldr	r2, [r2, #0]
 8005618:	781b      	ldrb	r3, [r3, #0]
{
 800561a:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800561c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005620:	fbb0 f0f3 	udiv	r0, r0, r3
 8005624:	fbb2 f0f0 	udiv	r0, r2, r0
 8005628:	f000 fb22 	bl	8005c70 <HAL_SYSTICK_Config>
 800562c:	b908      	cbnz	r0, 8005632 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800562e:	2d0f      	cmp	r5, #15
 8005630:	d901      	bls.n	8005636 <HAL_InitTick+0x32>
    return HAL_ERROR;
 8005632:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8005634:	bd38      	pop	{r3, r4, r5, pc}
 8005636:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005638:	4602      	mov	r2, r0
 800563a:	4629      	mov	r1, r5
 800563c:	f04f 30ff 	mov.w	r0, #4294967295
 8005640:	f000 fac6 	bl	8005bd0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005644:	f240 0370 	movw	r3, #112	; 0x70
 8005648:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800564c:	4620      	mov	r0, r4
 800564e:	601d      	str	r5, [r3, #0]
}
 8005650:	bd38      	pop	{r3, r4, r5, pc}
 8005652:	bf00      	nop

08005654 <HAL_Init>:
{
 8005654:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005656:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800565a:	f2c4 0302 	movt	r3, #16386	; 0x4002
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800565e:	2003      	movs	r0, #3
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005666:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800566e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005676:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005678:	f000 fa98 	bl	8005bac <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800567c:	200f      	movs	r0, #15
 800567e:	f7ff ffc1 	bl	8005604 <HAL_InitTick>
  HAL_MspInit();
 8005682:	f7fe fc73 	bl	8003f6c <HAL_MspInit>
}
 8005686:	2000      	movs	r0, #0
 8005688:	bd08      	pop	{r3, pc}
 800568a:	bf00      	nop

0800568c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800568c:	f640 733c 	movw	r3, #3900	; 0xf3c
 8005690:	f240 016c 	movw	r1, #108	; 0x6c
 8005694:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8005698:	f2c2 0100 	movt	r1, #8192	; 0x2000
 800569c:	6818      	ldr	r0, [r3, #0]
 800569e:	780a      	ldrb	r2, [r1, #0]
 80056a0:	4402      	add	r2, r0
 80056a2:	601a      	str	r2, [r3, #0]
}
 80056a4:	4770      	bx	lr
 80056a6:	bf00      	nop

080056a8 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80056a8:	f640 733c 	movw	r3, #3900	; 0xf3c
 80056ac:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056b0:	6818      	ldr	r0, [r3, #0]
}
 80056b2:	4770      	bx	lr

080056b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80056b4:	b538      	push	{r3, r4, r5, lr}
 80056b6:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80056b8:	f7ff fff6 	bl	80056a8 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80056bc:	1c63      	adds	r3, r4, #1
  uint32_t tickstart = HAL_GetTick();
 80056be:	4605      	mov	r5, r0
  if (wait < HAL_MAX_DELAY)
 80056c0:	d005      	beq.n	80056ce <HAL_Delay+0x1a>
  {
    wait += (uint32_t)(uwTickFreq);
 80056c2:	f240 036c 	movw	r3, #108	; 0x6c
 80056c6:	f2c2 0300 	movt	r3, #8192	; 0x2000
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	441c      	add	r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 80056ce:	f7ff ffeb 	bl	80056a8 <HAL_GetTick>
 80056d2:	1b43      	subs	r3, r0, r5
 80056d4:	42a3      	cmp	r3, r4
 80056d6:	d3fa      	bcc.n	80056ce <HAL_Delay+0x1a>
  {
  }
}
 80056d8:	bd38      	pop	{r3, r4, r5, pc}
 80056da:	bf00      	nop

080056dc <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80056dc:	2800      	cmp	r0, #0
 80056de:	f000 80a4 	beq.w	800582a <HAL_ADC_Init+0x14e>
{
 80056e2:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80056e4:	6c05      	ldr	r5, [r0, #64]	; 0x40
 80056e6:	4604      	mov	r4, r0
 80056e8:	b13d      	cbz	r5, 80056fa <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80056ea:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80056ec:	06db      	lsls	r3, r3, #27
 80056ee:	d50c      	bpl.n	800570a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80056f0:	2300      	movs	r3, #0
 80056f2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 80056f6:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 80056f8:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 80056fa:	f7fe fc53 	bl	8003fa4 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 80056fe:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005700:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8005702:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005706:	06db      	lsls	r3, r3, #27
 8005708:	d4f2      	bmi.n	80056f0 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800570a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800570c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005710:	f44f 520c 	mov.w	r2, #8960	; 0x2300
    ADC_STATE_CLR_SET(hadc->State,
 8005714:	f023 0302 	bic.w	r3, r3, #2
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005718:	f2c4 0201 	movt	r2, #16385	; 0x4001
    ADC_STATE_CLR_SET(hadc->State,
 800571c:	f043 0302 	orr.w	r3, r3, #2
 8005720:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005722:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005724:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8005726:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 800572a:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800572c:	6851      	ldr	r1, [r2, #4]
 800572e:	6860      	ldr	r0, [r4, #4]
 8005730:	4301      	orrs	r1, r0
 8005732:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005734:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005736:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005738:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800573a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800573e:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005740:	6859      	ldr	r1, [r3, #4]
 8005742:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005746:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005748:	6859      	ldr	r1, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800574a:	68e5      	ldr	r5, [r4, #12]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800574c:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8005750:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005752:	685a      	ldr	r2, [r3, #4]
 8005754:	4302      	orrs	r2, r0
 8005756:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005758:	6899      	ldr	r1, [r3, #8]
 800575a:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 800575e:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8005760:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005762:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8005764:	2001      	movs	r0, #1
 8005766:	f6c0 7000 	movt	r0, #3840	; 0xf00
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800576a:	432a      	orrs	r2, r5
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800576c:	4281      	cmp	r1, r0
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800576e:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005770:	d052      	beq.n	8005818 <HAL_ADC_Init+0x13c>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005772:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8005774:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005776:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 800577a:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800577c:	689a      	ldr	r2, [r3, #8]
 800577e:	4311      	orrs	r1, r2
 8005780:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005782:	6899      	ldr	r1, [r3, #8]
 8005784:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8005788:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800578a:	689a      	ldr	r2, [r3, #8]
 800578c:	432a      	orrs	r2, r5
 800578e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005790:	689a      	ldr	r2, [r3, #8]
 8005792:	f022 0202 	bic.w	r2, r2, #2
 8005796:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	7e21      	ldrb	r1, [r4, #24]
 800579c:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 80057a0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80057a2:	f894 2020 	ldrb.w	r2, [r4, #32]
 80057a6:	2a00      	cmp	r2, #0
 80057a8:	d041      	beq.n	800582e <HAL_ADC_Init+0x152>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057aa:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057ac:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80057ae:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 80057b2:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80057b4:	6858      	ldr	r0, [r3, #4]
 80057b6:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 80057ba:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80057bc:	1e51      	subs	r1, r2, #1
 80057be:	685a      	ldr	r2, [r3, #4]
 80057c0:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80057c4:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057c8:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057ca:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80057cc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80057d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80057d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d4:	3901      	subs	r1, #1
 80057d6:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 80057da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80057dc:	6899      	ldr	r1, [r3, #8]
 80057de:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 80057e2:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80057e4:	6899      	ldr	r1, [r3, #8]
 80057e6:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 80057ea:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 80057ee:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80057f0:	6899      	ldr	r1, [r3, #8]
 80057f2:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80057f6:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057f8:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 80057fa:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80057fc:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8005800:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8005802:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 8005804:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005806:	f023 0303 	bic.w	r3, r3, #3
 800580a:	f043 0301 	orr.w	r3, r3, #1
 800580e:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8005810:	2300      	movs	r3, #0
 8005812:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8005816:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005818:	689a      	ldr	r2, [r3, #8]
 800581a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800581e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005820:	689a      	ldr	r2, [r3, #8]
 8005822:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005826:	609a      	str	r2, [r3, #8]
 8005828:	e7b2      	b.n	8005790 <HAL_ADC_Init+0xb4>
    return HAL_ERROR;
 800582a:	2001      	movs	r0, #1
}
 800582c:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005834:	605a      	str	r2, [r3, #4]
 8005836:	e7c6      	b.n	80057c6 <HAL_ADC_Init+0xea>

08005838 <HAL_ADC_Start_DMA>:
{
 8005838:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 800583a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800583e:	b082      	sub	sp, #8
 8005840:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 8005842:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005844:	f04f 0000 	mov.w	r0, #0
 8005848:	9001      	str	r0, [sp, #4]
  __HAL_LOCK(hadc);
 800584a:	f000 80aa 	beq.w	80059a2 <HAL_ADC_Start_DMA+0x16a>
 800584e:	2301      	movs	r3, #1
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005850:	682e      	ldr	r6, [r5, #0]
  __HAL_LOCK(hadc);
 8005852:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005856:	68b3      	ldr	r3, [r6, #8]
 8005858:	07db      	lsls	r3, r3, #31
 800585a:	d41a      	bmi.n	8005892 <HAL_ADC_Start_DMA+0x5a>
    __HAL_ADC_ENABLE(hadc);
 800585c:	68b3      	ldr	r3, [r6, #8]
 800585e:	f043 0301 	orr.w	r3, r3, #1
 8005862:	60b3      	str	r3, [r6, #8]
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8005864:	f240 0368 	movw	r3, #104	; 0x68
 8005868:	f2c2 0300 	movt	r3, #8192	; 0x2000
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	f64d 6383 	movw	r3, #56963	; 0xde83
 8005872:	f2c4 331b 	movt	r3, #17179	; 0x431b
 8005876:	fba3 3000 	umull	r3, r0, r3, r0
 800587a:	0c80      	lsrs	r0, r0, #18
 800587c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8005880:	9001      	str	r0, [sp, #4]
    while(counter != 0U)
 8005882:	9b01      	ldr	r3, [sp, #4]
 8005884:	b12b      	cbz	r3, 8005892 <HAL_ADC_Start_DMA+0x5a>
      counter--;
 8005886:	9c01      	ldr	r4, [sp, #4]
 8005888:	3c01      	subs	r4, #1
 800588a:	9401      	str	r4, [sp, #4]
    while(counter != 0U)
 800588c:	9801      	ldr	r0, [sp, #4]
 800588e:	2800      	cmp	r0, #0
 8005890:	d1f9      	bne.n	8005886 <HAL_ADC_Start_DMA+0x4e>
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 8005892:	68b3      	ldr	r3, [r6, #8]
 8005894:	05dc      	lsls	r4, r3, #23
 8005896:	d503      	bpl.n	80058a0 <HAL_ADC_Start_DMA+0x68>
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8005898:	68b3      	ldr	r3, [r6, #8]
 800589a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800589e:	60b3      	str	r3, [r6, #8]
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80058a0:	68b0      	ldr	r0, [r6, #8]
    ADC_STATE_CLR_SET(hadc->State,
 80058a2:	6c2b      	ldr	r3, [r5, #64]	; 0x40
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80058a4:	f010 0001 	ands.w	r0, r0, #1
 80058a8:	d062      	beq.n	8005970 <HAL_ADC_Start_DMA+0x138>
    ADC_STATE_CLR_SET(hadc->State,
 80058aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80058ae:	f023 0301 	bic.w	r3, r3, #1
 80058b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058b6:	642b      	str	r3, [r5, #64]	; 0x40
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80058b8:	6873      	ldr	r3, [r6, #4]
 80058ba:	0558      	lsls	r0, r3, #21
 80058bc:	d505      	bpl.n	80058ca <HAL_ADC_Start_DMA+0x92>
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80058be:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 80058c0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80058c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80058c8:	642b      	str	r3, [r5, #64]	; 0x40
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058ca:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058cc:	6ba8      	ldr	r0, [r5, #56]	; 0x38
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80058ce:	f413 5380 	ands.w	r3, r3, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80058d2:	bf1c      	itt	ne
 80058d4:	6c6b      	ldrne	r3, [r5, #68]	; 0x44
 80058d6:	f023 0306 	bicne.w	r3, r3, #6
      ADC_CLEAR_ERRORCODE(hadc);
 80058da:	646b      	str	r3, [r5, #68]	; 0x44
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80058dc:	4613      	mov	r3, r2
 80058de:	460a      	mov	r2, r1
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058e0:	f645 11d9 	movw	r1, #23001	; 0x59d9
 80058e4:	f6c0 0100 	movt	r1, #2048	; 0x800
    __HAL_UNLOCK(hadc);   
 80058e8:	2400      	movs	r4, #0
 80058ea:	f885 403c 	strb.w	r4, [r5, #60]	; 0x3c
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80058ee:	63c1      	str	r1, [r0, #60]	; 0x3c
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80058f0:	f645 11b1 	movw	r1, #22961	; 0x59b1
 80058f4:	f6c0 0100 	movt	r1, #2048	; 0x800
 80058f8:	6401      	str	r1, [r0, #64]	; 0x40
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80058fa:	f645 11c1 	movw	r1, #22977	; 0x59c1
 80058fe:	f6c0 0100 	movt	r1, #2048	; 0x800
 8005902:	64c1      	str	r1, [r0, #76]	; 0x4c
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005904:	f06f 0122 	mvn.w	r1, #34	; 0x22
 8005908:	6031      	str	r1, [r6, #0]
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800590a:	6871      	ldr	r1, [r6, #4]
 800590c:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 8005910:	6071      	str	r1, [r6, #4]
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8005912:	68b1      	ldr	r1, [r6, #8]
 8005914:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8005918:	60b1      	str	r1, [r6, #8]
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800591a:	f106 014c 	add.w	r1, r6, #76	; 0x4c
 800591e:	f000 fac7 	bl	8005eb0 <HAL_DMA_Start_IT>
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8005922:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8005926:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800592a:	6858      	ldr	r0, [r3, #4]
 800592c:	f010 001f 	ands.w	r0, r0, #31
 8005930:	d127      	bne.n	8005982 <HAL_ADC_Start_DMA+0x14a>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8005932:	682a      	ldr	r2, [r5, #0]
 8005934:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8005938:	f2c4 0101 	movt	r1, #16385	; 0x4001
 800593c:	428a      	cmp	r2, r1
 800593e:	d00e      	beq.n	800595e <HAL_ADC_Start_DMA+0x126>
 8005940:	f44f 5104 	mov.w	r1, #8448	; 0x2100
 8005944:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005948:	428a      	cmp	r2, r1
 800594a:	d02d      	beq.n	80059a8 <HAL_ADC_Start_DMA+0x170>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800594c:	f44f 5108 	mov.w	r1, #8704	; 0x2200
 8005950:	f2c4 0101 	movt	r1, #16385	; 0x4001
 8005954:	428a      	cmp	r2, r1
 8005956:	d112      	bne.n	800597e <HAL_ADC_Start_DMA+0x146>
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	06db      	lsls	r3, r3, #27
 800595c:	d40f      	bmi.n	800597e <HAL_ADC_Start_DMA+0x146>
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800595e:	6890      	ldr	r0, [r2, #8]
 8005960:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 8005964:	d114      	bne.n	8005990 <HAL_ADC_Start_DMA+0x158>
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005966:	6893      	ldr	r3, [r2, #8]
 8005968:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800596c:	6093      	str	r3, [r2, #8]
 800596e:	e006      	b.n	800597e <HAL_ADC_Start_DMA+0x146>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005970:	f043 0310 	orr.w	r3, r3, #16
 8005974:	642b      	str	r3, [r5, #64]	; 0x40
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005976:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8005978:	f043 0301 	orr.w	r3, r3, #1
 800597c:	646b      	str	r3, [r5, #68]	; 0x44
}
 800597e:	b002      	add	sp, #8
 8005980:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005982:	682a      	ldr	r2, [r5, #0]
 8005984:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005988:	f2c4 0301 	movt	r3, #16385	; 0x4001
 800598c:	429a      	cmp	r2, r3
 800598e:	d002      	beq.n	8005996 <HAL_ADC_Start_DMA+0x15e>
  return HAL_OK;
 8005990:	2000      	movs	r0, #0
}
 8005992:	b002      	add	sp, #8
 8005994:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005996:	6890      	ldr	r0, [r2, #8]
 8005998:	f010 5040 	ands.w	r0, r0, #805306368	; 0x30000000
 800599c:	d0e3      	beq.n	8005966 <HAL_ADC_Start_DMA+0x12e>
  return HAL_OK;
 800599e:	4620      	mov	r0, r4
 80059a0:	e7ed      	b.n	800597e <HAL_ADC_Start_DMA+0x146>
  __HAL_LOCK(hadc);
 80059a2:	2002      	movs	r0, #2
}
 80059a4:	b002      	add	sp, #8
 80059a6:	bd70      	pop	{r4, r5, r6, pc}
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80059a8:	685b      	ldr	r3, [r3, #4]
 80059aa:	06d9      	lsls	r1, r3, #27
 80059ac:	d0d7      	beq.n	800595e <HAL_ADC_Start_DMA+0x126>
 80059ae:	e7e6      	b.n	800597e <HAL_ADC_Start_DMA+0x146>

080059b0 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80059b0:	b508      	push	{r3, lr}
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80059b2:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80059b4:	f7fe fda0 	bl	80044f8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059b8:	bd08      	pop	{r3, pc}
 80059ba:	bf00      	nop

080059bc <HAL_ADC_ErrorCallback>:
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop

080059c0 <ADC_DMAError>:
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059c0:	6b80      	ldr	r0, [r0, #56]	; 0x38
{
 80059c2:	b508      	push	{r3, lr}
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80059c4:	2340      	movs	r3, #64	; 0x40
 80059c6:	6403      	str	r3, [r0, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80059c8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80059ca:	f043 0304 	orr.w	r3, r3, #4
 80059ce:	6443      	str	r3, [r0, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80059d0:	f7ff fff4 	bl	80059bc <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80059d4:	bd08      	pop	{r3, pc}
 80059d6:	bf00      	nop

080059d8 <ADC_DMAConvCplt>:
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80059d8:	6b83      	ldr	r3, [r0, #56]	; 0x38
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80059da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059dc:	f012 0f50 	tst.w	r2, #80	; 0x50
{
 80059e0:	b510      	push	{r4, lr}
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059e2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80059e4:	d123      	bne.n	8005a2e <ADC_DMAConvCplt+0x56>
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059ea:	6819      	ldr	r1, [r3, #0]
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80059ec:	641a      	str	r2, [r3, #64]	; 0x40
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80059ee:	688a      	ldr	r2, [r1, #8]
 80059f0:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80059f4:	d117      	bne.n	8005a26 <ADC_DMAConvCplt+0x4e>
 80059f6:	7e1a      	ldrb	r2, [r3, #24]
 80059f8:	b9aa      	cbnz	r2, 8005a26 <ADC_DMAConvCplt+0x4e>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80059fa:	6aca      	ldr	r2, [r1, #44]	; 0x2c
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80059fc:	f412 0f70 	tst.w	r2, #15728640	; 0xf00000
 8005a00:	d002      	beq.n	8005a08 <ADC_DMAConvCplt+0x30>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005a02:	688a      	ldr	r2, [r1, #8]
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8005a04:	0550      	lsls	r0, r2, #21
 8005a06:	d40e      	bmi.n	8005a26 <ADC_DMAConvCplt+0x4e>
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8005a08:	684a      	ldr	r2, [r1, #4]
 8005a0a:	f022 0220 	bic.w	r2, r2, #32
 8005a0e:	604a      	str	r2, [r1, #4]
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005a10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a12:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a16:	641a      	str	r2, [r3, #64]	; 0x40
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005a18:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a1a:	04d1      	lsls	r1, r2, #19
 8005a1c:	d403      	bmi.n	8005a26 <ADC_DMAConvCplt+0x4e>
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005a1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a20:	f042 0201 	orr.w	r2, r2, #1
 8005a24:	641a      	str	r2, [r3, #64]	; 0x40
    HAL_ADC_ConvCpltCallback(hadc);
 8005a26:	4618      	mov	r0, r3
 8005a28:	f7ff f8ee 	bl	8004c08 <HAL_ADC_ConvCpltCallback>
}
 8005a2c:	bd10      	pop	{r4, pc}
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8005a2e:	06d2      	lsls	r2, r2, #27
 8005a30:	d404      	bmi.n	8005a3c <ADC_DMAConvCplt+0x64>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
}
 8005a34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8005a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a3a:	4718      	bx	r3
      HAL_ADC_ErrorCallback(hadc);
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7ff ffbd 	bl	80059bc <HAL_ADC_ErrorCallback>
}
 8005a42:	bd10      	pop	{r4, pc}

08005a44 <HAL_ADC_ConfigChannel>:
{
 8005a44:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 8005a46:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 8005a4a:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 8005a4c:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 8005a4e:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 8005a50:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8005a52:	f000 80a8 	beq.w	8005ba6 <HAL_ADC_ConfigChannel+0x162>
 8005a56:	2301      	movs	r3, #1
 8005a58:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a5c:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005a5e:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 8005a60:	2c09      	cmp	r4, #9
 8005a62:	d830      	bhi.n	8005ac6 <HAL_ADC_ConfigChannel+0x82>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a64:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a66:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005a68:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 8005a6c:	f04f 0c07 	mov.w	ip, #7
 8005a70:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005a74:	ea25 050c 	bic.w	r5, r5, ip
 8005a78:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a7a:	691d      	ldr	r5, [r3, #16]
 8005a7c:	fa02 f20e 	lsl.w	r2, r2, lr
 8005a80:	432a      	orrs	r2, r5
 8005a82:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8005a84:	684a      	ldr	r2, [r1, #4]
 8005a86:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005a88:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 8005a8a:	d832      	bhi.n	8005af2 <HAL_ADC_ConfigChannel+0xae>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a8c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8005a90:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005a92:	3a05      	subs	r2, #5
 8005a94:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005a98:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005a9c:	fa0e f202 	lsl.w	r2, lr, r2
 8005aa0:	ea21 0202 	bic.w	r2, r1, r2
 8005aa4:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005aa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aa8:	ea4c 0202 	orr.w	r2, ip, r2
 8005aac:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005aae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005ab2:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d033      	beq.n	8005b22 <HAL_ADC_ConfigChannel+0xde>
  __HAL_UNLOCK(hadc);
 8005aba:	2300      	movs	r3, #0
 8005abc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 8005ac0:	4618      	mov	r0, r3
}
 8005ac2:	b003      	add	sp, #12
 8005ac4:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005ac6:	fa1f fc84 	uxth.w	ip, r4
 8005aca:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 8005ace:	68dd      	ldr	r5, [r3, #12]
 8005ad0:	f1a2 0e1e 	sub.w	lr, r2, #30
 8005ad4:	2207      	movs	r2, #7
 8005ad6:	fa02 f20e 	lsl.w	r2, r2, lr
 8005ada:	ea25 0202 	bic.w	r2, r5, r2
 8005ade:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005ae0:	688a      	ldr	r2, [r1, #8]
 8005ae2:	68dd      	ldr	r5, [r3, #12]
 8005ae4:	fa02 f20e 	lsl.w	r2, r2, lr
 8005ae8:	432a      	orrs	r2, r5
 8005aea:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 8005aec:	684a      	ldr	r2, [r1, #4]
 8005aee:	2a06      	cmp	r2, #6
 8005af0:	d9cc      	bls.n	8005a8c <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8005af2:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005af4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8005af8:	d83d      	bhi.n	8005b76 <HAL_ADC_ConfigChannel+0x132>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005afa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005afc:	3a23      	subs	r2, #35	; 0x23
 8005afe:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b00:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005b04:	fa05 f202 	lsl.w	r2, r5, r2
 8005b08:	ea21 0202 	bic.w	r2, r1, r2
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005b0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005b10:	ea4c 0202 	orr.w	r2, ip, r2
 8005b14:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005b16:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b1a:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8005b1e:	4293      	cmp	r3, r2
 8005b20:	d1cb      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x76>
 8005b22:	2c12      	cmp	r4, #18
 8005b24:	d036      	beq.n	8005b94 <HAL_ADC_ConfigChannel+0x150>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005b26:	f1a4 0310 	sub.w	r3, r4, #16
 8005b2a:	2b01      	cmp	r3, #1
 8005b2c:	d8c5      	bhi.n	8005aba <HAL_ADC_ConfigChannel+0x76>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b2e:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8005b32:	f2c4 0301 	movt	r3, #16385	; 0x4001
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b36:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8005b38:	685a      	ldr	r2, [r3, #4]
 8005b3a:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8005b3e:	605a      	str	r2, [r3, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005b40:	d1bb      	bne.n	8005aba <HAL_ADC_ConfigChannel+0x76>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8005b42:	f240 0268 	movw	r2, #104	; 0x68
 8005b46:	f2c2 0200 	movt	r2, #8192	; 0x2000
 8005b4a:	f64d 6183 	movw	r1, #56963	; 0xde83
 8005b4e:	6813      	ldr	r3, [r2, #0]
 8005b50:	f2c4 311b 	movt	r1, #17179	; 0x431b
 8005b54:	fba1 2303 	umull	r2, r3, r1, r3
 8005b58:	0c9b      	lsrs	r3, r3, #18
 8005b5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8005b5e:	005b      	lsls	r3, r3, #1
 8005b60:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005b62:	9b01      	ldr	r3, [sp, #4]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d0a8      	beq.n	8005aba <HAL_ADC_ConfigChannel+0x76>
        counter--;
 8005b68:	9b01      	ldr	r3, [sp, #4]
 8005b6a:	3b01      	subs	r3, #1
 8005b6c:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 8005b6e:	9b01      	ldr	r3, [sp, #4]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1f9      	bne.n	8005b68 <HAL_ADC_ConfigChannel+0x124>
 8005b74:	e7a1      	b.n	8005aba <HAL_ADC_ConfigChannel+0x76>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b76:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005b78:	3a41      	subs	r2, #65	; 0x41
 8005b7a:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b7c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005b80:	fa05 f202 	lsl.w	r2, r5, r2
 8005b84:	ea21 0202 	bic.w	r2, r1, r2
 8005b88:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005b8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b8c:	ea4c 0202 	orr.w	r2, ip, r2
 8005b90:	62da      	str	r2, [r3, #44]	; 0x2c
 8005b92:	e78c      	b.n	8005aae <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8005b94:	f44f 530c 	mov.w	r3, #8960	; 0x2300
 8005b98:	f2c4 0301 	movt	r3, #16385	; 0x4001
 8005b9c:	685a      	ldr	r2, [r3, #4]
 8005b9e:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8005ba2:	605a      	str	r2, [r3, #4]
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005ba4:	e789      	b.n	8005aba <HAL_ADC_ConfigChannel+0x76>
  __HAL_LOCK(hadc);
 8005ba6:	2002      	movs	r0, #2
}
 8005ba8:	b003      	add	sp, #12
 8005baa:	bd30      	pop	{r4, r5, pc}

08005bac <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bac:	f44f 426d 	mov.w	r2, #60672	; 0xed00
 8005bb0:	f2ce 0200 	movt	r2, #57344	; 0xe000
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bb4:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005bb6:	68d1      	ldr	r1, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bb8:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005bbc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005bc0:	4001      	ands	r1, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005bc2:	430b      	orrs	r3, r1
  reg_value  =  (reg_value                                   |
 8005bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8005bcc:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005bce:	4770      	bx	lr

08005bd0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005bd0:	f44f 436d 	mov.w	r3, #60672	; 0xed00
 8005bd4:	f2ce 0300 	movt	r3, #57344	; 0xe000
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005bd8:	b500      	push	{lr}
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f3c3 2302 	ubfx	r3, r3, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005be0:	f1c3 0e07 	rsb	lr, r3, #7
 8005be4:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005be8:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005bec:	bf28      	it	cs
 8005bee:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005bf2:	f1bc 0f06 	cmp.w	ip, #6
 8005bf6:	d91b      	bls.n	8005c30 <HAL_NVIC_SetPriority+0x60>
 8005bf8:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005bfa:	f04f 3cff 	mov.w	ip, #4294967295
 8005bfe:	fa0c fc03 	lsl.w	ip, ip, r3
 8005c02:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c06:	f04f 3cff 	mov.w	ip, #4294967295
 8005c0a:	fa0c fc0e 	lsl.w	ip, ip, lr
 8005c0e:	ea21 010c 	bic.w	r1, r1, ip
 8005c12:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8005c14:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005c16:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8005c1a:	db0c      	blt.n	8005c36 <HAL_NVIC_SetPriority+0x66>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c1c:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8005c20:	0109      	lsls	r1, r1, #4
 8005c22:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8005c26:	b2c9      	uxtb	r1, r1
 8005c28:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8005c2c:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c30:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005c32:	4613      	mov	r3, r2
 8005c34:	e7e7      	b.n	8005c06 <HAL_NVIC_SetPriority+0x36>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c36:	f64e 43fc 	movw	r3, #60668	; 0xecfc
 8005c3a:	f000 000f 	and.w	r0, r0, #15
 8005c3e:	f2ce 0300 	movt	r3, #57344	; 0xe000
 8005c42:	0109      	lsls	r1, r1, #4
 8005c44:	4403      	add	r3, r0
 8005c46:	b2c9      	uxtb	r1, r1
 8005c48:	7619      	strb	r1, [r3, #24]
 8005c4a:	f85d fb04 	ldr.w	pc, [sp], #4
 8005c4e:	bf00      	nop

08005c50 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8005c50:	2800      	cmp	r0, #0
 8005c52:	db0b      	blt.n	8005c6c <HAL_NVIC_EnableIRQ+0x1c>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005c54:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8005c58:	0941      	lsrs	r1, r0, #5
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	f000 001f 	and.w	r0, r0, #31
 8005c60:	f2ce 0200 	movt	r2, #57344	; 0xe000
 8005c64:	fa03 f000 	lsl.w	r0, r3, r0
 8005c68:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8005c6c:	4770      	bx	lr
 8005c6e:	bf00      	nop

08005c70 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005c70:	3801      	subs	r0, #1
 8005c72:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8005c76:	d213      	bcs.n	8005ca0 <HAL_SYSTICK_Config+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c78:	f44f 416d 	mov.w	r1, #60672	; 0xed00
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c7c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c80:	f2ce 0100 	movt	r1, #57344	; 0xe000
 8005c84:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005c88:	b410      	push	{r4}
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c8a:	2200      	movs	r2, #0
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005c8c:	6158      	str	r0, [r3, #20]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c8e:	2407      	movs	r4, #7
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005c90:	f881 c023 	strb.w	ip, [r1, #35]	; 0x23
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005c94:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005c96:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005c98:	611c      	str	r4, [r3, #16]
   return SysTick_Config(TicksNumb);
}
 8005c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005c9e:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8005ca0:	2001      	movs	r0, #1
 8005ca2:	4770      	bx	lr

08005ca4 <HAL_DAC_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
  /* Check DAC handle */
  if (hdac == NULL)
 8005ca4:	b188      	cbz	r0, 8005cca <HAL_DAC_Init+0x26>
{
 8005ca6:	b510      	push	{r4, lr}
    return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005ca8:	7903      	ldrb	r3, [r0, #4]
 8005caa:	4604      	mov	r4, r0
 8005cac:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005cb0:	b13b      	cbz	r3, 8005cc2 <HAL_DAC_Init+0x1e>

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005cb2:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cb4:	2102      	movs	r1, #2

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005cb6:	2201      	movs	r2, #1
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cb8:	7121      	strb	r1, [r4, #4]
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005cba:	6123      	str	r3, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8005cbc:	7122      	strb	r2, [r4, #4]

  /* Return function status */
  return HAL_OK;
 8005cbe:	4618      	mov	r0, r3
}
 8005cc0:	bd10      	pop	{r4, pc}
    hdac->Lock = HAL_UNLOCKED;
 8005cc2:	7142      	strb	r2, [r0, #5]
    HAL_DAC_MspInit(hdac);
 8005cc4:	f7fe f9cc 	bl	8004060 <HAL_DAC_MspInit>
 8005cc8:	e7f3      	b.n	8005cb2 <HAL_DAC_Init+0xe>
    return HAL_ERROR;
 8005cca:	2001      	movs	r0, #1
}
 8005ccc:	4770      	bx	lr
 8005cce:	bf00      	nop

08005cd0 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005cd0:	7943      	ldrb	r3, [r0, #5]
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d02a      	beq.n	8005d2c <HAL_DAC_Start+0x5c>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005cd6:	6802      	ldr	r2, [r0, #0]
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cd8:	2302      	movs	r3, #2
{
 8005cda:	b410      	push	{r4}
  hdac->State = HAL_DAC_STATE_BUSY;
 8005cdc:	7103      	strb	r3, [r0, #4]
  __HAL_DAC_ENABLE(hdac, Channel);
 8005cde:	6814      	ldr	r4, [r2, #0]
 8005ce0:	f001 0c10 	and.w	ip, r1, #16
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	fa03 f30c 	lsl.w	r3, r3, ip
 8005cea:	4323      	orrs	r3, r4
 8005cec:	6013      	str	r3, [r2, #0]

  if (Channel == DAC_CHANNEL_1)
 8005cee:	b981      	cbnz	r1, 8005d12 <HAL_DAC_Start+0x42>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8005cf0:	6813      	ldr	r3, [r2, #0]
 8005cf2:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005cf6:	2b3c      	cmp	r3, #60	; 0x3c
 8005cf8:	d103      	bne.n	8005d02 <HAL_DAC_Start+0x32>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005cfa:	6853      	ldr	r3, [r2, #4]
 8005cfc:	f043 0301 	orr.w	r3, r3, #1
 8005d00:	6053      	str	r3, [r2, #4]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d02:	2300      	movs	r3, #0
  hdac->State = HAL_DAC_STATE_READY;
 8005d04:	2201      	movs	r2, #1
 8005d06:	7102      	strb	r2, [r0, #4]
  __HAL_UNLOCK(hdac);
 8005d08:	7143      	strb	r3, [r0, #5]

  /* Return function status */
  return HAL_OK;
}
 8005d0a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return HAL_OK;
 8005d0e:	4618      	mov	r0, r3
}
 8005d10:	4770      	bx	lr
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8005d12:	6811      	ldr	r1, [r2, #0]
 8005d14:	233c      	movs	r3, #60	; 0x3c
 8005d16:	f401 1170 	and.w	r1, r1, #3932160	; 0x3c0000
 8005d1a:	fa03 fc0c 	lsl.w	ip, r3, ip
 8005d1e:	4561      	cmp	r1, ip
 8005d20:	d1ef      	bne.n	8005d02 <HAL_DAC_Start+0x32>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005d22:	6853      	ldr	r3, [r2, #4]
 8005d24:	f043 0302 	orr.w	r3, r3, #2
 8005d28:	6053      	str	r3, [r2, #4]
 8005d2a:	e7ea      	b.n	8005d02 <HAL_DAC_Start+0x32>
  __HAL_LOCK(hdac);
 8005d2c:	2002      	movs	r0, #2
}
 8005d2e:	4770      	bx	lr

08005d30 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005d30:	4603      	mov	r3, r0
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005d32:	7940      	ldrb	r0, [r0, #5]
 8005d34:	2801      	cmp	r0, #1
 8005d36:	d01f      	beq.n	8005d78 <HAL_DAC_ConfigChannel+0x48>

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d38:	2002      	movs	r0, #2
{
 8005d3a:	b430      	push	{r4, r5}
  hdac->State = HAL_DAC_STATE_BUSY;
 8005d3c:	7118      	strb	r0, [r3, #4]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005d3e:	e9d1 0100 	ldrd	r0, r1, [r1]
  tmpreg1 = hdac->Instance->CR;
 8005d42:	681c      	ldr	r4, [r3, #0]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005d44:	f002 0210 	and.w	r2, r2, #16
  tmpreg1 = hdac->Instance->CR;
 8005d48:	6825      	ldr	r5, [r4, #0]
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005d4a:	4301      	orrs	r1, r0
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8005d4c:	f640 70fe 	movw	r0, #4094	; 0xffe
 8005d50:	4090      	lsls	r0, r2
 8005d52:	ea25 0000 	bic.w	r0, r5, r0
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005d56:	4091      	lsls	r1, r2
 8005d58:	4301      	orrs	r1, r0
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005d5a:	6021      	str	r1, [r4, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005d5c:	6821      	ldr	r1, [r4, #0]
 8005d5e:	20c0      	movs	r0, #192	; 0xc0
 8005d60:	fa00 f202 	lsl.w	r2, r0, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005d64:	2500      	movs	r5, #0
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005d66:	ea21 0202 	bic.w	r2, r1, r2
  hdac->State = HAL_DAC_STATE_READY;
 8005d6a:	2101      	movs	r1, #1
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8005d6c:	6022      	str	r2, [r4, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8005d6e:	7119      	strb	r1, [r3, #4]
  __HAL_UNLOCK(hdac);
 8005d70:	715d      	strb	r5, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005d72:	4628      	mov	r0, r5
}
 8005d74:	bc30      	pop	{r4, r5}
 8005d76:	4770      	bx	lr
  __HAL_LOCK(hdac);
 8005d78:	2002      	movs	r0, #2
}
 8005d7a:	4770      	bx	lr

08005d7c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005d7c:	b538      	push	{r3, r4, r5, lr}
 8005d7e:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8005d80:	f7ff fc92 	bl	80056a8 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005d84:	2c00      	cmp	r4, #0
 8005d86:	d05b      	beq.n	8005e40 <HAL_DMA_Init+0xc4>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005d88:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8005d8a:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d8c:	2102      	movs	r1, #2
 8005d8e:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8005d92:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	f022 0201 	bic.w	r2, r2, #1
 8005d9c:	4605      	mov	r5, r0
 8005d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005da0:	e005      	b.n	8005dae <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005da2:	f7ff fc81 	bl	80056a8 <HAL_GetTick>
 8005da6:	1b43      	subs	r3, r0, r5
 8005da8:	2b05      	cmp	r3, #5
 8005daa:	d842      	bhi.n	8005e32 <HAL_DMA_Init+0xb6>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	07d1      	lsls	r1, r2, #31
 8005db2:	d4f6      	bmi.n	8005da2 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005db4:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8005db8:	68e1      	ldr	r1, [r4, #12]
 8005dba:	4302      	orrs	r2, r0
 8005dbc:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dbe:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dc2:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005dc4:	432a      	orrs	r2, r5
 8005dc6:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dc8:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8005dca:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005dcc:	4302      	orrs	r2, r0
 8005dce:	430a      	orrs	r2, r1
          hdma->Init.Mode                | hdma->Init.Priority;
 8005dd0:	6a21      	ldr	r1, [r4, #32]
 8005dd2:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005dd4:	f248 013f 	movw	r1, #32831	; 0x803f
 8005dd8:	f2cf 0110 	movt	r1, #61456	; 0xf010
 8005ddc:	4029      	ands	r1, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005dde:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005de0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005de2:	2904      	cmp	r1, #4
 8005de4:	d02e      	beq.n	8005e44 <HAL_DMA_Init+0xc8>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005de6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005de8:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005dea:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005dee:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005df0:	b2d8      	uxtb	r0, r3
 8005df2:	f64a 22ab 	movw	r2, #43691	; 0xaaab
 8005df6:	3810      	subs	r0, #16
 8005df8:	f6ca 22aa 	movt	r2, #43690	; 0xaaaa
  hdma->Instance->FCR = tmp;
 8005dfc:	6159      	str	r1, [r3, #20]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005dfe:	f24f 5514 	movw	r5, #62740	; 0xf514
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e02:	fba2 1200 	umull	r1, r2, r2, r0
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e06:	f6c0 0500 	movt	r5, #2048	; 0x800
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005e0a:	0912      	lsrs	r2, r2, #4
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e0c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005e10:	5ca9      	ldrb	r1, [r5, r2]
 8005e12:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e14:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8005e18:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005e1a:	bf88      	it	hi
 8005e1c:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e1e:	223f      	movs	r2, #63	; 0x3f
 8005e20:	408a      	lsls	r2, r1
 8005e22:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e24:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005e26:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8005e28:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e2a:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8005e2c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8005e30:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005e34:	2220      	movs	r2, #32
 8005e36:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005e38:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8005e3c:	4618      	mov	r0, r3
}
 8005e3e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8005e40:	2001      	movs	r0, #1
}
 8005e42:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005e44:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8005e48:	4329      	orrs	r1, r5
 8005e4a:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8005e4c:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8005e4e:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8005e50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005e52:	f021 0107 	bic.w	r1, r1, #7
 8005e56:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8005e58:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005e5c:	2d00      	cmp	r5, #0
 8005e5e:	d0c7      	beq.n	8005df0 <HAL_DMA_Init+0x74>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005e60:	b178      	cbz	r0, 8005e82 <HAL_DMA_Init+0x106>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005e62:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8005e66:	d016      	beq.n	8005e96 <HAL_DMA_Init+0x11a>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005e68:	2a02      	cmp	r2, #2
 8005e6a:	d903      	bls.n	8005e74 <HAL_DMA_Init+0xf8>
 8005e6c:	2a03      	cmp	r2, #3
 8005e6e:	d1bf      	bne.n	8005df0 <HAL_DMA_Init+0x74>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005e70:	01ea      	lsls	r2, r5, #7
 8005e72:	d5bd      	bpl.n	8005df0 <HAL_DMA_Init+0x74>
        hdma->State = HAL_DMA_STATE_READY;
 8005e74:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005e76:	2240      	movs	r2, #64	; 0x40
 8005e78:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8005e7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8005e7e:	4618      	mov	r0, r3
}
 8005e80:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8005e82:	2a01      	cmp	r2, #1
 8005e84:	d003      	beq.n	8005e8e <HAL_DMA_Init+0x112>
 8005e86:	f032 0202 	bics.w	r2, r2, #2
 8005e8a:	d1b1      	bne.n	8005df0 <HAL_DMA_Init+0x74>
 8005e8c:	e7f0      	b.n	8005e70 <HAL_DMA_Init+0xf4>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005e8e:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8005e92:	d1ad      	bne.n	8005df0 <HAL_DMA_Init+0x74>
 8005e94:	e7ee      	b.n	8005e74 <HAL_DMA_Init+0xf8>
    switch (tmp)
 8005e96:	2a03      	cmp	r2, #3
 8005e98:	d8aa      	bhi.n	8005df0 <HAL_DMA_Init+0x74>
 8005e9a:	a001      	add	r0, pc, #4	; (adr r0, 8005ea0 <HAL_DMA_Init+0x124>)
 8005e9c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8005ea0:	08005e75 	.word	0x08005e75
 8005ea4:	08005e71 	.word	0x08005e71
 8005ea8:	08005e75 	.word	0x08005e75
 8005eac:	08005e8f 	.word	0x08005e8f

08005eb0 <HAL_DMA_Start_IT>:
{
 8005eb0:	b470      	push	{r4, r5, r6}
  __HAL_LOCK(hdma);
 8005eb2:	f890 4034 	ldrb.w	r4, [r0, #52]	; 0x34
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005eb6:	6d85      	ldr	r5, [r0, #88]	; 0x58
  __HAL_LOCK(hdma);
 8005eb8:	2c01      	cmp	r4, #1
 8005eba:	d035      	beq.n	8005f28 <HAL_DMA_Start_IT+0x78>
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ebc:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
  __HAL_LOCK(hdma);
 8005ec0:	f04f 0c01 	mov.w	ip, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 8005ec4:	4564      	cmp	r4, ip
  __HAL_LOCK(hdma);
 8005ec6:	f880 c034 	strb.w	ip, [r0, #52]	; 0x34
  if(HAL_DMA_STATE_READY == hdma->State)
 8005eca:	d005      	beq.n	8005ed8 <HAL_DMA_Start_IT+0x28>
    __HAL_UNLOCK(hdma);	  
 8005ecc:	2300      	movs	r3, #0
 8005ece:	f880 3034 	strb.w	r3, [r0, #52]	; 0x34
}
 8005ed2:	bc70      	pop	{r4, r5, r6}
    status = HAL_BUSY;
 8005ed4:	2002      	movs	r0, #2
}
 8005ed6:	4770      	bx	lr
    hdma->State = HAL_DMA_STATE_BUSY;
 8005ed8:	2602      	movs	r6, #2
 8005eda:	f880 6035 	strb.w	r6, [r0, #53]	; 0x35
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ede:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005ee0:	2600      	movs	r6, #0
 8005ee2:	6546      	str	r6, [r0, #84]	; 0x54
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005ee4:	6826      	ldr	r6, [r4, #0]
 8005ee6:	f426 2680 	bic.w	r6, r6, #262144	; 0x40000
 8005eea:	6026      	str	r6, [r4, #0]
  hdma->Instance->NDTR = DataLength;
 8005eec:	6063      	str	r3, [r4, #4]
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005eee:	6883      	ldr	r3, [r0, #8]
 8005ef0:	2b40      	cmp	r3, #64	; 0x40
    hdma->Instance->PAR = DstAddress;
 8005ef2:	bf0e      	itee	eq
 8005ef4:	60a2      	streq	r2, [r4, #8]
    hdma->Instance->PAR = SrcAddress;
 8005ef6:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->M0AR = DstAddress;
 8005ef8:	60e2      	strne	r2, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005efa:	6dc2      	ldr	r2, [r0, #92]	; 0x5c
    hdma->Instance->M0AR = SrcAddress;
 8005efc:	bf08      	it	eq
 8005efe:	60e1      	streq	r1, [r4, #12]
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f00:	233f      	movs	r3, #63	; 0x3f
 8005f02:	4093      	lsls	r3, r2
 8005f04:	60ab      	str	r3, [r5, #8]
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f06:	6823      	ldr	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005f08:	6c02      	ldr	r2, [r0, #64]	; 0x40
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8005f0a:	f043 0316 	orr.w	r3, r3, #22
 8005f0e:	6023      	str	r3, [r4, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8005f10:	b11a      	cbz	r2, 8005f1a <HAL_DMA_Start_IT+0x6a>
      hdma->Instance->CR  |= DMA_IT_HT;
 8005f12:	6823      	ldr	r3, [r4, #0]
 8005f14:	f043 0308 	orr.w	r3, r3, #8
 8005f18:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8005f1a:	6823      	ldr	r3, [r4, #0]
 8005f1c:	f043 0301 	orr.w	r3, r3, #1
  HAL_StatusTypeDef status = HAL_OK;
 8005f20:	2000      	movs	r0, #0
    __HAL_DMA_ENABLE(hdma);
 8005f22:	6023      	str	r3, [r4, #0]
}
 8005f24:	bc70      	pop	{r4, r5, r6}
 8005f26:	4770      	bx	lr
  __HAL_LOCK(hdma);
 8005f28:	2002      	movs	r0, #2
}
 8005f2a:	bc70      	pop	{r4, r5, r6}
 8005f2c:	4770      	bx	lr
 8005f2e:	bf00      	nop

08005f30 <HAL_DMA_Abort>:
{
 8005f30:	b570      	push	{r4, r5, r6, lr}
 8005f32:	4604      	mov	r4, r0
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005f34:	6d86      	ldr	r6, [r0, #88]	; 0x58
  uint32_t tickstart = HAL_GetTick();
 8005f36:	f7ff fbb7 	bl	80056a8 <HAL_GetTick>
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005f3a:	f894 3035 	ldrb.w	r3, [r4, #53]	; 0x35
 8005f3e:	2b02      	cmp	r3, #2
 8005f40:	d006      	beq.n	8005f50 <HAL_DMA_Abort+0x20>
    __HAL_UNLOCK(hdma);
 8005f42:	2300      	movs	r3, #0
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f44:	2280      	movs	r2, #128	; 0x80
    __HAL_UNLOCK(hdma);
 8005f46:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005f4a:	6562      	str	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8005f4c:	2001      	movs	r0, #1
}
 8005f4e:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005f50:	6823      	ldr	r3, [r4, #0]
 8005f52:	681a      	ldr	r2, [r3, #0]
 8005f54:	f022 0216 	bic.w	r2, r2, #22
 8005f58:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005f5a:	695a      	ldr	r2, [r3, #20]
 8005f5c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005f60:	615a      	str	r2, [r3, #20]
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005f62:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005f64:	4605      	mov	r5, r0
 8005f66:	b332      	cbz	r2, 8005fb6 <HAL_DMA_Abort+0x86>
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005f68:	681a      	ldr	r2, [r3, #0]
 8005f6a:	f022 0208 	bic.w	r2, r2, #8
 8005f6e:	601a      	str	r2, [r3, #0]
    __HAL_DMA_DISABLE(hdma);
 8005f70:	681a      	ldr	r2, [r3, #0]
 8005f72:	f022 0201 	bic.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f78:	e005      	b.n	8005f86 <HAL_DMA_Abort+0x56>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005f7a:	f7ff fb95 	bl	80056a8 <HAL_GetTick>
 8005f7e:	1b43      	subs	r3, r0, r5
 8005f80:	2b05      	cmp	r3, #5
 8005f82:	d80f      	bhi.n	8005fa4 <HAL_DMA_Abort+0x74>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005f84:	6823      	ldr	r3, [r4, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f013 0301 	ands.w	r3, r3, #1
 8005f8c:	d1f5      	bne.n	8005f7a <HAL_DMA_Abort+0x4a>
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f8e:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005f90:	223f      	movs	r2, #63	; 0x3f
 8005f92:	408a      	lsls	r2, r1
    hdma->State = HAL_DMA_STATE_READY;
 8005f94:	2101      	movs	r1, #1
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005f96:	60b2      	str	r2, [r6, #8]
    hdma->State = HAL_DMA_STATE_READY;
 8005f98:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
    __HAL_UNLOCK(hdma);
 8005f9c:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  return HAL_OK;
 8005fa0:	4618      	mov	r0, r3
}
 8005fa2:	bd70      	pop	{r4, r5, r6, pc}
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fa4:	2003      	movs	r0, #3
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005fa6:	2220      	movs	r2, #32
        __HAL_UNLOCK(hdma);
 8005fa8:	2300      	movs	r3, #0
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005faa:	6562      	str	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hdma);
 8005fac:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005fb0:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8005fb4:	bd70      	pop	{r4, r5, r6, pc}
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005fb6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8005fb8:	2a00      	cmp	r2, #0
 8005fba:	d1d5      	bne.n	8005f68 <HAL_DMA_Abort+0x38>
 8005fbc:	e7d8      	b.n	8005f70 <HAL_DMA_Abort+0x40>
 8005fbe:	bf00      	nop

08005fc0 <HAL_DMA_Abort_IT>:
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005fc0:	f890 3035 	ldrb.w	r3, [r0, #53]	; 0x35
 8005fc4:	2b02      	cmp	r3, #2
 8005fc6:	d003      	beq.n	8005fd0 <HAL_DMA_Abort_IT+0x10>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005fc8:	2380      	movs	r3, #128	; 0x80
 8005fca:	6543      	str	r3, [r0, #84]	; 0x54
    return HAL_ERROR;
 8005fcc:	2001      	movs	r0, #1
 8005fce:	4770      	bx	lr
    __HAL_DMA_DISABLE(hdma);
 8005fd0:	6802      	ldr	r2, [r0, #0]
    hdma->State = HAL_DMA_STATE_ABORT;
 8005fd2:	2305      	movs	r3, #5
 8005fd4:	f880 3035 	strb.w	r3, [r0, #53]	; 0x35
    __HAL_DMA_DISABLE(hdma);
 8005fd8:	6813      	ldr	r3, [r2, #0]
 8005fda:	f023 0301 	bic.w	r3, r3, #1
  return HAL_OK;
 8005fde:	2000      	movs	r0, #0
    __HAL_DMA_DISABLE(hdma);
 8005fe0:	6013      	str	r3, [r2, #0]
}
 8005fe2:	4770      	bx	lr

08005fe4 <HAL_DMA_IRQHandler>:
{
 8005fe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t timeout = SystemCoreClock / 9600U;
 8005fe8:	f240 0268 	movw	r2, #104	; 0x68
{
 8005fec:	b082      	sub	sp, #8
  __IO uint32_t count = 0U;
 8005fee:	2300      	movs	r3, #0
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ff0:	f2c2 0200 	movt	r2, #8192	; 0x2000
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005ff4:	6d86      	ldr	r6, [r0, #88]	; 0x58
  __IO uint32_t count = 0U;
 8005ff6:	9301      	str	r3, [sp, #4]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ff8:	6dc3      	ldr	r3, [r0, #92]	; 0x5c
  tmpisr = regs->ISR;
 8005ffa:	6834      	ldr	r4, [r6, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005ffc:	6815      	ldr	r5, [r2, #0]
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005ffe:	2208      	movs	r2, #8
 8006000:	409a      	lsls	r2, r3
 8006002:	4222      	tst	r2, r4
{
 8006004:	4680      	mov	r8, r0
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8006006:	d004      	beq.n	8006012 <HAL_DMA_IRQHandler+0x2e>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8006008:	6801      	ldr	r1, [r0, #0]
 800600a:	680f      	ldr	r7, [r1, #0]
 800600c:	0778      	lsls	r0, r7, #29
 800600e:	f100 808d 	bmi.w	800612c <HAL_DMA_IRQHandler+0x148>
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8006012:	2201      	movs	r2, #1
 8006014:	409a      	lsls	r2, r3
 8006016:	4222      	tst	r2, r4
 8006018:	d004      	beq.n	8006024 <HAL_DMA_IRQHandler+0x40>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800601a:	f8d8 1000 	ldr.w	r1, [r8]
 800601e:	6949      	ldr	r1, [r1, #20]
 8006020:	0609      	lsls	r1, r1, #24
 8006022:	d47b      	bmi.n	800611c <HAL_DMA_IRQHandler+0x138>
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8006024:	2204      	movs	r2, #4
 8006026:	409a      	lsls	r2, r3
 8006028:	4222      	tst	r2, r4
 800602a:	d004      	beq.n	8006036 <HAL_DMA_IRQHandler+0x52>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800602c:	f8d8 1000 	ldr.w	r1, [r8]
 8006030:	6809      	ldr	r1, [r1, #0]
 8006032:	078f      	lsls	r7, r1, #30
 8006034:	d46a      	bmi.n	800610c <HAL_DMA_IRQHandler+0x128>
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8006036:	2210      	movs	r2, #16
 8006038:	409a      	lsls	r2, r3
 800603a:	4222      	tst	r2, r4
 800603c:	d004      	beq.n	8006048 <HAL_DMA_IRQHandler+0x64>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800603e:	f8d8 1000 	ldr.w	r1, [r8]
 8006042:	680f      	ldr	r7, [r1, #0]
 8006044:	0738      	lsls	r0, r7, #28
 8006046:	d44c      	bmi.n	80060e2 <HAL_DMA_IRQHandler+0xfe>
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006048:	2220      	movs	r2, #32
 800604a:	409a      	lsls	r2, r3
 800604c:	4222      	tst	r2, r4
 800604e:	d017      	beq.n	8006080 <HAL_DMA_IRQHandler+0x9c>
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8006050:	f8d8 1000 	ldr.w	r1, [r8]
 8006054:	680c      	ldr	r4, [r1, #0]
 8006056:	06e0      	lsls	r0, r4, #27
 8006058:	d512      	bpl.n	8006080 <HAL_DMA_IRQHandler+0x9c>
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800605a:	60b2      	str	r2, [r6, #8]
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800605c:	f898 2035 	ldrb.w	r2, [r8, #53]	; 0x35
 8006060:	2a05      	cmp	r2, #5
 8006062:	d076      	beq.n	8006152 <HAL_DMA_IRQHandler+0x16e>
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8006064:	680b      	ldr	r3, [r1, #0]
 8006066:	f413 2f80 	tst.w	r3, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800606a:	680b      	ldr	r3, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800606c:	f000 8093 	beq.w	8006196 <HAL_DMA_IRQHandler+0x1b2>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006070:	0319      	lsls	r1, r3, #12
 8006072:	f140 809e 	bpl.w	80061b2 <HAL_DMA_IRQHandler+0x1ce>
        if(hdma->XferCpltCallback != NULL)
 8006076:	f8d8 303c 	ldr.w	r3, [r8, #60]	; 0x3c
 800607a:	b10b      	cbz	r3, 8006080 <HAL_DMA_IRQHandler+0x9c>
          hdma->XferCpltCallback(hdma);
 800607c:	4640      	mov	r0, r8
 800607e:	4798      	blx	r3
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8006080:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 8006084:	b353      	cbz	r3, 80060dc <HAL_DMA_IRQHandler+0xf8>
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8006086:	f8d8 3054 	ldr.w	r3, [r8, #84]	; 0x54
 800608a:	07da      	lsls	r2, r3, #31
 800608c:	d51e      	bpl.n	80060cc <HAL_DMA_IRQHandler+0xe8>
      __HAL_DMA_DISABLE(hdma);
 800608e:	f8d8 2000 	ldr.w	r2, [r8]
      hdma->State = HAL_DMA_STATE_ABORT;
 8006092:	2305      	movs	r3, #5
 8006094:	f888 3035 	strb.w	r3, [r8, #53]	; 0x35
      __HAL_DMA_DISABLE(hdma);
 8006098:	6813      	ldr	r3, [r2, #0]
  uint32_t timeout = SystemCoreClock / 9600U;
 800609a:	f248 11b5 	movw	r1, #33205	; 0x81b5
 800609e:	f6c1 314e 	movt	r1, #6990	; 0x1b4e
 80060a2:	fba1 1505 	umull	r1, r5, r1, r5
      __HAL_DMA_DISABLE(hdma);
 80060a6:	f023 0301 	bic.w	r3, r3, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80060aa:	0aad      	lsrs	r5, r5, #10
      __HAL_DMA_DISABLE(hdma);
 80060ac:	6013      	str	r3, [r2, #0]
 80060ae:	e002      	b.n	80060b6 <HAL_DMA_IRQHandler+0xd2>
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80060b0:	6813      	ldr	r3, [r2, #0]
 80060b2:	07db      	lsls	r3, r3, #31
 80060b4:	d504      	bpl.n	80060c0 <HAL_DMA_IRQHandler+0xdc>
        if (++count > timeout)
 80060b6:	9b01      	ldr	r3, [sp, #4]
 80060b8:	3301      	adds	r3, #1
 80060ba:	42ab      	cmp	r3, r5
 80060bc:	9301      	str	r3, [sp, #4]
 80060be:	d9f7      	bls.n	80060b0 <HAL_DMA_IRQHandler+0xcc>
      hdma->State = HAL_DMA_STATE_READY;
 80060c0:	2201      	movs	r2, #1
      __HAL_UNLOCK(hdma);
 80060c2:	2300      	movs	r3, #0
      hdma->State = HAL_DMA_STATE_READY;
 80060c4:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
      __HAL_UNLOCK(hdma);
 80060c8:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
    if(hdma->XferErrorCallback != NULL)
 80060cc:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
 80060d0:	b123      	cbz	r3, 80060dc <HAL_DMA_IRQHandler+0xf8>
      hdma->XferErrorCallback(hdma);
 80060d2:	4640      	mov	r0, r8
}
 80060d4:	b002      	add	sp, #8
 80060d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      hdma->XferErrorCallback(hdma);
 80060da:	4718      	bx	r3
}
 80060dc:	b002      	add	sp, #8
 80060de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80060e2:	60b2      	str	r2, [r6, #8]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060e4:	680a      	ldr	r2, [r1, #0]
 80060e6:	f412 2f80 	tst.w	r2, #262144	; 0x40000
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80060ea:	680a      	ldr	r2, [r1, #0]
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80060ec:	d12a      	bne.n	8006144 <HAL_DMA_IRQHandler+0x160>
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80060ee:	05d7      	lsls	r7, r2, #23
 80060f0:	d403      	bmi.n	80060fa <HAL_DMA_IRQHandler+0x116>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80060f2:	680a      	ldr	r2, [r1, #0]
 80060f4:	f022 0208 	bic.w	r2, r2, #8
 80060f8:	600a      	str	r2, [r1, #0]
        if(hdma->XferHalfCpltCallback != NULL)
 80060fa:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 80060fe:	2a00      	cmp	r2, #0
 8006100:	d0a2      	beq.n	8006048 <HAL_DMA_IRQHandler+0x64>
          hdma->XferHalfCpltCallback(hdma);
 8006102:	4640      	mov	r0, r8
 8006104:	4790      	blx	r2
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8006106:	f8d8 305c 	ldr.w	r3, [r8, #92]	; 0x5c
 800610a:	e79d      	b.n	8006048 <HAL_DMA_IRQHandler+0x64>
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800610c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800610e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8006112:	f042 0204 	orr.w	r2, r2, #4
 8006116:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800611a:	e78c      	b.n	8006036 <HAL_DMA_IRQHandler+0x52>
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800611c:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800611e:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 8006122:	f042 0202 	orr.w	r2, r2, #2
 8006126:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 800612a:	e77b      	b.n	8006024 <HAL_DMA_IRQHandler+0x40>
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800612c:	680f      	ldr	r7, [r1, #0]
 800612e:	f027 0704 	bic.w	r7, r7, #4
 8006132:	600f      	str	r7, [r1, #0]
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8006134:	60b2      	str	r2, [r6, #8]
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8006136:	f8d8 2054 	ldr.w	r2, [r8, #84]	; 0x54
 800613a:	f042 0201 	orr.w	r2, r2, #1
 800613e:	f8c8 2054 	str.w	r2, [r8, #84]	; 0x54
 8006142:	e766      	b.n	8006012 <HAL_DMA_IRQHandler+0x2e>
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8006144:	0312      	lsls	r2, r2, #12
 8006146:	d5d8      	bpl.n	80060fa <HAL_DMA_IRQHandler+0x116>
          if(hdma->XferM1HalfCpltCallback != NULL)
 8006148:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 800614c:	2a00      	cmp	r2, #0
 800614e:	d1d8      	bne.n	8006102 <HAL_DMA_IRQHandler+0x11e>
 8006150:	e77a      	b.n	8006048 <HAL_DMA_IRQHandler+0x64>
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006152:	680a      	ldr	r2, [r1, #0]
 8006154:	f022 0216 	bic.w	r2, r2, #22
 8006158:	600a      	str	r2, [r1, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800615a:	694a      	ldr	r2, [r1, #20]
 800615c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006160:	614a      	str	r2, [r1, #20]
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006162:	f8d8 2040 	ldr.w	r2, [r8, #64]	; 0x40
 8006166:	b352      	cbz	r2, 80061be <HAL_DMA_IRQHandler+0x1da>
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006168:	680a      	ldr	r2, [r1, #0]
 800616a:	f022 0208 	bic.w	r2, r2, #8
 800616e:	600a      	str	r2, [r1, #0]
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006170:	223f      	movs	r2, #63	; 0x3f
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
        if(hdma->XferAbortCallback != NULL)
 8006176:	f8d8 1050 	ldr.w	r1, [r8, #80]	; 0x50
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800617a:	60b3      	str	r3, [r6, #8]
        hdma->State = HAL_DMA_STATE_READY;
 800617c:	2201      	movs	r2, #1
        __HAL_UNLOCK(hdma);
 800617e:	2300      	movs	r3, #0
        hdma->State = HAL_DMA_STATE_READY;
 8006180:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
        __HAL_UNLOCK(hdma);
 8006184:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
        if(hdma->XferAbortCallback != NULL)
 8006188:	2900      	cmp	r1, #0
 800618a:	d0a7      	beq.n	80060dc <HAL_DMA_IRQHandler+0xf8>
          hdma->XferAbortCallback(hdma);
 800618c:	4640      	mov	r0, r8
}
 800618e:	b002      	add	sp, #8
 8006190:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
          hdma->XferAbortCallback(hdma);
 8006194:	4708      	bx	r1
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8006196:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 800619a:	f47f af6c 	bne.w	8006076 <HAL_DMA_IRQHandler+0x92>
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800619e:	680a      	ldr	r2, [r1, #0]
 80061a0:	f022 0210 	bic.w	r2, r2, #16
 80061a4:	600a      	str	r2, [r1, #0]
          hdma->State = HAL_DMA_STATE_READY;
 80061a6:	2201      	movs	r2, #1
 80061a8:	f888 2035 	strb.w	r2, [r8, #53]	; 0x35
          __HAL_UNLOCK(hdma);
 80061ac:	f888 3034 	strb.w	r3, [r8, #52]	; 0x34
 80061b0:	e761      	b.n	8006076 <HAL_DMA_IRQHandler+0x92>
          if(hdma->XferM1CpltCallback != NULL)
 80061b2:	f8d8 3044 	ldr.w	r3, [r8, #68]	; 0x44
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f47f af60 	bne.w	800607c <HAL_DMA_IRQHandler+0x98>
 80061bc:	e760      	b.n	8006080 <HAL_DMA_IRQHandler+0x9c>
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80061be:	f8d8 2048 	ldr.w	r2, [r8, #72]	; 0x48
 80061c2:	2a00      	cmp	r2, #0
 80061c4:	d1d0      	bne.n	8006168 <HAL_DMA_IRQHandler+0x184>
 80061c6:	e7d3      	b.n	8006170 <HAL_DMA_IRQHandler+0x18c>

080061c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80061c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80061cc:	2200      	movs	r2, #0
{
 80061ce:	b08d      	sub	sp, #52	; 0x34
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();

        temp = SYSCFG->EXTICR[position >> 2U];
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061d0:	4613      	mov	r3, r2
 80061d2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061d6:	9302      	str	r3, [sp, #8]
 80061d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80061dc:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061e0:	9304      	str	r3, [sp, #16]
 80061e2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80061e6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061ea:	9305      	str	r3, [sp, #20]
 80061ec:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80061f0:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061f4:	9306      	str	r3, [sp, #24]
 80061f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80061fa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80061fe:	9307      	str	r3, [sp, #28]
 8006200:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006204:	f2c4 0302 	movt	r3, #16386	; 0x4002
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006208:	f44f 5670 	mov.w	r6, #15360	; 0x3c00
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800620c:	9308      	str	r3, [sp, #32]
 800620e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006212:	f2c4 0302 	movt	r3, #16386	; 0x4002
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006216:	f44f 5b60 	mov.w	fp, #14336	; 0x3800
        temp = EXTI->RTSR;
 800621a:	f2c4 0601 	movt	r6, #16385	; 0x4001
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800621e:	9309      	str	r3, [sp, #36]	; 0x24
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006220:	680c      	ldr	r4, [r1, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006222:	9601      	str	r6, [sp, #4]
{
 8006224:	468a      	mov	sl, r1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006226:	f2c4 0b02 	movt	fp, #16386	; 0x4002
  for(position = 0U; position < GPIO_NUMBER; position++)
 800622a:	4613      	mov	r3, r2
 800622c:	e005      	b.n	800623a <HAL_GPIO_Init+0x72>
 800622e:	3301      	adds	r3, #1
 8006230:	2b10      	cmp	r3, #16
 8006232:	f102 0202 	add.w	r2, r2, #2
 8006236:	f000 808e 	beq.w	8006356 <HAL_GPIO_Init+0x18e>
    ioposition = 0x01U << position;
 800623a:	2101      	movs	r1, #1
 800623c:	4099      	lsls	r1, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800623e:	ea01 0c04 	and.w	ip, r1, r4
    if(iocurrent == ioposition)
 8006242:	43a1      	bics	r1, r4
 8006244:	d1f3      	bne.n	800622e <HAL_GPIO_Init+0x66>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006246:	f8da 7004 	ldr.w	r7, [sl, #4]
 800624a:	f007 0103 	and.w	r1, r7, #3
 800624e:	1e4d      	subs	r5, r1, #1
 8006250:	2d01      	cmp	r5, #1
 8006252:	f240 8083 	bls.w	800635c <HAL_GPIO_Init+0x194>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006256:	2903      	cmp	r1, #3
 8006258:	f040 80c7 	bne.w	80063ea <HAL_GPIO_Init+0x222>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800625c:	4091      	lsls	r1, r2
 800625e:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8006260:	f8d0 e000 	ldr.w	lr, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006264:	ea0e 0505 	and.w	r5, lr, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006268:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800626a:	f417 3f40 	tst.w	r7, #196608	; 0x30000
      GPIOx->MODER = temp;
 800626e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006270:	d0dd      	beq.n	800622e <HAL_GPIO_Init+0x66>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006272:	2100      	movs	r1, #0
 8006274:	910b      	str	r1, [sp, #44]	; 0x2c
 8006276:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800627a:	9e02      	ldr	r6, [sp, #8]
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800627c:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8006280:	f8cb 1044 	str.w	r1, [fp, #68]	; 0x44
 8006284:	f8db 1044 	ldr.w	r1, [fp, #68]	; 0x44
 8006288:	f023 0503 	bic.w	r5, r3, #3
 800628c:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
 8006290:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8006294:	f505 359c 	add.w	r5, r5, #79872	; 0x13800
 8006298:	910b      	str	r1, [sp, #44]	; 0x2c
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800629a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800629e:	990b      	ldr	r1, [sp, #44]	; 0x2c
        temp = SYSCFG->EXTICR[position >> 2U];
 80062a0:	f8d5 8008 	ldr.w	r8, [r5, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062a4:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80062a8:	210f      	movs	r1, #15
 80062aa:	fa01 f10e 	lsl.w	r1, r1, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062ae:	42b0      	cmp	r0, r6
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80062b0:	ea28 0101 	bic.w	r1, r8, r1
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80062b4:	d025      	beq.n	8006302 <HAL_GPIO_Init+0x13a>
 80062b6:	9e04      	ldr	r6, [sp, #16]
 80062b8:	42b0      	cmp	r0, r6
 80062ba:	f000 809a 	beq.w	80063f2 <HAL_GPIO_Init+0x22a>
 80062be:	9e05      	ldr	r6, [sp, #20]
 80062c0:	42b0      	cmp	r0, r6
 80062c2:	f000 809d 	beq.w	8006400 <HAL_GPIO_Init+0x238>
 80062c6:	9e06      	ldr	r6, [sp, #24]
 80062c8:	42b0      	cmp	r0, r6
 80062ca:	f000 80a0 	beq.w	800640e <HAL_GPIO_Init+0x246>
 80062ce:	9e07      	ldr	r6, [sp, #28]
 80062d0:	42b0      	cmp	r0, r6
 80062d2:	f000 80a3 	beq.w	800641c <HAL_GPIO_Init+0x254>
 80062d6:	9e08      	ldr	r6, [sp, #32]
 80062d8:	42b0      	cmp	r0, r6
 80062da:	f000 80a6 	beq.w	800642a <HAL_GPIO_Init+0x262>
 80062de:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80062e0:	42b0      	cmp	r0, r6
 80062e2:	f000 80a9 	beq.w	8006438 <HAL_GPIO_Init+0x270>
 80062e6:	f44f 58e0 	mov.w	r8, #7168	; 0x1c00
 80062ea:	f2c4 0802 	movt	r8, #16386	; 0x4002
 80062ee:	4540      	cmp	r0, r8
 80062f0:	bf0c      	ite	eq
 80062f2:	f04f 0807 	moveq.w	r8, #7
 80062f6:	f04f 0808 	movne.w	r8, #8
 80062fa:	fa08 fe0e 	lsl.w	lr, r8, lr
 80062fe:	ea41 010e 	orr.w	r1, r1, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006302:	60a9      	str	r1, [r5, #8]
        temp = EXTI->RTSR;
 8006304:	9901      	ldr	r1, [sp, #4]
 8006306:	6889      	ldr	r1, [r1, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006308:	02fe      	lsls	r6, r7, #11
        temp &= ~((uint32_t)iocurrent);
 800630a:	ea6f 050c 	mvn.w	r5, ip
        {
          temp |= iocurrent;
        }
        EXTI->RTSR = temp;
 800630e:	9e01      	ldr	r6, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8006310:	bf54      	ite	pl
 8006312:	4029      	andpl	r1, r5
          temp |= iocurrent;
 8006314:	ea4c 0101 	orrmi.w	r1, ip, r1
        EXTI->RTSR = temp;
 8006318:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 800631a:	68f1      	ldr	r1, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800631c:	f417 1f00 	tst.w	r7, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8006320:	bf0c      	ite	eq
 8006322:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8006324:	ea4c 0101 	orrne.w	r1, ip, r1
        }
        EXTI->FTSR = temp;
 8006328:	60f1      	str	r1, [r6, #12]

        temp = EXTI->EMR;
 800632a:	6871      	ldr	r1, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800632c:	f417 3f00 	tst.w	r7, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8006330:	bf0c      	ite	eq
 8006332:	4029      	andeq	r1, r5
        {
          temp |= iocurrent;
 8006334:	ea4c 0101 	orrne.w	r1, ip, r1
        }
        EXTI->EMR = temp;
 8006338:	6071      	str	r1, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800633a:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800633c:	03ff      	lsls	r7, r7, #15
  for(position = 0U; position < GPIO_NUMBER; position++)
 800633e:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8006342:	bf54      	ite	pl
 8006344:	4029      	andpl	r1, r5
        {
          temp |= iocurrent;
 8006346:	ea4c 0101 	orrmi.w	r1, ip, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 800634a:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 800634c:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800634e:	f102 0202 	add.w	r2, r2, #2
 8006352:	f47f af72 	bne.w	800623a <HAL_GPIO_Init+0x72>
      }
    }
  }
}
 8006356:	b00d      	add	sp, #52	; 0x34
 8006358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 800635c:	f8da 500c 	ldr.w	r5, [sl, #12]
        temp = GPIOx->OSPEEDR; 
 8006360:	f8d0 8008 	ldr.w	r8, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006364:	fa05 f902 	lsl.w	r9, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006368:	2503      	movs	r5, #3
 800636a:	fa05 fe02 	lsl.w	lr, r5, r2
 800636e:	ea28 080e 	bic.w	r8, r8, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006372:	ea49 0508 	orr.w	r5, r9, r8
        GPIOx->OSPEEDR = temp;
 8006376:	6085      	str	r5, [r0, #8]
        temp = GPIOx->OTYPER;
 8006378:	f8d0 8004 	ldr.w	r8, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800637c:	ea6f 050e 	mvn.w	r5, lr
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006380:	f3c7 1e00 	ubfx	lr, r7, #4, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006384:	ea28 080c 	bic.w	r8, r8, ip
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006388:	fa0e fe03 	lsl.w	lr, lr, r3
 800638c:	ea4e 0e08 	orr.w	lr, lr, r8
        GPIOx->OTYPER = temp;
 8006390:	f8c0 e004 	str.w	lr, [r0, #4]
        temp = GPIOx->PUPDR;
 8006394:	f8d0 e00c 	ldr.w	lr, [r0, #12]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006398:	f8da 6008 	ldr.w	r6, [sl, #8]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800639c:	ea0e 0e05 	and.w	lr, lr, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80063a0:	fa06 f802 	lsl.w	r8, r6, r2
 80063a4:	ea48 0e0e 	orr.w	lr, r8, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063a8:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 80063aa:	f8c0 e00c 	str.w	lr, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063ae:	fa01 f102 	lsl.w	r1, r1, r2
 80063b2:	f47f af55 	bne.w	8006260 <HAL_GPIO_Init+0x98>
        temp = GPIOx->AFR[position >> 3U];
 80063b6:	ea4f 08d3 	mov.w	r8, r3, lsr #3
 80063ba:	eb00 0888 	add.w	r8, r0, r8, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063be:	f003 0907 	and.w	r9, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 80063c2:	f8d8 6020 	ldr.w	r6, [r8, #32]
 80063c6:	9603      	str	r6, [sp, #12]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063c8:	f8da 6010 	ldr.w	r6, [sl, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063cc:	ea4f 0989 	mov.w	r9, r9, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063d0:	fa06 fe09 	lsl.w	lr, r6, r9
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80063d4:	260f      	movs	r6, #15
 80063d6:	fa06 f909 	lsl.w	r9, r6, r9
 80063da:	9e03      	ldr	r6, [sp, #12]
 80063dc:	ea26 0909 	bic.w	r9, r6, r9
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80063e0:	ea4e 0909 	orr.w	r9, lr, r9
        GPIOx->AFR[position >> 3U] = temp;
 80063e4:	f8c8 9020 	str.w	r9, [r8, #32]
 80063e8:	e73a      	b.n	8006260 <HAL_GPIO_Init+0x98>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80063ea:	2503      	movs	r5, #3
 80063ec:	4095      	lsls	r5, r2
 80063ee:	43ed      	mvns	r5, r5
 80063f0:	e7d0      	b.n	8006394 <HAL_GPIO_Init+0x1cc>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80063f2:	f04f 0801 	mov.w	r8, #1
 80063f6:	fa08 fe0e 	lsl.w	lr, r8, lr
 80063fa:	ea41 010e 	orr.w	r1, r1, lr
 80063fe:	e780      	b.n	8006302 <HAL_GPIO_Init+0x13a>
 8006400:	f04f 0802 	mov.w	r8, #2
 8006404:	fa08 fe0e 	lsl.w	lr, r8, lr
 8006408:	ea41 010e 	orr.w	r1, r1, lr
 800640c:	e779      	b.n	8006302 <HAL_GPIO_Init+0x13a>
 800640e:	f04f 0803 	mov.w	r8, #3
 8006412:	fa08 fe0e 	lsl.w	lr, r8, lr
 8006416:	ea41 010e 	orr.w	r1, r1, lr
 800641a:	e772      	b.n	8006302 <HAL_GPIO_Init+0x13a>
 800641c:	f04f 0804 	mov.w	r8, #4
 8006420:	fa08 fe0e 	lsl.w	lr, r8, lr
 8006424:	ea41 010e 	orr.w	r1, r1, lr
 8006428:	e76b      	b.n	8006302 <HAL_GPIO_Init+0x13a>
 800642a:	f04f 0805 	mov.w	r8, #5
 800642e:	fa08 fe0e 	lsl.w	lr, r8, lr
 8006432:	ea41 010e 	orr.w	r1, r1, lr
 8006436:	e764      	b.n	8006302 <HAL_GPIO_Init+0x13a>
 8006438:	f04f 0806 	mov.w	r8, #6
 800643c:	fa08 fe0e 	lsl.w	lr, r8, lr
 8006440:	ea41 010e 	orr.w	r1, r1, lr
 8006444:	e75d      	b.n	8006302 <HAL_GPIO_Init+0x13a>
 8006446:	bf00      	nop

08006448 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006448:	b902      	cbnz	r2, 800644c <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800644a:	0409      	lsls	r1, r1, #16
 800644c:	6181      	str	r1, [r0, #24]
  }
}
 800644e:	4770      	bx	lr

08006450 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8006450:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006452:	ea01 0203 	and.w	r2, r1, r3
 8006456:	ea21 0103 	bic.w	r1, r1, r3
 800645a:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800645e:	6181      	str	r1, [r0, #24]
}
 8006460:	4770      	bx	lr
 8006462:	bf00      	nop

08006464 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006468:	6804      	ldr	r4, [r0, #0]
{
 800646a:	b083      	sub	sp, #12
 800646c:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800646e:	6823      	ldr	r3, [r4, #0]
{
 8006470:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 8006474:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006478:	f443 7380 	orr.w	r3, r3, #256	; 0x100
{
 800647c:	4606      	mov	r6, r0
 800647e:	468a      	mov	sl, r1
 8006480:	4617      	mov	r7, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006482:	6023      	str	r3, [r4, #0]
  * @param  Status The new Flag status (SET or RESET).
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8006484:	f1b9 3fff 	cmp.w	r9, #4294967295
 8006488:	d135      	bne.n	80064f6 <I2C_RequestMemoryWrite+0x92>
{
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800648a:	6965      	ldr	r5, [r4, #20]
 800648c:	07e8      	lsls	r0, r5, #31
 800648e:	d5fc      	bpl.n	800648a <I2C_RequestMemoryWrite+0x26>
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006490:	f00a 01fe 	and.w	r1, sl, #254	; 0xfe
 8006494:	6121      	str	r1, [r4, #16]
  * @param  Flag specifies the I2C flag to check.
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8006496:	f1b9 3fff 	cmp.w	r9, #4294967295
 800649a:	d003      	beq.n	80064a4 <I2C_RequestMemoryWrite+0x40>
 800649c:	e04e      	b.n	800653c <I2C_RequestMemoryWrite+0xd8>
{
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800649e:	6961      	ldr	r1, [r4, #20]
 80064a0:	054d      	lsls	r5, r1, #21
 80064a2:	d45c      	bmi.n	800655e <I2C_RequestMemoryWrite+0xfa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064a4:	6961      	ldr	r1, [r4, #20]
 80064a6:	078b      	lsls	r3, r1, #30
 80064a8:	d5f9      	bpl.n	800649e <I2C_RequestMemoryWrite+0x3a>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064aa:	2300      	movs	r3, #0
 80064ac:	9301      	str	r3, [sp, #4]
 80064ae:	6963      	ldr	r3, [r4, #20]
 80064b0:	9301      	str	r3, [sp, #4]
 80064b2:	69a3      	ldr	r3, [r4, #24]
 80064b4:	9301      	str	r3, [sp, #4]
 80064b6:	9b01      	ldr	r3, [sp, #4]
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80064b8:	f1b9 3fff 	cmp.w	r9, #4294967295
 80064bc:	f040 8087 	bne.w	80065ce <I2C_RequestMemoryWrite+0x16a>
 80064c0:	6963      	ldr	r3, [r4, #20]
 80064c2:	061a      	lsls	r2, r3, #24
 80064c4:	d463      	bmi.n	800658e <I2C_RequestMemoryWrite+0x12a>
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064c6:	6963      	ldr	r3, [r4, #20]
 80064c8:	055b      	lsls	r3, r3, #21
 80064ca:	d5f9      	bpl.n	80064c0 <I2C_RequestMemoryWrite+0x5c>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);

    hi2c->PreviousState       = I2C_STATE_NONE;
 80064cc:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80064ce:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064d0:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80064d4:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80064d6:	6332      	str	r2, [r6, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80064d8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064dc:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064e0:	6c33      	ldr	r3, [r6, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80064e2:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064e6:	f043 0304 	orr.w	r3, r3, #4
 80064ea:	6433      	str	r3, [r6, #64]	; 0x40
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80064ec:	6c33      	ldr	r3, [r6, #64]	; 0x40
 80064ee:	2b04      	cmp	r3, #4
 80064f0:	d066      	beq.n	80065c0 <I2C_RequestMemoryWrite+0x15c>
    return HAL_ERROR;
 80064f2:	2001      	movs	r0, #1
 80064f4:	e01f      	b.n	8006536 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064f6:	6963      	ldr	r3, [r4, #20]
 80064f8:	07d9      	lsls	r1, r3, #31
 80064fa:	d4c9      	bmi.n	8006490 <I2C_RequestMemoryWrite+0x2c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064fc:	f7ff f8d4 	bl	80056a8 <HAL_GetTick>
 8006500:	eba0 000b 	sub.w	r0, r0, fp
 8006504:	4581      	cmp	r9, r0
 8006506:	d304      	bcc.n	8006512 <I2C_RequestMemoryWrite+0xae>
 8006508:	f1b9 0f00 	cmp.w	r9, #0
 800650c:	d001      	beq.n	8006512 <I2C_RequestMemoryWrite+0xae>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800650e:	6834      	ldr	r4, [r6, #0]
 8006510:	e7b8      	b.n	8006484 <I2C_RequestMemoryWrite+0x20>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006512:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006514:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006516:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006518:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800651c:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006520:	6c32      	ldr	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006522:	6831      	ldr	r1, [r6, #0]
        __HAL_UNLOCK(hi2c);
 8006524:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006528:	f042 0220 	orr.w	r2, r2, #32
 800652c:	6432      	str	r2, [r6, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800652e:	680b      	ldr	r3, [r1, #0]
 8006530:	05dc      	lsls	r4, r3, #23
 8006532:	d435      	bmi.n	80065a0 <I2C_RequestMemoryWrite+0x13c>
    return HAL_TIMEOUT;
 8006534:	2003      	movs	r0, #3
}
 8006536:	b003      	add	sp, #12
 8006538:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800653c:	6963      	ldr	r3, [r4, #20]
 800653e:	0798      	lsls	r0, r3, #30
 8006540:	d4b3      	bmi.n	80064aa <I2C_RequestMemoryWrite+0x46>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006542:	6963      	ldr	r3, [r4, #20]
 8006544:	055a      	lsls	r2, r3, #21
 8006546:	d40a      	bmi.n	800655e <I2C_RequestMemoryWrite+0xfa>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006548:	f7ff f8ae 	bl	80056a8 <HAL_GetTick>
 800654c:	eba0 000b 	sub.w	r0, r0, fp
 8006550:	4581      	cmp	r9, r0
 8006552:	d34e      	bcc.n	80065f2 <I2C_RequestMemoryWrite+0x18e>
 8006554:	f1b9 0f00 	cmp.w	r9, #0
 8006558:	d04b      	beq.n	80065f2 <I2C_RequestMemoryWrite+0x18e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800655a:	6834      	ldr	r4, [r6, #0]
 800655c:	e79b      	b.n	8006496 <I2C_RequestMemoryWrite+0x32>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800655e:	6823      	ldr	r3, [r4, #0]
 8006560:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006564:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006566:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006568:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 800656c:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800656e:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006570:	6332      	str	r2, [r6, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006572:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006576:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800657a:	6c33      	ldr	r3, [r6, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800657c:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006580:	f043 0304 	orr.w	r3, r3, #4
    return HAL_ERROR;
 8006584:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006586:	6433      	str	r3, [r6, #64]	; 0x40
}
 8006588:	b003      	add	sp, #12
 800658a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800658e:	f1b8 0f01 	cmp.w	r8, #1
 8006592:	d109      	bne.n	80065a8 <I2C_RequestMemoryWrite+0x144>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006594:	b2ff      	uxtb	r7, r7
  return HAL_OK;
 8006596:	2000      	movs	r0, #0
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006598:	6127      	str	r7, [r4, #16]
}
 800659a:	b003      	add	sp, #12
 800659c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80065a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80065a4:	6433      	str	r3, [r6, #64]	; 0x40
 80065a6:	e7c5      	b.n	8006534 <I2C_RequestMemoryWrite+0xd0>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80065a8:	0a3b      	lsrs	r3, r7, #8
 80065aa:	6123      	str	r3, [r4, #16]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ac:	f1b9 3fff 	cmp.w	r9, #4294967295
 80065b0:	d12e      	bne.n	8006610 <I2C_RequestMemoryWrite+0x1ac>
 80065b2:	6963      	ldr	r3, [r4, #20]
 80065b4:	0619      	lsls	r1, r3, #24
 80065b6:	d4ed      	bmi.n	8006594 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065b8:	6963      	ldr	r3, [r4, #20]
 80065ba:	055a      	lsls	r2, r3, #21
 80065bc:	d5f9      	bpl.n	80065b2 <I2C_RequestMemoryWrite+0x14e>
 80065be:	e785      	b.n	80064cc <I2C_RequestMemoryWrite+0x68>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065c0:	6832      	ldr	r2, [r6, #0]
 80065c2:	6813      	ldr	r3, [r2, #0]
 80065c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 80065c8:	2001      	movs	r0, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065ca:	6013      	str	r3, [r2, #0]
 80065cc:	e7b3      	b.n	8006536 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ce:	6963      	ldr	r3, [r4, #20]
 80065d0:	061d      	lsls	r5, r3, #24
 80065d2:	d4dc      	bmi.n	800658e <I2C_RequestMemoryWrite+0x12a>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80065d4:	6963      	ldr	r3, [r4, #20]
 80065d6:	0559      	lsls	r1, r3, #21
 80065d8:	f53f af78 	bmi.w	80064cc <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065dc:	f7ff f864 	bl	80056a8 <HAL_GetTick>
 80065e0:	eba0 000b 	sub.w	r0, r0, fp
 80065e4:	4581      	cmp	r9, r0
 80065e6:	d325      	bcc.n	8006634 <I2C_RequestMemoryWrite+0x1d0>
 80065e8:	f1b9 0f00 	cmp.w	r9, #0
 80065ec:	d022      	beq.n	8006634 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ee:	6834      	ldr	r4, [r6, #0]
 80065f0:	e762      	b.n	80064b8 <I2C_RequestMemoryWrite+0x54>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065f2:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f4:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80065f6:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80065f8:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065fc:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006600:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006602:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006606:	f043 0320 	orr.w	r3, r3, #32
 800660a:	6433      	str	r3, [r6, #64]	; 0x40
    return HAL_ERROR;
 800660c:	2001      	movs	r0, #1
 800660e:	e792      	b.n	8006536 <I2C_RequestMemoryWrite+0xd2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006610:	6963      	ldr	r3, [r4, #20]
 8006612:	061b      	lsls	r3, r3, #24
 8006614:	d4be      	bmi.n	8006594 <I2C_RequestMemoryWrite+0x130>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006616:	6963      	ldr	r3, [r4, #20]
 8006618:	0558      	lsls	r0, r3, #21
 800661a:	f53f af57 	bmi.w	80064cc <I2C_RequestMemoryWrite+0x68>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800661e:	f7ff f843 	bl	80056a8 <HAL_GetTick>
 8006622:	eba0 000b 	sub.w	r0, r0, fp
 8006626:	4581      	cmp	r9, r0
 8006628:	d304      	bcc.n	8006634 <I2C_RequestMemoryWrite+0x1d0>
 800662a:	f1b9 0f00 	cmp.w	r9, #0
 800662e:	d001      	beq.n	8006634 <I2C_RequestMemoryWrite+0x1d0>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006630:	6834      	ldr	r4, [r6, #0]
 8006632:	e7bb      	b.n	80065ac <I2C_RequestMemoryWrite+0x148>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006634:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006636:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006638:	6332      	str	r2, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800663a:	f886 303d 	strb.w	r3, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800663e:	f886 203e 	strb.w	r2, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006642:	6c33      	ldr	r3, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006644:	f886 203c 	strb.w	r2, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006648:	f043 0320 	orr.w	r3, r3, #32
 800664c:	6433      	str	r3, [r6, #64]	; 0x40
        return HAL_ERROR;
 800664e:	e74d      	b.n	80064ec <I2C_RequestMemoryWrite+0x88>

08006650 <HAL_I2C_Init>:
  if (hi2c == NULL)
 8006650:	2800      	cmp	r0, #0
 8006652:	f000 80cc 	beq.w	80067ee <HAL_I2C_Init+0x19e>
{
 8006656:	b538      	push	{r3, r4, r5, lr}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006658:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800665c:	4604      	mov	r4, r0
 800665e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80ab 	beq.w	80067be <HAL_I2C_Init+0x16e>
  __HAL_I2C_DISABLE(hi2c);
 8006668:	6823      	ldr	r3, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 800666a:	2224      	movs	r2, #36	; 0x24
 800666c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	f022 0201 	bic.w	r2, r2, #1
 8006676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800667e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8006680:	681a      	ldr	r2, [r3, #0]
 8006682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006686:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8006688:	f001 fbe2 	bl	8007e50 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800668c:	6865      	ldr	r5, [r4, #4]
 800668e:	f248 63a0 	movw	r3, #34464	; 0x86a0
 8006692:	f2c0 0301 	movt	r3, #1
 8006696:	429d      	cmp	r5, r3
 8006698:	d856      	bhi.n	8006748 <HAL_I2C_Init+0xf8>
 800669a:	f248 437f 	movw	r3, #33919	; 0x847f
 800669e:	f2c0 031e 	movt	r3, #30
 80066a2:	4298      	cmp	r0, r3
 80066a4:	f240 8089 	bls.w	80067ba <HAL_I2C_Init+0x16a>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066a8:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80066aa:	f64d 6e83 	movw	lr, #56963	; 0xde83
 80066ae:	f2c4 3e1b 	movt	lr, #17179	; 0x431b
 80066b2:	fbae 3e00 	umull	r3, lr, lr, r0
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066b6:	1e43      	subs	r3, r0, #1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80066b8:	6850      	ldr	r0, [r2, #4]
 80066ba:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
 80066be:	ea40 409e 	orr.w	r0, r0, lr, lsr #18
 80066c2:	6050      	str	r0, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80066c4:	ea4f 419e 	mov.w	r1, lr, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80066c8:	f101 0c01 	add.w	ip, r1, #1
 80066cc:	6a11      	ldr	r1, [r2, #32]
 80066ce:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 80066d2:	ea41 010c 	orr.w	r1, r1, ip
 80066d6:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80066d8:	69d1      	ldr	r1, [r2, #28]
 80066da:	006d      	lsls	r5, r5, #1
 80066dc:	fbb3 f3f5 	udiv	r3, r3, r5
 80066e0:	f640 75fc 	movw	r5, #4092	; 0xffc
 80066e4:	3301      	adds	r3, #1
 80066e6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80066ea:	422b      	tst	r3, r5
 80066ec:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80066f0:	d16a      	bne.n	80067c8 <HAL_I2C_Init+0x178>
 80066f2:	2304      	movs	r3, #4
 80066f4:	430b      	orrs	r3, r1
 80066f6:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80066f8:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80066fc:	6811      	ldr	r1, [r2, #0]
 80066fe:	4303      	orrs	r3, r0
 8006700:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8006704:	430b      	orrs	r3, r1
 8006706:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8006708:	6891      	ldr	r1, [r2, #8]
 800670a:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 800670e:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8006712:	4303      	orrs	r3, r0
 8006714:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006718:	430b      	orrs	r3, r1
 800671a:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800671c:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8006720:	68d1      	ldr	r1, [r2, #12]
 8006722:	4303      	orrs	r3, r0
 8006724:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8006728:	430b      	orrs	r3, r1
 800672a:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800672c:	6811      	ldr	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800672e:	2300      	movs	r3, #0
  __HAL_I2C_ENABLE(hi2c);
 8006730:	f041 0101 	orr.w	r1, r1, #1
  hi2c->State = HAL_I2C_STATE_READY;
 8006734:	2020      	movs	r0, #32
  __HAL_I2C_ENABLE(hi2c);
 8006736:	6011      	str	r1, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006738:	6423      	str	r3, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800673a:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800673e:	6323      	str	r3, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006740:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  return HAL_OK;
 8006744:	4618      	mov	r0, r3
}
 8006746:	bd38      	pop	{r3, r4, r5, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8006748:	f640 03ff 	movw	r3, #2303	; 0x8ff
 800674c:	f2c0 033d 	movt	r3, #61	; 0x3d
 8006750:	4298      	cmp	r0, r3
 8006752:	d932      	bls.n	80067ba <HAL_I2C_Init+0x16a>
  freqrange = I2C_FREQRANGE(pclk1);
 8006754:	f64d 6183 	movw	r1, #56963	; 0xde83
 8006758:	f2c4 311b 	movt	r1, #17179	; 0x431b
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800675c:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 800675e:	fba1 3c00 	umull	r3, ip, r1, r0
 8006762:	ea4f 439c 	mov.w	r3, ip, lsr #18
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006766:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800676a:	fb01 f303 	mul.w	r3, r1, r3
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800676e:	6851      	ldr	r1, [r2, #4]
 8006770:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 8006774:	ea41 419c 	orr.w	r1, r1, ip, lsr #18
 8006778:	6051      	str	r1, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800677a:	f644 51d3 	movw	r1, #19923	; 0x4dd3
 800677e:	f2c1 0162 	movt	r1, #4194	; 0x1062
 8006782:	fba1 1303 	umull	r1, r3, r1, r3
 8006786:	6a11      	ldr	r1, [r2, #32]
 8006788:	099b      	lsrs	r3, r3, #6
 800678a:	f021 013f 	bic.w	r1, r1, #63	; 0x3f
 800678e:	3301      	adds	r3, #1
 8006790:	430b      	orrs	r3, r1
 8006792:	6213      	str	r3, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8006794:	69d1      	ldr	r1, [r2, #28]
 8006796:	68a3      	ldr	r3, [r4, #8]
 8006798:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800679c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80067a0:	b9ab      	cbnz	r3, 80067ce <HAL_I2C_Init+0x17e>
 80067a2:	3801      	subs	r0, #1
 80067a4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 80067a8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067ac:	3301      	adds	r3, #1
 80067ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067b2:	b1d3      	cbz	r3, 80067ea <HAL_I2C_Init+0x19a>
 80067b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80067b8:	e79c      	b.n	80066f4 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 80067ba:	2001      	movs	r0, #1
}
 80067bc:	bd38      	pop	{r3, r4, r5, pc}
    hi2c->Lock = HAL_UNLOCKED;
 80067be:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 80067c2:	f7fd fc83 	bl	80040cc <HAL_I2C_MspInit>
 80067c6:	e74f      	b.n	8006668 <HAL_I2C_Init+0x18>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80067c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067cc:	e792      	b.n	80066f4 <HAL_I2C_Init+0xa4>
 80067ce:	eb05 0385 	add.w	r3, r5, r5, lsl #2
 80067d2:	3801      	subs	r0, #1
 80067d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80067d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80067dc:	3301      	adds	r3, #1
 80067de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80067e2:	b113      	cbz	r3, 80067ea <HAL_I2C_Init+0x19a>
 80067e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80067e8:	e784      	b.n	80066f4 <HAL_I2C_Init+0xa4>
 80067ea:	2301      	movs	r3, #1
 80067ec:	e782      	b.n	80066f4 <HAL_I2C_Init+0xa4>
    return HAL_ERROR;
 80067ee:	2001      	movs	r0, #1
}
 80067f0:	4770      	bx	lr
 80067f2:	bf00      	nop

080067f4 <HAL_I2C_Master_Transmit>:
{
 80067f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067f8:	4605      	mov	r5, r0
 80067fa:	b083      	sub	sp, #12
 80067fc:	4699      	mov	r9, r3
 80067fe:	9f0c      	ldr	r7, [sp, #48]	; 0x30
 8006800:	4688      	mov	r8, r1
 8006802:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8006804:	f7fe ff50 	bl	80056a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006808:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 800680c:	2b20      	cmp	r3, #32
 800680e:	d003      	beq.n	8006818 <HAL_I2C_Master_Transmit+0x24>
      return HAL_BUSY;
 8006810:	2002      	movs	r0, #2
}
 8006812:	b003      	add	sp, #12
 8006814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006818:	4606      	mov	r6, r0
 800681a:	e005      	b.n	8006828 <HAL_I2C_Master_Transmit+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800681c:	f7fe ff44 	bl	80056a8 <HAL_GetTick>
 8006820:	1b80      	subs	r0, r0, r6
 8006822:	2819      	cmp	r0, #25
 8006824:	f200 80f7 	bhi.w	8006a16 <HAL_I2C_Master_Transmit+0x222>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006828:	682c      	ldr	r4, [r5, #0]
 800682a:	69a3      	ldr	r3, [r4, #24]
 800682c:	ea6f 0c03 	mvn.w	ip, r3
 8006830:	f01c 0b02 	ands.w	fp, ip, #2
 8006834:	d0f2      	beq.n	800681c <HAL_I2C_Master_Transmit+0x28>
    __HAL_LOCK(hi2c);
 8006836:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 800683a:	2b01      	cmp	r3, #1
 800683c:	d0e8      	beq.n	8006810 <HAL_I2C_Master_Transmit+0x1c>
 800683e:	2301      	movs	r3, #1
 8006840:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006844:	6823      	ldr	r3, [r4, #0]
 8006846:	07d9      	lsls	r1, r3, #31
 8006848:	d571      	bpl.n	800692e <HAL_I2C_Master_Transmit+0x13a>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800684a:	6823      	ldr	r3, [r4, #0]
 800684c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006850:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006852:	2321      	movs	r3, #33	; 0x21
 8006854:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006858:	2310      	movs	r3, #16
 800685a:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800685e:	2300      	movs	r3, #0
 8006860:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006862:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006866:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    hi2c->XferSize    = hi2c->XferCount;
 800686a:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800686c:	62eb      	str	r3, [r5, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800686e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
    hi2c->pBuffPtr    = pData;
 8006870:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006874:	2b08      	cmp	r3, #8
    hi2c->XferSize    = hi2c->XferCount;
 8006876:	852a      	strh	r2, [r5, #40]	; 0x28
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006878:	d007      	beq.n	800688a <HAL_I2C_Master_Transmit+0x96>
 800687a:	2b01      	cmp	r3, #1
 800687c:	d005      	beq.n	800688a <HAL_I2C_Master_Transmit+0x96>
 800687e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006882:	d002      	beq.n	800688a <HAL_I2C_Master_Transmit+0x96>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006884:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006886:	2b12      	cmp	r3, #18
 8006888:	d103      	bne.n	8006892 <HAL_I2C_Master_Transmit+0x9e>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800688a:	6823      	ldr	r3, [r4, #0]
 800688c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006890:	6023      	str	r3, [r4, #0]
 8006892:	1c7b      	adds	r3, r7, #1
 8006894:	d13d      	bne.n	8006912 <HAL_I2C_Master_Transmit+0x11e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006896:	6963      	ldr	r3, [r4, #20]
 8006898:	07d8      	lsls	r0, r3, #31
 800689a:	d5fc      	bpl.n	8006896 <HAL_I2C_Master_Transmit+0xa2>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800689c:	692b      	ldr	r3, [r5, #16]
 800689e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80068a2:	d149      	bne.n	8006938 <HAL_I2C_Master_Transmit+0x144>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80068a4:	f008 01fe 	and.w	r1, r8, #254	; 0xfe
 80068a8:	6121      	str	r1, [r4, #16]
 80068aa:	1c78      	adds	r0, r7, #1
 80068ac:	d004      	beq.n	80068b8 <HAL_I2C_Master_Transmit+0xc4>
 80068ae:	e0d8      	b.n	8006a62 <HAL_I2C_Master_Transmit+0x26e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068b0:	6963      	ldr	r3, [r4, #20]
 80068b2:	055a      	lsls	r2, r3, #21
 80068b4:	f100 80bd 	bmi.w	8006a32 <HAL_I2C_Master_Transmit+0x23e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80068b8:	6963      	ldr	r3, [r4, #20]
 80068ba:	0799      	lsls	r1, r3, #30
 80068bc:	d5f8      	bpl.n	80068b0 <HAL_I2C_Master_Transmit+0xbc>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068be:	2300      	movs	r3, #0
 80068c0:	9301      	str	r3, [sp, #4]
 80068c2:	6963      	ldr	r3, [r4, #20]
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	69a3      	ldr	r3, [r4, #24]
 80068c8:	9301      	str	r3, [sp, #4]
    while (hi2c->XferSize > 0U)
 80068ca:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068cc:	9a01      	ldr	r2, [sp, #4]
    while (hi2c->XferSize > 0U)
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d074      	beq.n	80069bc <HAL_I2C_Master_Transmit+0x1c8>
 80068d2:	1c79      	adds	r1, r7, #1
 80068d4:	d17f      	bne.n	80069d6 <HAL_I2C_Master_Transmit+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80068d6:	6963      	ldr	r3, [r4, #20]
 80068d8:	061a      	lsls	r2, r3, #24
 80068da:	d441      	bmi.n	8006960 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80068dc:	6963      	ldr	r3, [r4, #20]
 80068de:	055b      	lsls	r3, r3, #21
 80068e0:	d5f9      	bpl.n	80068d6 <HAL_I2C_Master_Transmit+0xe2>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80068e2:	2200      	movs	r2, #0
    hi2c->State               = HAL_I2C_STATE_READY;
 80068e4:	2320      	movs	r3, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80068e6:	f46f 6180 	mvn.w	r1, #1024	; 0x400
 80068ea:	6161      	str	r1, [r4, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80068ec:	632a      	str	r2, [r5, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80068ee:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80068f2:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068f6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80068f8:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80068fc:	f043 0304 	orr.w	r3, r3, #4
 8006900:	642b      	str	r3, [r5, #64]	; 0x40
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006902:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8006904:	2b04      	cmp	r3, #4
 8006906:	f000 80e1 	beq.w	8006acc <HAL_I2C_Master_Transmit+0x2d8>
      return HAL_ERROR;
 800690a:	2001      	movs	r0, #1
}
 800690c:	b003      	add	sp, #12
 800690e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006912:	6963      	ldr	r3, [r4, #20]
 8006914:	07d9      	lsls	r1, r3, #31
 8006916:	d4c1      	bmi.n	800689c <HAL_I2C_Master_Transmit+0xa8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006918:	f7fe fec6 	bl	80056a8 <HAL_GetTick>
 800691c:	1b80      	subs	r0, r0, r6
 800691e:	4287      	cmp	r7, r0
 8006920:	f0c0 80af 	bcc.w	8006a82 <HAL_I2C_Master_Transmit+0x28e>
 8006924:	2f00      	cmp	r7, #0
 8006926:	f000 80ac 	beq.w	8006a82 <HAL_I2C_Master_Transmit+0x28e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800692a:	682c      	ldr	r4, [r5, #0]
 800692c:	e7b1      	b.n	8006892 <HAL_I2C_Master_Transmit+0x9e>
      __HAL_I2C_ENABLE(hi2c);
 800692e:	6823      	ldr	r3, [r4, #0]
 8006930:	f043 0301 	orr.w	r3, r3, #1
 8006934:	6023      	str	r3, [r4, #0]
 8006936:	e788      	b.n	800684a <HAL_I2C_Master_Transmit+0x56>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006938:	ea4f 13e8 	mov.w	r3, r8, asr #7
 800693c:	f003 0306 	and.w	r3, r3, #6
 8006940:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 8006944:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8006946:	1c7b      	adds	r3, r7, #1
 8006948:	d003      	beq.n	8006952 <HAL_I2C_Master_Transmit+0x15e>
 800694a:	e0b0      	b.n	8006aae <HAL_I2C_Master_Transmit+0x2ba>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800694c:	6963      	ldr	r3, [r4, #20]
 800694e:	0559      	lsls	r1, r3, #21
 8006950:	d46f      	bmi.n	8006a32 <HAL_I2C_Master_Transmit+0x23e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006952:	6963      	ldr	r3, [r4, #20]
 8006954:	0718      	lsls	r0, r3, #28
 8006956:	d5f9      	bpl.n	800694c <HAL_I2C_Master_Transmit+0x158>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006958:	fa5f f388 	uxtb.w	r3, r8
 800695c:	6123      	str	r3, [r4, #16]
 800695e:	e7a4      	b.n	80068aa <HAL_I2C_Master_Transmit+0xb6>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006960:	6a68      	ldr	r0, [r5, #36]	; 0x24
      hi2c->XferSize--;
 8006962:	f8b5 c028 	ldrh.w	ip, [r5, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006966:	4601      	mov	r1, r0
      hi2c->XferSize--;
 8006968:	f10c 32ff 	add.w	r2, ip, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800696c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006970:	6123      	str	r3, [r4, #16]
      hi2c->XferCount--;
 8006972:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
      hi2c->pBuffPtr++;
 8006974:	6269      	str	r1, [r5, #36]	; 0x24
      hi2c->XferCount--;
 8006976:	3b01      	subs	r3, #1
 8006978:	b29b      	uxth	r3, r3
 800697a:	856b      	strh	r3, [r5, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800697c:	6963      	ldr	r3, [r4, #20]
      hi2c->XferSize--;
 800697e:	b292      	uxth	r2, r2
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006980:	0759      	lsls	r1, r3, #29
      hi2c->XferSize--;
 8006982:	852a      	strh	r2, [r5, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006984:	d50c      	bpl.n	80069a0 <HAL_I2C_Master_Transmit+0x1ac>
 8006986:	b15a      	cbz	r2, 80069a0 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006988:	7843      	ldrb	r3, [r0, #1]
 800698a:	6123      	str	r3, [r4, #16]
        hi2c->XferCount--;
 800698c:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 800698e:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8006990:	f1ac 0c02 	sub.w	ip, ip, #2
        hi2c->pBuffPtr++;
 8006994:	3002      	adds	r0, #2
        hi2c->XferCount--;
 8006996:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8006998:	f8a5 c028 	strh.w	ip, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 800699c:	6268      	str	r0, [r5, #36]	; 0x24
        hi2c->XferCount--;
 800699e:	856b      	strh	r3, [r5, #42]	; 0x2a
        hi2c->XferSize--;
 80069a0:	1c78      	adds	r0, r7, #1
 80069a2:	d128      	bne.n	80069f6 <HAL_I2C_Master_Transmit+0x202>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069a4:	6963      	ldr	r3, [r4, #20]
 80069a6:	0759      	lsls	r1, r3, #29
 80069a8:	d405      	bmi.n	80069b6 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069aa:	6963      	ldr	r3, [r4, #20]
 80069ac:	055a      	lsls	r2, r3, #21
 80069ae:	d498      	bmi.n	80068e2 <HAL_I2C_Master_Transmit+0xee>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069b0:	6963      	ldr	r3, [r4, #20]
 80069b2:	0759      	lsls	r1, r3, #29
 80069b4:	d5f9      	bpl.n	80069aa <HAL_I2C_Master_Transmit+0x1b6>
    while (hi2c->XferSize > 0U)
 80069b6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d18a      	bne.n	80068d2 <HAL_I2C_Master_Transmit+0xde>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069bc:	6823      	ldr	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069be:	2000      	movs	r0, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80069c4:	2220      	movs	r2, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80069c6:	6023      	str	r3, [r4, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80069c8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80069cc:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d0:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 80069d4:	e71d      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069d6:	6963      	ldr	r3, [r4, #20]
 80069d8:	0618      	lsls	r0, r3, #24
 80069da:	d4c1      	bmi.n	8006960 <HAL_I2C_Master_Transmit+0x16c>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069dc:	6963      	ldr	r3, [r4, #20]
 80069de:	0558      	lsls	r0, r3, #21
 80069e0:	f53f af7f 	bmi.w	80068e2 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069e4:	f7fe fe60 	bl	80056a8 <HAL_GetTick>
 80069e8:	1b80      	subs	r0, r0, r6
 80069ea:	4287      	cmp	r7, r0
 80069ec:	d375      	bcc.n	8006ada <HAL_I2C_Master_Transmit+0x2e6>
 80069ee:	2f00      	cmp	r7, #0
 80069f0:	d073      	beq.n	8006ada <HAL_I2C_Master_Transmit+0x2e6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80069f2:	682c      	ldr	r4, [r5, #0]
 80069f4:	e76d      	b.n	80068d2 <HAL_I2C_Master_Transmit+0xde>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80069f6:	6963      	ldr	r3, [r4, #20]
 80069f8:	075b      	lsls	r3, r3, #29
 80069fa:	d4dc      	bmi.n	80069b6 <HAL_I2C_Master_Transmit+0x1c2>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80069fc:	6963      	ldr	r3, [r4, #20]
 80069fe:	055b      	lsls	r3, r3, #21
 8006a00:	f53f af6f 	bmi.w	80068e2 <HAL_I2C_Master_Transmit+0xee>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a04:	f7fe fe50 	bl	80056a8 <HAL_GetTick>
 8006a08:	1b80      	subs	r0, r0, r6
 8006a0a:	4287      	cmp	r7, r0
 8006a0c:	d365      	bcc.n	8006ada <HAL_I2C_Master_Transmit+0x2e6>
 8006a0e:	2f00      	cmp	r7, #0
 8006a10:	d063      	beq.n	8006ada <HAL_I2C_Master_Transmit+0x2e6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006a12:	682c      	ldr	r4, [r5, #0]
 8006a14:	e7c4      	b.n	80069a0 <HAL_I2C_Master_Transmit+0x1ac>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a16:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a18:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a1c:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a20:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a24:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006a26:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a2a:	f043 0320 	orr.w	r3, r3, #32
 8006a2e:	642b      	str	r3, [r5, #64]	; 0x40
 8006a30:	e6ee      	b.n	8006810 <HAL_I2C_Master_Transmit+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a38:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a3a:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a3c:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a40:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006a42:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006a44:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006a46:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006a4a:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a4e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006a50:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a54:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8006a58:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006a5a:	642b      	str	r3, [r5, #64]	; 0x40
}
 8006a5c:	b003      	add	sp, #12
 8006a5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a62:	6963      	ldr	r3, [r4, #20]
 8006a64:	079b      	lsls	r3, r3, #30
 8006a66:	f53f af2a 	bmi.w	80068be <HAL_I2C_Master_Transmit+0xca>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006a6a:	6963      	ldr	r3, [r4, #20]
 8006a6c:	055b      	lsls	r3, r3, #21
 8006a6e:	d4e0      	bmi.n	8006a32 <HAL_I2C_Master_Transmit+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a70:	f7fe fe1a 	bl	80056a8 <HAL_GetTick>
 8006a74:	1b80      	subs	r0, r0, r6
 8006a76:	4287      	cmp	r7, r0
 8006a78:	d33d      	bcc.n	8006af6 <HAL_I2C_Master_Transmit+0x302>
 8006a7a:	2f00      	cmp	r7, #0
 8006a7c:	d03b      	beq.n	8006af6 <HAL_I2C_Master_Transmit+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006a7e:	682c      	ldr	r4, [r5, #0]
 8006a80:	e713      	b.n	80068aa <HAL_I2C_Master_Transmit+0xb6>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a82:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a84:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006a86:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006a88:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006a8c:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a90:	6c2a      	ldr	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a92:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8006a94:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006a98:	f042 0220 	orr.w	r2, r2, #32
 8006a9c:	642a      	str	r2, [r5, #64]	; 0x40
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006a9e:	680b      	ldr	r3, [r1, #0]
 8006aa0:	05da      	lsls	r2, r3, #23
 8006aa2:	f57f af32 	bpl.w	800690a <HAL_I2C_Master_Transmit+0x116>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006aa6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006aaa:	642b      	str	r3, [r5, #64]	; 0x40
 8006aac:	e72d      	b.n	800690a <HAL_I2C_Master_Transmit+0x116>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006aae:	6963      	ldr	r3, [r4, #20]
 8006ab0:	071a      	lsls	r2, r3, #28
 8006ab2:	f53f af51 	bmi.w	8006958 <HAL_I2C_Master_Transmit+0x164>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006ab6:	6963      	ldr	r3, [r4, #20]
 8006ab8:	055a      	lsls	r2, r3, #21
 8006aba:	d4ba      	bmi.n	8006a32 <HAL_I2C_Master_Transmit+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006abc:	f7fe fdf4 	bl	80056a8 <HAL_GetTick>
 8006ac0:	1b80      	subs	r0, r0, r6
 8006ac2:	4287      	cmp	r7, r0
 8006ac4:	d317      	bcc.n	8006af6 <HAL_I2C_Master_Transmit+0x302>
 8006ac6:	b1b7      	cbz	r7, 8006af6 <HAL_I2C_Master_Transmit+0x302>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006ac8:	682c      	ldr	r4, [r5, #0]
 8006aca:	e73c      	b.n	8006946 <HAL_I2C_Master_Transmit+0x152>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006acc:	682a      	ldr	r2, [r5, #0]
 8006ace:	6813      	ldr	r3, [r2, #0]
 8006ad0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
        return HAL_ERROR;
 8006ad4:	2001      	movs	r0, #1
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	e69b      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1e>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ada:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006adc:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006ade:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006ae0:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ae4:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ae8:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006aea:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006aee:	f043 0320 	orr.w	r3, r3, #32
 8006af2:	642b      	str	r3, [r5, #64]	; 0x40
        return HAL_ERROR;
 8006af4:	e705      	b.n	8006902 <HAL_I2C_Master_Transmit+0x10e>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006af6:	2200      	movs	r2, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8006af8:	2320      	movs	r3, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006afa:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006afc:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006b00:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b04:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006b06:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006b0a:	f043 0320 	orr.w	r3, r3, #32
 8006b0e:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006b10:	2001      	movs	r0, #1
 8006b12:	e67e      	b.n	8006812 <HAL_I2C_Master_Transmit+0x1e>

08006b14 <HAL_I2C_Master_Receive>:
{
 8006b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b18:	4605      	mov	r5, r0
 8006b1a:	b087      	sub	sp, #28
 8006b1c:	4699      	mov	r9, r3
 8006b1e:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8006b20:	4688      	mov	r8, r1
 8006b22:	4692      	mov	sl, r2
  uint32_t tickstart = HAL_GetTick();
 8006b24:	f7fe fdc0 	bl	80056a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006b28:	f895 303d 	ldrb.w	r3, [r5, #61]	; 0x3d
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d003      	beq.n	8006b38 <HAL_I2C_Master_Receive+0x24>
      return HAL_BUSY;
 8006b30:	2002      	movs	r0, #2
}
 8006b32:	b007      	add	sp, #28
 8006b34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b38:	4607      	mov	r7, r0
 8006b3a:	e005      	b.n	8006b48 <HAL_I2C_Master_Receive+0x34>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b3c:	f7fe fdb4 	bl	80056a8 <HAL_GetTick>
 8006b40:	1bc0      	subs	r0, r0, r7
 8006b42:	2819      	cmp	r0, #25
 8006b44:	f200 80a8 	bhi.w	8006c98 <HAL_I2C_Master_Receive+0x184>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b48:	682c      	ldr	r4, [r5, #0]
 8006b4a:	69a0      	ldr	r0, [r4, #24]
 8006b4c:	43c0      	mvns	r0, r0
 8006b4e:	f010 0b02 	ands.w	fp, r0, #2
 8006b52:	d0f3      	beq.n	8006b3c <HAL_I2C_Master_Receive+0x28>
    __HAL_LOCK(hi2c);
 8006b54:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d0e9      	beq.n	8006b30 <HAL_I2C_Master_Receive+0x1c>
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8006b62:	6823      	ldr	r3, [r4, #0]
 8006b64:	07db      	lsls	r3, r3, #31
 8006b66:	d561      	bpl.n	8006c2c <HAL_I2C_Master_Receive+0x118>
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6e:	6023      	str	r3, [r4, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006b70:	2322      	movs	r3, #34	; 0x22
 8006b72:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006b76:	2310      	movs	r3, #16
 8006b78:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	642b      	str	r3, [r5, #64]	; 0x40
    hi2c->XferCount   = Size;
 8006b80:	f8a5 902a 	strh.w	r9, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b84:	f6cf 73ff 	movt	r3, #65535	; 0xffff
    hi2c->XferSize    = hi2c->XferCount;
 8006b88:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b8a:	62eb      	str	r3, [r5, #44]	; 0x2c
    hi2c->XferSize    = hi2c->XferCount;
 8006b8c:	852a      	strh	r2, [r5, #40]	; 0x28
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006b8e:	6aea      	ldr	r2, [r5, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b90:	6823      	ldr	r3, [r4, #0]
    hi2c->pBuffPtr    = pData;
 8006b92:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b9a:	2a08      	cmp	r2, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b9c:	6023      	str	r3, [r4, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006b9e:	d007      	beq.n	8006bb0 <HAL_I2C_Master_Receive+0x9c>
 8006ba0:	2a01      	cmp	r2, #1
 8006ba2:	d005      	beq.n	8006bb0 <HAL_I2C_Master_Receive+0x9c>
 8006ba4:	f512 3f80 	cmn.w	r2, #65536	; 0x10000
 8006ba8:	d002      	beq.n	8006bb0 <HAL_I2C_Master_Receive+0x9c>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8006baa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8006bac:	2b11      	cmp	r3, #17
 8006bae:	d103      	bne.n	8006bb8 <HAL_I2C_Master_Receive+0xa4>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006bb0:	6823      	ldr	r3, [r4, #0]
 8006bb2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bb6:	6023      	str	r3, [r4, #0]
 8006bb8:	1c70      	adds	r0, r6, #1
 8006bba:	d129      	bne.n	8006c10 <HAL_I2C_Master_Receive+0xfc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006bbc:	6963      	ldr	r3, [r4, #20]
 8006bbe:	07d9      	lsls	r1, r3, #31
 8006bc0:	d5fc      	bpl.n	8006bbc <HAL_I2C_Master_Receive+0xa8>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006bc2:	692b      	ldr	r3, [r5, #16]
 8006bc4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006bc8:	d135      	bne.n	8006c36 <HAL_I2C_Master_Receive+0x122>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006bca:	f048 0301 	orr.w	r3, r8, #1
 8006bce:	b2db      	uxtb	r3, r3
 8006bd0:	6123      	str	r3, [r4, #16]
 8006bd2:	1c72      	adds	r2, r6, #1
 8006bd4:	d003      	beq.n	8006bde <HAL_I2C_Master_Receive+0xca>
 8006bd6:	e104      	b.n	8006de2 <HAL_I2C_Master_Receive+0x2ce>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006bd8:	6963      	ldr	r3, [r4, #20]
 8006bda:	0558      	lsls	r0, r3, #21
 8006bdc:	d46a      	bmi.n	8006cb4 <HAL_I2C_Master_Receive+0x1a0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006bde:	6963      	ldr	r3, [r4, #20]
 8006be0:	079b      	lsls	r3, r3, #30
 8006be2:	d5f9      	bpl.n	8006bd8 <HAL_I2C_Master_Receive+0xc4>
    if (hi2c->XferSize == 0U)
 8006be4:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d17c      	bne.n	8006ce4 <HAL_I2C_Master_Receive+0x1d0>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006bea:	9301      	str	r3, [sp, #4]
 8006bec:	6963      	ldr	r3, [r4, #20]
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	69a3      	ldr	r3, [r4, #24]
 8006bf2:	9301      	str	r3, [sp, #4]
 8006bf4:	9b01      	ldr	r3, [sp, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006bf6:	6823      	ldr	r3, [r4, #0]
 8006bf8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bfc:	6023      	str	r3, [r4, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfe:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 8006c00:	2320      	movs	r3, #32
 8006c02:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8006c06:	f885 003c 	strb.w	r0, [r5, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c0a:	f885 003e 	strb.w	r0, [r5, #62]	; 0x3e
    return HAL_OK;
 8006c0e:	e790      	b.n	8006b32 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c10:	6963      	ldr	r3, [r4, #20]
 8006c12:	07da      	lsls	r2, r3, #31
 8006c14:	d4d5      	bmi.n	8006bc2 <HAL_I2C_Master_Receive+0xae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c16:	f7fe fd47 	bl	80056a8 <HAL_GetTick>
 8006c1a:	1bc0      	subs	r0, r0, r7
 8006c1c:	4286      	cmp	r6, r0
 8006c1e:	f0c0 8109 	bcc.w	8006e34 <HAL_I2C_Master_Receive+0x320>
 8006c22:	2e00      	cmp	r6, #0
 8006c24:	f000 8106 	beq.w	8006e34 <HAL_I2C_Master_Receive+0x320>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c28:	682c      	ldr	r4, [r5, #0]
 8006c2a:	e7c5      	b.n	8006bb8 <HAL_I2C_Master_Receive+0xa4>
      __HAL_I2C_ENABLE(hi2c);
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	f043 0301 	orr.w	r3, r3, #1
 8006c32:	6023      	str	r3, [r4, #0]
 8006c34:	e798      	b.n	8006b68 <HAL_I2C_Master_Receive+0x54>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006c36:	ea4f 19e8 	mov.w	r9, r8, asr #7
 8006c3a:	f009 0906 	and.w	r9, r9, #6
 8006c3e:	f049 03f0 	orr.w	r3, r9, #240	; 0xf0
 8006c42:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8006c44:	1c70      	adds	r0, r6, #1
 8006c46:	d003      	beq.n	8006c50 <HAL_I2C_Master_Receive+0x13c>
 8006c48:	e11a      	b.n	8006e80 <HAL_I2C_Master_Receive+0x36c>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c4a:	6963      	ldr	r3, [r4, #20]
 8006c4c:	055a      	lsls	r2, r3, #21
 8006c4e:	d431      	bmi.n	8006cb4 <HAL_I2C_Master_Receive+0x1a0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c50:	6963      	ldr	r3, [r4, #20]
 8006c52:	0719      	lsls	r1, r3, #28
 8006c54:	d5f9      	bpl.n	8006c4a <HAL_I2C_Master_Receive+0x136>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006c56:	fa5f f388 	uxtb.w	r3, r8
 8006c5a:	6123      	str	r3, [r4, #16]
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
 8006c5c:	1c71      	adds	r1, r6, #1
 8006c5e:	d003      	beq.n	8006c68 <HAL_I2C_Master_Receive+0x154>
 8006c60:	e1a3      	b.n	8006faa <HAL_I2C_Master_Receive+0x496>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c62:	6963      	ldr	r3, [r4, #20]
 8006c64:	055b      	lsls	r3, r3, #21
 8006c66:	d425      	bmi.n	8006cb4 <HAL_I2C_Master_Receive+0x1a0>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006c68:	6963      	ldr	r3, [r4, #20]
 8006c6a:	079a      	lsls	r2, r3, #30
 8006c6c:	d5f9      	bpl.n	8006c62 <HAL_I2C_Master_Receive+0x14e>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006c6e:	2300      	movs	r3, #0
 8006c70:	9305      	str	r3, [sp, #20]
 8006c72:	6963      	ldr	r3, [r4, #20]
 8006c74:	9305      	str	r3, [sp, #20]
 8006c76:	69a3      	ldr	r3, [r4, #24]
 8006c78:	9305      	str	r3, [sp, #20]
 8006c7a:	9b05      	ldr	r3, [sp, #20]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c7c:	6823      	ldr	r3, [r4, #0]
 8006c7e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006c82:	6023      	str	r3, [r4, #0]
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8006c84:	1c72      	adds	r2, r6, #1
 8006c86:	f040 81a3 	bne.w	8006fd0 <HAL_I2C_Master_Receive+0x4bc>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006c8a:	6963      	ldr	r3, [r4, #20]
 8006c8c:	07db      	lsls	r3, r3, #31
 8006c8e:	d5fc      	bpl.n	8006c8a <HAL_I2C_Master_Receive+0x176>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8006c90:	f049 03f1 	orr.w	r3, r9, #241	; 0xf1
 8006c94:	6123      	str	r3, [r4, #16]
 8006c96:	e79c      	b.n	8006bd2 <HAL_I2C_Master_Receive+0xbe>
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c98:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006c9a:	f8c5 b030 	str.w	fp, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006c9e:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006ca2:	f885 b03e 	strb.w	fp, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006ca6:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006ca8:	f885 b03c 	strb.w	fp, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006cac:	f043 0320 	orr.w	r3, r3, #32
 8006cb0:	642b      	str	r3, [r5, #64]	; 0x40
 8006cb2:	e73d      	b.n	8006b30 <HAL_I2C_Master_Receive+0x1c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cba:	6023      	str	r3, [r4, #0]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cbc:	2200      	movs	r2, #0
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cbe:	f46f 6180 	mvn.w	r1, #1024	; 0x400
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cc2:	2320      	movs	r3, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cc4:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006cc6:	632a      	str	r2, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006cc8:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006ccc:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cd0:	6c2b      	ldr	r3, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006cd2:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cd6:	f043 0304 	orr.w	r3, r3, #4
      return HAL_ERROR;
 8006cda:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8006cdc:	642b      	str	r3, [r5, #64]	; 0x40
}
 8006cde:	b007      	add	sp, #28
 8006ce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    else if (hi2c->XferSize == 1U)
 8006ce4:	2b01      	cmp	r3, #1
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ce6:	6822      	ldr	r2, [r4, #0]
    else if (hi2c->XferSize == 1U)
 8006ce8:	f000 8150 	beq.w	8006f8c <HAL_I2C_Master_Receive+0x478>
    else if (hi2c->XferSize == 2U)
 8006cec:	2b02      	cmp	r3, #2
 8006cee:	f000 8108 	beq.w	8006f02 <HAL_I2C_Master_Receive+0x3ee>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cf2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006cf6:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	9204      	str	r2, [sp, #16]
 8006cfc:	6962      	ldr	r2, [r4, #20]
 8006cfe:	9204      	str	r2, [sp, #16]
 8006d00:	69a2      	ldr	r2, [r4, #24]
 8006d02:	9204      	str	r2, [sp, #16]
 8006d04:	9a04      	ldr	r2, [sp, #16]
      if (hi2c->XferSize <= 3U)
 8006d06:	2b03      	cmp	r3, #3
 8006d08:	d848      	bhi.n	8006d9c <HAL_I2C_Master_Receive+0x288>
        if (hi2c->XferSize == 1U)
 8006d0a:	2b01      	cmp	r3, #1
 8006d0c:	f000 8125 	beq.w	8006f5a <HAL_I2C_Master_Receive+0x446>
        else if (hi2c->XferSize == 2U)
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	f000 80d1 	beq.w	8006eb8 <HAL_I2C_Master_Receive+0x3a4>
 8006d16:	1c72      	adds	r2, r6, #1
 8006d18:	f040 8102 	bne.w	8006f20 <HAL_I2C_Master_Receive+0x40c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d1c:	6963      	ldr	r3, [r4, #20]
 8006d1e:	075b      	lsls	r3, r3, #29
 8006d20:	d5fc      	bpl.n	8006d1c <HAL_I2C_Master_Receive+0x208>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d22:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d24:	6a6a      	ldr	r2, [r5, #36]	; 0x24
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006d2a:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d2c:	6923      	ldr	r3, [r4, #16]
 8006d2e:	7013      	strb	r3, [r2, #0]
          hi2c->XferCount--;
 8006d30:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006d32:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006d34:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006d36:	3b01      	subs	r3, #1
          hi2c->pBuffPtr++;
 8006d38:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006d3a:	3a01      	subs	r2, #1
          hi2c->XferCount--;
 8006d3c:	b29b      	uxth	r3, r3
          hi2c->pBuffPtr++;
 8006d3e:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006d40:	852a      	strh	r2, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006d42:	856b      	strh	r3, [r5, #42]	; 0x2a
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
 8006d44:	1c71      	adds	r1, r6, #1
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d46:	682a      	ldr	r2, [r5, #0]
 8006d48:	f040 80f9 	bne.w	8006f3e <HAL_I2C_Master_Receive+0x42a>
 8006d4c:	6953      	ldr	r3, [r2, #20]
 8006d4e:	075b      	lsls	r3, r3, #29
 8006d50:	d5fc      	bpl.n	8006d4c <HAL_I2C_Master_Receive+0x238>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d52:	6813      	ldr	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d54:	6a69      	ldr	r1, [r5, #36]	; 0x24
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006d56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006d5a:	6013      	str	r3, [r2, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d5c:	6913      	ldr	r3, [r2, #16]
 8006d5e:	700b      	strb	r3, [r1, #0]
          hi2c->XferCount--;
 8006d60:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006d62:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006d64:	8d2a      	ldrh	r2, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d66:	6828      	ldr	r0, [r5, #0]
          hi2c->XferCount--;
 8006d68:	3b01      	subs	r3, #1
 8006d6a:	b29b      	uxth	r3, r3
 8006d6c:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6e:	6900      	ldr	r0, [r0, #16]
          hi2c->XferSize--;
 8006d70:	1e53      	subs	r3, r2, #1
          hi2c->pBuffPtr++;
 8006d72:	1c4c      	adds	r4, r1, #1
 8006d74:	626c      	str	r4, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006d76:	852b      	strh	r3, [r5, #40]	; 0x28
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d78:	7048      	strb	r0, [r1, #1]
          hi2c->XferSize--;
 8006d7a:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006d7c:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006d7e:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006d80:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8006d82:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8006d84:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006d86:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8006d88:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8006d8a:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006d8c:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006d8e:	856a      	strh	r2, [r5, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f43f af34 	beq.w	8006bfe <HAL_I2C_Master_Receive+0xea>
      if (hi2c->XferSize <= 3U)
 8006d96:	2b03      	cmp	r3, #3
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006d98:	682c      	ldr	r4, [r5, #0]
      if (hi2c->XferSize <= 3U)
 8006d9a:	d9b6      	bls.n	8006d0a <HAL_I2C_Master_Receive+0x1f6>
 8006d9c:	b94e      	cbnz	r6, 8006db2 <HAL_I2C_Master_Receive+0x29e>
 8006d9e:	e030      	b.n	8006e02 <HAL_I2C_Master_Receive+0x2ee>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006da0:	6963      	ldr	r3, [r4, #20]
 8006da2:	06db      	lsls	r3, r3, #27
 8006da4:	d45c      	bmi.n	8006e60 <HAL_I2C_Master_Receive+0x34c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006da6:	f7fe fc7f 	bl	80056a8 <HAL_GetTick>
 8006daa:	1bc0      	subs	r0, r0, r7
 8006dac:	4286      	cmp	r6, r0
 8006dae:	d330      	bcc.n	8006e12 <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006db0:	682c      	ldr	r4, [r5, #0]
 8006db2:	6963      	ldr	r3, [r4, #20]
 8006db4:	065a      	lsls	r2, r3, #25
 8006db6:	d5f3      	bpl.n	8006da0 <HAL_I2C_Master_Receive+0x28c>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006db8:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006dba:	6922      	ldr	r2, [r4, #16]
 8006dbc:	701a      	strb	r2, [r3, #0]
        hi2c->XferCount--;
 8006dbe:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dc0:	6828      	ldr	r0, [r5, #0]
        hi2c->XferSize--;
 8006dc2:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
        hi2c->pBuffPtr++;
 8006dc4:	6a69      	ldr	r1, [r5, #36]	; 0x24
        hi2c->XferCount--;
 8006dc6:	3a01      	subs	r2, #1
 8006dc8:	b292      	uxth	r2, r2
 8006dca:	856a      	strh	r2, [r5, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dcc:	6942      	ldr	r2, [r0, #20]
        hi2c->XferSize--;
 8006dce:	3b01      	subs	r3, #1
        hi2c->pBuffPtr++;
 8006dd0:	1c4c      	adds	r4, r1, #1
        hi2c->XferSize--;
 8006dd2:	b29b      	uxth	r3, r3
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dd4:	0752      	lsls	r2, r2, #29
        hi2c->pBuffPtr++;
 8006dd6:	626c      	str	r4, [r5, #36]	; 0x24
        hi2c->XferSize--;
 8006dd8:	852b      	strh	r3, [r5, #40]	; 0x28
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006dda:	d5d9      	bpl.n	8006d90 <HAL_I2C_Master_Receive+0x27c>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ddc:	6903      	ldr	r3, [r0, #16]
 8006dde:	704b      	strb	r3, [r1, #1]
 8006de0:	e083      	b.n	8006eea <HAL_I2C_Master_Receive+0x3d6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006de2:	6963      	ldr	r3, [r4, #20]
 8006de4:	0799      	lsls	r1, r3, #30
 8006de6:	f53f aefd 	bmi.w	8006be4 <HAL_I2C_Master_Receive+0xd0>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006dea:	6963      	ldr	r3, [r4, #20]
 8006dec:	0559      	lsls	r1, r3, #21
 8006dee:	f53f af61 	bmi.w	8006cb4 <HAL_I2C_Master_Receive+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006df2:	f7fe fc59 	bl	80056a8 <HAL_GetTick>
 8006df6:	1bc0      	subs	r0, r0, r7
 8006df8:	4286      	cmp	r6, r0
 8006dfa:	d30a      	bcc.n	8006e12 <HAL_I2C_Master_Receive+0x2fe>
 8006dfc:	b14e      	cbz	r6, 8006e12 <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006dfe:	682c      	ldr	r4, [r5, #0]
 8006e00:	e6e7      	b.n	8006bd2 <HAL_I2C_Master_Receive+0xbe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006e02:	6963      	ldr	r3, [r4, #20]
 8006e04:	0659      	lsls	r1, r3, #25
 8006e06:	d4d7      	bmi.n	8006db8 <HAL_I2C_Master_Receive+0x2a4>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006e08:	6963      	ldr	r3, [r4, #20]
 8006e0a:	06d8      	lsls	r0, r3, #27
 8006e0c:	d428      	bmi.n	8006e60 <HAL_I2C_Master_Receive+0x34c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e0e:	f7fe fc4b 	bl	80056a8 <HAL_GetTick>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e12:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e14:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e16:	632a      	str	r2, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e18:	f885 303d 	strb.w	r3, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e1c:	f885 203e 	strb.w	r2, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e20:	6c2b      	ldr	r3, [r5, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8006e22:	f885 203c 	strb.w	r2, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e26:	f043 0320 	orr.w	r3, r3, #32
          return HAL_ERROR;
 8006e2a:	2001      	movs	r0, #1
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e2c:	642b      	str	r3, [r5, #64]	; 0x40
}
 8006e2e:	b007      	add	sp, #28
 8006e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e34:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e36:	2220      	movs	r2, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006e38:	632b      	str	r3, [r5, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006e3a:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006e3e:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e42:	6c2a      	ldr	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e44:	6829      	ldr	r1, [r5, #0]
        __HAL_UNLOCK(hi2c);
 8006e46:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006e4a:	f042 0220 	orr.w	r2, r2, #32
 8006e4e:	642a      	str	r2, [r5, #64]	; 0x40
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e50:	680b      	ldr	r3, [r1, #0]
 8006e52:	05d9      	lsls	r1, r3, #23
 8006e54:	d512      	bpl.n	8006e7c <HAL_I2C_Master_Receive+0x368>
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006e5a:	642b      	str	r3, [r5, #64]	; 0x40
      return HAL_ERROR;
 8006e5c:	2001      	movs	r0, #1
 8006e5e:	e668      	b.n	8006b32 <HAL_I2C_Master_Receive+0x1e>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e60:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e62:	2220      	movs	r2, #32
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006e64:	f06f 0110 	mvn.w	r1, #16
 8006e68:	6161      	str	r1, [r4, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8006e6a:	632b      	str	r3, [r5, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006e6c:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006e70:	f885 303e 	strb.w	r3, [r5, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006e74:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 8006e76:	642a      	str	r2, [r5, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8006e78:	f885 303c 	strb.w	r3, [r5, #60]	; 0x3c
          return HAL_ERROR;
 8006e7c:	2001      	movs	r0, #1
 8006e7e:	e658      	b.n	8006b32 <HAL_I2C_Master_Receive+0x1e>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e80:	6963      	ldr	r3, [r4, #20]
 8006e82:	071b      	lsls	r3, r3, #28
 8006e84:	f53f aee7 	bmi.w	8006c56 <HAL_I2C_Master_Receive+0x142>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e88:	6963      	ldr	r3, [r4, #20]
 8006e8a:	055b      	lsls	r3, r3, #21
 8006e8c:	f53f af12 	bmi.w	8006cb4 <HAL_I2C_Master_Receive+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e90:	f7fe fc0a 	bl	80056a8 <HAL_GetTick>
 8006e94:	1bc0      	subs	r0, r0, r7
 8006e96:	4286      	cmp	r6, r0
 8006e98:	d3bb      	bcc.n	8006e12 <HAL_I2C_Master_Receive+0x2fe>
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	d0b9      	beq.n	8006e12 <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006e9e:	682c      	ldr	r4, [r5, #0]
 8006ea0:	e6d0      	b.n	8006c44 <HAL_I2C_Master_Receive+0x130>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ea2:	6963      	ldr	r3, [r4, #20]
 8006ea4:	0759      	lsls	r1, r3, #29
 8006ea6:	d40c      	bmi.n	8006ec2 <HAL_I2C_Master_Receive+0x3ae>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea8:	f7fe fbfe 	bl	80056a8 <HAL_GetTick>
 8006eac:	1bc0      	subs	r0, r0, r7
 8006eae:	4286      	cmp	r6, r0
 8006eb0:	d3af      	bcc.n	8006e12 <HAL_I2C_Master_Receive+0x2fe>
 8006eb2:	2e00      	cmp	r6, #0
 8006eb4:	d0ad      	beq.n	8006e12 <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006eb6:	682c      	ldr	r4, [r5, #0]
 8006eb8:	1c73      	adds	r3, r6, #1
 8006eba:	d1f2      	bne.n	8006ea2 <HAL_I2C_Master_Receive+0x38e>
 8006ebc:	6963      	ldr	r3, [r4, #20]
 8006ebe:	0758      	lsls	r0, r3, #29
 8006ec0:	d5fc      	bpl.n	8006ebc <HAL_I2C_Master_Receive+0x3a8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ec2:	6823      	ldr	r3, [r4, #0]
 8006ec4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006ec8:	6023      	str	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006ecc:	6922      	ldr	r2, [r4, #16]
 8006ece:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006ed0:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006ed2:	1c53      	adds	r3, r2, #1
 8006ed4:	626b      	str	r3, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006ed6:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
 8006ed8:	3b01      	subs	r3, #1
 8006eda:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006edc:	8d6b      	ldrh	r3, [r5, #42]	; 0x2a
 8006ede:	3b01      	subs	r3, #1
 8006ee0:	b29b      	uxth	r3, r3
 8006ee2:	856b      	strh	r3, [r5, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ee4:	682b      	ldr	r3, [r5, #0]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	7053      	strb	r3, [r2, #1]
          hi2c->XferSize--;
 8006eea:	8d2b      	ldrh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006eec:	8d6a      	ldrh	r2, [r5, #42]	; 0x2a
          hi2c->pBuffPtr++;
 8006eee:	6a69      	ldr	r1, [r5, #36]	; 0x24
          hi2c->XferSize--;
 8006ef0:	3b01      	subs	r3, #1
          hi2c->XferCount--;
 8006ef2:	3a01      	subs	r2, #1
          hi2c->pBuffPtr++;
 8006ef4:	3101      	adds	r1, #1
          hi2c->XferSize--;
 8006ef6:	b29b      	uxth	r3, r3
          hi2c->XferCount--;
 8006ef8:	b292      	uxth	r2, r2
          hi2c->pBuffPtr++;
 8006efa:	6269      	str	r1, [r5, #36]	; 0x24
          hi2c->XferCount--;
 8006efc:	856a      	strh	r2, [r5, #42]	; 0x2a
          hi2c->XferSize--;
 8006efe:	852b      	strh	r3, [r5, #40]	; 0x28
          hi2c->XferCount--;
 8006f00:	e746      	b.n	8006d90 <HAL_I2C_Master_Receive+0x27c>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f02:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f06:	6022      	str	r2, [r4, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006f08:	6822      	ldr	r2, [r4, #0]
 8006f0a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f0e:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f10:	2200      	movs	r2, #0
 8006f12:	9203      	str	r2, [sp, #12]
 8006f14:	6962      	ldr	r2, [r4, #20]
 8006f16:	9203      	str	r2, [sp, #12]
 8006f18:	69a2      	ldr	r2, [r4, #24]
 8006f1a:	9203      	str	r2, [sp, #12]
 8006f1c:	9a03      	ldr	r2, [sp, #12]
 8006f1e:	e6f2      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1f2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f20:	6963      	ldr	r3, [r4, #20]
 8006f22:	0758      	lsls	r0, r3, #29
 8006f24:	f53f aefd 	bmi.w	8006d22 <HAL_I2C_Master_Receive+0x20e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f28:	f7fe fbbe 	bl	80056a8 <HAL_GetTick>
 8006f2c:	1bc0      	subs	r0, r0, r7
 8006f2e:	4286      	cmp	r6, r0
 8006f30:	f4ff af6f 	bcc.w	8006e12 <HAL_I2C_Master_Receive+0x2fe>
 8006f34:	2e00      	cmp	r6, #0
 8006f36:	f43f af6c 	beq.w	8006e12 <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f3a:	682c      	ldr	r4, [r5, #0]
 8006f3c:	e6eb      	b.n	8006d16 <HAL_I2C_Master_Receive+0x202>
 8006f3e:	6953      	ldr	r3, [r2, #20]
 8006f40:	075c      	lsls	r4, r3, #29
 8006f42:	f53f af06 	bmi.w	8006d52 <HAL_I2C_Master_Receive+0x23e>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f46:	f7fe fbaf 	bl	80056a8 <HAL_GetTick>
 8006f4a:	1bc0      	subs	r0, r0, r7
 8006f4c:	4286      	cmp	r6, r0
 8006f4e:	f4ff af60 	bcc.w	8006e12 <HAL_I2C_Master_Receive+0x2fe>
 8006f52:	2e00      	cmp	r6, #0
 8006f54:	f47f aef6 	bne.w	8006d44 <HAL_I2C_Master_Receive+0x230>
 8006f58:	e75b      	b.n	8006e12 <HAL_I2C_Master_Receive+0x2fe>
 8006f5a:	b95e      	cbnz	r6, 8006f74 <HAL_I2C_Master_Receive+0x460>
 8006f5c:	e011      	b.n	8006f82 <HAL_I2C_Master_Receive+0x46e>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006f5e:	6963      	ldr	r3, [r4, #20]
 8006f60:	06d9      	lsls	r1, r3, #27
 8006f62:	f53f af7d 	bmi.w	8006e60 <HAL_I2C_Master_Receive+0x34c>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f66:	f7fe fb9f 	bl	80056a8 <HAL_GetTick>
 8006f6a:	1bc0      	subs	r0, r0, r7
 8006f6c:	4286      	cmp	r6, r0
 8006f6e:	f4ff af50 	bcc.w	8006e12 <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f72:	682c      	ldr	r4, [r5, #0]
 8006f74:	6963      	ldr	r3, [r4, #20]
 8006f76:	0658      	lsls	r0, r3, #25
 8006f78:	d5f1      	bpl.n	8006f5e <HAL_I2C_Master_Receive+0x44a>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006f7a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006f7c:	6922      	ldr	r2, [r4, #16]
 8006f7e:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8006f80:	e7b3      	b.n	8006eea <HAL_I2C_Master_Receive+0x3d6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006f82:	6963      	ldr	r3, [r4, #20]
 8006f84:	065a      	lsls	r2, r3, #25
 8006f86:	f57f af3f 	bpl.w	8006e08 <HAL_I2C_Master_Receive+0x2f4>
 8006f8a:	e7f6      	b.n	8006f7a <HAL_I2C_Master_Receive+0x466>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f90:	6022      	str	r2, [r4, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006f92:	2200      	movs	r2, #0
 8006f94:	9202      	str	r2, [sp, #8]
 8006f96:	6962      	ldr	r2, [r4, #20]
 8006f98:	9202      	str	r2, [sp, #8]
 8006f9a:	69a2      	ldr	r2, [r4, #24]
 8006f9c:	9202      	str	r2, [sp, #8]
 8006f9e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006fa0:	6822      	ldr	r2, [r4, #0]
 8006fa2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006fa6:	6022      	str	r2, [r4, #0]
 8006fa8:	e6ad      	b.n	8006d06 <HAL_I2C_Master_Receive+0x1f2>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006faa:	6963      	ldr	r3, [r4, #20]
 8006fac:	0798      	lsls	r0, r3, #30
 8006fae:	f53f ae5e 	bmi.w	8006c6e <HAL_I2C_Master_Receive+0x15a>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fb2:	6963      	ldr	r3, [r4, #20]
 8006fb4:	0558      	lsls	r0, r3, #21
 8006fb6:	f53f ae7d 	bmi.w	8006cb4 <HAL_I2C_Master_Receive+0x1a0>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fba:	f7fe fb75 	bl	80056a8 <HAL_GetTick>
 8006fbe:	1bc0      	subs	r0, r0, r7
 8006fc0:	4286      	cmp	r6, r0
 8006fc2:	f4ff af26 	bcc.w	8006e12 <HAL_I2C_Master_Receive+0x2fe>
 8006fc6:	2e00      	cmp	r6, #0
 8006fc8:	f43f af23 	beq.w	8006e12 <HAL_I2C_Master_Receive+0x2fe>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fcc:	682c      	ldr	r4, [r5, #0]
 8006fce:	e645      	b.n	8006c5c <HAL_I2C_Master_Receive+0x148>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fd0:	6963      	ldr	r3, [r4, #20]
 8006fd2:	07d8      	lsls	r0, r3, #31
 8006fd4:	f53f ae5c 	bmi.w	8006c90 <HAL_I2C_Master_Receive+0x17c>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd8:	f7fe fb66 	bl	80056a8 <HAL_GetTick>
 8006fdc:	1bc0      	subs	r0, r0, r7
 8006fde:	4286      	cmp	r6, r0
 8006fe0:	f4ff af28 	bcc.w	8006e34 <HAL_I2C_Master_Receive+0x320>
 8006fe4:	2e00      	cmp	r6, #0
 8006fe6:	f43f af25 	beq.w	8006e34 <HAL_I2C_Master_Receive+0x320>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006fea:	682c      	ldr	r4, [r5, #0]
 8006fec:	e64a      	b.n	8006c84 <HAL_I2C_Master_Receive+0x170>
 8006fee:	bf00      	nop

08006ff0 <HAL_I2C_Mem_Write>:
{
 8006ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff4:	4604      	mov	r4, r0
 8006ff6:	b083      	sub	sp, #12
 8006ff8:	4699      	mov	r9, r3
 8006ffa:	f8bd a034 	ldrh.w	sl, [sp, #52]	; 0x34
 8006ffe:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007000:	460f      	mov	r7, r1
 8007002:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8007004:	f7fe fb50 	bl	80056a8 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007008:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 800700c:	2b20      	cmp	r3, #32
 800700e:	d004      	beq.n	800701a <HAL_I2C_Mem_Write+0x2a>
      return HAL_BUSY;
 8007010:	2702      	movs	r7, #2
}
 8007012:	4638      	mov	r0, r7
 8007014:	b003      	add	sp, #12
 8007016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800701a:	4605      	mov	r5, r0
 800701c:	e005      	b.n	800702a <HAL_I2C_Mem_Write+0x3a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800701e:	f7fe fb43 	bl	80056a8 <HAL_GetTick>
 8007022:	1b40      	subs	r0, r0, r5
 8007024:	2819      	cmp	r0, #25
 8007026:	f200 80ab 	bhi.w	8007180 <HAL_I2C_Mem_Write+0x190>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800702a:	6820      	ldr	r0, [r4, #0]
 800702c:	6983      	ldr	r3, [r0, #24]
 800702e:	ea6f 0c03 	mvn.w	ip, r3
 8007032:	f01c 0b02 	ands.w	fp, ip, #2
 8007036:	d0f2      	beq.n	800701e <HAL_I2C_Mem_Write+0x2e>
    __HAL_LOCK(hi2c);
 8007038:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800703c:	2b01      	cmp	r3, #1
 800703e:	d0e7      	beq.n	8007010 <HAL_I2C_Mem_Write+0x20>
 8007040:	2301      	movs	r3, #1
 8007042:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8007046:	6803      	ldr	r3, [r0, #0]
 8007048:	07db      	lsls	r3, r3, #31
 800704a:	d572      	bpl.n	8007132 <HAL_I2C_Mem_Write+0x142>
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800704c:	4639      	mov	r1, r7
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800704e:	6807      	ldr	r7, [r0, #0]
 8007050:	f427 6700 	bic.w	r7, r7, #2048	; 0x800
 8007054:	6007      	str	r7, [r0, #0]
    hi2c->pBuffPtr    = pData;
 8007056:	980c      	ldr	r0, [sp, #48]	; 0x30
 8007058:	6260      	str	r0, [r4, #36]	; 0x24
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800705a:	2021      	movs	r0, #33	; 0x21
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800705c:	e9cd 6500 	strd	r6, r5, [sp]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007060:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007064:	2040      	movs	r0, #64	; 0x40
 8007066:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800706a:	2000      	movs	r0, #0
 800706c:	6420      	str	r0, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 800706e:	f8a4 a02a 	strh.w	sl, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8007072:	8d67      	ldrh	r7, [r4, #42]	; 0x2a
 8007074:	8527      	strh	r7, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007076:	f6cf 70ff 	movt	r0, #65535	; 0xffff
 800707a:	62e0      	str	r0, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800707c:	464b      	mov	r3, r9
 800707e:	4642      	mov	r2, r8
 8007080:	4620      	mov	r0, r4
 8007082:	f7ff f9ef 	bl	8006464 <I2C_RequestMemoryWrite>
 8007086:	4607      	mov	r7, r0
 8007088:	b9f8      	cbnz	r0, 80070ca <HAL_I2C_Mem_Write+0xda>
    while (hi2c->XferSize > 0U)
 800708a:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 800708c:	2b00      	cmp	r3, #0
 800708e:	f000 80a0 	beq.w	80071d2 <HAL_I2C_Mem_Write+0x1e2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007092:	6823      	ldr	r3, [r4, #0]
 8007094:	1c72      	adds	r2, r6, #1
 8007096:	d158      	bne.n	800714a <HAL_I2C_Mem_Write+0x15a>
 8007098:	695a      	ldr	r2, [r3, #20]
 800709a:	0610      	lsls	r0, r2, #24
 800709c:	d41a      	bmi.n	80070d4 <HAL_I2C_Mem_Write+0xe4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800709e:	695a      	ldr	r2, [r3, #20]
 80070a0:	0551      	lsls	r1, r2, #21
 80070a2:	d5f9      	bpl.n	8007098 <HAL_I2C_Mem_Write+0xa8>
    hi2c->PreviousState       = I2C_STATE_NONE;
 80070a4:	2200      	movs	r2, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070a6:	f46f 6080 	mvn.w	r0, #1024	; 0x400
    hi2c->State               = HAL_I2C_STATE_READY;
 80070aa:	2120      	movs	r1, #32
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80070ac:	6158      	str	r0, [r3, #20]
    hi2c->PreviousState       = I2C_STATE_NONE;
 80070ae:	6322      	str	r2, [r4, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80070b0:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80070b4:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
    __HAL_UNLOCK(hi2c);
 80070ba:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80070be:	f043 0304 	orr.w	r3, r3, #4
 80070c2:	6423      	str	r3, [r4, #64]	; 0x40
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070c6:	2b04      	cmp	r3, #4
 80070c8:	d038      	beq.n	800713c <HAL_I2C_Mem_Write+0x14c>
      return HAL_ERROR;
 80070ca:	2701      	movs	r7, #1
}
 80070cc:	4638      	mov	r0, r7
 80070ce:	b003      	add	sp, #12
 80070d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070d4:	f8d4 c024 	ldr.w	ip, [r4, #36]	; 0x24
      hi2c->XferSize--;
 80070d8:	f8b4 e028 	ldrh.w	lr, [r4, #40]	; 0x28
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070dc:	4661      	mov	r1, ip
      hi2c->XferSize--;
 80070de:	f10e 30ff 	add.w	r0, lr, #4294967295
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80070e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80070e6:	611a      	str	r2, [r3, #16]
      hi2c->XferCount--;
 80070e8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->pBuffPtr++;
 80070ea:	6261      	str	r1, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80070ec:	3a01      	subs	r2, #1
 80070ee:	b292      	uxth	r2, r2
 80070f0:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80070f2:	b282      	uxth	r2, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070f4:	6958      	ldr	r0, [r3, #20]
      hi2c->XferSize--;
 80070f6:	8522      	strh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80070f8:	0740      	lsls	r0, r0, #29
 80070fa:	d517      	bpl.n	800712c <HAL_I2C_Mem_Write+0x13c>
 80070fc:	b942      	cbnz	r2, 8007110 <HAL_I2C_Mem_Write+0x120>
 80070fe:	1c72      	adds	r2, r6, #1
 8007100:	d159      	bne.n	80071b6 <HAL_I2C_Mem_Write+0x1c6>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007102:	695a      	ldr	r2, [r3, #20]
 8007104:	0750      	lsls	r0, r2, #29
 8007106:	d449      	bmi.n	800719c <HAL_I2C_Mem_Write+0x1ac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007108:	695a      	ldr	r2, [r3, #20]
 800710a:	0551      	lsls	r1, r2, #21
 800710c:	d5f9      	bpl.n	8007102 <HAL_I2C_Mem_Write+0x112>
 800710e:	e7c9      	b.n	80070a4 <HAL_I2C_Mem_Write+0xb4>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8007110:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8007114:	6119      	str	r1, [r3, #16]
        hi2c->pBuffPtr++;
 8007116:	f10c 0102 	add.w	r1, ip, #2
 800711a:	6261      	str	r1, [r4, #36]	; 0x24
        hi2c->XferCount--;
 800711c:	8d61      	ldrh	r1, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800711e:	f1ae 0202 	sub.w	r2, lr, #2
        hi2c->XferCount--;
 8007122:	3901      	subs	r1, #1
        hi2c->XferSize--;
 8007124:	b292      	uxth	r2, r2
        hi2c->XferCount--;
 8007126:	b289      	uxth	r1, r1
        hi2c->XferSize--;
 8007128:	8522      	strh	r2, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800712a:	8561      	strh	r1, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800712c:	2a00      	cmp	r2, #0
 800712e:	d1b1      	bne.n	8007094 <HAL_I2C_Mem_Write+0xa4>
 8007130:	e7e5      	b.n	80070fe <HAL_I2C_Mem_Write+0x10e>
      __HAL_I2C_ENABLE(hi2c);
 8007132:	6803      	ldr	r3, [r0, #0]
 8007134:	f043 0301 	orr.w	r3, r3, #1
 8007138:	6003      	str	r3, [r0, #0]
 800713a:	e787      	b.n	800704c <HAL_I2C_Mem_Write+0x5c>
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800713c:	6822      	ldr	r2, [r4, #0]
 800713e:	6813      	ldr	r3, [r2, #0]
 8007140:	f443 7300 	orr.w	r3, r3, #512	; 0x200
      return HAL_ERROR;
 8007144:	2701      	movs	r7, #1
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007146:	6013      	str	r3, [r2, #0]
 8007148:	e763      	b.n	8007012 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800714a:	695a      	ldr	r2, [r3, #20]
 800714c:	0612      	lsls	r2, r2, #24
 800714e:	d4c1      	bmi.n	80070d4 <HAL_I2C_Mem_Write+0xe4>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007150:	695a      	ldr	r2, [r3, #20]
 8007152:	0551      	lsls	r1, r2, #21
 8007154:	d4a6      	bmi.n	80070a4 <HAL_I2C_Mem_Write+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007156:	f7fe faa7 	bl	80056a8 <HAL_GetTick>
 800715a:	1b40      	subs	r0, r0, r5
 800715c:	4286      	cmp	r6, r0
 800715e:	d301      	bcc.n	8007164 <HAL_I2C_Mem_Write+0x174>
 8007160:	2e00      	cmp	r6, #0
 8007162:	d196      	bne.n	8007092 <HAL_I2C_Mem_Write+0xa2>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007164:	2200      	movs	r2, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8007166:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007168:	6322      	str	r2, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800716a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800716e:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007172:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007174:	f884 203c 	strb.w	r2, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007178:	f043 0320 	orr.w	r3, r3, #32
 800717c:	6423      	str	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 800717e:	e7a1      	b.n	80070c4 <HAL_I2C_Mem_Write+0xd4>
        hi2c->State             = HAL_I2C_STATE_READY;
 8007180:	2320      	movs	r3, #32
        hi2c->PreviousState     = I2C_STATE_NONE;
 8007182:	f8c4 b030 	str.w	fp, [r4, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8007186:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800718a:	f884 b03e 	strb.w	fp, [r4, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800718e:	6c23      	ldr	r3, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8007190:	f884 b03c 	strb.w	fp, [r4, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007194:	f043 0320 	orr.w	r3, r3, #32
 8007198:	6423      	str	r3, [r4, #64]	; 0x40
 800719a:	e739      	b.n	8007010 <HAL_I2C_Mem_Write+0x20>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800719c:	681a      	ldr	r2, [r3, #0]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800719e:	2100      	movs	r1, #0
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    hi2c->State = HAL_I2C_STATE_READY;
 80071a4:	2020      	movs	r0, #32
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071a6:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80071a8:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 80071ac:	f884 103c 	strb.w	r1, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80071b0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
    return HAL_OK;
 80071b4:	e72d      	b.n	8007012 <HAL_I2C_Mem_Write+0x22>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071b6:	695a      	ldr	r2, [r3, #20]
 80071b8:	0752      	lsls	r2, r2, #29
 80071ba:	d4ef      	bmi.n	800719c <HAL_I2C_Mem_Write+0x1ac>
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80071bc:	695a      	ldr	r2, [r3, #20]
 80071be:	0551      	lsls	r1, r2, #21
 80071c0:	f53f af70 	bmi.w	80070a4 <HAL_I2C_Mem_Write+0xb4>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071c4:	f7fe fa70 	bl	80056a8 <HAL_GetTick>
 80071c8:	1b40      	subs	r0, r0, r5
 80071ca:	4286      	cmp	r6, r0
 80071cc:	d3ca      	bcc.n	8007164 <HAL_I2C_Mem_Write+0x174>
 80071ce:	2e00      	cmp	r6, #0
 80071d0:	d0c8      	beq.n	8007164 <HAL_I2C_Mem_Write+0x174>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071d2:	6823      	ldr	r3, [r4, #0]
 80071d4:	e793      	b.n	80070fe <HAL_I2C_Mem_Write+0x10e>
 80071d6:	bf00      	nop

080071d8 <HAL_I2S_Init>:
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80071d8:	2800      	cmp	r0, #0
 80071da:	f000 809b 	beq.w	8007314 <HAL_I2S_Init+0x13c>
{
 80071de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80071e0:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 80071e4:	4604      	mov	r4, r0
 80071e6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	f000 8084 	beq.w	80072f8 <HAL_I2S_Init+0x120>

  hi2s->State = HAL_I2S_STATE_BUSY;

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80071f0:	6821      	ldr	r1, [r4, #0]
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80071f2:	6963      	ldr	r3, [r4, #20]
  hi2s->State = HAL_I2S_STATE_BUSY;
 80071f4:	2202      	movs	r2, #2
 80071f6:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80071fa:	69c8      	ldr	r0, [r1, #28]
 80071fc:	f420 607b 	bic.w	r0, r0, #4016	; 0xfb0
 8007200:	f020 000f 	bic.w	r0, r0, #15
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8007204:	4293      	cmp	r3, r2
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8007206:	61c8      	str	r0, [r1, #28]
  hi2s->Instance->I2SPR = 0x0002U;
 8007208:	620a      	str	r2, [r1, #32]
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800720a:	d073      	beq.n	80072f4 <HAL_I2S_Init+0x11c>
      /* Packet length is 32 bits */
      packetlength = 32U;
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800720c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8007210:	2b00      	cmp	r3, #0
 8007212:	bf0b      	itete	eq
 8007214:	2320      	moveq	r3, #32
 8007216:	2340      	movne	r3, #64	; 0x40
 8007218:	2510      	moveq	r5, #16
 800721a:	2520      	movne	r5, #32
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800721c:	2001      	movs	r0, #1
      packetlength = packetlength * 2U;
 800721e:	2a20      	cmp	r2, #32
 8007220:	bf98      	it	ls
 8007222:	461d      	movls	r5, r3
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8007224:	f000 fef4 	bl	8008010 <HAL_RCCEx_GetPeriphCLKFreq>
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8007228:	6922      	ldr	r2, [r4, #16]
 800722a:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 800722e:	d06d      	beq.n	800730c <HAL_I2S_Init+0x134>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007230:	fbb0 f0f5 	udiv	r0, r0, r5
 8007234:	eb00 0080 	add.w	r0, r0, r0, lsl #2
 8007238:	6961      	ldr	r1, [r4, #20]
 800723a:	0043      	lsls	r3, r0, #1
 800723c:	fbb3 f3f1 	udiv	r3, r3, r1
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8007240:	f64c 41cd 	movw	r1, #52429	; 0xcccd
 8007244:	f6cc 41cc 	movt	r1, #52428	; 0xcccc
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007248:	3305      	adds	r3, #5
    tmp = tmp / 10U;
 800724a:	fba1 1303 	umull	r1, r3, r1, r3

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800724e:	0918      	lsrs	r0, r3, #4
    i2sdiv = 2U;
    i2sodd = 0U;
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007250:	1e81      	subs	r1, r0, #2
 8007252:	29fd      	cmp	r1, #253	; 0xfd
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8007254:	f3c3 03c0 	ubfx	r3, r3, #3, #1
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8007258:	d905      	bls.n	8007266 <HAL_I2S_Init+0x8e>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800725a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800725c:	f043 0310 	orr.w	r3, r3, #16
    return  HAL_ERROR;
 8007260:	2001      	movs	r0, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8007262:	6463      	str	r3, [r4, #68]	; 0x44

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->State     = HAL_I2S_STATE_READY;

  return HAL_OK;
}
 8007264:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007266:	6821      	ldr	r1, [r4, #0]
 8007268:	ea40 2303 	orr.w	r3, r0, r3, lsl #8
 800726c:	4313      	orrs	r3, r2
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800726e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8007272:	620b      	str	r3, [r1, #32]
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8007274:	69cb      	ldr	r3, [r1, #28]
 8007276:	68e0      	ldr	r0, [r4, #12]
 8007278:	f24f 0240 	movw	r2, #61504	; 0xf040
 800727c:	f6cf 72ff 	movt	r2, #65535	; 0xffff
 8007280:	ea47 0605 	orr.w	r6, r7, r5
 8007284:	4013      	ands	r3, r2
 8007286:	4333      	orrs	r3, r6
 8007288:	69a6      	ldr	r6, [r4, #24]
 800728a:	4303      	orrs	r3, r0
 800728c:	4333      	orrs	r3, r6
 800728e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007292:	61cb      	str	r3, [r1, #28]
  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8007294:	6a23      	ldr	r3, [r4, #32]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d126      	bne.n	80072e8 <HAL_I2S_Init+0x110>
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800729a:	4305      	orrs	r5, r0
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800729c:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80072a0:	f44f 5050 	mov.w	r0, #13312	; 0x3400
 80072a4:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80072a8:	f2c4 0000 	movt	r0, #16384	; 0x4000
 80072ac:	4299      	cmp	r1, r3
 80072ae:	bf18      	it	ne
 80072b0:	f04f 2040 	movne.w	r0, #1073758208	; 0x40004000
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80072b4:	f437 7300 	bics.w	r3, r7, #512	; 0x200
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80072b8:	69c3      	ldr	r3, [r0, #28]
 80072ba:	ea02 0203 	and.w	r2, r2, r3
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80072be:	f247 5361 	movw	r3, #30049	; 0x7561
 80072c2:	f6c0 0300 	movt	r3, #2048	; 0x800
 80072c6:	6363      	str	r3, [r4, #52]	; 0x34
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80072c8:	f04f 0302 	mov.w	r3, #2
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80072cc:	61c2      	str	r2, [r0, #28]
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80072ce:	6203      	str	r3, [r0, #32]
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80072d0:	bf0c      	ite	eq
 80072d2:	f44f 7380 	moveq.w	r3, #256	; 0x100
 80072d6:	2300      	movne	r3, #0
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80072d8:	69c2      	ldr	r2, [r0, #28]
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80072da:	432b      	orrs	r3, r5
 80072dc:	4333      	orrs	r3, r6
 80072de:	4313      	orrs	r3, r2
 80072e0:	b29b      	uxth	r3, r3
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80072e2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80072e6:	61c3      	str	r3, [r0, #28]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80072e8:	2000      	movs	r0, #0
  hi2s->State     = HAL_I2S_STATE_READY;
 80072ea:	2301      	movs	r3, #1
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80072ec:	6460      	str	r0, [r4, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80072ee:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
}
 80072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80072f4:	6922      	ldr	r2, [r4, #16]
 80072f6:	e7b9      	b.n	800726c <HAL_I2S_Init+0x94>
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80072f8:	f247 4329 	movw	r3, #29737	; 0x7429
 80072fc:	f6c0 0300 	movt	r3, #2048	; 0x800
    hi2s->Lock = HAL_UNLOCKED;
 8007300:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8007304:	6343      	str	r3, [r0, #52]	; 0x34
    HAL_I2S_MspInit(hi2s);
 8007306:	f7fc ff67 	bl	80041d8 <HAL_I2S_MspInit>
 800730a:	e771      	b.n	80071f0 <HAL_I2S_Init+0x18>
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800730c:	68e3      	ldr	r3, [r4, #12]
 800730e:	b11b      	cbz	r3, 8007318 <HAL_I2S_Init+0x140>
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007310:	00ad      	lsls	r5, r5, #2
 8007312:	e78d      	b.n	8007230 <HAL_I2S_Init+0x58>
    return HAL_ERROR;
 8007314:	2001      	movs	r0, #1
}
 8007316:	4770      	bx	lr
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8007318:	00ed      	lsls	r5, r5, #3
 800731a:	e789      	b.n	8007230 <HAL_I2S_Init+0x58>

0800731c <HAL_I2S_Transmit_DMA>:
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800731c:	2900      	cmp	r1, #0
 800731e:	d048      	beq.n	80073b2 <HAL_I2S_Transmit_DMA+0x96>
 8007320:	2a00      	cmp	r2, #0
 8007322:	d046      	beq.n	80073b2 <HAL_I2S_Transmit_DMA+0x96>
{
 8007324:	b538      	push	{r3, r4, r5, lr}
  {
    return  HAL_ERROR;
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8007326:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800732a:	2b01      	cmp	r3, #1
 800732c:	4604      	mov	r4, r0
 800732e:	d047      	beq.n	80073c0 <HAL_I2S_Transmit_DMA+0xa4>
 8007330:	2301      	movs	r3, #1
 8007332:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8007336:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800733a:	2b01      	cmp	r3, #1
 800733c:	d142      	bne.n	80073c4 <HAL_I2S_Transmit_DMA+0xa8>
    __HAL_UNLOCK(hi2s);
    return HAL_BUSY;
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800733e:	2303      	movs	r3, #3
 8007340:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
  hi2s->pTxBuffPtr = pData;

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8007344:	6805      	ldr	r5, [r0, #0]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8007346:	2300      	movs	r3, #0
 8007348:	6443      	str	r3, [r0, #68]	; 0x44
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800734a:	69eb      	ldr	r3, [r5, #28]
  hi2s->pTxBuffPtr = pData;
 800734c:	6241      	str	r1, [r0, #36]	; 0x24
  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800734e:	f003 0307 	and.w	r3, r3, #7

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8007352:	2b03      	cmp	r3, #3
 8007354:	d02f      	beq.n	80073b6 <HAL_I2S_Transmit_DMA+0x9a>
 8007356:	2b05      	cmp	r3, #5
 8007358:	d02d      	beq.n	80073b6 <HAL_I2S_Transmit_DMA+0x9a>
    hi2s->TxXferSize = (Size << 1U);
    hi2s->TxXferCount = (Size << 1U);
  }
  else
  {
    hi2s->TxXferSize = Size;
 800735a:	8502      	strh	r2, [r0, #40]	; 0x28
    hi2s->TxXferCount = Size;
 800735c:	8542      	strh	r2, [r0, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 800735e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8007360:	f247 33ed 	movw	r3, #29677	; 0x73ed
 8007364:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007368:	6403      	str	r3, [r0, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 800736a:	f247 33fd 	movw	r3, #29693	; 0x73fd
 800736e:	f6c0 0300 	movt	r3, #2048	; 0x800
 8007372:	63c3      	str	r3, [r0, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8007374:	f247 5331 	movw	r3, #30001	; 0x7531
 8007378:	f6c0 0300 	movt	r3, #2048	; 0x800
 800737c:	64c3      	str	r3, [r0, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
                                 (uint32_t)hi2s->pTxBuffPtr,
                                 (uint32_t)&hi2s->Instance->DR,
                                 hi2s->TxXferSize))
 800737e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8007380:	f105 020c 	add.w	r2, r5, #12
 8007384:	b29b      	uxth	r3, r3
 8007386:	f7fe fd93 	bl	8005eb0 <HAL_DMA_Start_IT>
 800738a:	bb00      	cbnz	r0, 80073ce <HAL_I2S_Transmit_DMA+0xb2>
    __HAL_UNLOCK(hi2s);
    return HAL_ERROR;
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800738c:	6823      	ldr	r3, [r4, #0]
 800738e:	69da      	ldr	r2, [r3, #28]
 8007390:	0551      	lsls	r1, r2, #21
 8007392:	d403      	bmi.n	800739c <HAL_I2S_Transmit_DMA+0x80>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8007394:	69da      	ldr	r2, [r3, #28]
 8007396:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800739a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 800739c:	685a      	ldr	r2, [r3, #4]
 800739e:	0792      	lsls	r2, r2, #30
 80073a0:	d403      	bmi.n	80073aa <HAL_I2S_Transmit_DMA+0x8e>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	f042 0202 	orr.w	r2, r2, #2
 80073a8:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80073aa:	2300      	movs	r3, #0
 80073ac:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return HAL_OK;
}
 80073b0:	bd38      	pop	{r3, r4, r5, pc}
    return  HAL_ERROR;
 80073b2:	2001      	movs	r0, #1
}
 80073b4:	4770      	bx	lr
    hi2s->TxXferSize = (Size << 1U);
 80073b6:	0053      	lsls	r3, r2, #1
 80073b8:	b29b      	uxth	r3, r3
 80073ba:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 80073bc:	8563      	strh	r3, [r4, #42]	; 0x2a
 80073be:	e7ce      	b.n	800735e <HAL_I2S_Transmit_DMA+0x42>
  __HAL_LOCK(hi2s);
 80073c0:	2002      	movs	r0, #2
}
 80073c2:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hi2s);
 80073c4:	2300      	movs	r3, #0
 80073c6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    return HAL_BUSY;
 80073ca:	2002      	movs	r0, #2
}
 80073cc:	bd38      	pop	{r3, r4, r5, pc}
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80073ce:	6c63      	ldr	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80073d0:	2201      	movs	r2, #1
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80073d2:	f043 0308 	orr.w	r3, r3, #8
    __HAL_UNLOCK(hi2s);
 80073d6:	2100      	movs	r1, #0
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80073d8:	6463      	str	r3, [r4, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80073da:	f884 2041 	strb.w	r2, [r4, #65]	; 0x41
    __HAL_UNLOCK(hi2s);
 80073de:	f884 1040 	strb.w	r1, [r4, #64]	; 0x40
    return HAL_ERROR;
 80073e2:	4610      	mov	r0, r2
}
 80073e4:	bd38      	pop	{r3, r4, r5, pc}
 80073e6:	bf00      	nop

080073e8 <HAL_I2S_TxHalfCpltCallback>:
 80073e8:	4770      	bx	lr
 80073ea:	bf00      	nop

080073ec <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80073ec:	b508      	push	{r3, lr}

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 80073ee:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80073f0:	f7ff fffa 	bl	80073e8 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80073f4:	bd08      	pop	{r3, pc}
 80073f6:	bf00      	nop

080073f8 <HAL_I2S_TxCpltCallback>:
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop

080073fc <I2S_DMATxCplt>:
{
 80073fc:	b508      	push	{r3, lr}
  if (hdma->Init.Mode == DMA_NORMAL)
 80073fe:	69c3      	ldr	r3, [r0, #28]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007400:	6b80      	ldr	r0, [r0, #56]	; 0x38
  if (hdma->Init.Mode == DMA_NORMAL)
 8007402:	b94b      	cbnz	r3, 8007418 <I2S_DMATxCplt+0x1c>
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8007404:	6801      	ldr	r1, [r0, #0]
 8007406:	684a      	ldr	r2, [r1, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007408:	f04f 0c01 	mov.w	ip, #1
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800740c:	f022 0202 	bic.w	r2, r2, #2
 8007410:	604a      	str	r2, [r1, #4]
    hi2s->TxXferCount = 0U;
 8007412:	8543      	strh	r3, [r0, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8007414:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
  HAL_I2S_TxCpltCallback(hi2s);
 8007418:	f7ff ffee 	bl	80073f8 <HAL_I2S_TxCpltCallback>
}
 800741c:	bd08      	pop	{r3, pc}
 800741e:	bf00      	nop

08007420 <HAL_I2S_RxCpltCallback>:
 8007420:	4770      	bx	lr
 8007422:	bf00      	nop

08007424 <HAL_I2S_ErrorCallback>:
 8007424:	4770      	bx	lr
 8007426:	bf00      	nop

08007428 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007428:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800742a:	6803      	ldr	r3, [r0, #0]
{
 800742c:	b084      	sub	sp, #16
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800742e:	689a      	ldr	r2, [r3, #8]
 8007430:	9201      	str	r2, [sp, #4]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8007432:	f890 2041 	ldrb.w	r2, [r0, #65]	; 0x41
 8007436:	2a04      	cmp	r2, #4
{
 8007438:	4604      	mov	r4, r0
  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800743a:	d005      	beq.n	8007448 <I2S_IRQHandler+0x20>
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800743c:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 8007440:	2b03      	cmp	r3, #3
 8007442:	d031      	beq.n	80074a8 <I2S_IRQHandler+0x80>
#else
      HAL_I2S_ErrorCallback(hi2s);
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8007444:	b004      	add	sp, #16
 8007446:	bd10      	pop	{r4, pc}
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8007448:	9a01      	ldr	r2, [sp, #4]
 800744a:	07d1      	lsls	r1, r2, #31
 800744c:	d50f      	bpl.n	800746e <I2S_IRQHandler+0x46>
 800744e:	685a      	ldr	r2, [r3, #4]
 8007450:	0652      	lsls	r2, r2, #25
 8007452:	d50c      	bpl.n	800746e <I2S_IRQHandler+0x46>
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8007454:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8007456:	68da      	ldr	r2, [r3, #12]
 8007458:	f821 2b02 	strh.w	r2, [r1], #2
  hi2s->RxXferCount--;
 800745c:	8e42      	ldrh	r2, [r0, #50]	; 0x32
  hi2s->pRxBuffPtr++;
 800745e:	62c1      	str	r1, [r0, #44]	; 0x2c
  hi2s->RxXferCount--;
 8007460:	3a01      	subs	r2, #1
 8007462:	b292      	uxth	r2, r2
 8007464:	8642      	strh	r2, [r0, #50]	; 0x32
  if (hi2s->RxXferCount == 0U)
 8007466:	8e42      	ldrh	r2, [r0, #50]	; 0x32
 8007468:	b292      	uxth	r2, r2
 800746a:	2a00      	cmp	r2, #0
 800746c:	d04a      	beq.n	8007504 <I2S_IRQHandler+0xdc>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800746e:	9b01      	ldr	r3, [sp, #4]
 8007470:	0659      	lsls	r1, r3, #25
 8007472:	d5e3      	bpl.n	800743c <I2S_IRQHandler+0x14>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	685a      	ldr	r2, [r3, #4]
 8007478:	0692      	lsls	r2, r2, #26
 800747a:	d5df      	bpl.n	800743c <I2S_IRQHandler+0x14>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800747c:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800747e:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8007484:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007486:	9102      	str	r1, [sp, #8]
 8007488:	68da      	ldr	r2, [r3, #12]
 800748a:	9202      	str	r2, [sp, #8]
 800748c:	689b      	ldr	r3, [r3, #8]
 800748e:	9302      	str	r3, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8007490:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007492:	9a02      	ldr	r2, [sp, #8]
      hi2s->State = HAL_I2S_STATE_READY;
 8007494:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007498:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800749a:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 800749e:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80074a0:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80074a2:	f7ff ffbf 	bl	8007424 <HAL_I2S_ErrorCallback>
 80074a6:	e7c9      	b.n	800743c <I2S_IRQHandler+0x14>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80074a8:	9b01      	ldr	r3, [sp, #4]
 80074aa:	079b      	lsls	r3, r3, #30
 80074ac:	d50f      	bpl.n	80074ce <I2S_IRQHandler+0xa6>
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	685a      	ldr	r2, [r3, #4]
 80074b2:	0610      	lsls	r0, r2, #24
 80074b4:	d50b      	bpl.n	80074ce <I2S_IRQHandler+0xa6>
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80074b6:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80074b8:	f831 2b02 	ldrh.w	r2, [r1], #2
 80074bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80074be:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
  hi2s->pTxBuffPtr++;
 80074c0:	6261      	str	r1, [r4, #36]	; 0x24
  hi2s->TxXferCount--;
 80074c2:	3a01      	subs	r2, #1
 80074c4:	b292      	uxth	r2, r2
 80074c6:	8562      	strh	r2, [r4, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 80074c8:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80074ca:	b292      	uxth	r2, r2
 80074cc:	b322      	cbz	r2, 8007518 <I2S_IRQHandler+0xf0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80074ce:	9b01      	ldr	r3, [sp, #4]
 80074d0:	0719      	lsls	r1, r3, #28
 80074d2:	d5b7      	bpl.n	8007444 <I2S_IRQHandler+0x1c>
 80074d4:	6823      	ldr	r3, [r4, #0]
 80074d6:	685a      	ldr	r2, [r3, #4]
 80074d8:	0692      	lsls	r2, r2, #26
 80074da:	d5b3      	bpl.n	8007444 <I2S_IRQHandler+0x1c>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074dc:	685a      	ldr	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80074de:	2100      	movs	r1, #0
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80074e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80074e4:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80074e6:	9103      	str	r1, [sp, #12]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	9303      	str	r3, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80074ec:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80074ee:	9a03      	ldr	r2, [sp, #12]
      hi2s->State = HAL_I2S_STATE_READY;
 80074f0:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074f4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80074f6:	f043 0304 	orr.w	r3, r3, #4
      HAL_I2S_ErrorCallback(hi2s);
 80074fa:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80074fc:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80074fe:	f7ff ff91 	bl	8007424 <HAL_I2S_ErrorCallback>
}
 8007502:	e79f      	b.n	8007444 <I2S_IRQHandler+0x1c>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007504:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 8007506:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007508:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800750c:	605a      	str	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800750e:	f880 1041 	strb.w	r1, [r0, #65]	; 0x41
    HAL_I2S_RxCpltCallback(hi2s);
 8007512:	f7ff ff85 	bl	8007420 <HAL_I2S_RxCpltCallback>
 8007516:	e7aa      	b.n	800746e <I2S_IRQHandler+0x46>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007518:	685a      	ldr	r2, [r3, #4]
    hi2s->State = HAL_I2S_STATE_READY;
 800751a:	2101      	movs	r1, #1
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800751c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8007520:	605a      	str	r2, [r3, #4]
    HAL_I2S_TxCpltCallback(hi2s);
 8007522:	4620      	mov	r0, r4
    hi2s->State = HAL_I2S_STATE_READY;
 8007524:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
    HAL_I2S_TxCpltCallback(hi2s);
 8007528:	f7ff ff66 	bl	80073f8 <HAL_I2S_TxCpltCallback>
 800752c:	e7cf      	b.n	80074ce <I2S_IRQHandler+0xa6>
 800752e:	bf00      	nop

08007530 <I2S_DMAError>:
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007530:	6b80      	ldr	r0, [r0, #56]	; 0x38
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007532:	6801      	ldr	r1, [r0, #0]
{
 8007534:	b508      	push	{r3, lr}
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8007536:	684b      	ldr	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8007538:	2200      	movs	r2, #0
  hi2s->State = HAL_I2S_STATE_READY;
 800753a:	f04f 0c01 	mov.w	ip, #1
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800753e:	f023 0303 	bic.w	r3, r3, #3
 8007542:	604b      	str	r3, [r1, #4]
  hi2s->TxXferCount = 0U;
 8007544:	8542      	strh	r2, [r0, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8007546:	8642      	strh	r2, [r0, #50]	; 0x32
  hi2s->State = HAL_I2S_STATE_READY;
 8007548:	f880 c041 	strb.w	ip, [r0, #65]	; 0x41
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800754c:	6c43      	ldr	r3, [r0, #68]	; 0x44
 800754e:	f043 0308 	orr.w	r3, r3, #8
 8007552:	6443      	str	r3, [r0, #68]	; 0x44
  HAL_I2S_ErrorCallback(hi2s);
 8007554:	f7ff ff66 	bl	8007424 <HAL_I2S_ErrorCallback>
}
 8007558:	bd08      	pop	{r3, pc}
 800755a:	bf00      	nop

0800755c <HAL_I2SEx_TxRxCpltCallback>:
 800755c:	4770      	bx	lr
 800755e:	bf00      	nop

08007560 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8007560:	b510      	push	{r4, lr}
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007562:	6802      	ldr	r2, [r0, #0]
{
 8007564:	b086      	sub	sp, #24
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8007566:	6893      	ldr	r3, [r2, #8]
 8007568:	9300      	str	r3, [sp, #0]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800756a:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800756e:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007572:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8007576:	f2c4 0300 	movt	r3, #16384	; 0x4000
 800757a:	428a      	cmp	r2, r1
 800757c:	bf18      	it	ne
 800757e:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
{
 8007582:	4604      	mov	r4, r0
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8007584:	6899      	ldr	r1, [r3, #8]
 8007586:	9101      	str	r1, [sp, #4]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8007588:	6851      	ldr	r1, [r2, #4]
 800758a:	9102      	str	r1, [sp, #8]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800758c:	6859      	ldr	r1, [r3, #4]
 800758e:	9103      	str	r1, [sp, #12]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8007590:	6841      	ldr	r1, [r0, #4]
 8007592:	f431 7100 	bics.w	r1, r1, #512	; 0x200
 8007596:	f000 8087 	beq.w	80076a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x148>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800759a:	9a01      	ldr	r2, [sp, #4]
 800759c:	0792      	lsls	r2, r2, #30
 800759e:	d51a      	bpl.n	80075d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
 80075a0:	9a03      	ldr	r2, [sp, #12]
 80075a2:	0611      	lsls	r1, r2, #24
 80075a4:	d517      	bpl.n	80075d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80075a6:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80075a8:	1c91      	adds	r1, r2, #2
 80075aa:	8812      	ldrh	r2, [r2, #0]
 80075ac:	6241      	str	r1, [r0, #36]	; 0x24
 80075ae:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80075b0:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80075b2:	3a01      	subs	r2, #1
 80075b4:	b292      	uxth	r2, r2
 80075b6:	8542      	strh	r2, [r0, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80075b8:	8d42      	ldrh	r2, [r0, #42]	; 0x2a
 80075ba:	b292      	uxth	r2, r2
 80075bc:	b95a      	cbnz	r2, 80075d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80075be:	685a      	ldr	r2, [r3, #4]
 80075c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80075c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80075c6:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 80075c8:	b29b      	uxth	r3, r3
 80075ca:	b923      	cbnz	r3, 80075d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x76>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80075cc:	2301      	movs	r3, #1
 80075ce:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80075d2:	f7ff ffc3 	bl	800755c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80075d6:	9b00      	ldr	r3, [sp, #0]
 80075d8:	07da      	lsls	r2, r3, #31
 80075da:	d51c      	bpl.n	8007616 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
 80075dc:	9b02      	ldr	r3, [sp, #8]
 80075de:	065b      	lsls	r3, r3, #25
 80075e0:	d519      	bpl.n	8007616 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80075e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80075e4:	6822      	ldr	r2, [r4, #0]
 80075e6:	1c98      	adds	r0, r3, #2
 80075e8:	68d1      	ldr	r1, [r2, #12]
 80075ea:	62e0      	str	r0, [r4, #44]	; 0x2c
 80075ec:	8019      	strh	r1, [r3, #0]
  hi2s->RxXferCount--;
 80075ee:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80075f0:	3b01      	subs	r3, #1
 80075f2:	b29b      	uxth	r3, r3
 80075f4:	8663      	strh	r3, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80075f6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	b963      	cbnz	r3, 8007616 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80075fc:	6853      	ldr	r3, [r2, #4]
 80075fe:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 8007602:	6053      	str	r3, [r2, #4]

    if (hi2s->TxXferCount == 0U)
 8007604:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8007606:	b29b      	uxth	r3, r3
 8007608:	b92b      	cbnz	r3, 8007616 <HAL_I2SEx_FullDuplex_IRQHandler+0xb6>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800760a:	2301      	movs	r3, #1
 800760c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8007610:	4620      	mov	r0, r4
 8007612:	f7ff ffa3 	bl	800755c <HAL_I2SEx_TxRxCpltCallback>
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007616:	9b00      	ldr	r3, [sp, #0]
 8007618:	0658      	lsls	r0, r3, #25
 800761a:	d521      	bpl.n	8007660 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
 800761c:	9b02      	ldr	r3, [sp, #8]
 800761e:	0699      	lsls	r1, r3, #26
 8007620:	d51e      	bpl.n	8007660 <HAL_I2SEx_FullDuplex_IRQHandler+0x100>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007622:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007624:	f44f 5060 	mov.w	r0, #14336	; 0x3800
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007628:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800762a:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800762e:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8007632:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007636:	4282      	cmp	r2, r0
 8007638:	bf18      	it	ne
 800763a:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800763e:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 8007642:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007644:	685a      	ldr	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 8007646:	2101      	movs	r1, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007648:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800764c:	605a      	str	r2, [r3, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800764e:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007652:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8007654:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8007658:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800765a:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 800765c:	f7ff fee2 	bl	8007424 <HAL_I2S_ErrorCallback>
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8007660:	9b01      	ldr	r3, [sp, #4]
 8007662:	071a      	lsls	r2, r3, #28
 8007664:	f140 8085 	bpl.w	8007772 <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
 8007668:	9b03      	ldr	r3, [sp, #12]
 800766a:	069b      	lsls	r3, r3, #26
 800766c:	f140 8081 	bpl.w	8007772 <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007670:	6822      	ldr	r2, [r4, #0]
 8007672:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007676:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 800767a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800767e:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007682:	428a      	cmp	r2, r1
 8007684:	bf18      	it	ne
 8007686:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      hi2s->State = HAL_I2S_STATE_READY;
 800768a:	f04f 0c01 	mov.w	ip, #1
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800768e:	6859      	ldr	r1, [r3, #4]
 8007690:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8007694:	6059      	str	r1, [r3, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007696:	6853      	ldr	r3, [r2, #4]
 8007698:	f023 0360 	bic.w	r3, r3, #96	; 0x60
 800769c:	6053      	str	r3, [r2, #4]
      hi2s->State = HAL_I2S_STATE_READY;
 800769e:	f884 c041 	strb.w	ip, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80076a2:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 80076a4:	4620      	mov	r0, r4
 80076a6:	e05c      	b.n	8007762 <HAL_I2SEx_FullDuplex_IRQHandler+0x202>
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80076a8:	9b00      	ldr	r3, [sp, #0]
 80076aa:	0799      	lsls	r1, r3, #30
 80076ac:	d502      	bpl.n	80076b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
 80076ae:	9b02      	ldr	r3, [sp, #8]
 80076b0:	061b      	lsls	r3, r3, #24
 80076b2:	d460      	bmi.n	8007776 <HAL_I2SEx_FullDuplex_IRQHandler+0x216>
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80076b4:	9b01      	ldr	r3, [sp, #4]
 80076b6:	07d8      	lsls	r0, r3, #31
 80076b8:	d502      	bpl.n	80076c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
 80076ba:	9b03      	ldr	r3, [sp, #12]
 80076bc:	0659      	lsls	r1, r3, #25
 80076be:	d475      	bmi.n	80077ac <HAL_I2SEx_FullDuplex_IRQHandler+0x24c>
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80076c0:	9b01      	ldr	r3, [sp, #4]
 80076c2:	065a      	lsls	r2, r3, #25
 80076c4:	d528      	bpl.n	8007718 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b8>
 80076c6:	9b03      	ldr	r3, [sp, #12]
 80076c8:	069b      	lsls	r3, r3, #26
 80076ca:	d525      	bpl.n	8007718 <HAL_I2SEx_FullDuplex_IRQHandler+0x1b8>
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80076d2:	f44f 5250 	mov.w	r2, #13312	; 0x3400
 80076d6:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80076da:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80076de:	428b      	cmp	r3, r1
 80076e0:	bf18      	it	ne
 80076e2:	f04f 2240 	movne.w	r2, #1073758208	; 0x40004000
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80076e6:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80076e8:	6851      	ldr	r1, [r2, #4]
 80076ea:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 80076ee:	6051      	str	r1, [r2, #4]
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80076f0:	685a      	ldr	r2, [r3, #4]
 80076f2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80076f6:	605a      	str	r2, [r3, #4]
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80076f8:	9004      	str	r0, [sp, #16]
 80076fa:	68da      	ldr	r2, [r3, #12]
 80076fc:	9204      	str	r2, [sp, #16]
 80076fe:	689b      	ldr	r3, [r3, #8]
 8007700:	9304      	str	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8007702:	2101      	movs	r1, #1
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8007704:	9b04      	ldr	r3, [sp, #16]
      hi2s->State = HAL_I2S_STATE_READY;
 8007706:	f884 1041 	strb.w	r1, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800770a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800770c:	f043 0302 	orr.w	r3, r3, #2
      HAL_I2S_ErrorCallback(hi2s);
 8007710:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8007712:	6463      	str	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007714:	f7ff fe86 	bl	8007424 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8007718:	9b00      	ldr	r3, [sp, #0]
 800771a:	0718      	lsls	r0, r3, #28
 800771c:	d529      	bpl.n	8007772 <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
 800771e:	9b02      	ldr	r3, [sp, #8]
 8007720:	0699      	lsls	r1, r3, #26
 8007722:	d526      	bpl.n	8007772 <HAL_I2SEx_FullDuplex_IRQHandler+0x212>
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007724:	6822      	ldr	r2, [r4, #0]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007726:	f44f 5060 	mov.w	r0, #14336	; 0x3800
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800772a:	6851      	ldr	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800772c:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 8007730:	f2c4 0000 	movt	r0, #16384	; 0x4000
 8007734:	f2c4 0300 	movt	r3, #16384	; 0x4000
 8007738:	4282      	cmp	r2, r0
 800773a:	bf18      	it	ne
 800773c:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007740:	f021 01a0 	bic.w	r1, r1, #160	; 0xa0
 8007744:	6051      	str	r1, [r2, #4]
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8007746:	6859      	ldr	r1, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007748:	2000      	movs	r0, #0
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800774a:	f021 0160 	bic.w	r1, r1, #96	; 0x60
 800774e:	6059      	str	r1, [r3, #4]
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007750:	9005      	str	r0, [sp, #20]
 8007752:	6893      	ldr	r3, [r2, #8]
 8007754:	9305      	str	r3, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 8007756:	2301      	movs	r3, #1
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8007758:	9a05      	ldr	r2, [sp, #20]
      hi2s->State = HAL_I2S_STATE_READY;
 800775a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800775e:	6c63      	ldr	r3, [r4, #68]	; 0x44
      HAL_I2S_ErrorCallback(hi2s);
 8007760:	4620      	mov	r0, r4
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8007762:	f043 0304 	orr.w	r3, r3, #4
 8007766:	6463      	str	r3, [r4, #68]	; 0x44
}
 8007768:	b006      	add	sp, #24
 800776a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_I2S_ErrorCallback(hi2s);
 800776e:	f7ff be59 	b.w	8007424 <HAL_I2S_ErrorCallback>
}
 8007772:	b006      	add	sp, #24
 8007774:	bd10      	pop	{r4, pc}
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8007776:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007778:	1c99      	adds	r1, r3, #2
 800777a:	881b      	ldrh	r3, [r3, #0]
 800777c:	6241      	str	r1, [r0, #36]	; 0x24
 800777e:	60d3      	str	r3, [r2, #12]
  hi2s->TxXferCount--;
 8007780:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 8007782:	3b01      	subs	r3, #1
 8007784:	b29b      	uxth	r3, r3
 8007786:	8543      	strh	r3, [r0, #42]	; 0x2a
  if (hi2s->TxXferCount == 0U)
 8007788:	8d43      	ldrh	r3, [r0, #42]	; 0x2a
 800778a:	b29b      	uxth	r3, r3
 800778c:	2b00      	cmp	r3, #0
 800778e:	d191      	bne.n	80076b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8007790:	6853      	ldr	r3, [r2, #4]
 8007792:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007796:	6053      	str	r3, [r2, #4]
    if (hi2s->RxXferCount == 0U)
 8007798:	8e43      	ldrh	r3, [r0, #50]	; 0x32
 800779a:	b29b      	uxth	r3, r3
 800779c:	2b00      	cmp	r3, #0
 800779e:	d189      	bne.n	80076b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
      hi2s->State = HAL_I2S_STATE_READY;
 80077a0:	2301      	movs	r3, #1
 80077a2:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077a6:	f7ff fed9 	bl	800755c <HAL_I2SEx_TxRxCpltCallback>
 80077aa:	e783      	b.n	80076b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x154>
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80077ac:	6820      	ldr	r0, [r4, #0]
 80077ae:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80077b0:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 80077b4:	f44f 5350 	mov.w	r3, #13312	; 0x3400
 80077b8:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80077bc:	f2c4 0300 	movt	r3, #16384	; 0x4000
 80077c0:	4288      	cmp	r0, r1
 80077c2:	bf18      	it	ne
 80077c4:	f04f 2340 	movne.w	r3, #1073758208	; 0x40004000
 80077c8:	1c90      	adds	r0, r2, #2
 80077ca:	68d9      	ldr	r1, [r3, #12]
 80077cc:	62e0      	str	r0, [r4, #44]	; 0x2c
 80077ce:	8011      	strh	r1, [r2, #0]
  hi2s->RxXferCount--;
 80077d0:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80077d2:	3a01      	subs	r2, #1
 80077d4:	b292      	uxth	r2, r2
 80077d6:	8662      	strh	r2, [r4, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80077d8:	8e62      	ldrh	r2, [r4, #50]	; 0x32
 80077da:	b292      	uxth	r2, r2
 80077dc:	2a00      	cmp	r2, #0
 80077de:	f47f af6f 	bne.w	80076c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80077e2:	685a      	ldr	r2, [r3, #4]
 80077e4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80077e8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80077ea:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	f47f af66 	bne.w	80076c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80077f4:	2301      	movs	r3, #1
 80077f6:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80077fa:	4620      	mov	r0, r4
 80077fc:	f7ff feae 	bl	800755c <HAL_I2SEx_TxRxCpltCallback>
 8007800:	e75e      	b.n	80076c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x160>
 8007802:	bf00      	nop

08007804 <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007804:	2800      	cmp	r0, #0
 8007806:	f000 81e3 	beq.w	8007bd0 <HAL_RCC_OscConfig+0x3cc>
{
 800780a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800780e:	6803      	ldr	r3, [r0, #0]
 8007810:	07dd      	lsls	r5, r3, #31
{
 8007812:	b082      	sub	sp, #8
 8007814:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007816:	d535      	bpl.n	8007884 <HAL_RCC_OscConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007818:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 800781c:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8007820:	688a      	ldr	r2, [r1, #8]
 8007822:	f002 020c 	and.w	r2, r2, #12
 8007826:	2a04      	cmp	r2, #4
 8007828:	f000 8115 	beq.w	8007a56 <HAL_RCC_OscConfig+0x252>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800782c:	688a      	ldr	r2, [r1, #8]
 800782e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007832:	2a08      	cmp	r2, #8
 8007834:	f000 810b 	beq.w	8007a4e <HAL_RCC_OscConfig+0x24a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007838:	6863      	ldr	r3, [r4, #4]
 800783a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800783e:	f000 8117 	beq.w	8007a70 <HAL_RCC_OscConfig+0x26c>
 8007842:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007846:	f000 81ad 	beq.w	8007ba4 <HAL_RCC_OscConfig+0x3a0>
 800784a:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 800784e:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8007852:	682a      	ldr	r2, [r5, #0]
 8007854:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8007858:	602a      	str	r2, [r5, #0]
 800785a:	682a      	ldr	r2, [r5, #0]
 800785c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007860:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007862:	2b00      	cmp	r3, #0
 8007864:	f040 810c 	bne.w	8007a80 <HAL_RCC_OscConfig+0x27c>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007868:	f7fd ff1e 	bl	80056a8 <HAL_GetTick>
 800786c:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800786e:	e005      	b.n	800787c <HAL_RCC_OscConfig+0x78>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007870:	f7fd ff1a 	bl	80056a8 <HAL_GetTick>
 8007874:	1b80      	subs	r0, r0, r6
 8007876:	2864      	cmp	r0, #100	; 0x64
 8007878:	f200 8132 	bhi.w	8007ae0 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	039b      	lsls	r3, r3, #14
 8007880:	d4f6      	bmi.n	8007870 <HAL_RCC_OscConfig+0x6c>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007882:	6823      	ldr	r3, [r4, #0]
 8007884:	079f      	lsls	r7, r3, #30
 8007886:	d530      	bpl.n	80078ea <HAL_RCC_OscConfig+0xe6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007888:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800788c:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007890:	6891      	ldr	r1, [r2, #8]
 8007892:	f011 0f0c 	tst.w	r1, #12
 8007896:	f000 80aa 	beq.w	80079ee <HAL_RCC_OscConfig+0x1ea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800789a:	6891      	ldr	r1, [r2, #8]
 800789c:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078a0:	2908      	cmp	r1, #8
 80078a2:	f000 80a0 	beq.w	80079e6 <HAL_RCC_OscConfig+0x1e2>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078a6:	68e3      	ldr	r3, [r4, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 813b 	beq.w	8007b24 <HAL_RCC_OscConfig+0x320>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078ae:	2300      	movs	r3, #0
 80078b0:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80078b4:	2201      	movs	r2, #1
 80078b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078b8:	f7fd fef6 	bl	80056a8 <HAL_GetTick>

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078bc:	f44f 5560 	mov.w	r5, #14336	; 0x3800
        tickstart = HAL_GetTick();
 80078c0:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c2:	f2c4 0502 	movt	r5, #16386	; 0x4002
 80078c6:	e005      	b.n	80078d4 <HAL_RCC_OscConfig+0xd0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078c8:	f7fd feee 	bl	80056a8 <HAL_GetTick>
 80078cc:	1b80      	subs	r0, r0, r6
 80078ce:	2802      	cmp	r0, #2
 80078d0:	f200 8106 	bhi.w	8007ae0 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d4:	682b      	ldr	r3, [r5, #0]
 80078d6:	0798      	lsls	r0, r3, #30
 80078d8:	d5f6      	bpl.n	80078c8 <HAL_RCC_OscConfig+0xc4>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078da:	682b      	ldr	r3, [r5, #0]
 80078dc:	6922      	ldr	r2, [r4, #16]
 80078de:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80078e2:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80078e6:	602b      	str	r3, [r5, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80078e8:	6823      	ldr	r3, [r4, #0]
 80078ea:	071a      	lsls	r2, r3, #28
 80078ec:	d460      	bmi.n	80079b0 <HAL_RCC_OscConfig+0x1ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078ee:	0758      	lsls	r0, r3, #29
 80078f0:	d539      	bpl.n	8007966 <HAL_RCC_OscConfig+0x162>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078f2:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80078f6:	f2c4 0302 	movt	r3, #16386	; 0x4002
 80078fa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80078fc:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 8007900:	f000 8099 	beq.w	8007a36 <HAL_RCC_OscConfig+0x232>
    FlagStatus       pwrclkchanged = RESET;
 8007904:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007906:	f44f 46e0 	mov.w	r6, #28672	; 0x7000
 800790a:	f2c4 0600 	movt	r6, #16384	; 0x4000
 800790e:	6833      	ldr	r3, [r6, #0]
 8007910:	05d9      	lsls	r1, r3, #23
 8007912:	f140 80d5 	bpl.w	8007ac0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007916:	68a3      	ldr	r3, [r4, #8]
 8007918:	2b01      	cmp	r3, #1
 800791a:	f000 80e5 	beq.w	8007ae8 <HAL_RCC_OscConfig+0x2e4>
 800791e:	2b05      	cmp	r3, #5
 8007920:	f000 8158 	beq.w	8007bd4 <HAL_RCC_OscConfig+0x3d0>
 8007924:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 8007928:	f2c4 0602 	movt	r6, #16386	; 0x4002
 800792c:	6f32      	ldr	r2, [r6, #112]	; 0x70
 800792e:	f022 0201 	bic.w	r2, r2, #1
 8007932:	6732      	str	r2, [r6, #112]	; 0x70
 8007934:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8007936:	f022 0204 	bic.w	r2, r2, #4
 800793a:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800793c:	2b00      	cmp	r3, #0
 800793e:	f040 80db 	bne.w	8007af8 <HAL_RCC_OscConfig+0x2f4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007942:	f7fd feb1 	bl	80056a8 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007946:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800794a:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800794c:	e005      	b.n	800795a <HAL_RCC_OscConfig+0x156>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800794e:	f7fd feab 	bl	80056a8 <HAL_GetTick>
 8007952:	1bc0      	subs	r0, r0, r7
 8007954:	4540      	cmp	r0, r8
 8007956:	f200 80c3 	bhi.w	8007ae0 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800795a:	6f33      	ldr	r3, [r6, #112]	; 0x70
 800795c:	0798      	lsls	r0, r3, #30
 800795e:	d4f6      	bmi.n	800794e <HAL_RCC_OscConfig+0x14a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007960:	2d00      	cmp	r5, #0
 8007962:	f040 812c 	bne.w	8007bbe <HAL_RCC_OscConfig+0x3ba>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007966:	69a0      	ldr	r0, [r4, #24]
 8007968:	b1f0      	cbz	r0, 80079a8 <HAL_RCC_OscConfig+0x1a4>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800796a:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 800796e:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8007972:	68ab      	ldr	r3, [r5, #8]
 8007974:	f003 030c 	and.w	r3, r3, #12
 8007978:	2b08      	cmp	r3, #8
 800797a:	f000 80e9 	beq.w	8007b50 <HAL_RCC_OscConfig+0x34c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800797e:	2300      	movs	r3, #0
 8007980:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8007984:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007986:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8007988:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800798a:	f000 8130 	beq.w	8007bee <HAL_RCC_OscConfig+0x3ea>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800798e:	f7fd fe8b 	bl	80056a8 <HAL_GetTick>
 8007992:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007994:	e005      	b.n	80079a2 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007996:	f7fd fe87 	bl	80056a8 <HAL_GetTick>
 800799a:	1b00      	subs	r0, r0, r4
 800799c:	2802      	cmp	r0, #2
 800799e:	f200 809f 	bhi.w	8007ae0 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80079a2:	682b      	ldr	r3, [r5, #0]
 80079a4:	019b      	lsls	r3, r3, #6
 80079a6:	d4f6      	bmi.n	8007996 <HAL_RCC_OscConfig+0x192>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 80079a8:	2000      	movs	r0, #0
}
 80079aa:	b002      	add	sp, #8
 80079ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	b353      	cbz	r3, 8007a0a <HAL_RCC_OscConfig+0x206>
      __HAL_RCC_LSI_ENABLE();
 80079b4:	2300      	movs	r3, #0
 80079b6:	f2c4 2347 	movt	r3, #16967	; 0x4247
 80079ba:	2201      	movs	r2, #1
 80079bc:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 80079c0:	f7fd fe72 	bl	80056a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079c4:	f44f 5660 	mov.w	r6, #14336	; 0x3800
      tickstart = HAL_GetTick();
 80079c8:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ca:	f2c4 0602 	movt	r6, #16386	; 0x4002
 80079ce:	e005      	b.n	80079dc <HAL_RCC_OscConfig+0x1d8>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079d0:	f7fd fe6a 	bl	80056a8 <HAL_GetTick>
 80079d4:	1b40      	subs	r0, r0, r5
 80079d6:	2802      	cmp	r0, #2
 80079d8:	f200 8082 	bhi.w	8007ae0 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079dc:	6f73      	ldr	r3, [r6, #116]	; 0x74
 80079de:	079b      	lsls	r3, r3, #30
 80079e0:	d5f6      	bpl.n	80079d0 <HAL_RCC_OscConfig+0x1cc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079e2:	6823      	ldr	r3, [r4, #0]
 80079e4:	e783      	b.n	80078ee <HAL_RCC_OscConfig+0xea>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80079e6:	6852      	ldr	r2, [r2, #4]
 80079e8:	0256      	lsls	r6, r2, #9
 80079ea:	f53f af5c 	bmi.w	80078a6 <HAL_RCC_OscConfig+0xa2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079ee:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80079f2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 80079f6:	6812      	ldr	r2, [r2, #0]
 80079f8:	0795      	lsls	r5, r2, #30
 80079fa:	d552      	bpl.n	8007aa2 <HAL_RCC_OscConfig+0x29e>
 80079fc:	68e2      	ldr	r2, [r4, #12]
 80079fe:	2a01      	cmp	r2, #1
 8007a00:	d04f      	beq.n	8007aa2 <HAL_RCC_OscConfig+0x29e>
        return HAL_ERROR;
 8007a02:	2001      	movs	r0, #1
}
 8007a04:	b002      	add	sp, #8
 8007a06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8007a0a:	2200      	movs	r2, #0
 8007a0c:	f2c4 2247 	movt	r2, #16967	; 0x4247
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a10:	f44f 5660 	mov.w	r6, #14336	; 0x3800
      __HAL_RCC_LSI_DISABLE();
 8007a14:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8007a18:	f7fd fe46 	bl	80056a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a1c:	f2c4 0602 	movt	r6, #16386	; 0x4002
      tickstart = HAL_GetTick();
 8007a20:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a22:	e004      	b.n	8007a2e <HAL_RCC_OscConfig+0x22a>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007a24:	f7fd fe40 	bl	80056a8 <HAL_GetTick>
 8007a28:	1b40      	subs	r0, r0, r5
 8007a2a:	2802      	cmp	r0, #2
 8007a2c:	d858      	bhi.n	8007ae0 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a2e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8007a30:	079f      	lsls	r7, r3, #30
 8007a32:	d4f7      	bmi.n	8007a24 <HAL_RCC_OscConfig+0x220>
 8007a34:	e7d5      	b.n	80079e2 <HAL_RCC_OscConfig+0x1de>
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a36:	9201      	str	r2, [sp, #4]
 8007a38:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007a3a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007a3e:	641a      	str	r2, [r3, #64]	; 0x40
 8007a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a46:	9301      	str	r3, [sp, #4]
 8007a48:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8007a4a:	2501      	movs	r5, #1
 8007a4c:	e75b      	b.n	8007906 <HAL_RCC_OscConfig+0x102>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a4e:	684a      	ldr	r2, [r1, #4]
 8007a50:	0250      	lsls	r0, r2, #9
 8007a52:	f57f aef1 	bpl.w	8007838 <HAL_RCC_OscConfig+0x34>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a56:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007a5a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007a5e:	6812      	ldr	r2, [r2, #0]
 8007a60:	0391      	lsls	r1, r2, #14
 8007a62:	f57f af0f 	bpl.w	8007884 <HAL_RCC_OscConfig+0x80>
 8007a66:	6862      	ldr	r2, [r4, #4]
 8007a68:	2a00      	cmp	r2, #0
 8007a6a:	f47f af0b 	bne.w	8007884 <HAL_RCC_OscConfig+0x80>
 8007a6e:	e7c8      	b.n	8007a02 <HAL_RCC_OscConfig+0x1fe>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a70:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007a74:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007a78:	681a      	ldr	r2, [r3, #0]
 8007a7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007a7e:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8007a80:	f7fd fe12 	bl	80056a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a84:	f44f 5660 	mov.w	r6, #14336	; 0x3800
        tickstart = HAL_GetTick();
 8007a88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a8a:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8007a8e:	e004      	b.n	8007a9a <HAL_RCC_OscConfig+0x296>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007a90:	f7fd fe0a 	bl	80056a8 <HAL_GetTick>
 8007a94:	1b40      	subs	r0, r0, r5
 8007a96:	2864      	cmp	r0, #100	; 0x64
 8007a98:	d822      	bhi.n	8007ae0 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a9a:	6833      	ldr	r3, [r6, #0]
 8007a9c:	039a      	lsls	r2, r3, #14
 8007a9e:	d5f7      	bpl.n	8007a90 <HAL_RCC_OscConfig+0x28c>
 8007aa0:	e6ef      	b.n	8007882 <HAL_RCC_OscConfig+0x7e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007aa2:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007aa6:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8007aaa:	6920      	ldr	r0, [r4, #16]
 8007aac:	680a      	ldr	r2, [r1, #0]
 8007aae:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8007ab2:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8007ab6:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007ab8:	071a      	lsls	r2, r3, #28
 8007aba:	f57f af18 	bpl.w	80078ee <HAL_RCC_OscConfig+0xea>
 8007abe:	e777      	b.n	80079b0 <HAL_RCC_OscConfig+0x1ac>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007ac0:	6833      	ldr	r3, [r6, #0]
 8007ac2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007ac6:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8007ac8:	f7fd fdee 	bl	80056a8 <HAL_GetTick>
 8007acc:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ace:	6833      	ldr	r3, [r6, #0]
 8007ad0:	05da      	lsls	r2, r3, #23
 8007ad2:	f53f af20 	bmi.w	8007916 <HAL_RCC_OscConfig+0x112>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007ad6:	f7fd fde7 	bl	80056a8 <HAL_GetTick>
 8007ada:	1bc0      	subs	r0, r0, r7
 8007adc:	2802      	cmp	r0, #2
 8007ade:	d9f6      	bls.n	8007ace <HAL_RCC_OscConfig+0x2ca>
            return HAL_TIMEOUT;
 8007ae0:	2003      	movs	r0, #3
}
 8007ae2:	b002      	add	sp, #8
 8007ae4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007ae8:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007aec:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007af0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007af2:	f042 0201 	orr.w	r2, r2, #1
 8007af6:	671a      	str	r2, [r3, #112]	; 0x70
      tickstart = HAL_GetTick();
 8007af8:	f7fd fdd6 	bl	80056a8 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007afc:	f44f 5760 	mov.w	r7, #14336	; 0x3800
      tickstart = HAL_GetTick();
 8007b00:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b02:	f2c4 0702 	movt	r7, #16386	; 0x4002
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b06:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b0a:	e004      	b.n	8007b16 <HAL_RCC_OscConfig+0x312>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b0c:	f7fd fdcc 	bl	80056a8 <HAL_GetTick>
 8007b10:	1b80      	subs	r0, r0, r6
 8007b12:	4540      	cmp	r0, r8
 8007b14:	d8e4      	bhi.n	8007ae0 <HAL_RCC_OscConfig+0x2dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007b18:	079b      	lsls	r3, r3, #30
 8007b1a:	d5f7      	bpl.n	8007b0c <HAL_RCC_OscConfig+0x308>
    if(pwrclkchanged == SET)
 8007b1c:	2d00      	cmp	r5, #0
 8007b1e:	f43f af22 	beq.w	8007966 <HAL_RCC_OscConfig+0x162>
 8007b22:	e04c      	b.n	8007bbe <HAL_RCC_OscConfig+0x3ba>
        __HAL_RCC_HSI_DISABLE();
 8007b24:	2200      	movs	r2, #0
 8007b26:	f2c4 2247 	movt	r2, #16967	; 0x4247
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b2a:	f44f 5660 	mov.w	r6, #14336	; 0x3800
        __HAL_RCC_HSI_DISABLE();
 8007b2e:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8007b30:	f7fd fdba 	bl	80056a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b34:	f2c4 0602 	movt	r6, #16386	; 0x4002
        tickstart = HAL_GetTick();
 8007b38:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b3a:	e004      	b.n	8007b46 <HAL_RCC_OscConfig+0x342>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007b3c:	f7fd fdb4 	bl	80056a8 <HAL_GetTick>
 8007b40:	1b40      	subs	r0, r0, r5
 8007b42:	2802      	cmp	r0, #2
 8007b44:	d8cc      	bhi.n	8007ae0 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b46:	6833      	ldr	r3, [r6, #0]
 8007b48:	0799      	lsls	r1, r3, #30
 8007b4a:	d4f7      	bmi.n	8007b3c <HAL_RCC_OscConfig+0x338>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b4c:	6823      	ldr	r3, [r4, #0]
 8007b4e:	e6cc      	b.n	80078ea <HAL_RCC_OscConfig+0xe6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007b50:	2801      	cmp	r0, #1
 8007b52:	f43f af2a 	beq.w	80079aa <HAL_RCC_OscConfig+0x1a6>
        pll_config = RCC->PLLCFGR;
 8007b56:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b58:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b5a:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b5e:	4291      	cmp	r1, r2
 8007b60:	f47f af4f 	bne.w	8007a02 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b64:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b66:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b6a:	4291      	cmp	r1, r2
 8007b6c:	f47f af49 	bne.w	8007a02 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b70:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b72:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8007b76:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007b78:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8007b7c:	f47f af41 	bne.w	8007a02 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b80:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007b82:	0852      	lsrs	r2, r2, #1
 8007b84:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8007b88:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007b8a:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8007b8e:	f47f af38 	bne.w	8007a02 <HAL_RCC_OscConfig+0x1fe>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b92:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8007b94:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007b98:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8007b9c:	bf14      	ite	ne
 8007b9e:	2001      	movne	r0, #1
 8007ba0:	2000      	moveq	r0, #0
 8007ba2:	e702      	b.n	80079aa <HAL_RCC_OscConfig+0x1a6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ba4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007ba8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bac:	681a      	ldr	r2, [r3, #0]
 8007bae:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	681a      	ldr	r2, [r3, #0]
 8007bb6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8007bba:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007bbc:	e760      	b.n	8007a80 <HAL_RCC_OscConfig+0x27c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8007bbe:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bc2:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bc8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8007bcc:	641a      	str	r2, [r3, #64]	; 0x40
 8007bce:	e6ca      	b.n	8007966 <HAL_RCC_OscConfig+0x162>
    return HAL_ERROR;
 8007bd0:	2001      	movs	r0, #1
}
 8007bd2:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007bd4:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007bd8:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007bdc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007bde:	f042 0204 	orr.w	r2, r2, #4
 8007be2:	671a      	str	r2, [r3, #112]	; 0x70
 8007be4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007be6:	f042 0201 	orr.w	r2, r2, #1
 8007bea:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bec:	e784      	b.n	8007af8 <HAL_RCC_OscConfig+0x2f4>
        tickstart = HAL_GetTick();
 8007bee:	f7fd fd5b 	bl	80056a8 <HAL_GetTick>
 8007bf2:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007bf4:	e005      	b.n	8007c02 <HAL_RCC_OscConfig+0x3fe>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007bf6:	f7fd fd57 	bl	80056a8 <HAL_GetTick>
 8007bfa:	1b80      	subs	r0, r0, r6
 8007bfc:	2802      	cmp	r0, #2
 8007bfe:	f63f af6f 	bhi.w	8007ae0 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c02:	682b      	ldr	r3, [r5, #0]
 8007c04:	0199      	lsls	r1, r3, #6
 8007c06:	d4f6      	bmi.n	8007bf6 <HAL_RCC_OscConfig+0x3f2>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c08:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8007c0c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8007c0e:	430b      	orrs	r3, r1
 8007c10:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8007c14:	e9d4 200a 	ldrd	r2, r0, [r4, #40]	; 0x28
        __HAL_RCC_PLL_ENABLE();
 8007c18:	2100      	movs	r1, #0
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c1a:	0852      	lsrs	r2, r2, #1
 8007c1c:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8007c20:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8007c22:	f2c4 2147 	movt	r1, #16967	; 0x4247
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c26:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8007c2a:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007c2c:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8007c2e:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8007c30:	f7fd fd3a 	bl	80056a8 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c34:	f44f 5560 	mov.w	r5, #14336	; 0x3800
        tickstart = HAL_GetTick();
 8007c38:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c3a:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8007c3e:	e005      	b.n	8007c4c <HAL_RCC_OscConfig+0x448>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c40:	f7fd fd32 	bl	80056a8 <HAL_GetTick>
 8007c44:	1b00      	subs	r0, r0, r4
 8007c46:	2802      	cmp	r0, #2
 8007c48:	f63f af4a 	bhi.w	8007ae0 <HAL_RCC_OscConfig+0x2dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c4c:	682b      	ldr	r3, [r5, #0]
 8007c4e:	019a      	lsls	r2, r3, #6
 8007c50:	d5f6      	bpl.n	8007c40 <HAL_RCC_OscConfig+0x43c>
 8007c52:	e6a9      	b.n	80079a8 <HAL_RCC_OscConfig+0x1a4>

08007c54 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c54:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007c58:	f2c4 0102 	movt	r1, #16386	; 0x4002
{
 8007c5c:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007c5e:	688b      	ldr	r3, [r1, #8]
 8007c60:	f003 030c 	and.w	r3, r3, #12
 8007c64:	2b04      	cmp	r3, #4
 8007c66:	d024      	beq.n	8007cb2 <HAL_RCC_GetSysClockFreq+0x5e>
 8007c68:	2b08      	cmp	r3, #8
 8007c6a:	d11d      	bne.n	8007ca8 <HAL_RCC_GetSysClockFreq+0x54>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c6c:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c6e:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c70:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c72:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007c76:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007c7a:	d11f      	bne.n	8007cbc <HAL_RCC_GetSysClockFreq+0x68>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007c7c:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8007c80:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007c84:	f2c0 00f4 	movt	r0, #244	; 0xf4
 8007c88:	fba1 0100 	umull	r0, r1, r1, r0
 8007c8c:	f7f9 f80c 	bl	8000ca8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c90:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007c94:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8007ca2:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8007ca6:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8007ca8:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8007cac:	f2c0 00f4 	movt	r0, #244	; 0xf4
}
 8007cb0:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007cb2:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8007cb6:	f2c0 007a 	movt	r0, #122	; 0x7a
}
 8007cba:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007cbc:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8007cc0:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8007cc4:	f2c0 007a 	movt	r0, #122	; 0x7a
 8007cc8:	2300      	movs	r3, #0
 8007cca:	fba1 0100 	umull	r0, r1, r1, r0
 8007cce:	f7f8 ffeb 	bl	8000ca8 <__aeabi_uldivmod>
 8007cd2:	e7dd      	b.n	8007c90 <HAL_RCC_GetSysClockFreq+0x3c>

08007cd4 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8007cd4:	2800      	cmp	r0, #0
 8007cd6:	f000 80ae 	beq.w	8007e36 <HAL_RCC_ClockConfig+0x162>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cda:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8007cde:	f2c4 0302 	movt	r3, #16386	; 0x4002
{
 8007ce2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ce6:	681a      	ldr	r2, [r3, #0]
 8007ce8:	f002 0207 	and.w	r2, r2, #7
 8007cec:	428a      	cmp	r2, r1
 8007cee:	460d      	mov	r5, r1
 8007cf0:	4604      	mov	r4, r0
 8007cf2:	d209      	bcs.n	8007d08 <HAL_RCC_ClockConfig+0x34>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cf4:	b2ca      	uxtb	r2, r1
 8007cf6:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 0307 	and.w	r3, r3, #7
 8007cfe:	428b      	cmp	r3, r1
 8007d00:	d002      	beq.n	8007d08 <HAL_RCC_ClockConfig+0x34>
    return HAL_ERROR;
 8007d02:	2001      	movs	r0, #1
}
 8007d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007d08:	6823      	ldr	r3, [r4, #0]
 8007d0a:	0798      	lsls	r0, r3, #30
 8007d0c:	d51d      	bpl.n	8007d4a <HAL_RCC_ClockConfig+0x76>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d0e:	0759      	lsls	r1, r3, #29
 8007d10:	d507      	bpl.n	8007d22 <HAL_RCC_ClockConfig+0x4e>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d12:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007d16:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007d1a:	6891      	ldr	r1, [r2, #8]
 8007d1c:	f441 51e0 	orr.w	r1, r1, #7168	; 0x1c00
 8007d20:	6091      	str	r1, [r2, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d22:	071a      	lsls	r2, r3, #28
 8007d24:	d507      	bpl.n	8007d36 <HAL_RCC_ClockConfig+0x62>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d26:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007d2a:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007d2e:	6891      	ldr	r1, [r2, #8]
 8007d30:	f441 4160 	orr.w	r1, r1, #57344	; 0xe000
 8007d34:	6091      	str	r1, [r2, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d36:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007d3a:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8007d3e:	68a0      	ldr	r0, [r4, #8]
 8007d40:	688a      	ldr	r2, [r1, #8]
 8007d42:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8007d46:	4302      	orrs	r2, r0
 8007d48:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4a:	07df      	lsls	r7, r3, #31
 8007d4c:	d527      	bpl.n	8007d9e <HAL_RCC_ClockConfig+0xca>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d4e:	6862      	ldr	r2, [r4, #4]
 8007d50:	2a01      	cmp	r2, #1
 8007d52:	d072      	beq.n	8007e3a <HAL_RCC_ClockConfig+0x166>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d54:	1e93      	subs	r3, r2, #2
 8007d56:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d58:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007d5c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007d60:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d62:	d965      	bls.n	8007e30 <HAL_RCC_ClockConfig+0x15c>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d64:	0799      	lsls	r1, r3, #30
 8007d66:	d5cc      	bpl.n	8007d02 <HAL_RCC_ClockConfig+0x2e>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d68:	f44f 5660 	mov.w	r6, #14336	; 0x3800
 8007d6c:	f2c4 0602 	movt	r6, #16386	; 0x4002
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d70:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d74:	68b3      	ldr	r3, [r6, #8]
 8007d76:	f023 0303 	bic.w	r3, r3, #3
 8007d7a:	4313      	orrs	r3, r2
 8007d7c:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8007d7e:	f7fd fc93 	bl	80056a8 <HAL_GetTick>
 8007d82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d84:	e004      	b.n	8007d90 <HAL_RCC_ClockConfig+0xbc>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d86:	f7fd fc8f 	bl	80056a8 <HAL_GetTick>
 8007d8a:	1bc0      	subs	r0, r0, r7
 8007d8c:	4540      	cmp	r0, r8
 8007d8e:	d85c      	bhi.n	8007e4a <HAL_RCC_ClockConfig+0x176>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d90:	68b3      	ldr	r3, [r6, #8]
 8007d92:	6862      	ldr	r2, [r4, #4]
 8007d94:	f003 030c 	and.w	r3, r3, #12
 8007d98:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8007d9c:	d1f3      	bne.n	8007d86 <HAL_RCC_ClockConfig+0xb2>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d9e:	f44f 5270 	mov.w	r2, #15360	; 0x3c00
 8007da2:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007da6:	6813      	ldr	r3, [r2, #0]
 8007da8:	f003 0307 	and.w	r3, r3, #7
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	d906      	bls.n	8007dbe <HAL_RCC_ClockConfig+0xea>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007db0:	b2eb      	uxtb	r3, r5
 8007db2:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db4:	6813      	ldr	r3, [r2, #0]
 8007db6:	f003 0307 	and.w	r3, r3, #7
 8007dba:	42ab      	cmp	r3, r5
 8007dbc:	d1a1      	bne.n	8007d02 <HAL_RCC_ClockConfig+0x2e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dbe:	6823      	ldr	r3, [r4, #0]
 8007dc0:	075a      	lsls	r2, r3, #29
 8007dc2:	d509      	bpl.n	8007dd8 <HAL_RCC_ClockConfig+0x104>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007dc4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007dc8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8007dcc:	68e0      	ldr	r0, [r4, #12]
 8007dce:	688a      	ldr	r2, [r1, #8]
 8007dd0:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8007dd4:	4302      	orrs	r2, r0
 8007dd6:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dd8:	071b      	lsls	r3, r3, #28
 8007dda:	d50a      	bpl.n	8007df2 <HAL_RCC_ClockConfig+0x11e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007ddc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007de0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007de4:	6921      	ldr	r1, [r4, #16]
 8007de6:	6893      	ldr	r3, [r2, #8]
 8007de8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8007dec:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8007df0:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007df2:	f7ff ff2f 	bl	8007c54 <HAL_RCC_GetSysClockFreq>
 8007df6:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007dfa:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007dfe:	f24f 42fc 	movw	r2, #62716	; 0xf4fc
 8007e02:	689b      	ldr	r3, [r3, #8]
 8007e04:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007e08:	f3c3 1303 	ubfx	r3, r3, #4, #4
  HAL_InitTick (uwTickPrio);
 8007e0c:	f240 0170 	movw	r1, #112	; 0x70
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e10:	5cd2      	ldrb	r2, [r2, r3]
  HAL_InitTick (uwTickPrio);
 8007e12:	f2c2 0100 	movt	r1, #8192	; 0x2000
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e16:	f240 0368 	movw	r3, #104	; 0x68
 8007e1a:	f2c2 0300 	movt	r3, #8192	; 0x2000
 8007e1e:	fa20 f202 	lsr.w	r2, r0, r2
  HAL_InitTick (uwTickPrio);
 8007e22:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e24:	601a      	str	r2, [r3, #0]
  HAL_InitTick (uwTickPrio);
 8007e26:	f7fd fbed 	bl	8005604 <HAL_InitTick>
  return HAL_OK;
 8007e2a:	2000      	movs	r0, #0
}
 8007e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e30:	0198      	lsls	r0, r3, #6
 8007e32:	d499      	bmi.n	8007d68 <HAL_RCC_ClockConfig+0x94>
 8007e34:	e765      	b.n	8007d02 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8007e36:	2001      	movs	r0, #1
}
 8007e38:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e3a:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e3e:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	039e      	lsls	r6, r3, #14
 8007e46:	d48f      	bmi.n	8007d68 <HAL_RCC_ClockConfig+0x94>
 8007e48:	e75b      	b.n	8007d02 <HAL_RCC_ClockConfig+0x2e>
        return HAL_TIMEOUT;
 8007e4a:	2003      	movs	r0, #3
 8007e4c:	e75a      	b.n	8007d04 <HAL_RCC_ClockConfig+0x30>
 8007e4e:	bf00      	nop

08007e50 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e54:	f2c4 0302 	movt	r3, #16386	; 0x4002
  return SystemCoreClock;
 8007e58:	f240 0168 	movw	r1, #104	; 0x68
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e5c:	689b      	ldr	r3, [r3, #8]
 8007e5e:	f24f 520c 	movw	r2, #62732	; 0xf50c
  return SystemCoreClock;
 8007e62:	f2c2 0100 	movt	r1, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007e66:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007e6a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8007e6e:	6808      	ldr	r0, [r1, #0]
 8007e70:	5cd3      	ldrb	r3, [r2, r3]
}
 8007e72:	40d8      	lsrs	r0, r3
 8007e74:	4770      	bx	lr
 8007e76:	bf00      	nop

08007e78 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e78:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007e7c:	f2c4 0302 	movt	r3, #16386	; 0x4002
  return SystemCoreClock;
 8007e80:	f240 0168 	movw	r1, #104	; 0x68
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e84:	689b      	ldr	r3, [r3, #8]
 8007e86:	f24f 520c 	movw	r2, #62732	; 0xf50c
  return SystemCoreClock;
 8007e8a:	f2c2 0100 	movt	r1, #8192	; 0x2000
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007e8e:	f6c0 0200 	movt	r2, #2048	; 0x800
 8007e92:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8007e96:	6808      	ldr	r0, [r1, #0]
 8007e98:	5cd3      	ldrb	r3, [r2, r3]
}
 8007e9a:	40d8      	lsrs	r0, r3
 8007e9c:	4770      	bx	lr
 8007e9e:	bf00      	nop

08007ea0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007ea0:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007ea2:	6803      	ldr	r3, [r0, #0]
 8007ea4:	f013 0f05 	tst.w	r3, #5
{
 8007ea8:	b083      	sub	sp, #12
 8007eaa:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007eac:	d105      	bne.n	8007eba <HAL_RCCEx_PeriphCLKConfig+0x1a>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007eae:	f013 0302 	ands.w	r3, r3, #2
 8007eb2:	d145      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8007eb4:	4618      	mov	r0, r3
}
 8007eb6:	b003      	add	sp, #12
 8007eb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PLLI2S_DISABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	f2c4 2347 	movt	r3, #16967	; 0x4247
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	669a      	str	r2, [r3, #104]	; 0x68
    tickstart = HAL_GetTick();
 8007ec4:	f7fd fbf0 	bl	80056a8 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ec8:	f44f 5560 	mov.w	r5, #14336	; 0x3800
    tickstart = HAL_GetTick();
 8007ecc:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ece:	f2c4 0502 	movt	r5, #16386	; 0x4002
 8007ed2:	e004      	b.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x3e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007ed4:	f7fd fbe8 	bl	80056a8 <HAL_GetTick>
 8007ed8:	1b83      	subs	r3, r0, r6
 8007eda:	2b02      	cmp	r3, #2
 8007edc:	d82d      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007ede:	682b      	ldr	r3, [r5, #0]
 8007ee0:	011f      	lsls	r7, r3, #4
 8007ee2:	d4f7      	bmi.n	8007ed4 <HAL_RCCEx_PeriphCLKConfig+0x34>
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007ee4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    __HAL_RCC_PLLI2S_ENABLE();
 8007ee8:	2200      	movs	r2, #0
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007eea:	071b      	lsls	r3, r3, #28
 8007eec:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
    __HAL_RCC_PLLI2S_ENABLE();
 8007ef0:	f2c4 2247 	movt	r2, #16967	; 0x4247
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8007ef4:	f8c5 3084 	str.w	r3, [r5, #132]	; 0x84
    __HAL_RCC_PLLI2S_ENABLE();
 8007ef8:	2301      	movs	r3, #1
 8007efa:	6693      	str	r3, [r2, #104]	; 0x68
    tickstart = HAL_GetTick();
 8007efc:	f7fd fbd4 	bl	80056a8 <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f00:	f44f 5660 	mov.w	r6, #14336	; 0x3800
    tickstart = HAL_GetTick();
 8007f04:	4605      	mov	r5, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f06:	f2c4 0602 	movt	r6, #16386	; 0x4002
 8007f0a:	e004      	b.n	8007f16 <HAL_RCCEx_PeriphCLKConfig+0x76>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007f0c:	f7fd fbcc 	bl	80056a8 <HAL_GetTick>
 8007f10:	1b40      	subs	r0, r0, r5
 8007f12:	2802      	cmp	r0, #2
 8007f14:	d811      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007f16:	6833      	ldr	r3, [r6, #0]
 8007f18:	0118      	lsls	r0, r3, #4
 8007f1a:	d5f7      	bpl.n	8007f0c <HAL_RCCEx_PeriphCLKConfig+0x6c>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007f1c:	6823      	ldr	r3, [r4, #0]
 8007f1e:	e7c6      	b.n	8007eae <HAL_RCCEx_PeriphCLKConfig+0xe>
        tickstart = HAL_GetTick();
 8007f20:	f7fd fbc2 	bl	80056a8 <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f24:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8007f28:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007f2a:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007f2c:	079b      	lsls	r3, r3, #30
 8007f2e:	d447      	bmi.n	8007fc0 <HAL_RCCEx_PeriphCLKConfig+0x120>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007f30:	f7fd fbba 	bl	80056a8 <HAL_GetTick>
 8007f34:	1b80      	subs	r0, r0, r6
 8007f36:	42b8      	cmp	r0, r7
 8007f38:	d9f7      	bls.n	8007f2a <HAL_RCCEx_PeriphCLKConfig+0x8a>
        return HAL_TIMEOUT;
 8007f3a:	2003      	movs	r0, #3
}
 8007f3c:	b003      	add	sp, #12
 8007f3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f40:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8007f44:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8007f48:	2200      	movs	r2, #0
 8007f4a:	9201      	str	r2, [sp, #4]
 8007f4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f4e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007f52:	641a      	str	r2, [r3, #64]	; 0x40
 8007f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    PWR->CR |= PWR_CR_DBP;
 8007f56:	f44f 45e0 	mov.w	r5, #28672	; 0x7000
 8007f5a:	f2c4 0500 	movt	r5, #16384	; 0x4000
    __HAL_RCC_PWR_CLK_ENABLE();
 8007f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f62:	9301      	str	r3, [sp, #4]
 8007f64:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 8007f66:	682b      	ldr	r3, [r5, #0]
 8007f68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007f6c:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8007f6e:	f7fd fb9b 	bl	80056a8 <HAL_GetTick>
 8007f72:	4606      	mov	r6, r0
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f74:	e004      	b.n	8007f80 <HAL_RCCEx_PeriphCLKConfig+0xe0>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007f76:	f7fd fb97 	bl	80056a8 <HAL_GetTick>
 8007f7a:	1b83      	subs	r3, r0, r6
 8007f7c:	2b02      	cmp	r3, #2
 8007f7e:	d8dc      	bhi.n	8007f3a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007f80:	682b      	ldr	r3, [r5, #0]
 8007f82:	05d9      	lsls	r1, r3, #23
 8007f84:	d5f7      	bpl.n	8007f76 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f86:	f44f 5560 	mov.w	r5, #14336	; 0x3800
 8007f8a:	f2c4 0502 	movt	r5, #16386	; 0x4002
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f8e:	68e3      	ldr	r3, [r4, #12]
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007f90:	6f2a      	ldr	r2, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007f92:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 8007f96:	d014      	beq.n	8007fc2 <HAL_RCCEx_PeriphCLKConfig+0x122>
 8007f98:	f403 7140 	and.w	r1, r3, #768	; 0x300
 8007f9c:	4291      	cmp	r1, r2
 8007f9e:	d012      	beq.n	8007fc6 <HAL_RCCEx_PeriphCLKConfig+0x126>
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fa0:	2200      	movs	r2, #0
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fa2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8007fa4:	f2c4 2247 	movt	r2, #16967	; 0x4247
 8007fa8:	2101      	movs	r1, #1
 8007faa:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007fae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007fb2:	2100      	movs	r1, #0
 8007fb4:	f8c2 1e40 	str.w	r1, [r2, #3648]	; 0xe40
      RCC->BDCR = tmpreg1;
 8007fb8:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007fba:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8007fbc:	07da      	lsls	r2, r3, #31
 8007fbe:	d4af      	bmi.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x80>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fc0:	68e3      	ldr	r3, [r4, #12]
 8007fc2:	f403 7240 	and.w	r2, r3, #768	; 0x300
 8007fc6:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8007fca:	d013      	beq.n	8007ff4 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8007fcc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007fd0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007fd4:	6891      	ldr	r1, [r2, #8]
 8007fd6:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8007fda:	6091      	str	r1, [r2, #8]
 8007fdc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8007fe0:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8007fe4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007fe8:	6f11      	ldr	r1, [r2, #112]	; 0x70
  return HAL_OK;
 8007fea:	2000      	movs	r0, #0
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007fec:	430b      	orrs	r3, r1
 8007fee:	6713      	str	r3, [r2, #112]	; 0x70
}
 8007ff0:	b003      	add	sp, #12
 8007ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007ff4:	f44f 5160 	mov.w	r1, #14336	; 0x3800
 8007ff8:	f2c4 0102 	movt	r1, #16386	; 0x4002
 8007ffc:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 8008000:	688a      	ldr	r2, [r1, #8]
 8008002:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8008006:	f422 12f8 	bic.w	r2, r2, #2031616	; 0x1f0000
 800800a:	4302      	orrs	r2, r0
 800800c:	608a      	str	r2, [r1, #8]
 800800e:	e7e5      	b.n	8007fdc <HAL_RCCEx_PeriphCLKConfig+0x13c>

08008010 <HAL_RCCEx_GetPeriphCLKFreq>:
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
  uint32_t srcclk = 0U;
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
  switch (PeriphClk)
 8008010:	2801      	cmp	r0, #1
 8008012:	d001      	beq.n	8008018 <HAL_RCCEx_GetPeriphCLKFreq+0x8>
 8008014:	2000      	movs	r0, #0
      }
      break;
    }
  }
  return frequency;
}
 8008016:	4770      	bx	lr
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8008018:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800801c:	f2c4 0302 	movt	r3, #16386	; 0x4002
 8008020:	689a      	ldr	r2, [r3, #8]
      switch (srcclk)
 8008022:	0211      	lsls	r1, r2, #8
 8008024:	d4f6      	bmi.n	8008014 <HAL_RCCEx_GetPeriphCLKFreq+0x4>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008026:	685a      	ldr	r2, [r3, #4]
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008028:	685b      	ldr	r3, [r3, #4]
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800802a:	0252      	lsls	r2, r2, #9
 800802c:	d518      	bpl.n	8008060 <HAL_RCCEx_GetPeriphCLKFreq+0x50>
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800802e:	f44f 5090 	mov.w	r0, #4608	; 0x1200
 8008032:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008036:	f2c0 007a 	movt	r0, #122	; 0x7a
 800803a:	fbb0 f3f3 	udiv	r3, r0, r3
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800803e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8008042:	f2c4 0202 	movt	r2, #16386	; 0x4002
 8008046:	f8d2 0084 	ldr.w	r0, [r2, #132]	; 0x84
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800804a:	f8d2 2084 	ldr.w	r2, [r2, #132]	; 0x84
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800804e:	f3c0 1088 	ubfx	r0, r0, #6, #9
 8008052:	fb03 f000 	mul.w	r0, r3, r0
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008056:	f3c2 7302 	ubfx	r3, r2, #28, #3
 800805a:	fbb0 f0f3 	udiv	r0, r0, r3
          break;
 800805e:	4770      	bx	lr
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008060:	f44f 5010 	mov.w	r0, #9216	; 0x2400
 8008064:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008068:	f2c0 00f4 	movt	r0, #244	; 0xf4
 800806c:	fbb0 f3f3 	udiv	r3, r0, r3
 8008070:	e7e5      	b.n	800803e <HAL_RCCEx_GetPeriphCLKFreq+0x2e>
 8008072:	bf00      	nop

08008074 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008074:	2800      	cmp	r0, #0
 8008076:	f000 809e 	beq.w	80081b6 <HAL_TIM_Base_Init+0x142>
{
 800807a:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800807c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008080:	4604      	mov	r4, r0
 8008082:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8008086:	2b00      	cmp	r3, #0
 8008088:	f000 8090 	beq.w	80081ac <HAL_TIM_Base_Init+0x138>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800808c:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800808e:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_BUSY;
 8008090:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008092:	f2c4 0101 	movt	r1, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 8008096:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800809a:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 800809c:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800809e:	d071      	beq.n	8008184 <HAL_TIM_Base_Init+0x110>
 80080a0:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80080a4:	d045      	beq.n	8008132 <HAL_TIM_Base_Init+0xbe>
 80080a6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080aa:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80080ae:	428a      	cmp	r2, r1
 80080b0:	d03f      	beq.n	8008132 <HAL_TIM_Base_Init+0xbe>
 80080b2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80080b6:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80080ba:	428a      	cmp	r2, r1
 80080bc:	d039      	beq.n	8008132 <HAL_TIM_Base_Init+0xbe>
 80080be:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80080c2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80080c6:	428a      	cmp	r2, r1
 80080c8:	d033      	beq.n	8008132 <HAL_TIM_Base_Init+0xbe>
 80080ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80080ce:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80080d2:	428a      	cmp	r2, r1
 80080d4:	d056      	beq.n	8008184 <HAL_TIM_Base_Init+0x110>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80080da:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80080de:	428a      	cmp	r2, r1
 80080e0:	d02b      	beq.n	800813a <HAL_TIM_Base_Init+0xc6>
 80080e2:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80080e6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80080ea:	428a      	cmp	r2, r1
 80080ec:	d025      	beq.n	800813a <HAL_TIM_Base_Init+0xc6>
 80080ee:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80080f2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80080f6:	428a      	cmp	r2, r1
 80080f8:	d01f      	beq.n	800813a <HAL_TIM_Base_Init+0xc6>
 80080fa:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80080fe:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8008102:	428a      	cmp	r2, r1
 8008104:	d019      	beq.n	800813a <HAL_TIM_Base_Init+0xc6>
 8008106:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800810a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800810e:	428a      	cmp	r2, r1
 8008110:	d013      	beq.n	800813a <HAL_TIM_Base_Init+0xc6>
 8008112:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8008116:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800811a:	428a      	cmp	r2, r1
 800811c:	d00d      	beq.n	800813a <HAL_TIM_Base_Init+0xc6>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800811e:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008120:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008122:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008126:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8008128:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800812a:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800812c:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800812e:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008130:	e010      	b.n	8008154 <HAL_TIM_Base_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 8008132:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008138:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800813a:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800813c:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800813e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008142:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008144:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008148:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800814a:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 800814c:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800814e:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008150:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008152:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008154:	2301      	movs	r3, #1
 8008156:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008158:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800815c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008160:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008164:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8008168:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800816c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008170:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008174:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8008178:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 800817c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008180:	2000      	movs	r0, #0
}
 8008182:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008184:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008186:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008188:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800818c:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 800818e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008192:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008194:	69a1      	ldr	r1, [r4, #24]
 8008196:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800819a:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 800819c:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800819e:	68e3      	ldr	r3, [r4, #12]
 80081a0:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 80081a2:	6863      	ldr	r3, [r4, #4]
 80081a4:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 80081a6:	6963      	ldr	r3, [r4, #20]
 80081a8:	6313      	str	r3, [r2, #48]	; 0x30
 80081aa:	e7d3      	b.n	8008154 <HAL_TIM_Base_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 80081ac:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80081b0:	f7fc f8c0 	bl	8004334 <HAL_TIM_Base_MspInit>
 80081b4:	e76a      	b.n	800808c <HAL_TIM_Base_Init+0x18>
    return HAL_ERROR;
 80081b6:	2001      	movs	r0, #1
}
 80081b8:	4770      	bx	lr
 80081ba:	bf00      	nop

080081bc <HAL_TIM_Base_Start>:
  if (htim->State != HAL_TIM_STATE_READY)
 80081bc:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80081c0:	2b01      	cmp	r3, #1
 80081c2:	d13a      	bne.n	800823a <HAL_TIM_Base_Start+0x7e>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081c4:	6803      	ldr	r3, [r0, #0]
 80081c6:	2200      	movs	r2, #0
 80081c8:	f2c4 0201 	movt	r2, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 80081cc:	2102      	movs	r1, #2
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081ce:	4293      	cmp	r3, r2
  htim->State = HAL_TIM_STATE_BUSY;
 80081d0:	f880 103d 	strb.w	r1, [r0, #61]	; 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80081d4:	d026      	beq.n	8008224 <HAL_TIM_Base_Start+0x68>
 80081d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081da:	d023      	beq.n	8008224 <HAL_TIM_Base_Start+0x68>
 80081dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80081e0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80081e4:	4293      	cmp	r3, r2
 80081e6:	d01d      	beq.n	8008224 <HAL_TIM_Base_Start+0x68>
 80081e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80081ec:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80081f0:	4293      	cmp	r3, r2
 80081f2:	d017      	beq.n	8008224 <HAL_TIM_Base_Start+0x68>
 80081f4:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 80081f8:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d011      	beq.n	8008224 <HAL_TIM_Base_Start+0x68>
 8008200:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008204:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008208:	4293      	cmp	r3, r2
 800820a:	d00b      	beq.n	8008224 <HAL_TIM_Base_Start+0x68>
 800820c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008210:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008214:	4293      	cmp	r3, r2
 8008216:	d005      	beq.n	8008224 <HAL_TIM_Base_Start+0x68>
 8008218:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 800821c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008220:	4293      	cmp	r3, r2
 8008222:	d104      	bne.n	800822e <HAL_TIM_Base_Start+0x72>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008224:	689a      	ldr	r2, [r3, #8]
 8008226:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800822a:	2a06      	cmp	r2, #6
 800822c:	d007      	beq.n	800823e <HAL_TIM_Base_Start+0x82>
    __HAL_TIM_ENABLE(htim);
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	f042 0201 	orr.w	r2, r2, #1
  return HAL_OK;
 8008234:	2000      	movs	r0, #0
    __HAL_TIM_ENABLE(htim);
 8008236:	601a      	str	r2, [r3, #0]
 8008238:	4770      	bx	lr
    return HAL_ERROR;
 800823a:	2001      	movs	r0, #1
 800823c:	4770      	bx	lr
  return HAL_OK;
 800823e:	2000      	movs	r0, #0
}
 8008240:	4770      	bx	lr
 8008242:	bf00      	nop

08008244 <HAL_TIM_PWM_MspInit>:
 8008244:	4770      	bx	lr
 8008246:	bf00      	nop

08008248 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8008248:	2800      	cmp	r0, #0
 800824a:	f000 809e 	beq.w	800838a <HAL_TIM_PWM_Init+0x142>
{
 800824e:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8008250:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008254:	4604      	mov	r4, r0
 8008256:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800825a:	2b00      	cmp	r3, #0
 800825c:	f000 8090 	beq.w	8008380 <HAL_TIM_PWM_Init+0x138>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008260:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008262:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_BUSY;
 8008264:	2302      	movs	r3, #2
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008266:	f2c4 0101 	movt	r1, #16385	; 0x4001
  htim->State = HAL_TIM_STATE_BUSY;
 800826a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800826e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8008270:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008272:	d071      	beq.n	8008358 <HAL_TIM_PWM_Init+0x110>
 8008274:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8008278:	d045      	beq.n	8008306 <HAL_TIM_PWM_Init+0xbe>
 800827a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800827e:	f2c4 0100 	movt	r1, #16384	; 0x4000
 8008282:	428a      	cmp	r2, r1
 8008284:	d03f      	beq.n	8008306 <HAL_TIM_PWM_Init+0xbe>
 8008286:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800828a:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800828e:	428a      	cmp	r2, r1
 8008290:	d039      	beq.n	8008306 <HAL_TIM_PWM_Init+0xbe>
 8008292:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8008296:	f2c4 0100 	movt	r1, #16384	; 0x4000
 800829a:	428a      	cmp	r2, r1
 800829c:	d033      	beq.n	8008306 <HAL_TIM_PWM_Init+0xbe>
 800829e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80082a2:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80082a6:	428a      	cmp	r2, r1
 80082a8:	d056      	beq.n	8008358 <HAL_TIM_PWM_Init+0x110>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80082aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80082ae:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80082b2:	428a      	cmp	r2, r1
 80082b4:	d02b      	beq.n	800830e <HAL_TIM_PWM_Init+0xc6>
 80082b6:	f44f 4188 	mov.w	r1, #17408	; 0x4400
 80082ba:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80082be:	428a      	cmp	r2, r1
 80082c0:	d025      	beq.n	800830e <HAL_TIM_PWM_Init+0xc6>
 80082c2:	f44f 4190 	mov.w	r1, #18432	; 0x4800
 80082c6:	f2c4 0101 	movt	r1, #16385	; 0x4001
 80082ca:	428a      	cmp	r2, r1
 80082cc:	d01f      	beq.n	800830e <HAL_TIM_PWM_Init+0xc6>
 80082ce:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80082d2:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80082d6:	428a      	cmp	r2, r1
 80082d8:	d019      	beq.n	800830e <HAL_TIM_PWM_Init+0xc6>
 80082da:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 80082de:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80082e2:	428a      	cmp	r2, r1
 80082e4:	d013      	beq.n	800830e <HAL_TIM_PWM_Init+0xc6>
 80082e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80082ea:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80082ee:	428a      	cmp	r2, r1
 80082f0:	d00d      	beq.n	800830e <HAL_TIM_PWM_Init+0xc6>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f2:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082f4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082fa:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 80082fc:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 80082fe:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008300:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008302:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008304:	e010      	b.n	8008328 <HAL_TIM_PWM_Init+0xe0>
    tmpcr1 |= Structure->CounterMode;
 8008306:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008308:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 800830c:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800830e:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008310:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8008312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008316:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008318:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 800831c:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800831e:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8008320:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8008322:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008324:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008326:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8008328:	2301      	movs	r3, #1
 800832a:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800832c:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008330:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8008334:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8008338:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 800833c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008340:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008348:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 800834c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8008350:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8008354:	2000      	movs	r0, #0
}
 8008356:	bd10      	pop	{r4, pc}
    tmpcr1 |= Structure->CounterMode;
 8008358:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800835a:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800835c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8008360:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8008362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008366:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008368:	69a1      	ldr	r1, [r4, #24]
 800836a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800836e:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8008370:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008372:	68e3      	ldr	r3, [r4, #12]
 8008374:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8008376:	6863      	ldr	r3, [r4, #4]
 8008378:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800837a:	6963      	ldr	r3, [r4, #20]
 800837c:	6313      	str	r3, [r2, #48]	; 0x30
 800837e:	e7d3      	b.n	8008328 <HAL_TIM_PWM_Init+0xe0>
    htim->Lock = HAL_UNLOCKED;
 8008380:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8008384:	f7ff ff5e 	bl	8008244 <HAL_TIM_PWM_MspInit>
 8008388:	e76a      	b.n	8008260 <HAL_TIM_PWM_Init+0x18>
    return HAL_ERROR;
 800838a:	2001      	movs	r0, #1
}
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop

08008390 <HAL_TIM_PWM_Start>:
 8008390:	2900      	cmp	r1, #0
 8008392:	d14c      	bne.n	800842e <HAL_TIM_PWM_Start+0x9e>
 8008394:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008398:	2b01      	cmp	r3, #1
 800839a:	d150      	bne.n	800843e <HAL_TIM_PWM_Start+0xae>
 800839c:	2302      	movs	r3, #2
 800839e:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
 80083a2:	6803      	ldr	r3, [r0, #0]
 80083a4:	2201      	movs	r2, #1
 80083a6:	6a18      	ldr	r0, [r3, #32]
 80083a8:	f001 011f 	and.w	r1, r1, #31
 80083ac:	fa02 f101 	lsl.w	r1, r2, r1
 80083b0:	ea20 0001 	bic.w	r0, r0, r1
 80083b4:	6218      	str	r0, [r3, #32]
 80083b6:	6a18      	ldr	r0, [r3, #32]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80083be:	4301      	orrs	r1, r0
 80083c0:	4293      	cmp	r3, r2
 80083c2:	6219      	str	r1, [r3, #32]
 80083c4:	d045      	beq.n	8008452 <HAL_TIM_PWM_Start+0xc2>
 80083c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80083ca:	f2c4 0201 	movt	r2, #16385	; 0x4001
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d03f      	beq.n	8008452 <HAL_TIM_PWM_Start+0xc2>
 80083d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d6:	d01f      	beq.n	8008418 <HAL_TIM_PWM_Start+0x88>
 80083d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80083dc:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80083e0:	428b      	cmp	r3, r1
 80083e2:	d019      	beq.n	8008418 <HAL_TIM_PWM_Start+0x88>
 80083e4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80083e8:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80083ec:	428b      	cmp	r3, r1
 80083ee:	d013      	beq.n	8008418 <HAL_TIM_PWM_Start+0x88>
 80083f0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80083f4:	f2c4 0100 	movt	r1, #16384	; 0x4000
 80083f8:	428b      	cmp	r3, r1
 80083fa:	d00d      	beq.n	8008418 <HAL_TIM_PWM_Start+0x88>
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d00b      	beq.n	8008418 <HAL_TIM_PWM_Start+0x88>
 8008400:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008404:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008408:	4293      	cmp	r3, r2
 800840a:	d005      	beq.n	8008418 <HAL_TIM_PWM_Start+0x88>
 800840c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 8008410:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008414:	4293      	cmp	r3, r2
 8008416:	d104      	bne.n	8008422 <HAL_TIM_PWM_Start+0x92>
 8008418:	689a      	ldr	r2, [r3, #8]
 800841a:	f002 0207 	and.w	r2, r2, #7
 800841e:	2a06      	cmp	r2, #6
 8008420:	d020      	beq.n	8008464 <HAL_TIM_PWM_Start+0xd4>
 8008422:	681a      	ldr	r2, [r3, #0]
 8008424:	f042 0201 	orr.w	r2, r2, #1
 8008428:	2000      	movs	r0, #0
 800842a:	601a      	str	r2, [r3, #0]
 800842c:	4770      	bx	lr
 800842e:	2904      	cmp	r1, #4
 8008430:	d022      	beq.n	8008478 <HAL_TIM_PWM_Start+0xe8>
 8008432:	2908      	cmp	r1, #8
 8008434:	d018      	beq.n	8008468 <HAL_TIM_PWM_Start+0xd8>
 8008436:	f890 3041 	ldrb.w	r3, [r0, #65]	; 0x41
 800843a:	2b01      	cmp	r3, #1
 800843c:	d001      	beq.n	8008442 <HAL_TIM_PWM_Start+0xb2>
 800843e:	2001      	movs	r0, #1
 8008440:	4770      	bx	lr
 8008442:	2904      	cmp	r1, #4
 8008444:	d01c      	beq.n	8008480 <HAL_TIM_PWM_Start+0xf0>
 8008446:	2908      	cmp	r1, #8
 8008448:	d012      	beq.n	8008470 <HAL_TIM_PWM_Start+0xe0>
 800844a:	2302      	movs	r3, #2
 800844c:	f880 3041 	strb.w	r3, [r0, #65]	; 0x41
 8008450:	e7a7      	b.n	80083a2 <HAL_TIM_PWM_Start+0x12>
 8008452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008454:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008458:	645a      	str	r2, [r3, #68]	; 0x44
 800845a:	689a      	ldr	r2, [r3, #8]
 800845c:	f002 0207 	and.w	r2, r2, #7
 8008460:	2a06      	cmp	r2, #6
 8008462:	d1de      	bne.n	8008422 <HAL_TIM_PWM_Start+0x92>
 8008464:	2000      	movs	r0, #0
 8008466:	4770      	bx	lr
 8008468:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 800846c:	2b01      	cmp	r3, #1
 800846e:	d1e6      	bne.n	800843e <HAL_TIM_PWM_Start+0xae>
 8008470:	2302      	movs	r3, #2
 8008472:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
 8008476:	e794      	b.n	80083a2 <HAL_TIM_PWM_Start+0x12>
 8008478:	f890 303f 	ldrb.w	r3, [r0, #63]	; 0x3f
 800847c:	2b01      	cmp	r3, #1
 800847e:	d1de      	bne.n	800843e <HAL_TIM_PWM_Start+0xae>
 8008480:	2302      	movs	r3, #2
 8008482:	f880 303f 	strb.w	r3, [r0, #63]	; 0x3f
 8008486:	e78c      	b.n	80083a2 <HAL_TIM_PWM_Start+0x12>

08008488 <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8008488:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800848c:	2b01      	cmp	r3, #1
 800848e:	f000 80e8 	beq.w	8008662 <HAL_TIM_PWM_ConfigChannel+0x1da>
 8008492:	2301      	movs	r3, #1
{
 8008494:	b570      	push	{r4, r5, r6, lr}
 8008496:	4684      	mov	ip, r0
  __HAL_LOCK(htim);
 8008498:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 800849c:	2a0c      	cmp	r2, #12
 800849e:	d808      	bhi.n	80084b2 <HAL_TIM_PWM_ConfigChannel+0x2a>
 80084a0:	e8df f002 	tbb	[pc, r2]
 80084a4:	07070743 	.word	0x07070743
 80084a8:	07070777 	.word	0x07070777
 80084ac:	070707ac 	.word	0x070707ac
 80084b0:	0c          	.byte	0x0c
 80084b1:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80084b2:	2300      	movs	r3, #0
 80084b4:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  switch (Channel)
 80084b8:	2001      	movs	r0, #1
}
 80084ba:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80084bc:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084be:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084c0:	6a1a      	ldr	r2, [r3, #32]
 80084c2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80084c6:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80084c8:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80084ca:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80084cc:	69d8      	ldr	r0, [r3, #28]
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ce:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80084d2:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80084d6:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084da:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084de:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80084e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084e4:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084e6:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084ea:	f000 80db 	beq.w	80086a4 <HAL_TIM_PWM_ConfigChannel+0x21c>
 80084ee:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80084f2:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 80084f6:	4573      	cmp	r3, lr
 80084f8:	f000 80d4 	beq.w	80086a4 <HAL_TIM_PWM_ConfigChannel+0x21c>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084fc:	605c      	str	r4, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084fe:	61d8      	str	r0, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008500:	6848      	ldr	r0, [r1, #4]
 8008502:	6418      	str	r0, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008504:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008506:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008508:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800850a:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 800850e:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008510:	69d9      	ldr	r1, [r3, #28]
 8008512:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8008516:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008518:	69da      	ldr	r2, [r3, #28]
 800851a:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 800851e:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008520:	2300      	movs	r3, #0
 8008522:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8008526:	2000      	movs	r0, #0
}
 8008528:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800852a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800852c:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800852e:	6a1a      	ldr	r2, [r3, #32]
 8008530:	f022 0201 	bic.w	r2, r2, #1
 8008534:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008536:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8008538:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 800853a:	6998      	ldr	r0, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800853c:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008540:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008544:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008546:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= OC_Config->OCPolarity;
 800854a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800854c:	f022 0202 	bic.w	r2, r2, #2
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008550:	4573      	cmp	r3, lr
  tmpccer |= OC_Config->OCPolarity;
 8008552:	ea42 0205 	orr.w	r2, r2, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008556:	f000 8086 	beq.w	8008666 <HAL_TIM_PWM_ConfigChannel+0x1de>
 800855a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 800855e:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8008562:	4573      	cmp	r3, lr
 8008564:	d07f      	beq.n	8008666 <HAL_TIM_PWM_ConfigChannel+0x1de>
  TIMx->CR2 = tmpcr2;
 8008566:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8008568:	6198      	str	r0, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800856a:	6848      	ldr	r0, [r1, #4]
 800856c:	6358      	str	r0, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800856e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008570:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008572:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008574:	f040 0008 	orr.w	r0, r0, #8
 8008578:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800857a:	6999      	ldr	r1, [r3, #24]
 800857c:	f021 0104 	bic.w	r1, r1, #4
 8008580:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008582:	699a      	ldr	r2, [r3, #24]
 8008584:	4322      	orrs	r2, r4
 8008586:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 8008588:	2300      	movs	r3, #0
 800858a:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800858e:	2000      	movs	r0, #0
}
 8008590:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008592:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008594:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008596:	6a1a      	ldr	r2, [r3, #32]
 8008598:	f022 0210 	bic.w	r2, r2, #16
 800859c:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800859e:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80085a0:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80085a2:	6998      	ldr	r0, [r3, #24]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085a4:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085a8:	f420 40e6 	bic.w	r0, r0, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085ac:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085b0:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085b4:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80085b6:	f022 0220 	bic.w	r2, r2, #32
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085ba:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80085bc:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80085c0:	d060      	beq.n	8008684 <HAL_TIM_PWM_ConfigChannel+0x1fc>
 80085c2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 80085c6:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 80085ca:	4573      	cmp	r3, lr
 80085cc:	d05a      	beq.n	8008684 <HAL_TIM_PWM_ConfigChannel+0x1fc>
  TIMx->CR2 = tmpcr2;
 80085ce:	605c      	str	r4, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80085d0:	6198      	str	r0, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80085d2:	6848      	ldr	r0, [r1, #4]
 80085d4:	6398      	str	r0, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80085d6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085d8:	6998      	ldr	r0, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085da:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80085dc:	f440 6000 	orr.w	r0, r0, #2048	; 0x800
 80085e0:	6198      	str	r0, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80085e2:	6999      	ldr	r1, [r3, #24]
 80085e4:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80085e8:	6199      	str	r1, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80085ea:	699a      	ldr	r2, [r3, #24]
 80085ec:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
 80085f0:	619a      	str	r2, [r3, #24]
  __HAL_UNLOCK(htim);
 80085f2:	2300      	movs	r3, #0
 80085f4:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80085f8:	2000      	movs	r0, #0
}
 80085fa:	bd70      	pop	{r4, r5, r6, pc}
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80085fc:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80085fe:	680d      	ldr	r5, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008600:	6a1a      	ldr	r2, [r3, #32]
 8008602:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008606:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8008608:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800860a:	685c      	ldr	r4, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800860c:	69d8      	ldr	r0, [r3, #28]
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800860e:	f04f 0e00 	mov.w	lr, #0
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008612:	f020 0073 	bic.w	r0, r0, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8008616:	4328      	orrs	r0, r5
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008618:	f2c4 0e01 	movt	lr, #16385	; 0x4001
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800861c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800861e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008622:	4573      	cmp	r3, lr
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008624:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008628:	d042      	beq.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x228>
 800862a:	f44f 6e80 	mov.w	lr, #1024	; 0x400
 800862e:	f2c4 0e01 	movt	lr, #16385	; 0x4001
 8008632:	4573      	cmp	r3, lr
 8008634:	d03c      	beq.n	80086b0 <HAL_TIM_PWM_ConfigChannel+0x228>
  TIMx->CR2 = tmpcr2;
 8008636:	605c      	str	r4, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8008638:	61d8      	str	r0, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800863a:	6848      	ldr	r0, [r1, #4]
 800863c:	63d8      	str	r0, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 800863e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008640:	69d8      	ldr	r0, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008642:	690c      	ldr	r4, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008644:	f040 0008 	orr.w	r0, r0, #8
 8008648:	61d8      	str	r0, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800864a:	69d9      	ldr	r1, [r3, #28]
 800864c:	f021 0104 	bic.w	r1, r1, #4
 8008650:	61d9      	str	r1, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008652:	69da      	ldr	r2, [r3, #28]
 8008654:	4322      	orrs	r2, r4
 8008656:	61da      	str	r2, [r3, #28]
  __HAL_UNLOCK(htim);
 8008658:	2300      	movs	r3, #0
 800865a:	f88c 303c 	strb.w	r3, [ip, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800865e:	2000      	movs	r0, #0
}
 8008660:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(htim);
 8008662:	2002      	movs	r0, #2
}
 8008664:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8008666:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8008668:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 800866c:	432a      	orrs	r2, r5
    tmpcr2 |= OC_Config->OCNIdleState;
 800866e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008672:	f424 7440 	bic.w	r4, r4, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8008676:	ea45 0e06 	orr.w	lr, r5, r6
    tmpccer &= ~TIM_CCER_CC1NE;
 800867a:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 800867e:	ea4e 0404 	orr.w	r4, lr, r4
 8008682:	e770      	b.n	8008566 <HAL_TIM_PWM_ConfigChannel+0xde>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008684:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8008686:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800868a:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800868e:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008692:	f424 6440 	bic.w	r4, r4, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008696:	ea45 0e06 	orr.w	lr, r5, r6
    tmpccer &= ~TIM_CCER_CC2NE;
 800869a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800869e:	ea44 048e 	orr.w	r4, r4, lr, lsl #2
 80086a2:	e794      	b.n	80085ce <HAL_TIM_PWM_ConfigChannel+0x146>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086a4:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 80086a6:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80086aa:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 80086ae:	e725      	b.n	80084fc <HAL_TIM_PWM_ConfigChannel+0x74>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086b0:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 80086b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80086b6:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ba:	e9d1 5605 	ldrd	r5, r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80086be:	f424 5440 	bic.w	r4, r4, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086c2:	ea45 0e06 	orr.w	lr, r5, r6
    tmpccer &= ~TIM_CCER_CC3NE;
 80086c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80086ca:	ea44 140e 	orr.w	r4, r4, lr, lsl #4
 80086ce:	e7b2      	b.n	8008636 <HAL_TIM_PWM_ConfigChannel+0x1ae>

080086d0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80086d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80086d4:	2b01      	cmp	r3, #1
 80086d6:	d075      	beq.n	80087c4 <HAL_TIM_ConfigClockSource+0xf4>
 80086d8:	4602      	mov	r2, r0
{
 80086da:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80086dc:	2302      	movs	r3, #2
  tmpsmcr = htim->Instance->SMCR;
 80086de:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80086e0:	f882 303d 	strb.w	r3, [r2, #61]	; 0x3d
  __HAL_LOCK(htim);
 80086e4:	2001      	movs	r0, #1
 80086e6:	f882 003c 	strb.w	r0, [r2, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80086ea:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80086f0:	f023 0377 	bic.w	r3, r3, #119	; 0x77
  htim->Instance->SMCR = tmpsmcr;
 80086f4:	60a3      	str	r3, [r4, #8]
  switch (sClockSourceConfig->ClockSource)
 80086f6:	680b      	ldr	r3, [r1, #0]
 80086f8:	2b60      	cmp	r3, #96	; 0x60
 80086fa:	d065      	beq.n	80087c8 <HAL_TIM_ConfigClockSource+0xf8>
 80086fc:	d824      	bhi.n	8008748 <HAL_TIM_ConfigClockSource+0x78>
 80086fe:	2b40      	cmp	r3, #64	; 0x40
 8008700:	d07c      	beq.n	80087fc <HAL_TIM_ConfigClockSource+0x12c>
 8008702:	d94b      	bls.n	800879c <HAL_TIM_ConfigClockSource+0xcc>
 8008704:	2b50      	cmp	r3, #80	; 0x50
 8008706:	d117      	bne.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008708:	6848      	ldr	r0, [r1, #4]
 800870a:	68cd      	ldr	r5, [r1, #12]
{
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800870c:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800870e:	6a23      	ldr	r3, [r4, #32]
 8008710:	f023 0301 	bic.w	r3, r3, #1
 8008714:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008716:	69a3      	ldr	r3, [r4, #24]
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
  tmpccmr1 |= (TIM_ICFilter << 4U);

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008718:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800871c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8008720:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008722:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008726:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 8008728:	6221      	str	r1, [r4, #32]
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800872a:	68a3      	ldr	r3, [r4, #8]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800872c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008730:	f043 0357 	orr.w	r3, r3, #87	; 0x57
  HAL_StatusTypeDef status = HAL_OK;
 8008734:	2000      	movs	r0, #0
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008736:	60a3      	str	r3, [r4, #8]
  htim->State = HAL_TIM_STATE_READY;
 8008738:	2101      	movs	r1, #1
  __HAL_UNLOCK(htim);
 800873a:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 800873c:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8008740:	f882 303c 	strb.w	r3, [r2, #60]	; 0x3c
}
 8008744:	bc30      	pop	{r4, r5}
 8008746:	4770      	bx	lr
  switch (sClockSourceConfig->ClockSource)
 8008748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800874c:	d038      	beq.n	80087c0 <HAL_TIM_ConfigClockSource+0xf0>
 800874e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008752:	d110      	bne.n	8008776 <HAL_TIM_ConfigClockSource+0xa6>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008754:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 8008758:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800875a:	432b      	orrs	r3, r5
 800875c:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800875e:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008762:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 8008766:	430b      	orrs	r3, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008768:	60a3      	str	r3, [r4, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800876a:	68a3      	ldr	r3, [r4, #8]
 800876c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
  HAL_StatusTypeDef status = HAL_OK;
 8008770:	2000      	movs	r0, #0
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008772:	60a3      	str	r3, [r4, #8]
      break;
 8008774:	e7e0      	b.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 8008776:	2b70      	cmp	r3, #112	; 0x70
 8008778:	d1de      	bne.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800877a:	e9d1 5301 	ldrd	r5, r3, [r1, #4]
  tmpsmcr = TIMx->SMCR;
 800877e:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008780:	432b      	orrs	r3, r5
 8008782:	68cd      	ldr	r5, [r1, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008784:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008788:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
 800878c:	430b      	orrs	r3, r1
  TIMx->SMCR = tmpsmcr;
 800878e:	60a3      	str	r3, [r4, #8]
      tmpsmcr = htim->Instance->SMCR;
 8008790:	68a3      	ldr	r3, [r4, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008792:	f043 0377 	orr.w	r3, r3, #119	; 0x77
  HAL_StatusTypeDef status = HAL_OK;
 8008796:	2000      	movs	r0, #0
      htim->Instance->SMCR = tmpsmcr;
 8008798:	60a3      	str	r3, [r4, #8]
      break;
 800879a:	e7cd      	b.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 800879c:	2b20      	cmp	r3, #32
 800879e:	d002      	beq.n	80087a6 <HAL_TIM_ConfigClockSource+0xd6>
 80087a0:	d90a      	bls.n	80087b8 <HAL_TIM_ConfigClockSource+0xe8>
 80087a2:	2b30      	cmp	r3, #48	; 0x30
 80087a4:	d1c8      	bne.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
  tmpsmcr = TIMx->SMCR;
 80087a6:	68a1      	ldr	r1, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80087a8:	f021 0170 	bic.w	r1, r1, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087ac:	430b      	orrs	r3, r1
 80087ae:	f043 0307 	orr.w	r3, r3, #7
  HAL_StatusTypeDef status = HAL_OK;
 80087b2:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80087b4:	60a3      	str	r3, [r4, #8]
}
 80087b6:	e7bf      	b.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
  switch (sClockSourceConfig->ClockSource)
 80087b8:	f033 0110 	bics.w	r1, r3, #16
 80087bc:	d1bc      	bne.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
 80087be:	e7f2      	b.n	80087a6 <HAL_TIM_ConfigClockSource+0xd6>
  HAL_StatusTypeDef status = HAL_OK;
 80087c0:	2000      	movs	r0, #0
 80087c2:	e7b9      	b.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
  __HAL_LOCK(htim);
 80087c4:	2002      	movs	r0, #2
}
 80087c6:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087c8:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80087ca:	68cb      	ldr	r3, [r1, #12]
 80087cc:	684d      	ldr	r5, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087ce:	f020 0010 	bic.w	r0, r0, #16
 80087d2:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087d4:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087d6:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80087da:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
  tmpccer = TIMx->CCER;
 80087de:	6a23      	ldr	r3, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 80087e0:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087e2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80087e6:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCER = tmpccer;
 80087ea:	6223      	str	r3, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 80087ec:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80087ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80087f2:	f043 0367 	orr.w	r3, r3, #103	; 0x67
  HAL_StatusTypeDef status = HAL_OK;
 80087f6:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 80087f8:	60a3      	str	r3, [r4, #8]
}
 80087fa:	e79d      	b.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80087fc:	6848      	ldr	r0, [r1, #4]
 80087fe:	68cd      	ldr	r5, [r1, #12]
  tmpccer = TIMx->CCER;
 8008800:	6a21      	ldr	r1, [r4, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008802:	6a23      	ldr	r3, [r4, #32]
 8008804:	f023 0301 	bic.w	r3, r3, #1
 8008808:	6223      	str	r3, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 800880a:	69a3      	ldr	r3, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800880c:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008810:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccer |= TIM_ICPolarity;
 8008814:	4301      	orrs	r1, r0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008816:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800881a:	61a3      	str	r3, [r4, #24]
  TIMx->CCER = tmpccer;
 800881c:	6221      	str	r1, [r4, #32]
  tmpsmcr = TIMx->SMCR;
 800881e:	68a3      	ldr	r3, [r4, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8008820:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008824:	f043 0347 	orr.w	r3, r3, #71	; 0x47
  HAL_StatusTypeDef status = HAL_OK;
 8008828:	2000      	movs	r0, #0
  TIMx->SMCR = tmpsmcr;
 800882a:	60a3      	str	r3, [r4, #8]
}
 800882c:	e784      	b.n	8008738 <HAL_TIM_ConfigClockSource+0x68>
 800882e:	bf00      	nop

08008830 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008830:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008834:	2b01      	cmp	r3, #1
 8008836:	d045      	beq.n	80088c4 <HAL_TIMEx_MasterConfigSynchronization+0x94>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008838:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800883a:	2202      	movs	r2, #2
{
 800883c:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 800883e:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 8008842:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008844:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 8008846:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8008848:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800884c:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800884e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008850:	2200      	movs	r2, #0
 8008852:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008856:	4293      	cmp	r3, r2
 8008858:	d026      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800885a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800885e:	d023      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008860:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008864:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008868:	4293      	cmp	r3, r2
 800886a:	d01d      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800886c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008870:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008874:	4293      	cmp	r3, r2
 8008876:	d017      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008878:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 800887c:	f2c4 0200 	movt	r2, #16384	; 0x4000
 8008880:	4293      	cmp	r3, r2
 8008882:	d011      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008884:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008888:	f2c4 0201 	movt	r2, #16385	; 0x4001
 800888c:	4293      	cmp	r3, r2
 800888e:	d00b      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 8008890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8008894:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008898:	4293      	cmp	r3, r2
 800889a:	d005      	beq.n	80088a8 <HAL_TIMEx_MasterConfigSynchronization+0x78>
 800889c:	f44f 52c0 	mov.w	r2, #6144	; 0x1800
 80088a0:	f2c4 0200 	movt	r2, #16384	; 0x4000
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d104      	bne.n	80088b2 <HAL_TIMEx_MasterConfigSynchronization+0x82>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088a8:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088aa:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ae:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088b0:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80088b2:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80088b4:	2201      	movs	r2, #1
 80088b6:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80088ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 80088be:	bc30      	pop	{r4, r5}
  return HAL_OK;
 80088c0:	4618      	mov	r0, r3
}
 80088c2:	4770      	bx	lr
  __HAL_LOCK(htim);
 80088c4:	2002      	movs	r0, #2
}
 80088c6:	4770      	bx	lr

080088c8 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 80088c8:	2800      	cmp	r0, #0
 80088ca:	f000 809b 	beq.w	8008a04 <HAL_UART_Init+0x13c>
{
 80088ce:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80088d0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80088d4:	4604      	mov	r4, r0
 80088d6:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80088da:	2b00      	cmp	r3, #0
 80088dc:	f000 808d 	beq.w	80089fa <HAL_UART_Init+0x132>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80088e0:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088e2:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80088e4:	2224      	movs	r2, #36	; 0x24
 80088e6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80088ea:	68da      	ldr	r2, [r3, #12]
 80088ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80088f0:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088f2:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088f4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088f6:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80088fa:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80088fc:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80088fe:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008900:	4302      	orrs	r2, r0
 8008902:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8008904:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008906:	4302      	orrs	r2, r0
 8008908:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 800890a:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 800890e:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008912:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 8008914:	430a      	orrs	r2, r1
 8008916:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008918:	695a      	ldr	r2, [r3, #20]
 800891a:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800891c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008920:	f422 7240 	bic.w	r2, r2, #768	; 0x300
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008924:	f2c4 0101 	movt	r1, #16385	; 0x4001
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008928:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800892a:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800892c:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800892e:	d03b      	beq.n	80089a8 <HAL_UART_Init+0xe0>
 8008930:	f44f 52a0 	mov.w	r2, #5120	; 0x1400
 8008934:	f2c4 0201 	movt	r2, #16385	; 0x4001
 8008938:	4293      	cmp	r3, r2
 800893a:	d035      	beq.n	80089a8 <HAL_UART_Init+0xe0>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800893c:	f7ff fa88 	bl	8007e50 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008940:	69e3      	ldr	r3, [r4, #28]
 8008942:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008946:	d035      	beq.n	80089b4 <HAL_UART_Init+0xec>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008948:	6863      	ldr	r3, [r4, #4]
 800894a:	2119      	movs	r1, #25
 800894c:	009a      	lsls	r2, r3, #2
 800894e:	fba0 0101 	umull	r0, r1, r0, r1
 8008952:	0f9b      	lsrs	r3, r3, #30
 8008954:	f7f8 f9a8 	bl	8000ca8 <__aeabi_uldivmod>
 8008958:	f248 511f 	movw	r1, #34079	; 0x851f
 800895c:	f2c5 11eb 	movt	r1, #20971	; 0x51eb
 8008960:	fba1 3200 	umull	r3, r2, r1, r0
 8008964:	0952      	lsrs	r2, r2, #5
 8008966:	2564      	movs	r5, #100	; 0x64
 8008968:	fb05 0012 	mls	r0, r5, r2, r0
 800896c:	0100      	lsls	r0, r0, #4
 800896e:	3032      	adds	r0, #50	; 0x32
 8008970:	6823      	ldr	r3, [r4, #0]
 8008972:	fba1 1000 	umull	r1, r0, r1, r0
 8008976:	0112      	lsls	r2, r2, #4
 8008978:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 800897c:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800897e:	691a      	ldr	r2, [r3, #16]
 8008980:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008984:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008986:	695a      	ldr	r2, [r3, #20]
 8008988:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800898c:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800898e:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008990:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8008992:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8008994:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008998:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800899a:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800899c:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80089a0:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 80089a4:	4628      	mov	r0, r5
}
 80089a6:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 80089a8:	f7ff fa66 	bl	8007e78 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089ac:	69e3      	ldr	r3, [r4, #28]
 80089ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089b2:	d1c9      	bne.n	8008948 <HAL_UART_Init+0x80>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80089b4:	6862      	ldr	r2, [r4, #4]
 80089b6:	2119      	movs	r1, #25
 80089b8:	1892      	adds	r2, r2, r2
 80089ba:	f04f 0300 	mov.w	r3, #0
 80089be:	415b      	adcs	r3, r3
 80089c0:	fba0 0101 	umull	r0, r1, r0, r1
 80089c4:	f7f8 f970 	bl	8000ca8 <__aeabi_uldivmod>
 80089c8:	f248 531f 	movw	r3, #34079	; 0x851f
 80089cc:	f2c5 13eb 	movt	r3, #20971	; 0x51eb
 80089d0:	fba3 2100 	umull	r2, r1, r3, r0
 80089d4:	094d      	lsrs	r5, r1, #5
 80089d6:	2264      	movs	r2, #100	; 0x64
 80089d8:	fb02 0215 	mls	r2, r2, r5, r0
 80089dc:	00d2      	lsls	r2, r2, #3
 80089de:	3232      	adds	r2, #50	; 0x32
 80089e0:	fba3 3202 	umull	r3, r2, r3, r2
 80089e4:	f3c2 1142 	ubfx	r1, r2, #5, #3
 80089e8:	0912      	lsrs	r2, r2, #4
 80089ea:	6823      	ldr	r3, [r4, #0]
 80089ec:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 80089f0:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 80089f4:	440a      	add	r2, r1
 80089f6:	609a      	str	r2, [r3, #8]
 80089f8:	e7c1      	b.n	800897e <HAL_UART_Init+0xb6>
    huart->Lock = HAL_UNLOCKED;
 80089fa:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80089fe:	f7fb fcf9 	bl	80043f4 <HAL_UART_MspInit>
 8008a02:	e76d      	b.n	80088e0 <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8008a04:	2001      	movs	r0, #1
}
 8008a06:	4770      	bx	lr

08008a08 <HAL_UART_Transmit_IT>:
  if (huart->gState == HAL_UART_STATE_READY)
 8008a08:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8008a0c:	2b20      	cmp	r3, #32
 8008a0e:	d11b      	bne.n	8008a48 <HAL_UART_Transmit_IT+0x40>
    if ((pData == NULL) || (Size == 0U))
 8008a10:	b1c1      	cbz	r1, 8008a44 <HAL_UART_Transmit_IT+0x3c>
 8008a12:	b1ba      	cbz	r2, 8008a44 <HAL_UART_Transmit_IT+0x3c>
    __HAL_LOCK(huart);
 8008a14:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008a18:	2b01      	cmp	r3, #1
 8008a1a:	d015      	beq.n	8008a48 <HAL_UART_Transmit_IT+0x40>
{
 8008a1c:	b410      	push	{r4}
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a1e:	2300      	movs	r3, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a20:	2421      	movs	r4, #33	; 0x21
    huart->TxXferCount = Size;
 8008a22:	84c2      	strh	r2, [r0, #38]	; 0x26
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a24:	6403      	str	r3, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008a26:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008a2a:	6804      	ldr	r4, [r0, #0]
    __HAL_UNLOCK(huart);
 8008a2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->TxXferSize = Size;
 8008a30:	8482      	strh	r2, [r0, #36]	; 0x24
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008a32:	68e2      	ldr	r2, [r4, #12]
    huart->pTxBuffPtr = pData;
 8008a34:	6201      	str	r1, [r0, #32]
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008a36:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    return HAL_OK;
 8008a3a:	4618      	mov	r0, r3
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8008a3c:	60e2      	str	r2, [r4, #12]
}
 8008a3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008a42:	4770      	bx	lr
      return HAL_ERROR;
 8008a44:	2001      	movs	r0, #1
 8008a46:	4770      	bx	lr
    return HAL_BUSY;
 8008a48:	2002      	movs	r0, #2
}
 8008a4a:	4770      	bx	lr

08008a4c <HAL_UART_Receive_IT>:
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a4c:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008a50:	2b20      	cmp	r3, #32
 8008a52:	d11f      	bne.n	8008a94 <HAL_UART_Receive_IT+0x48>
    if ((pData == NULL) || (Size == 0U))
 8008a54:	b1e1      	cbz	r1, 8008a90 <HAL_UART_Receive_IT+0x44>
 8008a56:	b1da      	cbz	r2, 8008a90 <HAL_UART_Receive_IT+0x44>
    __HAL_LOCK(huart);
 8008a58:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8008a5c:	2b01      	cmp	r3, #1
 8008a5e:	d019      	beq.n	8008a94 <HAL_UART_Receive_IT+0x48>
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008a60:	2300      	movs	r3, #0
 8008a62:	6303      	str	r3, [r0, #48]	; 0x30
  __HAL_UNLOCK(huart);
 8008a64:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  huart->RxXferCount = Size;
 8008a68:	85c2      	strh	r2, [r0, #46]	; 0x2e
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a6a:	6403      	str	r3, [r0, #64]	; 0x40
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a6c:	6903      	ldr	r3, [r0, #16]
  huart->pRxBuffPtr = pData;
 8008a6e:	6281      	str	r1, [r0, #40]	; 0x28
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a70:	2122      	movs	r1, #34	; 0x22
  huart->RxXferSize = Size;
 8008a72:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a74:	f880 103e 	strb.w	r1, [r0, #62]	; 0x3e
  if (huart->Init.Parity != UART_PARITY_NONE)
 8008a78:	b973      	cbnz	r3, 8008a98 <HAL_UART_Receive_IT+0x4c>
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a7a:	6803      	ldr	r3, [r0, #0]
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008a7c:	695a      	ldr	r2, [r3, #20]
 8008a7e:	f042 0201 	orr.w	r2, r2, #1
 8008a82:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	f042 0220 	orr.w	r2, r2, #32
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a8a:	2000      	movs	r0, #0
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008a8c:	60da      	str	r2, [r3, #12]
    return (UART_Start_Receive_IT(huart, pData, Size));
 8008a8e:	4770      	bx	lr
      return HAL_ERROR;
 8008a90:	2001      	movs	r0, #1
 8008a92:	4770      	bx	lr
    return HAL_BUSY;
 8008a94:	2002      	movs	r0, #2
}
 8008a96:	4770      	bx	lr
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008a98:	6803      	ldr	r3, [r0, #0]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008aa0:	60da      	str	r2, [r3, #12]
 8008aa2:	e7eb      	b.n	8008a7c <HAL_UART_Receive_IT+0x30>

08008aa4 <HAL_UART_ErrorCallback>:
 8008aa4:	4770      	bx	lr
 8008aa6:	bf00      	nop

08008aa8 <UART_DMAAbortOnError>:
{
 8008aa8:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008aaa:	6b80      	ldr	r0, [r0, #56]	; 0x38
  huart->RxXferCount = 0x00U;
 8008aac:	2300      	movs	r3, #0
 8008aae:	85c3      	strh	r3, [r0, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008ab0:	84c3      	strh	r3, [r0, #38]	; 0x26
  HAL_UART_ErrorCallback(huart);
 8008ab2:	f7ff fff7 	bl	8008aa4 <HAL_UART_ErrorCallback>
}
 8008ab6:	bd08      	pop	{r3, pc}

08008ab8 <HAL_UARTEx_RxEventCallback>:
}
 8008ab8:	4770      	bx	lr
 8008aba:	bf00      	nop

08008abc <UART_Receive_IT.part.0.isra.0>:
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008abc:	6883      	ldr	r3, [r0, #8]
 8008abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac2:	d044      	beq.n	8008b4e <UART_Receive_IT.part.0.isra.0+0x92>
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008ac4:	6a82      	ldr	r2, [r0, #40]	; 0x28
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d039      	beq.n	8008b3e <UART_Receive_IT.part.0.isra.0+0x82>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008aca:	6803      	ldr	r3, [r0, #0]
 8008acc:	685b      	ldr	r3, [r3, #4]
 8008ace:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008ad2:	7013      	strb	r3, [r2, #0]
      huart->pRxBuffPtr += 1U;
 8008ad4:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008ad6:	3301      	adds	r3, #1
 8008ad8:	6283      	str	r3, [r0, #40]	; 0x28
    if (--huart->RxXferCount == 0U)
 8008ada:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 8008adc:	3b01      	subs	r3, #1
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	85c3      	strh	r3, [r0, #46]	; 0x2e
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d132      	bne.n	8008b4c <UART_Receive_IT.part.0.isra.0+0x90>
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ae6:	6802      	ldr	r2, [r0, #0]
 8008ae8:	68d1      	ldr	r1, [r2, #12]
 8008aea:	f021 0120 	bic.w	r1, r1, #32
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008aee:	b500      	push	{lr}
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008af0:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008af2:	68d1      	ldr	r1, [r2, #12]
 8008af4:	f421 7180 	bic.w	r1, r1, #256	; 0x100
 8008af8:	60d1      	str	r1, [r2, #12]
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008afa:	6951      	ldr	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008afc:	f04f 0c20 	mov.w	ip, #32
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008b00:	f021 0101 	bic.w	r1, r1, #1
 8008b04:	6151      	str	r1, [r2, #20]
      huart->RxState = HAL_UART_STATE_READY;
 8008b06:	f880 c03e 	strb.w	ip, [r0, #62]	; 0x3e
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b0a:	6b01      	ldr	r1, [r0, #48]	; 0x30
 8008b0c:	2901      	cmp	r1, #1
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
 8008b0e:	b083      	sub	sp, #12
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b10:	d128      	bne.n	8008b64 <UART_Receive_IT.part.0.isra.0+0xa8>
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008b12:	6303      	str	r3, [r0, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	f102 030c 	add.w	r3, r2, #12
 8008b18:	e853 3f00 	ldrex	r3, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008b1c:	f023 0310 	bic.w	r3, r3, #16
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b20:	f102 0c0c 	add.w	ip, r2, #12
 8008b24:	e84c 3100 	strex	r1, r3, [ip]
 8008b28:	2900      	cmp	r1, #0
 8008b2a:	d1f3      	bne.n	8008b14 <UART_Receive_IT.part.0.isra.0+0x58>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008b2c:	6813      	ldr	r3, [r2, #0]
 8008b2e:	06db      	lsls	r3, r3, #27
 8008b30:	d422      	bmi.n	8008b78 <UART_Receive_IT.part.0.isra.0+0xbc>
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008b32:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8008b34:	f7ff ffc0 	bl	8008ab8 <HAL_UARTEx_RxEventCallback>
}
 8008b38:	b003      	add	sp, #12
 8008b3a:	f85d fb04 	ldr.w	pc, [sp], #4
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008b3e:	6903      	ldr	r3, [r0, #16]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d1c2      	bne.n	8008aca <UART_Receive_IT.part.0.isra.0+0xe>
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b44:	6803      	ldr	r3, [r0, #0]
 8008b46:	685b      	ldr	r3, [r3, #4]
 8008b48:	7013      	strb	r3, [r2, #0]
 8008b4a:	e7c3      	b.n	8008ad4 <UART_Receive_IT.part.0.isra.0+0x18>
 8008b4c:	4770      	bx	lr
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b4e:	6903      	ldr	r3, [r0, #16]
 8008b50:	b96b      	cbnz	r3, 8008b6e <UART_Receive_IT.part.0.isra.0+0xb2>
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008b52:	6802      	ldr	r2, [r0, #0]
 8008b54:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8008b56:	6852      	ldr	r2, [r2, #4]
 8008b58:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b5c:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr += 2U;
 8008b60:	6283      	str	r3, [r0, #40]	; 0x28
 8008b62:	e7ba      	b.n	8008ada <UART_Receive_IT.part.0.isra.0+0x1e>
        HAL_UART_RxCpltCallback(huart);
 8008b64:	f7fc fbd8 	bl	8005318 <HAL_UART_RxCpltCallback>
}
 8008b68:	b003      	add	sp, #12
 8008b6a:	f85d fb04 	ldr.w	pc, [sp], #4
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b6e:	6803      	ldr	r3, [r0, #0]
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008b70:	6a82      	ldr	r2, [r0, #40]	; 0x28
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008b72:	685b      	ldr	r3, [r3, #4]
 8008b74:	7013      	strb	r3, [r2, #0]
 8008b76:	e7ad      	b.n	8008ad4 <UART_Receive_IT.part.0.isra.0+0x18>
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b78:	2300      	movs	r3, #0
 8008b7a:	9301      	str	r3, [sp, #4]
 8008b7c:	6813      	ldr	r3, [r2, #0]
 8008b7e:	9301      	str	r3, [sp, #4]
 8008b80:	6853      	ldr	r3, [r2, #4]
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	9b01      	ldr	r3, [sp, #4]
 8008b86:	e7d4      	b.n	8008b32 <UART_Receive_IT.part.0.isra.0+0x76>

08008b88 <HAL_UART_IRQHandler>:
{
 8008b88:	b530      	push	{r4, r5, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008b8a:	6803      	ldr	r3, [r0, #0]
 8008b8c:	681a      	ldr	r2, [r3, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008b8e:	68d9      	ldr	r1, [r3, #12]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008b90:	695d      	ldr	r5, [r3, #20]
  if (errorflags == RESET)
 8008b92:	f012 0f0f 	tst.w	r2, #15
{
 8008b96:	b083      	sub	sp, #12
 8008b98:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8008b9a:	d16e      	bne.n	8008c7a <HAL_UART_IRQHandler+0xf2>
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b9c:	0695      	lsls	r5, r2, #26
 8008b9e:	d502      	bpl.n	8008ba6 <HAL_UART_IRQHandler+0x1e>
 8008ba0:	068d      	lsls	r5, r1, #26
 8008ba2:	f100 80b1 	bmi.w	8008d08 <HAL_UART_IRQHandler+0x180>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ba6:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8008ba8:	2801      	cmp	r0, #1
 8008baa:	d00b      	beq.n	8008bc4 <HAL_UART_IRQHandler+0x3c>
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008bac:	0610      	lsls	r0, r2, #24
 8008bae:	d502      	bpl.n	8008bb6 <HAL_UART_IRQHandler+0x2e>
 8008bb0:	060d      	lsls	r5, r1, #24
 8008bb2:	f100 80b3 	bmi.w	8008d1c <HAL_UART_IRQHandler+0x194>
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008bb6:	0650      	lsls	r0, r2, #25
 8008bb8:	d502      	bpl.n	8008bc0 <HAL_UART_IRQHandler+0x38>
 8008bba:	064a      	lsls	r2, r1, #25
 8008bbc:	f100 80cd 	bmi.w	8008d5a <HAL_UART_IRQHandler+0x1d2>
}
 8008bc0:	b003      	add	sp, #12
 8008bc2:	bd30      	pop	{r4, r5, pc}
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008bc4:	06d5      	lsls	r5, r2, #27
 8008bc6:	d5f1      	bpl.n	8008bac <HAL_UART_IRQHandler+0x24>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008bc8:	06c8      	lsls	r0, r1, #27
 8008bca:	d5ef      	bpl.n	8008bac <HAL_UART_IRQHandler+0x24>
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008bcc:	2200      	movs	r2, #0
 8008bce:	9201      	str	r2, [sp, #4]
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	9201      	str	r2, [sp, #4]
 8008bd4:	685a      	ldr	r2, [r3, #4]
 8008bd6:	9201      	str	r2, [sp, #4]
 8008bd8:	9a01      	ldr	r2, [sp, #4]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bda:	695a      	ldr	r2, [r3, #20]
 8008bdc:	0655      	lsls	r5, r2, #25
 8008bde:	f140 8119 	bpl.w	8008e14 <HAL_UART_IRQHandler+0x28c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008be2:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008be4:	6802      	ldr	r2, [r0, #0]
 8008be6:	6852      	ldr	r2, [r2, #4]
 8008be8:	b292      	uxth	r2, r2
      if ((nb_remaining_rx_data > 0U)
 8008bea:	2a00      	cmp	r2, #0
 8008bec:	d0e8      	beq.n	8008bc0 <HAL_UART_IRQHandler+0x38>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008bee:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008bf0:	4291      	cmp	r1, r2
 8008bf2:	d9e5      	bls.n	8008bc0 <HAL_UART_IRQHandler+0x38>
        huart->RxXferCount = nb_remaining_rx_data;
 8008bf4:	85e2      	strh	r2, [r4, #46]	; 0x2e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bf6:	69c2      	ldr	r2, [r0, #28]
 8008bf8:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8008bfc:	d036      	beq.n	8008c6c <HAL_UART_IRQHandler+0xe4>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bfe:	f103 020c 	add.w	r2, r3, #12
 8008c02:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c06:	f422 7280 	bic.w	r2, r2, #256	; 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0a:	f103 050c 	add.w	r5, r3, #12
 8008c0e:	e845 2100 	strex	r1, r2, [r5]
 8008c12:	2900      	cmp	r1, #0
 8008c14:	d1f3      	bne.n	8008bfe <HAL_UART_IRQHandler+0x76>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c16:	f103 0214 	add.w	r2, r3, #20
 8008c1a:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c1e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c22:	f103 0514 	add.w	r5, r3, #20
 8008c26:	e845 2100 	strex	r1, r2, [r5]
 8008c2a:	2900      	cmp	r1, #0
 8008c2c:	d1f3      	bne.n	8008c16 <HAL_UART_IRQHandler+0x8e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c2e:	f103 0214 	add.w	r2, r3, #20
 8008c32:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c3a:	f103 0514 	add.w	r5, r3, #20
 8008c3e:	e845 2100 	strex	r1, r2, [r5]
 8008c42:	2900      	cmp	r1, #0
 8008c44:	d1f3      	bne.n	8008c2e <HAL_UART_IRQHandler+0xa6>
          huart->RxState = HAL_UART_STATE_READY;
 8008c46:	2220      	movs	r2, #32
 8008c48:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c4c:	6321      	str	r1, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4e:	f103 020c 	add.w	r2, r3, #12
 8008c52:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c56:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c5a:	f103 050c 	add.w	r5, r3, #12
 8008c5e:	e845 2100 	strex	r1, r2, [r5]
 8008c62:	2900      	cmp	r1, #0
 8008c64:	d1f3      	bne.n	8008c4e <HAL_UART_IRQHandler+0xc6>
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c66:	f7fd f963 	bl	8005f30 <HAL_DMA_Abort>
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c6a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8008c6c:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
 8008c6e:	1ac9      	subs	r1, r1, r3
 8008c70:	4620      	mov	r0, r4
 8008c72:	b289      	uxth	r1, r1
 8008c74:	f7ff ff20 	bl	8008ab8 <HAL_UARTEx_RxEventCallback>
 8008c78:	e7a2      	b.n	8008bc0 <HAL_UART_IRQHandler+0x38>
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8008c7a:	f005 0501 	and.w	r5, r5, #1
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008c7e:	f401 7090 	and.w	r0, r1, #288	; 0x120
 8008c82:	4328      	orrs	r0, r5
 8008c84:	d08f      	beq.n	8008ba6 <HAL_UART_IRQHandler+0x1e>
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008c86:	07d0      	lsls	r0, r2, #31
 8008c88:	d505      	bpl.n	8008c96 <HAL_UART_IRQHandler+0x10e>
 8008c8a:	05c8      	lsls	r0, r1, #23
 8008c8c:	d503      	bpl.n	8008c96 <HAL_UART_IRQHandler+0x10e>
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008c8e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008c90:	f040 0001 	orr.w	r0, r0, #1
 8008c94:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008c96:	0750      	lsls	r0, r2, #29
 8008c98:	d531      	bpl.n	8008cfe <HAL_UART_IRQHandler+0x176>
 8008c9a:	b14d      	cbz	r5, 8008cb0 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008c9c:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008c9e:	f040 0002 	orr.w	r0, r0, #2
 8008ca2:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008ca4:	0790      	lsls	r0, r2, #30
 8008ca6:	d503      	bpl.n	8008cb0 <HAL_UART_IRQHandler+0x128>
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008ca8:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008caa:	f040 0004 	orr.w	r0, r0, #4
 8008cae:	6420      	str	r0, [r4, #64]	; 0x40
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008cb0:	0710      	lsls	r0, r2, #28
 8008cb2:	d507      	bpl.n	8008cc4 <HAL_UART_IRQHandler+0x13c>
 8008cb4:	f001 0020 	and.w	r0, r1, #32
 8008cb8:	4328      	orrs	r0, r5
 8008cba:	d003      	beq.n	8008cc4 <HAL_UART_IRQHandler+0x13c>
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008cbc:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008cbe:	f040 0008 	orr.w	r0, r0, #8
 8008cc2:	6420      	str	r0, [r4, #64]	; 0x40
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008cc4:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8008cc6:	2800      	cmp	r0, #0
 8008cc8:	f43f af7a 	beq.w	8008bc0 <HAL_UART_IRQHandler+0x38>
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ccc:	0690      	lsls	r0, r2, #26
 8008cce:	d509      	bpl.n	8008ce4 <HAL_UART_IRQHandler+0x15c>
 8008cd0:	0689      	lsls	r1, r1, #26
 8008cd2:	d507      	bpl.n	8008ce4 <HAL_UART_IRQHandler+0x15c>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cd4:	f894 203e 	ldrb.w	r2, [r4, #62]	; 0x3e
 8008cd8:	2a22      	cmp	r2, #34	; 0x22
 8008cda:	d103      	bne.n	8008ce4 <HAL_UART_IRQHandler+0x15c>
 8008cdc:	4620      	mov	r0, r4
 8008cde:	f7ff feed 	bl	8008abc <UART_Receive_IT.part.0.isra.0>
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce2:	6823      	ldr	r3, [r4, #0]
 8008ce4:	695a      	ldr	r2, [r3, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008ce6:	6c25      	ldr	r5, [r4, #64]	; 0x40
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008ce8:	f002 0240 	and.w	r2, r2, #64	; 0x40
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008cec:	f005 0508 	and.w	r5, r5, #8
 8008cf0:	4315      	orrs	r5, r2
 8008cf2:	d13d      	bne.n	8008d70 <HAL_UART_IRQHandler+0x1e8>
        HAL_UART_ErrorCallback(huart);
 8008cf4:	4620      	mov	r0, r4
 8008cf6:	f7ff fed5 	bl	8008aa4 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cfa:	6425      	str	r5, [r4, #64]	; 0x40
 8008cfc:	e760      	b.n	8008bc0 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008cfe:	0790      	lsls	r0, r2, #30
 8008d00:	d5d6      	bpl.n	8008cb0 <HAL_UART_IRQHandler+0x128>
 8008d02:	2d00      	cmp	r5, #0
 8008d04:	d1d0      	bne.n	8008ca8 <HAL_UART_IRQHandler+0x120>
 8008d06:	e7d3      	b.n	8008cb0 <HAL_UART_IRQHandler+0x128>
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d08:	f890 303e 	ldrb.w	r3, [r0, #62]	; 0x3e
 8008d0c:	2b22      	cmp	r3, #34	; 0x22
 8008d0e:	f47f af57 	bne.w	8008bc0 <HAL_UART_IRQHandler+0x38>
}
 8008d12:	b003      	add	sp, #12
 8008d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d18:	f7ff bed0 	b.w	8008abc <UART_Receive_IT.part.0.isra.0>
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d1c:	f894 203d 	ldrb.w	r2, [r4, #61]	; 0x3d
 8008d20:	2a21      	cmp	r2, #33	; 0x21
 8008d22:	f47f af4d 	bne.w	8008bc0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d26:	68a2      	ldr	r2, [r4, #8]
 8008d28:	f5b2 5f80 	cmp.w	r2, #4096	; 0x1000
 8008d2c:	f000 80ab 	beq.w	8008e86 <HAL_UART_IRQHandler+0x2fe>
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d30:	6a22      	ldr	r2, [r4, #32]
 8008d32:	1c51      	adds	r1, r2, #1
 8008d34:	6221      	str	r1, [r4, #32]
 8008d36:	7812      	ldrb	r2, [r2, #0]
 8008d38:	605a      	str	r2, [r3, #4]
    if (--huart->TxXferCount == 0U)
 8008d3a:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
 8008d3c:	3a01      	subs	r2, #1
 8008d3e:	b292      	uxth	r2, r2
 8008d40:	84e2      	strh	r2, [r4, #38]	; 0x26
 8008d42:	2a00      	cmp	r2, #0
 8008d44:	f47f af3c 	bne.w	8008bc0 <HAL_UART_IRQHandler+0x38>
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d48:	68da      	ldr	r2, [r3, #12]
 8008d4a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d4e:	60da      	str	r2, [r3, #12]
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008d50:	68da      	ldr	r2, [r3, #12]
 8008d52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008d56:	60da      	str	r2, [r3, #12]
 8008d58:	e732      	b.n	8008bc0 <HAL_UART_IRQHandler+0x38>
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d5a:	68da      	ldr	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8008d5c:	2120      	movs	r1, #32
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008d62:	60da      	str	r2, [r3, #12]
  HAL_UART_TxCpltCallback(huart);
 8008d64:	4620      	mov	r0, r4
  huart->gState = HAL_UART_STATE_READY;
 8008d66:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  HAL_UART_TxCpltCallback(huart);
 8008d6a:	f7fc fafb 	bl	8005364 <HAL_UART_TxCpltCallback>
    return;
 8008d6e:	e727      	b.n	8008bc0 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d70:	f103 020c 	add.w	r2, r3, #12
 8008d74:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d78:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7c:	f103 000c 	add.w	r0, r3, #12
 8008d80:	e840 2100 	strex	r1, r2, [r0]
 8008d84:	2900      	cmp	r1, #0
 8008d86:	d1f3      	bne.n	8008d70 <HAL_UART_IRQHandler+0x1e8>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d88:	f103 0214 	add.w	r2, r3, #20
 8008d8c:	e852 2f00 	ldrex	r2, [r2]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d90:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d94:	f103 0014 	add.w	r0, r3, #20
 8008d98:	e840 2100 	strex	r1, r2, [r0]
 8008d9c:	2900      	cmp	r1, #0
 8008d9e:	d1f3      	bne.n	8008d88 <HAL_UART_IRQHandler+0x200>
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008da0:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8008da2:	2a01      	cmp	r2, #1
 8008da4:	d025      	beq.n	8008df2 <HAL_UART_IRQHandler+0x26a>
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008da6:	2200      	movs	r2, #0
  huart->RxState = HAL_UART_STATE_READY;
 8008da8:	2120      	movs	r1, #32
 8008daa:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dae:	6322      	str	r2, [r4, #48]	; 0x30
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008db0:	695a      	ldr	r2, [r3, #20]
 8008db2:	0652      	lsls	r2, r2, #25
 8008db4:	d52a      	bpl.n	8008e0c <HAL_UART_IRQHandler+0x284>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008db6:	f103 0214 	add.w	r2, r3, #20
 8008dba:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008dbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc2:	f103 0014 	add.w	r0, r3, #20
 8008dc6:	e840 2100 	strex	r1, r2, [r0]
 8008dca:	2900      	cmp	r1, #0
 8008dcc:	d1f3      	bne.n	8008db6 <HAL_UART_IRQHandler+0x22e>
          if (huart->hdmarx != NULL)
 8008dce:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008dd0:	b1e0      	cbz	r0, 8008e0c <HAL_UART_IRQHandler+0x284>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008dd2:	f648 23a9 	movw	r3, #35497	; 0x8aa9
 8008dd6:	f6c0 0300 	movt	r3, #2048	; 0x800
 8008dda:	6503      	str	r3, [r0, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008ddc:	f7fd f8f0 	bl	8005fc0 <HAL_DMA_Abort_IT>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f43f aeed 	beq.w	8008bc0 <HAL_UART_IRQHandler+0x38>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008de6:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8008de8:	6d03      	ldr	r3, [r0, #80]	; 0x50
}
 8008dea:	b003      	add	sp, #12
 8008dec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008df0:	4718      	bx	r3
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008df2:	f103 020c 	add.w	r2, r3, #12
 8008df6:	e852 2f00 	ldrex	r2, [r2]
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dfa:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dfe:	f103 000c 	add.w	r0, r3, #12
 8008e02:	e840 2100 	strex	r1, r2, [r0]
 8008e06:	2900      	cmp	r1, #0
 8008e08:	d1f3      	bne.n	8008df2 <HAL_UART_IRQHandler+0x26a>
 8008e0a:	e7cc      	b.n	8008da6 <HAL_UART_IRQHandler+0x21e>
            HAL_UART_ErrorCallback(huart);
 8008e0c:	4620      	mov	r0, r4
 8008e0e:	f7ff fe49 	bl	8008aa4 <HAL_UART_ErrorCallback>
 8008e12:	e6d5      	b.n	8008bc0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e14:	8de1      	ldrh	r1, [r4, #46]	; 0x2e
      if ((huart->RxXferCount > 0U)
 8008e16:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8008e18:	b292      	uxth	r2, r2
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e1a:	b289      	uxth	r1, r1
      if ((huart->RxXferCount > 0U)
 8008e1c:	2a00      	cmp	r2, #0
 8008e1e:	f43f aecf 	beq.w	8008bc0 <HAL_UART_IRQHandler+0x38>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008e22:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8008e24:	1a51      	subs	r1, r2, r1
 8008e26:	b289      	uxth	r1, r1
          && (nb_rx_data > 0U))
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	f43f aec9 	beq.w	8008bc0 <HAL_UART_IRQHandler+0x38>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e2e:	f103 020c 	add.w	r2, r3, #12
 8008e32:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008e36:	f422 7290 	bic.w	r2, r2, #288	; 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	f103 050c 	add.w	r5, r3, #12
 8008e3e:	e845 2000 	strex	r0, r2, [r5]
 8008e42:	2800      	cmp	r0, #0
 8008e44:	d1f3      	bne.n	8008e2e <HAL_UART_IRQHandler+0x2a6>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e46:	f103 0214 	add.w	r2, r3, #20
 8008e4a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e4e:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e52:	f103 0514 	add.w	r5, r3, #20
 8008e56:	e845 2000 	strex	r0, r2, [r5]
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d1f3      	bne.n	8008e46 <HAL_UART_IRQHandler+0x2be>
        huart->RxState = HAL_UART_STATE_READY;
 8008e5e:	2220      	movs	r2, #32
 8008e60:	f884 203e 	strb.w	r2, [r4, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e64:	6320      	str	r0, [r4, #48]	; 0x30
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e66:	f103 020c 	add.w	r2, r3, #12
 8008e6a:	e852 2f00 	ldrex	r2, [r2]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e72:	f103 050c 	add.w	r5, r3, #12
 8008e76:	e845 2000 	strex	r0, r2, [r5]
 8008e7a:	2800      	cmp	r0, #0
 8008e7c:	d1f3      	bne.n	8008e66 <HAL_UART_IRQHandler+0x2de>
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008e7e:	4620      	mov	r0, r4
 8008e80:	f7ff fe1a 	bl	8008ab8 <HAL_UARTEx_RxEventCallback>
 8008e84:	e69c      	b.n	8008bc0 <HAL_UART_IRQHandler+0x38>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e86:	6922      	ldr	r2, [r4, #16]
 8008e88:	2a00      	cmp	r2, #0
 8008e8a:	f47f af51 	bne.w	8008d30 <HAL_UART_IRQHandler+0x1a8>
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008e8e:	6a22      	ldr	r2, [r4, #32]
 8008e90:	f832 1b02 	ldrh.w	r1, [r2], #2
 8008e94:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8008e98:	6059      	str	r1, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008e9a:	6222      	str	r2, [r4, #32]
 8008e9c:	e74d      	b.n	8008d3a <HAL_UART_IRQHandler+0x1b2>
 8008e9e:	bf00      	nop

08008ea0 <HAL_UART_GetState>:
  temp1 = huart->gState;
 8008ea0:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
  temp2 = huart->RxState;
 8008ea4:	f890 003e 	ldrb.w	r0, [r0, #62]	; 0x3e
}
 8008ea8:	4310      	orrs	r0, r2
 8008eaa:	4770      	bx	lr

08008eac <atof>:
 8008eac:	2100      	movs	r1, #0
 8008eae:	f001 bd0b 	b.w	800a8c8 <strtod>
	...

08008eb4 <__errno>:
 8008eb4:	4b01      	ldr	r3, [pc, #4]	; (8008ebc <__errno+0x8>)
 8008eb6:	6818      	ldr	r0, [r3, #0]
 8008eb8:	4770      	bx	lr
 8008eba:	bf00      	nop
 8008ebc:	20000074 	.word	0x20000074

08008ec0 <__libc_init_array>:
 8008ec0:	b570      	push	{r4, r5, r6, lr}
 8008ec2:	4d0d      	ldr	r5, [pc, #52]	; (8008ef8 <__libc_init_array+0x38>)
 8008ec4:	4c0d      	ldr	r4, [pc, #52]	; (8008efc <__libc_init_array+0x3c>)
 8008ec6:	1b64      	subs	r4, r4, r5
 8008ec8:	10a4      	asrs	r4, r4, #2
 8008eca:	2600      	movs	r6, #0
 8008ecc:	42a6      	cmp	r6, r4
 8008ece:	d109      	bne.n	8008ee4 <__libc_init_array+0x24>
 8008ed0:	4d0b      	ldr	r5, [pc, #44]	; (8008f00 <__libc_init_array+0x40>)
 8008ed2:	4c0c      	ldr	r4, [pc, #48]	; (8008f04 <__libc_init_array+0x44>)
 8008ed4:	f005 fdc4 	bl	800ea60 <_init>
 8008ed8:	1b64      	subs	r4, r4, r5
 8008eda:	10a4      	asrs	r4, r4, #2
 8008edc:	2600      	movs	r6, #0
 8008ede:	42a6      	cmp	r6, r4
 8008ee0:	d105      	bne.n	8008eee <__libc_init_array+0x2e>
 8008ee2:	bd70      	pop	{r4, r5, r6, pc}
 8008ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ee8:	4798      	blx	r3
 8008eea:	3601      	adds	r6, #1
 8008eec:	e7ee      	b.n	8008ecc <__libc_init_array+0xc>
 8008eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ef2:	4798      	blx	r3
 8008ef4:	3601      	adds	r6, #1
 8008ef6:	e7f2      	b.n	8008ede <__libc_init_array+0x1e>
 8008ef8:	0800fdf8 	.word	0x0800fdf8
 8008efc:	0800fdf8 	.word	0x0800fdf8
 8008f00:	0800fdf8 	.word	0x0800fdf8
 8008f04:	0800fdfc 	.word	0x0800fdfc

08008f08 <memcpy>:
 8008f08:	440a      	add	r2, r1
 8008f0a:	4291      	cmp	r1, r2
 8008f0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008f10:	d100      	bne.n	8008f14 <memcpy+0xc>
 8008f12:	4770      	bx	lr
 8008f14:	b510      	push	{r4, lr}
 8008f16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008f1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008f1e:	4291      	cmp	r1, r2
 8008f20:	d1f9      	bne.n	8008f16 <memcpy+0xe>
 8008f22:	bd10      	pop	{r4, pc}

08008f24 <memset>:
 8008f24:	4402      	add	r2, r0
 8008f26:	4603      	mov	r3, r0
 8008f28:	4293      	cmp	r3, r2
 8008f2a:	d100      	bne.n	8008f2e <memset+0xa>
 8008f2c:	4770      	bx	lr
 8008f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8008f32:	e7f9      	b.n	8008f28 <memset+0x4>

08008f34 <__cvt>:
 8008f34:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f38:	ec55 4b10 	vmov	r4, r5, d0
 8008f3c:	2d00      	cmp	r5, #0
 8008f3e:	460e      	mov	r6, r1
 8008f40:	4619      	mov	r1, r3
 8008f42:	462b      	mov	r3, r5
 8008f44:	bfbb      	ittet	lt
 8008f46:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f4a:	461d      	movlt	r5, r3
 8008f4c:	2300      	movge	r3, #0
 8008f4e:	232d      	movlt	r3, #45	; 0x2d
 8008f50:	700b      	strb	r3, [r1, #0]
 8008f52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f54:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f58:	4691      	mov	r9, r2
 8008f5a:	f023 0820 	bic.w	r8, r3, #32
 8008f5e:	bfbc      	itt	lt
 8008f60:	4622      	movlt	r2, r4
 8008f62:	4614      	movlt	r4, r2
 8008f64:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f68:	d005      	beq.n	8008f76 <__cvt+0x42>
 8008f6a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f6e:	d100      	bne.n	8008f72 <__cvt+0x3e>
 8008f70:	3601      	adds	r6, #1
 8008f72:	2102      	movs	r1, #2
 8008f74:	e000      	b.n	8008f78 <__cvt+0x44>
 8008f76:	2103      	movs	r1, #3
 8008f78:	ab03      	add	r3, sp, #12
 8008f7a:	9301      	str	r3, [sp, #4]
 8008f7c:	ab02      	add	r3, sp, #8
 8008f7e:	9300      	str	r3, [sp, #0]
 8008f80:	ec45 4b10 	vmov	d0, r4, r5
 8008f84:	4653      	mov	r3, sl
 8008f86:	4632      	mov	r2, r6
 8008f88:	f001 fed2 	bl	800ad30 <_dtoa_r>
 8008f8c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f90:	4607      	mov	r7, r0
 8008f92:	d102      	bne.n	8008f9a <__cvt+0x66>
 8008f94:	f019 0f01 	tst.w	r9, #1
 8008f98:	d022      	beq.n	8008fe0 <__cvt+0xac>
 8008f9a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f9e:	eb07 0906 	add.w	r9, r7, r6
 8008fa2:	d110      	bne.n	8008fc6 <__cvt+0x92>
 8008fa4:	783b      	ldrb	r3, [r7, #0]
 8008fa6:	2b30      	cmp	r3, #48	; 0x30
 8008fa8:	d10a      	bne.n	8008fc0 <__cvt+0x8c>
 8008faa:	2200      	movs	r2, #0
 8008fac:	2300      	movs	r3, #0
 8008fae:	4620      	mov	r0, r4
 8008fb0:	4629      	mov	r1, r5
 8008fb2:	f7f7 fd99 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fb6:	b918      	cbnz	r0, 8008fc0 <__cvt+0x8c>
 8008fb8:	f1c6 0601 	rsb	r6, r6, #1
 8008fbc:	f8ca 6000 	str.w	r6, [sl]
 8008fc0:	f8da 3000 	ldr.w	r3, [sl]
 8008fc4:	4499      	add	r9, r3
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4620      	mov	r0, r4
 8008fcc:	4629      	mov	r1, r5
 8008fce:	f7f7 fd8b 	bl	8000ae8 <__aeabi_dcmpeq>
 8008fd2:	b108      	cbz	r0, 8008fd8 <__cvt+0xa4>
 8008fd4:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fd8:	2230      	movs	r2, #48	; 0x30
 8008fda:	9b03      	ldr	r3, [sp, #12]
 8008fdc:	454b      	cmp	r3, r9
 8008fde:	d307      	bcc.n	8008ff0 <__cvt+0xbc>
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fe4:	1bdb      	subs	r3, r3, r7
 8008fe6:	4638      	mov	r0, r7
 8008fe8:	6013      	str	r3, [r2, #0]
 8008fea:	b004      	add	sp, #16
 8008fec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ff0:	1c59      	adds	r1, r3, #1
 8008ff2:	9103      	str	r1, [sp, #12]
 8008ff4:	701a      	strb	r2, [r3, #0]
 8008ff6:	e7f0      	b.n	8008fda <__cvt+0xa6>

08008ff8 <__exponent>:
 8008ff8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ffa:	4603      	mov	r3, r0
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	bfb8      	it	lt
 8009000:	4249      	neglt	r1, r1
 8009002:	f803 2b02 	strb.w	r2, [r3], #2
 8009006:	bfb4      	ite	lt
 8009008:	222d      	movlt	r2, #45	; 0x2d
 800900a:	222b      	movge	r2, #43	; 0x2b
 800900c:	2909      	cmp	r1, #9
 800900e:	7042      	strb	r2, [r0, #1]
 8009010:	dd2a      	ble.n	8009068 <__exponent+0x70>
 8009012:	f10d 0407 	add.w	r4, sp, #7
 8009016:	46a4      	mov	ip, r4
 8009018:	270a      	movs	r7, #10
 800901a:	46a6      	mov	lr, r4
 800901c:	460a      	mov	r2, r1
 800901e:	fb91 f6f7 	sdiv	r6, r1, r7
 8009022:	fb07 1516 	mls	r5, r7, r6, r1
 8009026:	3530      	adds	r5, #48	; 0x30
 8009028:	2a63      	cmp	r2, #99	; 0x63
 800902a:	f104 34ff 	add.w	r4, r4, #4294967295
 800902e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009032:	4631      	mov	r1, r6
 8009034:	dcf1      	bgt.n	800901a <__exponent+0x22>
 8009036:	3130      	adds	r1, #48	; 0x30
 8009038:	f1ae 0502 	sub.w	r5, lr, #2
 800903c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009040:	1c44      	adds	r4, r0, #1
 8009042:	4629      	mov	r1, r5
 8009044:	4561      	cmp	r1, ip
 8009046:	d30a      	bcc.n	800905e <__exponent+0x66>
 8009048:	f10d 0209 	add.w	r2, sp, #9
 800904c:	eba2 020e 	sub.w	r2, r2, lr
 8009050:	4565      	cmp	r5, ip
 8009052:	bf88      	it	hi
 8009054:	2200      	movhi	r2, #0
 8009056:	4413      	add	r3, r2
 8009058:	1a18      	subs	r0, r3, r0
 800905a:	b003      	add	sp, #12
 800905c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800905e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009062:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009066:	e7ed      	b.n	8009044 <__exponent+0x4c>
 8009068:	2330      	movs	r3, #48	; 0x30
 800906a:	3130      	adds	r1, #48	; 0x30
 800906c:	7083      	strb	r3, [r0, #2]
 800906e:	70c1      	strb	r1, [r0, #3]
 8009070:	1d03      	adds	r3, r0, #4
 8009072:	e7f1      	b.n	8009058 <__exponent+0x60>

08009074 <_printf_float>:
 8009074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009078:	ed2d 8b02 	vpush	{d8}
 800907c:	b08d      	sub	sp, #52	; 0x34
 800907e:	460c      	mov	r4, r1
 8009080:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009084:	4616      	mov	r6, r2
 8009086:	461f      	mov	r7, r3
 8009088:	4605      	mov	r5, r0
 800908a:	f002 ffc1 	bl	800c010 <_localeconv_r>
 800908e:	f8d0 a000 	ldr.w	sl, [r0]
 8009092:	4650      	mov	r0, sl
 8009094:	f7f7 f8a6 	bl	80001e4 <strlen>
 8009098:	2300      	movs	r3, #0
 800909a:	930a      	str	r3, [sp, #40]	; 0x28
 800909c:	6823      	ldr	r3, [r4, #0]
 800909e:	9305      	str	r3, [sp, #20]
 80090a0:	f8d8 3000 	ldr.w	r3, [r8]
 80090a4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80090a8:	3307      	adds	r3, #7
 80090aa:	f023 0307 	bic.w	r3, r3, #7
 80090ae:	f103 0208 	add.w	r2, r3, #8
 80090b2:	f8c8 2000 	str.w	r2, [r8]
 80090b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090ba:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80090be:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80090c2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090c6:	9307      	str	r3, [sp, #28]
 80090c8:	f8cd 8018 	str.w	r8, [sp, #24]
 80090cc:	ee08 0a10 	vmov	s16, r0
 80090d0:	4b9f      	ldr	r3, [pc, #636]	; (8009350 <_printf_float+0x2dc>)
 80090d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d6:	f04f 32ff 	mov.w	r2, #4294967295
 80090da:	f7f7 fd37 	bl	8000b4c <__aeabi_dcmpun>
 80090de:	bb88      	cbnz	r0, 8009144 <_printf_float+0xd0>
 80090e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090e4:	4b9a      	ldr	r3, [pc, #616]	; (8009350 <_printf_float+0x2dc>)
 80090e6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ea:	f7f7 fd11 	bl	8000b10 <__aeabi_dcmple>
 80090ee:	bb48      	cbnz	r0, 8009144 <_printf_float+0xd0>
 80090f0:	2200      	movs	r2, #0
 80090f2:	2300      	movs	r3, #0
 80090f4:	4640      	mov	r0, r8
 80090f6:	4649      	mov	r1, r9
 80090f8:	f7f7 fd00 	bl	8000afc <__aeabi_dcmplt>
 80090fc:	b110      	cbz	r0, 8009104 <_printf_float+0x90>
 80090fe:	232d      	movs	r3, #45	; 0x2d
 8009100:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009104:	4b93      	ldr	r3, [pc, #588]	; (8009354 <_printf_float+0x2e0>)
 8009106:	4894      	ldr	r0, [pc, #592]	; (8009358 <_printf_float+0x2e4>)
 8009108:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800910c:	bf94      	ite	ls
 800910e:	4698      	movls	r8, r3
 8009110:	4680      	movhi	r8, r0
 8009112:	2303      	movs	r3, #3
 8009114:	6123      	str	r3, [r4, #16]
 8009116:	9b05      	ldr	r3, [sp, #20]
 8009118:	f023 0204 	bic.w	r2, r3, #4
 800911c:	6022      	str	r2, [r4, #0]
 800911e:	f04f 0900 	mov.w	r9, #0
 8009122:	9700      	str	r7, [sp, #0]
 8009124:	4633      	mov	r3, r6
 8009126:	aa0b      	add	r2, sp, #44	; 0x2c
 8009128:	4621      	mov	r1, r4
 800912a:	4628      	mov	r0, r5
 800912c:	f000 f9d8 	bl	80094e0 <_printf_common>
 8009130:	3001      	adds	r0, #1
 8009132:	f040 8090 	bne.w	8009256 <_printf_float+0x1e2>
 8009136:	f04f 30ff 	mov.w	r0, #4294967295
 800913a:	b00d      	add	sp, #52	; 0x34
 800913c:	ecbd 8b02 	vpop	{d8}
 8009140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009144:	4642      	mov	r2, r8
 8009146:	464b      	mov	r3, r9
 8009148:	4640      	mov	r0, r8
 800914a:	4649      	mov	r1, r9
 800914c:	f7f7 fcfe 	bl	8000b4c <__aeabi_dcmpun>
 8009150:	b140      	cbz	r0, 8009164 <_printf_float+0xf0>
 8009152:	464b      	mov	r3, r9
 8009154:	2b00      	cmp	r3, #0
 8009156:	bfbc      	itt	lt
 8009158:	232d      	movlt	r3, #45	; 0x2d
 800915a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800915e:	487f      	ldr	r0, [pc, #508]	; (800935c <_printf_float+0x2e8>)
 8009160:	4b7f      	ldr	r3, [pc, #508]	; (8009360 <_printf_float+0x2ec>)
 8009162:	e7d1      	b.n	8009108 <_printf_float+0x94>
 8009164:	6863      	ldr	r3, [r4, #4]
 8009166:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800916a:	9206      	str	r2, [sp, #24]
 800916c:	1c5a      	adds	r2, r3, #1
 800916e:	d13f      	bne.n	80091f0 <_printf_float+0x17c>
 8009170:	2306      	movs	r3, #6
 8009172:	6063      	str	r3, [r4, #4]
 8009174:	9b05      	ldr	r3, [sp, #20]
 8009176:	6861      	ldr	r1, [r4, #4]
 8009178:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800917c:	2300      	movs	r3, #0
 800917e:	9303      	str	r3, [sp, #12]
 8009180:	ab0a      	add	r3, sp, #40	; 0x28
 8009182:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009186:	ab09      	add	r3, sp, #36	; 0x24
 8009188:	ec49 8b10 	vmov	d0, r8, r9
 800918c:	9300      	str	r3, [sp, #0]
 800918e:	6022      	str	r2, [r4, #0]
 8009190:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009194:	4628      	mov	r0, r5
 8009196:	f7ff fecd 	bl	8008f34 <__cvt>
 800919a:	9b06      	ldr	r3, [sp, #24]
 800919c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800919e:	2b47      	cmp	r3, #71	; 0x47
 80091a0:	4680      	mov	r8, r0
 80091a2:	d108      	bne.n	80091b6 <_printf_float+0x142>
 80091a4:	1cc8      	adds	r0, r1, #3
 80091a6:	db02      	blt.n	80091ae <_printf_float+0x13a>
 80091a8:	6863      	ldr	r3, [r4, #4]
 80091aa:	4299      	cmp	r1, r3
 80091ac:	dd41      	ble.n	8009232 <_printf_float+0x1be>
 80091ae:	f1ab 0b02 	sub.w	fp, fp, #2
 80091b2:	fa5f fb8b 	uxtb.w	fp, fp
 80091b6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091ba:	d820      	bhi.n	80091fe <_printf_float+0x18a>
 80091bc:	3901      	subs	r1, #1
 80091be:	465a      	mov	r2, fp
 80091c0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091c4:	9109      	str	r1, [sp, #36]	; 0x24
 80091c6:	f7ff ff17 	bl	8008ff8 <__exponent>
 80091ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091cc:	1813      	adds	r3, r2, r0
 80091ce:	2a01      	cmp	r2, #1
 80091d0:	4681      	mov	r9, r0
 80091d2:	6123      	str	r3, [r4, #16]
 80091d4:	dc02      	bgt.n	80091dc <_printf_float+0x168>
 80091d6:	6822      	ldr	r2, [r4, #0]
 80091d8:	07d2      	lsls	r2, r2, #31
 80091da:	d501      	bpl.n	80091e0 <_printf_float+0x16c>
 80091dc:	3301      	adds	r3, #1
 80091de:	6123      	str	r3, [r4, #16]
 80091e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d09c      	beq.n	8009122 <_printf_float+0xae>
 80091e8:	232d      	movs	r3, #45	; 0x2d
 80091ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091ee:	e798      	b.n	8009122 <_printf_float+0xae>
 80091f0:	9a06      	ldr	r2, [sp, #24]
 80091f2:	2a47      	cmp	r2, #71	; 0x47
 80091f4:	d1be      	bne.n	8009174 <_printf_float+0x100>
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1bc      	bne.n	8009174 <_printf_float+0x100>
 80091fa:	2301      	movs	r3, #1
 80091fc:	e7b9      	b.n	8009172 <_printf_float+0xfe>
 80091fe:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009202:	d118      	bne.n	8009236 <_printf_float+0x1c2>
 8009204:	2900      	cmp	r1, #0
 8009206:	6863      	ldr	r3, [r4, #4]
 8009208:	dd0b      	ble.n	8009222 <_printf_float+0x1ae>
 800920a:	6121      	str	r1, [r4, #16]
 800920c:	b913      	cbnz	r3, 8009214 <_printf_float+0x1a0>
 800920e:	6822      	ldr	r2, [r4, #0]
 8009210:	07d0      	lsls	r0, r2, #31
 8009212:	d502      	bpl.n	800921a <_printf_float+0x1a6>
 8009214:	3301      	adds	r3, #1
 8009216:	440b      	add	r3, r1
 8009218:	6123      	str	r3, [r4, #16]
 800921a:	65a1      	str	r1, [r4, #88]	; 0x58
 800921c:	f04f 0900 	mov.w	r9, #0
 8009220:	e7de      	b.n	80091e0 <_printf_float+0x16c>
 8009222:	b913      	cbnz	r3, 800922a <_printf_float+0x1b6>
 8009224:	6822      	ldr	r2, [r4, #0]
 8009226:	07d2      	lsls	r2, r2, #31
 8009228:	d501      	bpl.n	800922e <_printf_float+0x1ba>
 800922a:	3302      	adds	r3, #2
 800922c:	e7f4      	b.n	8009218 <_printf_float+0x1a4>
 800922e:	2301      	movs	r3, #1
 8009230:	e7f2      	b.n	8009218 <_printf_float+0x1a4>
 8009232:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009236:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009238:	4299      	cmp	r1, r3
 800923a:	db05      	blt.n	8009248 <_printf_float+0x1d4>
 800923c:	6823      	ldr	r3, [r4, #0]
 800923e:	6121      	str	r1, [r4, #16]
 8009240:	07d8      	lsls	r0, r3, #31
 8009242:	d5ea      	bpl.n	800921a <_printf_float+0x1a6>
 8009244:	1c4b      	adds	r3, r1, #1
 8009246:	e7e7      	b.n	8009218 <_printf_float+0x1a4>
 8009248:	2900      	cmp	r1, #0
 800924a:	bfd4      	ite	le
 800924c:	f1c1 0202 	rsble	r2, r1, #2
 8009250:	2201      	movgt	r2, #1
 8009252:	4413      	add	r3, r2
 8009254:	e7e0      	b.n	8009218 <_printf_float+0x1a4>
 8009256:	6823      	ldr	r3, [r4, #0]
 8009258:	055a      	lsls	r2, r3, #21
 800925a:	d407      	bmi.n	800926c <_printf_float+0x1f8>
 800925c:	6923      	ldr	r3, [r4, #16]
 800925e:	4642      	mov	r2, r8
 8009260:	4631      	mov	r1, r6
 8009262:	4628      	mov	r0, r5
 8009264:	47b8      	blx	r7
 8009266:	3001      	adds	r0, #1
 8009268:	d12c      	bne.n	80092c4 <_printf_float+0x250>
 800926a:	e764      	b.n	8009136 <_printf_float+0xc2>
 800926c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009270:	f240 80e0 	bls.w	8009434 <_printf_float+0x3c0>
 8009274:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009278:	2200      	movs	r2, #0
 800927a:	2300      	movs	r3, #0
 800927c:	f7f7 fc34 	bl	8000ae8 <__aeabi_dcmpeq>
 8009280:	2800      	cmp	r0, #0
 8009282:	d034      	beq.n	80092ee <_printf_float+0x27a>
 8009284:	4a37      	ldr	r2, [pc, #220]	; (8009364 <_printf_float+0x2f0>)
 8009286:	2301      	movs	r3, #1
 8009288:	4631      	mov	r1, r6
 800928a:	4628      	mov	r0, r5
 800928c:	47b8      	blx	r7
 800928e:	3001      	adds	r0, #1
 8009290:	f43f af51 	beq.w	8009136 <_printf_float+0xc2>
 8009294:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009298:	429a      	cmp	r2, r3
 800929a:	db02      	blt.n	80092a2 <_printf_float+0x22e>
 800929c:	6823      	ldr	r3, [r4, #0]
 800929e:	07d8      	lsls	r0, r3, #31
 80092a0:	d510      	bpl.n	80092c4 <_printf_float+0x250>
 80092a2:	ee18 3a10 	vmov	r3, s16
 80092a6:	4652      	mov	r2, sl
 80092a8:	4631      	mov	r1, r6
 80092aa:	4628      	mov	r0, r5
 80092ac:	47b8      	blx	r7
 80092ae:	3001      	adds	r0, #1
 80092b0:	f43f af41 	beq.w	8009136 <_printf_float+0xc2>
 80092b4:	f04f 0800 	mov.w	r8, #0
 80092b8:	f104 091a 	add.w	r9, r4, #26
 80092bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092be:	3b01      	subs	r3, #1
 80092c0:	4543      	cmp	r3, r8
 80092c2:	dc09      	bgt.n	80092d8 <_printf_float+0x264>
 80092c4:	6823      	ldr	r3, [r4, #0]
 80092c6:	079b      	lsls	r3, r3, #30
 80092c8:	f100 8105 	bmi.w	80094d6 <_printf_float+0x462>
 80092cc:	68e0      	ldr	r0, [r4, #12]
 80092ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092d0:	4298      	cmp	r0, r3
 80092d2:	bfb8      	it	lt
 80092d4:	4618      	movlt	r0, r3
 80092d6:	e730      	b.n	800913a <_printf_float+0xc6>
 80092d8:	2301      	movs	r3, #1
 80092da:	464a      	mov	r2, r9
 80092dc:	4631      	mov	r1, r6
 80092de:	4628      	mov	r0, r5
 80092e0:	47b8      	blx	r7
 80092e2:	3001      	adds	r0, #1
 80092e4:	f43f af27 	beq.w	8009136 <_printf_float+0xc2>
 80092e8:	f108 0801 	add.w	r8, r8, #1
 80092ec:	e7e6      	b.n	80092bc <_printf_float+0x248>
 80092ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	dc39      	bgt.n	8009368 <_printf_float+0x2f4>
 80092f4:	4a1b      	ldr	r2, [pc, #108]	; (8009364 <_printf_float+0x2f0>)
 80092f6:	2301      	movs	r3, #1
 80092f8:	4631      	mov	r1, r6
 80092fa:	4628      	mov	r0, r5
 80092fc:	47b8      	blx	r7
 80092fe:	3001      	adds	r0, #1
 8009300:	f43f af19 	beq.w	8009136 <_printf_float+0xc2>
 8009304:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009308:	4313      	orrs	r3, r2
 800930a:	d102      	bne.n	8009312 <_printf_float+0x29e>
 800930c:	6823      	ldr	r3, [r4, #0]
 800930e:	07d9      	lsls	r1, r3, #31
 8009310:	d5d8      	bpl.n	80092c4 <_printf_float+0x250>
 8009312:	ee18 3a10 	vmov	r3, s16
 8009316:	4652      	mov	r2, sl
 8009318:	4631      	mov	r1, r6
 800931a:	4628      	mov	r0, r5
 800931c:	47b8      	blx	r7
 800931e:	3001      	adds	r0, #1
 8009320:	f43f af09 	beq.w	8009136 <_printf_float+0xc2>
 8009324:	f04f 0900 	mov.w	r9, #0
 8009328:	f104 0a1a 	add.w	sl, r4, #26
 800932c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800932e:	425b      	negs	r3, r3
 8009330:	454b      	cmp	r3, r9
 8009332:	dc01      	bgt.n	8009338 <_printf_float+0x2c4>
 8009334:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009336:	e792      	b.n	800925e <_printf_float+0x1ea>
 8009338:	2301      	movs	r3, #1
 800933a:	4652      	mov	r2, sl
 800933c:	4631      	mov	r1, r6
 800933e:	4628      	mov	r0, r5
 8009340:	47b8      	blx	r7
 8009342:	3001      	adds	r0, #1
 8009344:	f43f aef7 	beq.w	8009136 <_printf_float+0xc2>
 8009348:	f109 0901 	add.w	r9, r9, #1
 800934c:	e7ee      	b.n	800932c <_printf_float+0x2b8>
 800934e:	bf00      	nop
 8009350:	7fefffff 	.word	0x7fefffff
 8009354:	0800f520 	.word	0x0800f520
 8009358:	0800f524 	.word	0x0800f524
 800935c:	0800f52c 	.word	0x0800f52c
 8009360:	0800f528 	.word	0x0800f528
 8009364:	0800f530 	.word	0x0800f530
 8009368:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800936a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800936c:	429a      	cmp	r2, r3
 800936e:	bfa8      	it	ge
 8009370:	461a      	movge	r2, r3
 8009372:	2a00      	cmp	r2, #0
 8009374:	4691      	mov	r9, r2
 8009376:	dc37      	bgt.n	80093e8 <_printf_float+0x374>
 8009378:	f04f 0b00 	mov.w	fp, #0
 800937c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009380:	f104 021a 	add.w	r2, r4, #26
 8009384:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009386:	9305      	str	r3, [sp, #20]
 8009388:	eba3 0309 	sub.w	r3, r3, r9
 800938c:	455b      	cmp	r3, fp
 800938e:	dc33      	bgt.n	80093f8 <_printf_float+0x384>
 8009390:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009394:	429a      	cmp	r2, r3
 8009396:	db3b      	blt.n	8009410 <_printf_float+0x39c>
 8009398:	6823      	ldr	r3, [r4, #0]
 800939a:	07da      	lsls	r2, r3, #31
 800939c:	d438      	bmi.n	8009410 <_printf_float+0x39c>
 800939e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093a0:	9a05      	ldr	r2, [sp, #20]
 80093a2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80093a4:	1a9a      	subs	r2, r3, r2
 80093a6:	eba3 0901 	sub.w	r9, r3, r1
 80093aa:	4591      	cmp	r9, r2
 80093ac:	bfa8      	it	ge
 80093ae:	4691      	movge	r9, r2
 80093b0:	f1b9 0f00 	cmp.w	r9, #0
 80093b4:	dc35      	bgt.n	8009422 <_printf_float+0x3ae>
 80093b6:	f04f 0800 	mov.w	r8, #0
 80093ba:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093be:	f104 0a1a 	add.w	sl, r4, #26
 80093c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093c6:	1a9b      	subs	r3, r3, r2
 80093c8:	eba3 0309 	sub.w	r3, r3, r9
 80093cc:	4543      	cmp	r3, r8
 80093ce:	f77f af79 	ble.w	80092c4 <_printf_float+0x250>
 80093d2:	2301      	movs	r3, #1
 80093d4:	4652      	mov	r2, sl
 80093d6:	4631      	mov	r1, r6
 80093d8:	4628      	mov	r0, r5
 80093da:	47b8      	blx	r7
 80093dc:	3001      	adds	r0, #1
 80093de:	f43f aeaa 	beq.w	8009136 <_printf_float+0xc2>
 80093e2:	f108 0801 	add.w	r8, r8, #1
 80093e6:	e7ec      	b.n	80093c2 <_printf_float+0x34e>
 80093e8:	4613      	mov	r3, r2
 80093ea:	4631      	mov	r1, r6
 80093ec:	4642      	mov	r2, r8
 80093ee:	4628      	mov	r0, r5
 80093f0:	47b8      	blx	r7
 80093f2:	3001      	adds	r0, #1
 80093f4:	d1c0      	bne.n	8009378 <_printf_float+0x304>
 80093f6:	e69e      	b.n	8009136 <_printf_float+0xc2>
 80093f8:	2301      	movs	r3, #1
 80093fa:	4631      	mov	r1, r6
 80093fc:	4628      	mov	r0, r5
 80093fe:	9205      	str	r2, [sp, #20]
 8009400:	47b8      	blx	r7
 8009402:	3001      	adds	r0, #1
 8009404:	f43f ae97 	beq.w	8009136 <_printf_float+0xc2>
 8009408:	9a05      	ldr	r2, [sp, #20]
 800940a:	f10b 0b01 	add.w	fp, fp, #1
 800940e:	e7b9      	b.n	8009384 <_printf_float+0x310>
 8009410:	ee18 3a10 	vmov	r3, s16
 8009414:	4652      	mov	r2, sl
 8009416:	4631      	mov	r1, r6
 8009418:	4628      	mov	r0, r5
 800941a:	47b8      	blx	r7
 800941c:	3001      	adds	r0, #1
 800941e:	d1be      	bne.n	800939e <_printf_float+0x32a>
 8009420:	e689      	b.n	8009136 <_printf_float+0xc2>
 8009422:	9a05      	ldr	r2, [sp, #20]
 8009424:	464b      	mov	r3, r9
 8009426:	4442      	add	r2, r8
 8009428:	4631      	mov	r1, r6
 800942a:	4628      	mov	r0, r5
 800942c:	47b8      	blx	r7
 800942e:	3001      	adds	r0, #1
 8009430:	d1c1      	bne.n	80093b6 <_printf_float+0x342>
 8009432:	e680      	b.n	8009136 <_printf_float+0xc2>
 8009434:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009436:	2a01      	cmp	r2, #1
 8009438:	dc01      	bgt.n	800943e <_printf_float+0x3ca>
 800943a:	07db      	lsls	r3, r3, #31
 800943c:	d538      	bpl.n	80094b0 <_printf_float+0x43c>
 800943e:	2301      	movs	r3, #1
 8009440:	4642      	mov	r2, r8
 8009442:	4631      	mov	r1, r6
 8009444:	4628      	mov	r0, r5
 8009446:	47b8      	blx	r7
 8009448:	3001      	adds	r0, #1
 800944a:	f43f ae74 	beq.w	8009136 <_printf_float+0xc2>
 800944e:	ee18 3a10 	vmov	r3, s16
 8009452:	4652      	mov	r2, sl
 8009454:	4631      	mov	r1, r6
 8009456:	4628      	mov	r0, r5
 8009458:	47b8      	blx	r7
 800945a:	3001      	adds	r0, #1
 800945c:	f43f ae6b 	beq.w	8009136 <_printf_float+0xc2>
 8009460:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009464:	2200      	movs	r2, #0
 8009466:	2300      	movs	r3, #0
 8009468:	f7f7 fb3e 	bl	8000ae8 <__aeabi_dcmpeq>
 800946c:	b9d8      	cbnz	r0, 80094a6 <_printf_float+0x432>
 800946e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009470:	f108 0201 	add.w	r2, r8, #1
 8009474:	3b01      	subs	r3, #1
 8009476:	4631      	mov	r1, r6
 8009478:	4628      	mov	r0, r5
 800947a:	47b8      	blx	r7
 800947c:	3001      	adds	r0, #1
 800947e:	d10e      	bne.n	800949e <_printf_float+0x42a>
 8009480:	e659      	b.n	8009136 <_printf_float+0xc2>
 8009482:	2301      	movs	r3, #1
 8009484:	4652      	mov	r2, sl
 8009486:	4631      	mov	r1, r6
 8009488:	4628      	mov	r0, r5
 800948a:	47b8      	blx	r7
 800948c:	3001      	adds	r0, #1
 800948e:	f43f ae52 	beq.w	8009136 <_printf_float+0xc2>
 8009492:	f108 0801 	add.w	r8, r8, #1
 8009496:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009498:	3b01      	subs	r3, #1
 800949a:	4543      	cmp	r3, r8
 800949c:	dcf1      	bgt.n	8009482 <_printf_float+0x40e>
 800949e:	464b      	mov	r3, r9
 80094a0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80094a4:	e6dc      	b.n	8009260 <_printf_float+0x1ec>
 80094a6:	f04f 0800 	mov.w	r8, #0
 80094aa:	f104 0a1a 	add.w	sl, r4, #26
 80094ae:	e7f2      	b.n	8009496 <_printf_float+0x422>
 80094b0:	2301      	movs	r3, #1
 80094b2:	4642      	mov	r2, r8
 80094b4:	e7df      	b.n	8009476 <_printf_float+0x402>
 80094b6:	2301      	movs	r3, #1
 80094b8:	464a      	mov	r2, r9
 80094ba:	4631      	mov	r1, r6
 80094bc:	4628      	mov	r0, r5
 80094be:	47b8      	blx	r7
 80094c0:	3001      	adds	r0, #1
 80094c2:	f43f ae38 	beq.w	8009136 <_printf_float+0xc2>
 80094c6:	f108 0801 	add.w	r8, r8, #1
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094ce:	1a5b      	subs	r3, r3, r1
 80094d0:	4543      	cmp	r3, r8
 80094d2:	dcf0      	bgt.n	80094b6 <_printf_float+0x442>
 80094d4:	e6fa      	b.n	80092cc <_printf_float+0x258>
 80094d6:	f04f 0800 	mov.w	r8, #0
 80094da:	f104 0919 	add.w	r9, r4, #25
 80094de:	e7f4      	b.n	80094ca <_printf_float+0x456>

080094e0 <_printf_common>:
 80094e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e4:	4616      	mov	r6, r2
 80094e6:	4699      	mov	r9, r3
 80094e8:	688a      	ldr	r2, [r1, #8]
 80094ea:	690b      	ldr	r3, [r1, #16]
 80094ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094f0:	4293      	cmp	r3, r2
 80094f2:	bfb8      	it	lt
 80094f4:	4613      	movlt	r3, r2
 80094f6:	6033      	str	r3, [r6, #0]
 80094f8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094fc:	4607      	mov	r7, r0
 80094fe:	460c      	mov	r4, r1
 8009500:	b10a      	cbz	r2, 8009506 <_printf_common+0x26>
 8009502:	3301      	adds	r3, #1
 8009504:	6033      	str	r3, [r6, #0]
 8009506:	6823      	ldr	r3, [r4, #0]
 8009508:	0699      	lsls	r1, r3, #26
 800950a:	bf42      	ittt	mi
 800950c:	6833      	ldrmi	r3, [r6, #0]
 800950e:	3302      	addmi	r3, #2
 8009510:	6033      	strmi	r3, [r6, #0]
 8009512:	6825      	ldr	r5, [r4, #0]
 8009514:	f015 0506 	ands.w	r5, r5, #6
 8009518:	d106      	bne.n	8009528 <_printf_common+0x48>
 800951a:	f104 0a19 	add.w	sl, r4, #25
 800951e:	68e3      	ldr	r3, [r4, #12]
 8009520:	6832      	ldr	r2, [r6, #0]
 8009522:	1a9b      	subs	r3, r3, r2
 8009524:	42ab      	cmp	r3, r5
 8009526:	dc26      	bgt.n	8009576 <_printf_common+0x96>
 8009528:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800952c:	1e13      	subs	r3, r2, #0
 800952e:	6822      	ldr	r2, [r4, #0]
 8009530:	bf18      	it	ne
 8009532:	2301      	movne	r3, #1
 8009534:	0692      	lsls	r2, r2, #26
 8009536:	d42b      	bmi.n	8009590 <_printf_common+0xb0>
 8009538:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800953c:	4649      	mov	r1, r9
 800953e:	4638      	mov	r0, r7
 8009540:	47c0      	blx	r8
 8009542:	3001      	adds	r0, #1
 8009544:	d01e      	beq.n	8009584 <_printf_common+0xa4>
 8009546:	6823      	ldr	r3, [r4, #0]
 8009548:	68e5      	ldr	r5, [r4, #12]
 800954a:	6832      	ldr	r2, [r6, #0]
 800954c:	f003 0306 	and.w	r3, r3, #6
 8009550:	2b04      	cmp	r3, #4
 8009552:	bf08      	it	eq
 8009554:	1aad      	subeq	r5, r5, r2
 8009556:	68a3      	ldr	r3, [r4, #8]
 8009558:	6922      	ldr	r2, [r4, #16]
 800955a:	bf0c      	ite	eq
 800955c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009560:	2500      	movne	r5, #0
 8009562:	4293      	cmp	r3, r2
 8009564:	bfc4      	itt	gt
 8009566:	1a9b      	subgt	r3, r3, r2
 8009568:	18ed      	addgt	r5, r5, r3
 800956a:	2600      	movs	r6, #0
 800956c:	341a      	adds	r4, #26
 800956e:	42b5      	cmp	r5, r6
 8009570:	d11a      	bne.n	80095a8 <_printf_common+0xc8>
 8009572:	2000      	movs	r0, #0
 8009574:	e008      	b.n	8009588 <_printf_common+0xa8>
 8009576:	2301      	movs	r3, #1
 8009578:	4652      	mov	r2, sl
 800957a:	4649      	mov	r1, r9
 800957c:	4638      	mov	r0, r7
 800957e:	47c0      	blx	r8
 8009580:	3001      	adds	r0, #1
 8009582:	d103      	bne.n	800958c <_printf_common+0xac>
 8009584:	f04f 30ff 	mov.w	r0, #4294967295
 8009588:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800958c:	3501      	adds	r5, #1
 800958e:	e7c6      	b.n	800951e <_printf_common+0x3e>
 8009590:	18e1      	adds	r1, r4, r3
 8009592:	1c5a      	adds	r2, r3, #1
 8009594:	2030      	movs	r0, #48	; 0x30
 8009596:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800959a:	4422      	add	r2, r4
 800959c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80095a0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80095a4:	3302      	adds	r3, #2
 80095a6:	e7c7      	b.n	8009538 <_printf_common+0x58>
 80095a8:	2301      	movs	r3, #1
 80095aa:	4622      	mov	r2, r4
 80095ac:	4649      	mov	r1, r9
 80095ae:	4638      	mov	r0, r7
 80095b0:	47c0      	blx	r8
 80095b2:	3001      	adds	r0, #1
 80095b4:	d0e6      	beq.n	8009584 <_printf_common+0xa4>
 80095b6:	3601      	adds	r6, #1
 80095b8:	e7d9      	b.n	800956e <_printf_common+0x8e>
	...

080095bc <_printf_i>:
 80095bc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095c0:	7e0f      	ldrb	r7, [r1, #24]
 80095c2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095c4:	2f78      	cmp	r7, #120	; 0x78
 80095c6:	4691      	mov	r9, r2
 80095c8:	4680      	mov	r8, r0
 80095ca:	460c      	mov	r4, r1
 80095cc:	469a      	mov	sl, r3
 80095ce:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095d2:	d807      	bhi.n	80095e4 <_printf_i+0x28>
 80095d4:	2f62      	cmp	r7, #98	; 0x62
 80095d6:	d80a      	bhi.n	80095ee <_printf_i+0x32>
 80095d8:	2f00      	cmp	r7, #0
 80095da:	f000 80d8 	beq.w	800978e <_printf_i+0x1d2>
 80095de:	2f58      	cmp	r7, #88	; 0x58
 80095e0:	f000 80a3 	beq.w	800972a <_printf_i+0x16e>
 80095e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095e8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095ec:	e03a      	b.n	8009664 <_printf_i+0xa8>
 80095ee:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095f2:	2b15      	cmp	r3, #21
 80095f4:	d8f6      	bhi.n	80095e4 <_printf_i+0x28>
 80095f6:	a101      	add	r1, pc, #4	; (adr r1, 80095fc <_printf_i+0x40>)
 80095f8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095fc:	08009655 	.word	0x08009655
 8009600:	08009669 	.word	0x08009669
 8009604:	080095e5 	.word	0x080095e5
 8009608:	080095e5 	.word	0x080095e5
 800960c:	080095e5 	.word	0x080095e5
 8009610:	080095e5 	.word	0x080095e5
 8009614:	08009669 	.word	0x08009669
 8009618:	080095e5 	.word	0x080095e5
 800961c:	080095e5 	.word	0x080095e5
 8009620:	080095e5 	.word	0x080095e5
 8009624:	080095e5 	.word	0x080095e5
 8009628:	08009775 	.word	0x08009775
 800962c:	08009699 	.word	0x08009699
 8009630:	08009757 	.word	0x08009757
 8009634:	080095e5 	.word	0x080095e5
 8009638:	080095e5 	.word	0x080095e5
 800963c:	08009797 	.word	0x08009797
 8009640:	080095e5 	.word	0x080095e5
 8009644:	08009699 	.word	0x08009699
 8009648:	080095e5 	.word	0x080095e5
 800964c:	080095e5 	.word	0x080095e5
 8009650:	0800975f 	.word	0x0800975f
 8009654:	682b      	ldr	r3, [r5, #0]
 8009656:	1d1a      	adds	r2, r3, #4
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	602a      	str	r2, [r5, #0]
 800965c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009660:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009664:	2301      	movs	r3, #1
 8009666:	e0a3      	b.n	80097b0 <_printf_i+0x1f4>
 8009668:	6820      	ldr	r0, [r4, #0]
 800966a:	6829      	ldr	r1, [r5, #0]
 800966c:	0606      	lsls	r6, r0, #24
 800966e:	f101 0304 	add.w	r3, r1, #4
 8009672:	d50a      	bpl.n	800968a <_printf_i+0xce>
 8009674:	680e      	ldr	r6, [r1, #0]
 8009676:	602b      	str	r3, [r5, #0]
 8009678:	2e00      	cmp	r6, #0
 800967a:	da03      	bge.n	8009684 <_printf_i+0xc8>
 800967c:	232d      	movs	r3, #45	; 0x2d
 800967e:	4276      	negs	r6, r6
 8009680:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009684:	485e      	ldr	r0, [pc, #376]	; (8009800 <_printf_i+0x244>)
 8009686:	230a      	movs	r3, #10
 8009688:	e019      	b.n	80096be <_printf_i+0x102>
 800968a:	680e      	ldr	r6, [r1, #0]
 800968c:	602b      	str	r3, [r5, #0]
 800968e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009692:	bf18      	it	ne
 8009694:	b236      	sxthne	r6, r6
 8009696:	e7ef      	b.n	8009678 <_printf_i+0xbc>
 8009698:	682b      	ldr	r3, [r5, #0]
 800969a:	6820      	ldr	r0, [r4, #0]
 800969c:	1d19      	adds	r1, r3, #4
 800969e:	6029      	str	r1, [r5, #0]
 80096a0:	0601      	lsls	r1, r0, #24
 80096a2:	d501      	bpl.n	80096a8 <_printf_i+0xec>
 80096a4:	681e      	ldr	r6, [r3, #0]
 80096a6:	e002      	b.n	80096ae <_printf_i+0xf2>
 80096a8:	0646      	lsls	r6, r0, #25
 80096aa:	d5fb      	bpl.n	80096a4 <_printf_i+0xe8>
 80096ac:	881e      	ldrh	r6, [r3, #0]
 80096ae:	4854      	ldr	r0, [pc, #336]	; (8009800 <_printf_i+0x244>)
 80096b0:	2f6f      	cmp	r7, #111	; 0x6f
 80096b2:	bf0c      	ite	eq
 80096b4:	2308      	moveq	r3, #8
 80096b6:	230a      	movne	r3, #10
 80096b8:	2100      	movs	r1, #0
 80096ba:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096be:	6865      	ldr	r5, [r4, #4]
 80096c0:	60a5      	str	r5, [r4, #8]
 80096c2:	2d00      	cmp	r5, #0
 80096c4:	bfa2      	ittt	ge
 80096c6:	6821      	ldrge	r1, [r4, #0]
 80096c8:	f021 0104 	bicge.w	r1, r1, #4
 80096cc:	6021      	strge	r1, [r4, #0]
 80096ce:	b90e      	cbnz	r6, 80096d4 <_printf_i+0x118>
 80096d0:	2d00      	cmp	r5, #0
 80096d2:	d04d      	beq.n	8009770 <_printf_i+0x1b4>
 80096d4:	4615      	mov	r5, r2
 80096d6:	fbb6 f1f3 	udiv	r1, r6, r3
 80096da:	fb03 6711 	mls	r7, r3, r1, r6
 80096de:	5dc7      	ldrb	r7, [r0, r7]
 80096e0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096e4:	4637      	mov	r7, r6
 80096e6:	42bb      	cmp	r3, r7
 80096e8:	460e      	mov	r6, r1
 80096ea:	d9f4      	bls.n	80096d6 <_printf_i+0x11a>
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	d10b      	bne.n	8009708 <_printf_i+0x14c>
 80096f0:	6823      	ldr	r3, [r4, #0]
 80096f2:	07de      	lsls	r6, r3, #31
 80096f4:	d508      	bpl.n	8009708 <_printf_i+0x14c>
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	6861      	ldr	r1, [r4, #4]
 80096fa:	4299      	cmp	r1, r3
 80096fc:	bfde      	ittt	le
 80096fe:	2330      	movle	r3, #48	; 0x30
 8009700:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009704:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009708:	1b52      	subs	r2, r2, r5
 800970a:	6122      	str	r2, [r4, #16]
 800970c:	f8cd a000 	str.w	sl, [sp]
 8009710:	464b      	mov	r3, r9
 8009712:	aa03      	add	r2, sp, #12
 8009714:	4621      	mov	r1, r4
 8009716:	4640      	mov	r0, r8
 8009718:	f7ff fee2 	bl	80094e0 <_printf_common>
 800971c:	3001      	adds	r0, #1
 800971e:	d14c      	bne.n	80097ba <_printf_i+0x1fe>
 8009720:	f04f 30ff 	mov.w	r0, #4294967295
 8009724:	b004      	add	sp, #16
 8009726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800972a:	4835      	ldr	r0, [pc, #212]	; (8009800 <_printf_i+0x244>)
 800972c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009730:	6829      	ldr	r1, [r5, #0]
 8009732:	6823      	ldr	r3, [r4, #0]
 8009734:	f851 6b04 	ldr.w	r6, [r1], #4
 8009738:	6029      	str	r1, [r5, #0]
 800973a:	061d      	lsls	r5, r3, #24
 800973c:	d514      	bpl.n	8009768 <_printf_i+0x1ac>
 800973e:	07df      	lsls	r7, r3, #31
 8009740:	bf44      	itt	mi
 8009742:	f043 0320 	orrmi.w	r3, r3, #32
 8009746:	6023      	strmi	r3, [r4, #0]
 8009748:	b91e      	cbnz	r6, 8009752 <_printf_i+0x196>
 800974a:	6823      	ldr	r3, [r4, #0]
 800974c:	f023 0320 	bic.w	r3, r3, #32
 8009750:	6023      	str	r3, [r4, #0]
 8009752:	2310      	movs	r3, #16
 8009754:	e7b0      	b.n	80096b8 <_printf_i+0xfc>
 8009756:	6823      	ldr	r3, [r4, #0]
 8009758:	f043 0320 	orr.w	r3, r3, #32
 800975c:	6023      	str	r3, [r4, #0]
 800975e:	2378      	movs	r3, #120	; 0x78
 8009760:	4828      	ldr	r0, [pc, #160]	; (8009804 <_printf_i+0x248>)
 8009762:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009766:	e7e3      	b.n	8009730 <_printf_i+0x174>
 8009768:	0659      	lsls	r1, r3, #25
 800976a:	bf48      	it	mi
 800976c:	b2b6      	uxthmi	r6, r6
 800976e:	e7e6      	b.n	800973e <_printf_i+0x182>
 8009770:	4615      	mov	r5, r2
 8009772:	e7bb      	b.n	80096ec <_printf_i+0x130>
 8009774:	682b      	ldr	r3, [r5, #0]
 8009776:	6826      	ldr	r6, [r4, #0]
 8009778:	6961      	ldr	r1, [r4, #20]
 800977a:	1d18      	adds	r0, r3, #4
 800977c:	6028      	str	r0, [r5, #0]
 800977e:	0635      	lsls	r5, r6, #24
 8009780:	681b      	ldr	r3, [r3, #0]
 8009782:	d501      	bpl.n	8009788 <_printf_i+0x1cc>
 8009784:	6019      	str	r1, [r3, #0]
 8009786:	e002      	b.n	800978e <_printf_i+0x1d2>
 8009788:	0670      	lsls	r0, r6, #25
 800978a:	d5fb      	bpl.n	8009784 <_printf_i+0x1c8>
 800978c:	8019      	strh	r1, [r3, #0]
 800978e:	2300      	movs	r3, #0
 8009790:	6123      	str	r3, [r4, #16]
 8009792:	4615      	mov	r5, r2
 8009794:	e7ba      	b.n	800970c <_printf_i+0x150>
 8009796:	682b      	ldr	r3, [r5, #0]
 8009798:	1d1a      	adds	r2, r3, #4
 800979a:	602a      	str	r2, [r5, #0]
 800979c:	681d      	ldr	r5, [r3, #0]
 800979e:	6862      	ldr	r2, [r4, #4]
 80097a0:	2100      	movs	r1, #0
 80097a2:	4628      	mov	r0, r5
 80097a4:	f7f6 fd2c 	bl	8000200 <memchr>
 80097a8:	b108      	cbz	r0, 80097ae <_printf_i+0x1f2>
 80097aa:	1b40      	subs	r0, r0, r5
 80097ac:	6060      	str	r0, [r4, #4]
 80097ae:	6863      	ldr	r3, [r4, #4]
 80097b0:	6123      	str	r3, [r4, #16]
 80097b2:	2300      	movs	r3, #0
 80097b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097b8:	e7a8      	b.n	800970c <_printf_i+0x150>
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	462a      	mov	r2, r5
 80097be:	4649      	mov	r1, r9
 80097c0:	4640      	mov	r0, r8
 80097c2:	47d0      	blx	sl
 80097c4:	3001      	adds	r0, #1
 80097c6:	d0ab      	beq.n	8009720 <_printf_i+0x164>
 80097c8:	6823      	ldr	r3, [r4, #0]
 80097ca:	079b      	lsls	r3, r3, #30
 80097cc:	d413      	bmi.n	80097f6 <_printf_i+0x23a>
 80097ce:	68e0      	ldr	r0, [r4, #12]
 80097d0:	9b03      	ldr	r3, [sp, #12]
 80097d2:	4298      	cmp	r0, r3
 80097d4:	bfb8      	it	lt
 80097d6:	4618      	movlt	r0, r3
 80097d8:	e7a4      	b.n	8009724 <_printf_i+0x168>
 80097da:	2301      	movs	r3, #1
 80097dc:	4632      	mov	r2, r6
 80097de:	4649      	mov	r1, r9
 80097e0:	4640      	mov	r0, r8
 80097e2:	47d0      	blx	sl
 80097e4:	3001      	adds	r0, #1
 80097e6:	d09b      	beq.n	8009720 <_printf_i+0x164>
 80097e8:	3501      	adds	r5, #1
 80097ea:	68e3      	ldr	r3, [r4, #12]
 80097ec:	9903      	ldr	r1, [sp, #12]
 80097ee:	1a5b      	subs	r3, r3, r1
 80097f0:	42ab      	cmp	r3, r5
 80097f2:	dcf2      	bgt.n	80097da <_printf_i+0x21e>
 80097f4:	e7eb      	b.n	80097ce <_printf_i+0x212>
 80097f6:	2500      	movs	r5, #0
 80097f8:	f104 0619 	add.w	r6, r4, #25
 80097fc:	e7f5      	b.n	80097ea <_printf_i+0x22e>
 80097fe:	bf00      	nop
 8009800:	0800f532 	.word	0x0800f532
 8009804:	0800f543 	.word	0x0800f543

08009808 <_scanf_float>:
 8009808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800980c:	b087      	sub	sp, #28
 800980e:	4617      	mov	r7, r2
 8009810:	9303      	str	r3, [sp, #12]
 8009812:	688b      	ldr	r3, [r1, #8]
 8009814:	1e5a      	subs	r2, r3, #1
 8009816:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800981a:	bf83      	ittte	hi
 800981c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009820:	195b      	addhi	r3, r3, r5
 8009822:	9302      	strhi	r3, [sp, #8]
 8009824:	2300      	movls	r3, #0
 8009826:	bf86      	itte	hi
 8009828:	f240 135d 	movwhi	r3, #349	; 0x15d
 800982c:	608b      	strhi	r3, [r1, #8]
 800982e:	9302      	strls	r3, [sp, #8]
 8009830:	680b      	ldr	r3, [r1, #0]
 8009832:	468b      	mov	fp, r1
 8009834:	2500      	movs	r5, #0
 8009836:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800983a:	f84b 3b1c 	str.w	r3, [fp], #28
 800983e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009842:	4680      	mov	r8, r0
 8009844:	460c      	mov	r4, r1
 8009846:	465e      	mov	r6, fp
 8009848:	46aa      	mov	sl, r5
 800984a:	46a9      	mov	r9, r5
 800984c:	9501      	str	r5, [sp, #4]
 800984e:	68a2      	ldr	r2, [r4, #8]
 8009850:	b152      	cbz	r2, 8009868 <_scanf_float+0x60>
 8009852:	683b      	ldr	r3, [r7, #0]
 8009854:	781b      	ldrb	r3, [r3, #0]
 8009856:	2b4e      	cmp	r3, #78	; 0x4e
 8009858:	d864      	bhi.n	8009924 <_scanf_float+0x11c>
 800985a:	2b40      	cmp	r3, #64	; 0x40
 800985c:	d83c      	bhi.n	80098d8 <_scanf_float+0xd0>
 800985e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009862:	b2c8      	uxtb	r0, r1
 8009864:	280e      	cmp	r0, #14
 8009866:	d93a      	bls.n	80098de <_scanf_float+0xd6>
 8009868:	f1b9 0f00 	cmp.w	r9, #0
 800986c:	d003      	beq.n	8009876 <_scanf_float+0x6e>
 800986e:	6823      	ldr	r3, [r4, #0]
 8009870:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009874:	6023      	str	r3, [r4, #0]
 8009876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800987a:	f1ba 0f01 	cmp.w	sl, #1
 800987e:	f200 8113 	bhi.w	8009aa8 <_scanf_float+0x2a0>
 8009882:	455e      	cmp	r6, fp
 8009884:	f200 8105 	bhi.w	8009a92 <_scanf_float+0x28a>
 8009888:	2501      	movs	r5, #1
 800988a:	4628      	mov	r0, r5
 800988c:	b007      	add	sp, #28
 800988e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009892:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009896:	2a0d      	cmp	r2, #13
 8009898:	d8e6      	bhi.n	8009868 <_scanf_float+0x60>
 800989a:	a101      	add	r1, pc, #4	; (adr r1, 80098a0 <_scanf_float+0x98>)
 800989c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098a0:	080099df 	.word	0x080099df
 80098a4:	08009869 	.word	0x08009869
 80098a8:	08009869 	.word	0x08009869
 80098ac:	08009869 	.word	0x08009869
 80098b0:	08009a3f 	.word	0x08009a3f
 80098b4:	08009a17 	.word	0x08009a17
 80098b8:	08009869 	.word	0x08009869
 80098bc:	08009869 	.word	0x08009869
 80098c0:	080099ed 	.word	0x080099ed
 80098c4:	08009869 	.word	0x08009869
 80098c8:	08009869 	.word	0x08009869
 80098cc:	08009869 	.word	0x08009869
 80098d0:	08009869 	.word	0x08009869
 80098d4:	080099a5 	.word	0x080099a5
 80098d8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80098dc:	e7db      	b.n	8009896 <_scanf_float+0x8e>
 80098de:	290e      	cmp	r1, #14
 80098e0:	d8c2      	bhi.n	8009868 <_scanf_float+0x60>
 80098e2:	a001      	add	r0, pc, #4	; (adr r0, 80098e8 <_scanf_float+0xe0>)
 80098e4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098e8:	08009997 	.word	0x08009997
 80098ec:	08009869 	.word	0x08009869
 80098f0:	08009997 	.word	0x08009997
 80098f4:	08009a2b 	.word	0x08009a2b
 80098f8:	08009869 	.word	0x08009869
 80098fc:	08009945 	.word	0x08009945
 8009900:	08009981 	.word	0x08009981
 8009904:	08009981 	.word	0x08009981
 8009908:	08009981 	.word	0x08009981
 800990c:	08009981 	.word	0x08009981
 8009910:	08009981 	.word	0x08009981
 8009914:	08009981 	.word	0x08009981
 8009918:	08009981 	.word	0x08009981
 800991c:	08009981 	.word	0x08009981
 8009920:	08009981 	.word	0x08009981
 8009924:	2b6e      	cmp	r3, #110	; 0x6e
 8009926:	d809      	bhi.n	800993c <_scanf_float+0x134>
 8009928:	2b60      	cmp	r3, #96	; 0x60
 800992a:	d8b2      	bhi.n	8009892 <_scanf_float+0x8a>
 800992c:	2b54      	cmp	r3, #84	; 0x54
 800992e:	d077      	beq.n	8009a20 <_scanf_float+0x218>
 8009930:	2b59      	cmp	r3, #89	; 0x59
 8009932:	d199      	bne.n	8009868 <_scanf_float+0x60>
 8009934:	2d07      	cmp	r5, #7
 8009936:	d197      	bne.n	8009868 <_scanf_float+0x60>
 8009938:	2508      	movs	r5, #8
 800993a:	e029      	b.n	8009990 <_scanf_float+0x188>
 800993c:	2b74      	cmp	r3, #116	; 0x74
 800993e:	d06f      	beq.n	8009a20 <_scanf_float+0x218>
 8009940:	2b79      	cmp	r3, #121	; 0x79
 8009942:	e7f6      	b.n	8009932 <_scanf_float+0x12a>
 8009944:	6821      	ldr	r1, [r4, #0]
 8009946:	05c8      	lsls	r0, r1, #23
 8009948:	d51a      	bpl.n	8009980 <_scanf_float+0x178>
 800994a:	9b02      	ldr	r3, [sp, #8]
 800994c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009950:	6021      	str	r1, [r4, #0]
 8009952:	f109 0901 	add.w	r9, r9, #1
 8009956:	b11b      	cbz	r3, 8009960 <_scanf_float+0x158>
 8009958:	3b01      	subs	r3, #1
 800995a:	3201      	adds	r2, #1
 800995c:	9302      	str	r3, [sp, #8]
 800995e:	60a2      	str	r2, [r4, #8]
 8009960:	68a3      	ldr	r3, [r4, #8]
 8009962:	3b01      	subs	r3, #1
 8009964:	60a3      	str	r3, [r4, #8]
 8009966:	6923      	ldr	r3, [r4, #16]
 8009968:	3301      	adds	r3, #1
 800996a:	6123      	str	r3, [r4, #16]
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	3b01      	subs	r3, #1
 8009970:	2b00      	cmp	r3, #0
 8009972:	607b      	str	r3, [r7, #4]
 8009974:	f340 8084 	ble.w	8009a80 <_scanf_float+0x278>
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	3301      	adds	r3, #1
 800997c:	603b      	str	r3, [r7, #0]
 800997e:	e766      	b.n	800984e <_scanf_float+0x46>
 8009980:	eb1a 0f05 	cmn.w	sl, r5
 8009984:	f47f af70 	bne.w	8009868 <_scanf_float+0x60>
 8009988:	6822      	ldr	r2, [r4, #0]
 800998a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800998e:	6022      	str	r2, [r4, #0]
 8009990:	f806 3b01 	strb.w	r3, [r6], #1
 8009994:	e7e4      	b.n	8009960 <_scanf_float+0x158>
 8009996:	6822      	ldr	r2, [r4, #0]
 8009998:	0610      	lsls	r0, r2, #24
 800999a:	f57f af65 	bpl.w	8009868 <_scanf_float+0x60>
 800999e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099a2:	e7f4      	b.n	800998e <_scanf_float+0x186>
 80099a4:	f1ba 0f00 	cmp.w	sl, #0
 80099a8:	d10e      	bne.n	80099c8 <_scanf_float+0x1c0>
 80099aa:	f1b9 0f00 	cmp.w	r9, #0
 80099ae:	d10e      	bne.n	80099ce <_scanf_float+0x1c6>
 80099b0:	6822      	ldr	r2, [r4, #0]
 80099b2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80099b6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80099ba:	d108      	bne.n	80099ce <_scanf_float+0x1c6>
 80099bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099c0:	6022      	str	r2, [r4, #0]
 80099c2:	f04f 0a01 	mov.w	sl, #1
 80099c6:	e7e3      	b.n	8009990 <_scanf_float+0x188>
 80099c8:	f1ba 0f02 	cmp.w	sl, #2
 80099cc:	d055      	beq.n	8009a7a <_scanf_float+0x272>
 80099ce:	2d01      	cmp	r5, #1
 80099d0:	d002      	beq.n	80099d8 <_scanf_float+0x1d0>
 80099d2:	2d04      	cmp	r5, #4
 80099d4:	f47f af48 	bne.w	8009868 <_scanf_float+0x60>
 80099d8:	3501      	adds	r5, #1
 80099da:	b2ed      	uxtb	r5, r5
 80099dc:	e7d8      	b.n	8009990 <_scanf_float+0x188>
 80099de:	f1ba 0f01 	cmp.w	sl, #1
 80099e2:	f47f af41 	bne.w	8009868 <_scanf_float+0x60>
 80099e6:	f04f 0a02 	mov.w	sl, #2
 80099ea:	e7d1      	b.n	8009990 <_scanf_float+0x188>
 80099ec:	b97d      	cbnz	r5, 8009a0e <_scanf_float+0x206>
 80099ee:	f1b9 0f00 	cmp.w	r9, #0
 80099f2:	f47f af3c 	bne.w	800986e <_scanf_float+0x66>
 80099f6:	6822      	ldr	r2, [r4, #0]
 80099f8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80099fc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009a00:	f47f af39 	bne.w	8009876 <_scanf_float+0x6e>
 8009a04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a08:	6022      	str	r2, [r4, #0]
 8009a0a:	2501      	movs	r5, #1
 8009a0c:	e7c0      	b.n	8009990 <_scanf_float+0x188>
 8009a0e:	2d03      	cmp	r5, #3
 8009a10:	d0e2      	beq.n	80099d8 <_scanf_float+0x1d0>
 8009a12:	2d05      	cmp	r5, #5
 8009a14:	e7de      	b.n	80099d4 <_scanf_float+0x1cc>
 8009a16:	2d02      	cmp	r5, #2
 8009a18:	f47f af26 	bne.w	8009868 <_scanf_float+0x60>
 8009a1c:	2503      	movs	r5, #3
 8009a1e:	e7b7      	b.n	8009990 <_scanf_float+0x188>
 8009a20:	2d06      	cmp	r5, #6
 8009a22:	f47f af21 	bne.w	8009868 <_scanf_float+0x60>
 8009a26:	2507      	movs	r5, #7
 8009a28:	e7b2      	b.n	8009990 <_scanf_float+0x188>
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	0591      	lsls	r1, r2, #22
 8009a2e:	f57f af1b 	bpl.w	8009868 <_scanf_float+0x60>
 8009a32:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009a36:	6022      	str	r2, [r4, #0]
 8009a38:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a3c:	e7a8      	b.n	8009990 <_scanf_float+0x188>
 8009a3e:	6822      	ldr	r2, [r4, #0]
 8009a40:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009a44:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009a48:	d006      	beq.n	8009a58 <_scanf_float+0x250>
 8009a4a:	0550      	lsls	r0, r2, #21
 8009a4c:	f57f af0c 	bpl.w	8009868 <_scanf_float+0x60>
 8009a50:	f1b9 0f00 	cmp.w	r9, #0
 8009a54:	f43f af0f 	beq.w	8009876 <_scanf_float+0x6e>
 8009a58:	0591      	lsls	r1, r2, #22
 8009a5a:	bf58      	it	pl
 8009a5c:	9901      	ldrpl	r1, [sp, #4]
 8009a5e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a62:	bf58      	it	pl
 8009a64:	eba9 0101 	subpl.w	r1, r9, r1
 8009a68:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009a6c:	bf58      	it	pl
 8009a6e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a72:	6022      	str	r2, [r4, #0]
 8009a74:	f04f 0900 	mov.w	r9, #0
 8009a78:	e78a      	b.n	8009990 <_scanf_float+0x188>
 8009a7a:	f04f 0a03 	mov.w	sl, #3
 8009a7e:	e787      	b.n	8009990 <_scanf_float+0x188>
 8009a80:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a84:	4639      	mov	r1, r7
 8009a86:	4640      	mov	r0, r8
 8009a88:	4798      	blx	r3
 8009a8a:	2800      	cmp	r0, #0
 8009a8c:	f43f aedf 	beq.w	800984e <_scanf_float+0x46>
 8009a90:	e6ea      	b.n	8009868 <_scanf_float+0x60>
 8009a92:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a96:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a9a:	463a      	mov	r2, r7
 8009a9c:	4640      	mov	r0, r8
 8009a9e:	4798      	blx	r3
 8009aa0:	6923      	ldr	r3, [r4, #16]
 8009aa2:	3b01      	subs	r3, #1
 8009aa4:	6123      	str	r3, [r4, #16]
 8009aa6:	e6ec      	b.n	8009882 <_scanf_float+0x7a>
 8009aa8:	1e6b      	subs	r3, r5, #1
 8009aaa:	2b06      	cmp	r3, #6
 8009aac:	d825      	bhi.n	8009afa <_scanf_float+0x2f2>
 8009aae:	2d02      	cmp	r5, #2
 8009ab0:	d836      	bhi.n	8009b20 <_scanf_float+0x318>
 8009ab2:	455e      	cmp	r6, fp
 8009ab4:	f67f aee8 	bls.w	8009888 <_scanf_float+0x80>
 8009ab8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009abc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ac0:	463a      	mov	r2, r7
 8009ac2:	4640      	mov	r0, r8
 8009ac4:	4798      	blx	r3
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	3b01      	subs	r3, #1
 8009aca:	6123      	str	r3, [r4, #16]
 8009acc:	e7f1      	b.n	8009ab2 <_scanf_float+0x2aa>
 8009ace:	9802      	ldr	r0, [sp, #8]
 8009ad0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ad4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009ad8:	9002      	str	r0, [sp, #8]
 8009ada:	463a      	mov	r2, r7
 8009adc:	4640      	mov	r0, r8
 8009ade:	4798      	blx	r3
 8009ae0:	6923      	ldr	r3, [r4, #16]
 8009ae2:	3b01      	subs	r3, #1
 8009ae4:	6123      	str	r3, [r4, #16]
 8009ae6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009aea:	fa5f fa8a 	uxtb.w	sl, sl
 8009aee:	f1ba 0f02 	cmp.w	sl, #2
 8009af2:	d1ec      	bne.n	8009ace <_scanf_float+0x2c6>
 8009af4:	3d03      	subs	r5, #3
 8009af6:	b2ed      	uxtb	r5, r5
 8009af8:	1b76      	subs	r6, r6, r5
 8009afa:	6823      	ldr	r3, [r4, #0]
 8009afc:	05da      	lsls	r2, r3, #23
 8009afe:	d52f      	bpl.n	8009b60 <_scanf_float+0x358>
 8009b00:	055b      	lsls	r3, r3, #21
 8009b02:	d510      	bpl.n	8009b26 <_scanf_float+0x31e>
 8009b04:	455e      	cmp	r6, fp
 8009b06:	f67f aebf 	bls.w	8009888 <_scanf_float+0x80>
 8009b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b0e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009b12:	463a      	mov	r2, r7
 8009b14:	4640      	mov	r0, r8
 8009b16:	4798      	blx	r3
 8009b18:	6923      	ldr	r3, [r4, #16]
 8009b1a:	3b01      	subs	r3, #1
 8009b1c:	6123      	str	r3, [r4, #16]
 8009b1e:	e7f1      	b.n	8009b04 <_scanf_float+0x2fc>
 8009b20:	46aa      	mov	sl, r5
 8009b22:	9602      	str	r6, [sp, #8]
 8009b24:	e7df      	b.n	8009ae6 <_scanf_float+0x2de>
 8009b26:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b2a:	6923      	ldr	r3, [r4, #16]
 8009b2c:	2965      	cmp	r1, #101	; 0x65
 8009b2e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b32:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b36:	6123      	str	r3, [r4, #16]
 8009b38:	d00c      	beq.n	8009b54 <_scanf_float+0x34c>
 8009b3a:	2945      	cmp	r1, #69	; 0x45
 8009b3c:	d00a      	beq.n	8009b54 <_scanf_float+0x34c>
 8009b3e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b42:	463a      	mov	r2, r7
 8009b44:	4640      	mov	r0, r8
 8009b46:	4798      	blx	r3
 8009b48:	6923      	ldr	r3, [r4, #16]
 8009b4a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b4e:	3b01      	subs	r3, #1
 8009b50:	1eb5      	subs	r5, r6, #2
 8009b52:	6123      	str	r3, [r4, #16]
 8009b54:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b58:	463a      	mov	r2, r7
 8009b5a:	4640      	mov	r0, r8
 8009b5c:	4798      	blx	r3
 8009b5e:	462e      	mov	r6, r5
 8009b60:	6825      	ldr	r5, [r4, #0]
 8009b62:	f015 0510 	ands.w	r5, r5, #16
 8009b66:	d159      	bne.n	8009c1c <_scanf_float+0x414>
 8009b68:	7035      	strb	r5, [r6, #0]
 8009b6a:	6823      	ldr	r3, [r4, #0]
 8009b6c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b70:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b74:	d11b      	bne.n	8009bae <_scanf_float+0x3a6>
 8009b76:	9b01      	ldr	r3, [sp, #4]
 8009b78:	454b      	cmp	r3, r9
 8009b7a:	eba3 0209 	sub.w	r2, r3, r9
 8009b7e:	d123      	bne.n	8009bc8 <_scanf_float+0x3c0>
 8009b80:	2200      	movs	r2, #0
 8009b82:	4659      	mov	r1, fp
 8009b84:	4640      	mov	r0, r8
 8009b86:	f000 fe99 	bl	800a8bc <_strtod_r>
 8009b8a:	6822      	ldr	r2, [r4, #0]
 8009b8c:	9b03      	ldr	r3, [sp, #12]
 8009b8e:	f012 0f02 	tst.w	r2, #2
 8009b92:	ec57 6b10 	vmov	r6, r7, d0
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	d021      	beq.n	8009bde <_scanf_float+0x3d6>
 8009b9a:	9903      	ldr	r1, [sp, #12]
 8009b9c:	1d1a      	adds	r2, r3, #4
 8009b9e:	600a      	str	r2, [r1, #0]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	e9c3 6700 	strd	r6, r7, [r3]
 8009ba6:	68e3      	ldr	r3, [r4, #12]
 8009ba8:	3301      	adds	r3, #1
 8009baa:	60e3      	str	r3, [r4, #12]
 8009bac:	e66d      	b.n	800988a <_scanf_float+0x82>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0e5      	beq.n	8009b80 <_scanf_float+0x378>
 8009bb4:	9905      	ldr	r1, [sp, #20]
 8009bb6:	230a      	movs	r3, #10
 8009bb8:	462a      	mov	r2, r5
 8009bba:	3101      	adds	r1, #1
 8009bbc:	4640      	mov	r0, r8
 8009bbe:	f000 ff6d 	bl	800aa9c <_strtol_r>
 8009bc2:	9b04      	ldr	r3, [sp, #16]
 8009bc4:	9e05      	ldr	r6, [sp, #20]
 8009bc6:	1ac2      	subs	r2, r0, r3
 8009bc8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009bcc:	429e      	cmp	r6, r3
 8009bce:	bf28      	it	cs
 8009bd0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009bd4:	4912      	ldr	r1, [pc, #72]	; (8009c20 <_scanf_float+0x418>)
 8009bd6:	4630      	mov	r0, r6
 8009bd8:	f000 f82c 	bl	8009c34 <siprintf>
 8009bdc:	e7d0      	b.n	8009b80 <_scanf_float+0x378>
 8009bde:	9903      	ldr	r1, [sp, #12]
 8009be0:	f012 0f04 	tst.w	r2, #4
 8009be4:	f103 0204 	add.w	r2, r3, #4
 8009be8:	600a      	str	r2, [r1, #0]
 8009bea:	d1d9      	bne.n	8009ba0 <_scanf_float+0x398>
 8009bec:	f8d3 8000 	ldr.w	r8, [r3]
 8009bf0:	ee10 2a10 	vmov	r2, s0
 8009bf4:	ee10 0a10 	vmov	r0, s0
 8009bf8:	463b      	mov	r3, r7
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f6 ffa6 	bl	8000b4c <__aeabi_dcmpun>
 8009c00:	b128      	cbz	r0, 8009c0e <_scanf_float+0x406>
 8009c02:	4808      	ldr	r0, [pc, #32]	; (8009c24 <_scanf_float+0x41c>)
 8009c04:	f000 f810 	bl	8009c28 <nanf>
 8009c08:	ed88 0a00 	vstr	s0, [r8]
 8009c0c:	e7cb      	b.n	8009ba6 <_scanf_float+0x39e>
 8009c0e:	4630      	mov	r0, r6
 8009c10:	4639      	mov	r1, r7
 8009c12:	f7f6 fff9 	bl	8000c08 <__aeabi_d2f>
 8009c16:	f8c8 0000 	str.w	r0, [r8]
 8009c1a:	e7c4      	b.n	8009ba6 <_scanf_float+0x39e>
 8009c1c:	2500      	movs	r5, #0
 8009c1e:	e634      	b.n	800988a <_scanf_float+0x82>
 8009c20:	0800f554 	.word	0x0800f554
 8009c24:	0800f65f 	.word	0x0800f65f

08009c28 <nanf>:
 8009c28:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009c30 <nanf+0x8>
 8009c2c:	4770      	bx	lr
 8009c2e:	bf00      	nop
 8009c30:	7fc00000 	.word	0x7fc00000

08009c34 <siprintf>:
 8009c34:	b40e      	push	{r1, r2, r3}
 8009c36:	b500      	push	{lr}
 8009c38:	b09c      	sub	sp, #112	; 0x70
 8009c3a:	ab1d      	add	r3, sp, #116	; 0x74
 8009c3c:	9002      	str	r0, [sp, #8]
 8009c3e:	9006      	str	r0, [sp, #24]
 8009c40:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009c44:	4809      	ldr	r0, [pc, #36]	; (8009c6c <siprintf+0x38>)
 8009c46:	9107      	str	r1, [sp, #28]
 8009c48:	9104      	str	r1, [sp, #16]
 8009c4a:	4909      	ldr	r1, [pc, #36]	; (8009c70 <siprintf+0x3c>)
 8009c4c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009c50:	9105      	str	r1, [sp, #20]
 8009c52:	6800      	ldr	r0, [r0, #0]
 8009c54:	9301      	str	r3, [sp, #4]
 8009c56:	a902      	add	r1, sp, #8
 8009c58:	f003 f80c 	bl	800cc74 <_svfiprintf_r>
 8009c5c:	9b02      	ldr	r3, [sp, #8]
 8009c5e:	2200      	movs	r2, #0
 8009c60:	701a      	strb	r2, [r3, #0]
 8009c62:	b01c      	add	sp, #112	; 0x70
 8009c64:	f85d eb04 	ldr.w	lr, [sp], #4
 8009c68:	b003      	add	sp, #12
 8009c6a:	4770      	bx	lr
 8009c6c:	20000074 	.word	0x20000074
 8009c70:	ffff0208 	.word	0xffff0208

08009c74 <sulp>:
 8009c74:	b570      	push	{r4, r5, r6, lr}
 8009c76:	4604      	mov	r4, r0
 8009c78:	460d      	mov	r5, r1
 8009c7a:	ec45 4b10 	vmov	d0, r4, r5
 8009c7e:	4616      	mov	r6, r2
 8009c80:	f002 fd56 	bl	800c730 <__ulp>
 8009c84:	ec51 0b10 	vmov	r0, r1, d0
 8009c88:	b17e      	cbz	r6, 8009caa <sulp+0x36>
 8009c8a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009c8e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	dd09      	ble.n	8009caa <sulp+0x36>
 8009c96:	051b      	lsls	r3, r3, #20
 8009c98:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009c9c:	2400      	movs	r4, #0
 8009c9e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009ca2:	4622      	mov	r2, r4
 8009ca4:	462b      	mov	r3, r5
 8009ca6:	f7f6 fcb7 	bl	8000618 <__aeabi_dmul>
 8009caa:	bd70      	pop	{r4, r5, r6, pc}
 8009cac:	0000      	movs	r0, r0
	...

08009cb0 <_strtod_l>:
 8009cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009cb4:	ed2d 8b02 	vpush	{d8}
 8009cb8:	b09d      	sub	sp, #116	; 0x74
 8009cba:	461f      	mov	r7, r3
 8009cbc:	2300      	movs	r3, #0
 8009cbe:	9318      	str	r3, [sp, #96]	; 0x60
 8009cc0:	4ba2      	ldr	r3, [pc, #648]	; (8009f4c <_strtod_l+0x29c>)
 8009cc2:	9213      	str	r2, [sp, #76]	; 0x4c
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	9305      	str	r3, [sp, #20]
 8009cc8:	4604      	mov	r4, r0
 8009cca:	4618      	mov	r0, r3
 8009ccc:	4688      	mov	r8, r1
 8009cce:	f7f6 fa89 	bl	80001e4 <strlen>
 8009cd2:	f04f 0a00 	mov.w	sl, #0
 8009cd6:	4605      	mov	r5, r0
 8009cd8:	f04f 0b00 	mov.w	fp, #0
 8009cdc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009ce0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ce2:	781a      	ldrb	r2, [r3, #0]
 8009ce4:	2a2b      	cmp	r2, #43	; 0x2b
 8009ce6:	d04e      	beq.n	8009d86 <_strtod_l+0xd6>
 8009ce8:	d83b      	bhi.n	8009d62 <_strtod_l+0xb2>
 8009cea:	2a0d      	cmp	r2, #13
 8009cec:	d834      	bhi.n	8009d58 <_strtod_l+0xa8>
 8009cee:	2a08      	cmp	r2, #8
 8009cf0:	d834      	bhi.n	8009d5c <_strtod_l+0xac>
 8009cf2:	2a00      	cmp	r2, #0
 8009cf4:	d03e      	beq.n	8009d74 <_strtod_l+0xc4>
 8009cf6:	2300      	movs	r3, #0
 8009cf8:	930a      	str	r3, [sp, #40]	; 0x28
 8009cfa:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009cfc:	7833      	ldrb	r3, [r6, #0]
 8009cfe:	2b30      	cmp	r3, #48	; 0x30
 8009d00:	f040 80b0 	bne.w	8009e64 <_strtod_l+0x1b4>
 8009d04:	7873      	ldrb	r3, [r6, #1]
 8009d06:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009d0a:	2b58      	cmp	r3, #88	; 0x58
 8009d0c:	d168      	bne.n	8009de0 <_strtod_l+0x130>
 8009d0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d10:	9301      	str	r3, [sp, #4]
 8009d12:	ab18      	add	r3, sp, #96	; 0x60
 8009d14:	9702      	str	r7, [sp, #8]
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	4a8d      	ldr	r2, [pc, #564]	; (8009f50 <_strtod_l+0x2a0>)
 8009d1a:	ab19      	add	r3, sp, #100	; 0x64
 8009d1c:	a917      	add	r1, sp, #92	; 0x5c
 8009d1e:	4620      	mov	r0, r4
 8009d20:	f001 fe6e 	bl	800ba00 <__gethex>
 8009d24:	f010 0707 	ands.w	r7, r0, #7
 8009d28:	4605      	mov	r5, r0
 8009d2a:	d005      	beq.n	8009d38 <_strtod_l+0x88>
 8009d2c:	2f06      	cmp	r7, #6
 8009d2e:	d12c      	bne.n	8009d8a <_strtod_l+0xda>
 8009d30:	3601      	adds	r6, #1
 8009d32:	2300      	movs	r3, #0
 8009d34:	9617      	str	r6, [sp, #92]	; 0x5c
 8009d36:	930a      	str	r3, [sp, #40]	; 0x28
 8009d38:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d3a:	2b00      	cmp	r3, #0
 8009d3c:	f040 8590 	bne.w	800a860 <_strtod_l+0xbb0>
 8009d40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d42:	b1eb      	cbz	r3, 8009d80 <_strtod_l+0xd0>
 8009d44:	4652      	mov	r2, sl
 8009d46:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009d4a:	ec43 2b10 	vmov	d0, r2, r3
 8009d4e:	b01d      	add	sp, #116	; 0x74
 8009d50:	ecbd 8b02 	vpop	{d8}
 8009d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d58:	2a20      	cmp	r2, #32
 8009d5a:	d1cc      	bne.n	8009cf6 <_strtod_l+0x46>
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	9317      	str	r3, [sp, #92]	; 0x5c
 8009d60:	e7be      	b.n	8009ce0 <_strtod_l+0x30>
 8009d62:	2a2d      	cmp	r2, #45	; 0x2d
 8009d64:	d1c7      	bne.n	8009cf6 <_strtod_l+0x46>
 8009d66:	2201      	movs	r2, #1
 8009d68:	920a      	str	r2, [sp, #40]	; 0x28
 8009d6a:	1c5a      	adds	r2, r3, #1
 8009d6c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009d6e:	785b      	ldrb	r3, [r3, #1]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d1c2      	bne.n	8009cfa <_strtod_l+0x4a>
 8009d74:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009d76:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	f040 856e 	bne.w	800a85c <_strtod_l+0xbac>
 8009d80:	4652      	mov	r2, sl
 8009d82:	465b      	mov	r3, fp
 8009d84:	e7e1      	b.n	8009d4a <_strtod_l+0x9a>
 8009d86:	2200      	movs	r2, #0
 8009d88:	e7ee      	b.n	8009d68 <_strtod_l+0xb8>
 8009d8a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009d8c:	b13a      	cbz	r2, 8009d9e <_strtod_l+0xee>
 8009d8e:	2135      	movs	r1, #53	; 0x35
 8009d90:	a81a      	add	r0, sp, #104	; 0x68
 8009d92:	f002 fdd8 	bl	800c946 <__copybits>
 8009d96:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f002 f997 	bl	800c0cc <_Bfree>
 8009d9e:	3f01      	subs	r7, #1
 8009da0:	2f04      	cmp	r7, #4
 8009da2:	d806      	bhi.n	8009db2 <_strtod_l+0x102>
 8009da4:	e8df f007 	tbb	[pc, r7]
 8009da8:	1714030a 	.word	0x1714030a
 8009dac:	0a          	.byte	0x0a
 8009dad:	00          	.byte	0x00
 8009dae:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 8009db2:	0728      	lsls	r0, r5, #28
 8009db4:	d5c0      	bpl.n	8009d38 <_strtod_l+0x88>
 8009db6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8009dba:	e7bd      	b.n	8009d38 <_strtod_l+0x88>
 8009dbc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8009dc0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009dc2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009dc6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009dca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009dce:	e7f0      	b.n	8009db2 <_strtod_l+0x102>
 8009dd0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009f54 <_strtod_l+0x2a4>
 8009dd4:	e7ed      	b.n	8009db2 <_strtod_l+0x102>
 8009dd6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8009dda:	f04f 3aff 	mov.w	sl, #4294967295
 8009dde:	e7e8      	b.n	8009db2 <_strtod_l+0x102>
 8009de0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009de2:	1c5a      	adds	r2, r3, #1
 8009de4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009de6:	785b      	ldrb	r3, [r3, #1]
 8009de8:	2b30      	cmp	r3, #48	; 0x30
 8009dea:	d0f9      	beq.n	8009de0 <_strtod_l+0x130>
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d0a3      	beq.n	8009d38 <_strtod_l+0x88>
 8009df0:	2301      	movs	r3, #1
 8009df2:	f04f 0900 	mov.w	r9, #0
 8009df6:	9304      	str	r3, [sp, #16]
 8009df8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009dfa:	9308      	str	r3, [sp, #32]
 8009dfc:	f8cd 901c 	str.w	r9, [sp, #28]
 8009e00:	464f      	mov	r7, r9
 8009e02:	220a      	movs	r2, #10
 8009e04:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8009e06:	7806      	ldrb	r6, [r0, #0]
 8009e08:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009e0c:	b2d9      	uxtb	r1, r3
 8009e0e:	2909      	cmp	r1, #9
 8009e10:	d92a      	bls.n	8009e68 <_strtod_l+0x1b8>
 8009e12:	9905      	ldr	r1, [sp, #20]
 8009e14:	462a      	mov	r2, r5
 8009e16:	f003 f99f 	bl	800d158 <strncmp>
 8009e1a:	b398      	cbz	r0, 8009e84 <_strtod_l+0x1d4>
 8009e1c:	2000      	movs	r0, #0
 8009e1e:	4632      	mov	r2, r6
 8009e20:	463d      	mov	r5, r7
 8009e22:	9005      	str	r0, [sp, #20]
 8009e24:	4603      	mov	r3, r0
 8009e26:	2a65      	cmp	r2, #101	; 0x65
 8009e28:	d001      	beq.n	8009e2e <_strtod_l+0x17e>
 8009e2a:	2a45      	cmp	r2, #69	; 0x45
 8009e2c:	d118      	bne.n	8009e60 <_strtod_l+0x1b0>
 8009e2e:	b91d      	cbnz	r5, 8009e38 <_strtod_l+0x188>
 8009e30:	9a04      	ldr	r2, [sp, #16]
 8009e32:	4302      	orrs	r2, r0
 8009e34:	d09e      	beq.n	8009d74 <_strtod_l+0xc4>
 8009e36:	2500      	movs	r5, #0
 8009e38:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009e3c:	f108 0201 	add.w	r2, r8, #1
 8009e40:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e42:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009e46:	2a2b      	cmp	r2, #43	; 0x2b
 8009e48:	d075      	beq.n	8009f36 <_strtod_l+0x286>
 8009e4a:	2a2d      	cmp	r2, #45	; 0x2d
 8009e4c:	d07b      	beq.n	8009f46 <_strtod_l+0x296>
 8009e4e:	f04f 0c00 	mov.w	ip, #0
 8009e52:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009e56:	2909      	cmp	r1, #9
 8009e58:	f240 8082 	bls.w	8009f60 <_strtod_l+0x2b0>
 8009e5c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009e60:	2600      	movs	r6, #0
 8009e62:	e09d      	b.n	8009fa0 <_strtod_l+0x2f0>
 8009e64:	2300      	movs	r3, #0
 8009e66:	e7c4      	b.n	8009df2 <_strtod_l+0x142>
 8009e68:	2f08      	cmp	r7, #8
 8009e6a:	bfd8      	it	le
 8009e6c:	9907      	ldrle	r1, [sp, #28]
 8009e6e:	f100 0001 	add.w	r0, r0, #1
 8009e72:	bfda      	itte	le
 8009e74:	fb02 3301 	mlale	r3, r2, r1, r3
 8009e78:	9307      	strle	r3, [sp, #28]
 8009e7a:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009e7e:	3701      	adds	r7, #1
 8009e80:	9017      	str	r0, [sp, #92]	; 0x5c
 8009e82:	e7bf      	b.n	8009e04 <_strtod_l+0x154>
 8009e84:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009e86:	195a      	adds	r2, r3, r5
 8009e88:	9217      	str	r2, [sp, #92]	; 0x5c
 8009e8a:	5d5a      	ldrb	r2, [r3, r5]
 8009e8c:	2f00      	cmp	r7, #0
 8009e8e:	d037      	beq.n	8009f00 <_strtod_l+0x250>
 8009e90:	9005      	str	r0, [sp, #20]
 8009e92:	463d      	mov	r5, r7
 8009e94:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009e98:	2b09      	cmp	r3, #9
 8009e9a:	d912      	bls.n	8009ec2 <_strtod_l+0x212>
 8009e9c:	2301      	movs	r3, #1
 8009e9e:	e7c2      	b.n	8009e26 <_strtod_l+0x176>
 8009ea0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009ea2:	1c5a      	adds	r2, r3, #1
 8009ea4:	9217      	str	r2, [sp, #92]	; 0x5c
 8009ea6:	785a      	ldrb	r2, [r3, #1]
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	2a30      	cmp	r2, #48	; 0x30
 8009eac:	d0f8      	beq.n	8009ea0 <_strtod_l+0x1f0>
 8009eae:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009eb2:	2b08      	cmp	r3, #8
 8009eb4:	f200 84d9 	bhi.w	800a86a <_strtod_l+0xbba>
 8009eb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009eba:	9005      	str	r0, [sp, #20]
 8009ebc:	2000      	movs	r0, #0
 8009ebe:	9308      	str	r3, [sp, #32]
 8009ec0:	4605      	mov	r5, r0
 8009ec2:	3a30      	subs	r2, #48	; 0x30
 8009ec4:	f100 0301 	add.w	r3, r0, #1
 8009ec8:	d014      	beq.n	8009ef4 <_strtod_l+0x244>
 8009eca:	9905      	ldr	r1, [sp, #20]
 8009ecc:	4419      	add	r1, r3
 8009ece:	9105      	str	r1, [sp, #20]
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	eb00 0e05 	add.w	lr, r0, r5
 8009ed6:	210a      	movs	r1, #10
 8009ed8:	4573      	cmp	r3, lr
 8009eda:	d113      	bne.n	8009f04 <_strtod_l+0x254>
 8009edc:	182b      	adds	r3, r5, r0
 8009ede:	2b08      	cmp	r3, #8
 8009ee0:	f105 0501 	add.w	r5, r5, #1
 8009ee4:	4405      	add	r5, r0
 8009ee6:	dc1c      	bgt.n	8009f22 <_strtod_l+0x272>
 8009ee8:	9907      	ldr	r1, [sp, #28]
 8009eea:	230a      	movs	r3, #10
 8009eec:	fb03 2301 	mla	r3, r3, r1, r2
 8009ef0:	9307      	str	r3, [sp, #28]
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ef6:	1c51      	adds	r1, r2, #1
 8009ef8:	9117      	str	r1, [sp, #92]	; 0x5c
 8009efa:	7852      	ldrb	r2, [r2, #1]
 8009efc:	4618      	mov	r0, r3
 8009efe:	e7c9      	b.n	8009e94 <_strtod_l+0x1e4>
 8009f00:	4638      	mov	r0, r7
 8009f02:	e7d2      	b.n	8009eaa <_strtod_l+0x1fa>
 8009f04:	2b08      	cmp	r3, #8
 8009f06:	dc04      	bgt.n	8009f12 <_strtod_l+0x262>
 8009f08:	9e07      	ldr	r6, [sp, #28]
 8009f0a:	434e      	muls	r6, r1
 8009f0c:	9607      	str	r6, [sp, #28]
 8009f0e:	3301      	adds	r3, #1
 8009f10:	e7e2      	b.n	8009ed8 <_strtod_l+0x228>
 8009f12:	f103 0c01 	add.w	ip, r3, #1
 8009f16:	f1bc 0f10 	cmp.w	ip, #16
 8009f1a:	bfd8      	it	le
 8009f1c:	fb01 f909 	mulle.w	r9, r1, r9
 8009f20:	e7f5      	b.n	8009f0e <_strtod_l+0x25e>
 8009f22:	2d10      	cmp	r5, #16
 8009f24:	bfdc      	itt	le
 8009f26:	230a      	movle	r3, #10
 8009f28:	fb03 2909 	mlale	r9, r3, r9, r2
 8009f2c:	e7e1      	b.n	8009ef2 <_strtod_l+0x242>
 8009f2e:	2300      	movs	r3, #0
 8009f30:	9305      	str	r3, [sp, #20]
 8009f32:	2301      	movs	r3, #1
 8009f34:	e77c      	b.n	8009e30 <_strtod_l+0x180>
 8009f36:	f04f 0c00 	mov.w	ip, #0
 8009f3a:	f108 0202 	add.w	r2, r8, #2
 8009f3e:	9217      	str	r2, [sp, #92]	; 0x5c
 8009f40:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009f44:	e785      	b.n	8009e52 <_strtod_l+0x1a2>
 8009f46:	f04f 0c01 	mov.w	ip, #1
 8009f4a:	e7f6      	b.n	8009f3a <_strtod_l+0x28a>
 8009f4c:	0800f840 	.word	0x0800f840
 8009f50:	0800f55c 	.word	0x0800f55c
 8009f54:	7ff00000 	.word	0x7ff00000
 8009f58:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f5a:	1c51      	adds	r1, r2, #1
 8009f5c:	9117      	str	r1, [sp, #92]	; 0x5c
 8009f5e:	7852      	ldrb	r2, [r2, #1]
 8009f60:	2a30      	cmp	r2, #48	; 0x30
 8009f62:	d0f9      	beq.n	8009f58 <_strtod_l+0x2a8>
 8009f64:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009f68:	2908      	cmp	r1, #8
 8009f6a:	f63f af79 	bhi.w	8009e60 <_strtod_l+0x1b0>
 8009f6e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009f72:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f74:	9206      	str	r2, [sp, #24]
 8009f76:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009f78:	1c51      	adds	r1, r2, #1
 8009f7a:	9117      	str	r1, [sp, #92]	; 0x5c
 8009f7c:	7852      	ldrb	r2, [r2, #1]
 8009f7e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009f82:	2e09      	cmp	r6, #9
 8009f84:	d937      	bls.n	8009ff6 <_strtod_l+0x346>
 8009f86:	9e06      	ldr	r6, [sp, #24]
 8009f88:	1b89      	subs	r1, r1, r6
 8009f8a:	2908      	cmp	r1, #8
 8009f8c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009f90:	dc02      	bgt.n	8009f98 <_strtod_l+0x2e8>
 8009f92:	4576      	cmp	r6, lr
 8009f94:	bfa8      	it	ge
 8009f96:	4676      	movge	r6, lr
 8009f98:	f1bc 0f00 	cmp.w	ip, #0
 8009f9c:	d000      	beq.n	8009fa0 <_strtod_l+0x2f0>
 8009f9e:	4276      	negs	r6, r6
 8009fa0:	2d00      	cmp	r5, #0
 8009fa2:	d14d      	bne.n	800a040 <_strtod_l+0x390>
 8009fa4:	9904      	ldr	r1, [sp, #16]
 8009fa6:	4301      	orrs	r1, r0
 8009fa8:	f47f aec6 	bne.w	8009d38 <_strtod_l+0x88>
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	f47f aee1 	bne.w	8009d74 <_strtod_l+0xc4>
 8009fb2:	2a69      	cmp	r2, #105	; 0x69
 8009fb4:	d027      	beq.n	800a006 <_strtod_l+0x356>
 8009fb6:	dc24      	bgt.n	800a002 <_strtod_l+0x352>
 8009fb8:	2a49      	cmp	r2, #73	; 0x49
 8009fba:	d024      	beq.n	800a006 <_strtod_l+0x356>
 8009fbc:	2a4e      	cmp	r2, #78	; 0x4e
 8009fbe:	f47f aed9 	bne.w	8009d74 <_strtod_l+0xc4>
 8009fc2:	499f      	ldr	r1, [pc, #636]	; (800a240 <_strtod_l+0x590>)
 8009fc4:	a817      	add	r0, sp, #92	; 0x5c
 8009fc6:	f001 ff73 	bl	800beb0 <__match>
 8009fca:	2800      	cmp	r0, #0
 8009fcc:	f43f aed2 	beq.w	8009d74 <_strtod_l+0xc4>
 8009fd0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009fd2:	781b      	ldrb	r3, [r3, #0]
 8009fd4:	2b28      	cmp	r3, #40	; 0x28
 8009fd6:	d12d      	bne.n	800a034 <_strtod_l+0x384>
 8009fd8:	499a      	ldr	r1, [pc, #616]	; (800a244 <_strtod_l+0x594>)
 8009fda:	aa1a      	add	r2, sp, #104	; 0x68
 8009fdc:	a817      	add	r0, sp, #92	; 0x5c
 8009fde:	f001 ff7b 	bl	800bed8 <__hexnan>
 8009fe2:	2805      	cmp	r0, #5
 8009fe4:	d126      	bne.n	800a034 <_strtod_l+0x384>
 8009fe6:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009fe8:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009fec:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009ff0:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009ff4:	e6a0      	b.n	8009d38 <_strtod_l+0x88>
 8009ff6:	210a      	movs	r1, #10
 8009ff8:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009ffc:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a000:	e7b9      	b.n	8009f76 <_strtod_l+0x2c6>
 800a002:	2a6e      	cmp	r2, #110	; 0x6e
 800a004:	e7db      	b.n	8009fbe <_strtod_l+0x30e>
 800a006:	4990      	ldr	r1, [pc, #576]	; (800a248 <_strtod_l+0x598>)
 800a008:	a817      	add	r0, sp, #92	; 0x5c
 800a00a:	f001 ff51 	bl	800beb0 <__match>
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f aeb0 	beq.w	8009d74 <_strtod_l+0xc4>
 800a014:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a016:	498d      	ldr	r1, [pc, #564]	; (800a24c <_strtod_l+0x59c>)
 800a018:	3b01      	subs	r3, #1
 800a01a:	a817      	add	r0, sp, #92	; 0x5c
 800a01c:	9317      	str	r3, [sp, #92]	; 0x5c
 800a01e:	f001 ff47 	bl	800beb0 <__match>
 800a022:	b910      	cbnz	r0, 800a02a <_strtod_l+0x37a>
 800a024:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a026:	3301      	adds	r3, #1
 800a028:	9317      	str	r3, [sp, #92]	; 0x5c
 800a02a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a25c <_strtod_l+0x5ac>
 800a02e:	f04f 0a00 	mov.w	sl, #0
 800a032:	e681      	b.n	8009d38 <_strtod_l+0x88>
 800a034:	4886      	ldr	r0, [pc, #536]	; (800a250 <_strtod_l+0x5a0>)
 800a036:	f003 f877 	bl	800d128 <nan>
 800a03a:	ec5b ab10 	vmov	sl, fp, d0
 800a03e:	e67b      	b.n	8009d38 <_strtod_l+0x88>
 800a040:	9b05      	ldr	r3, [sp, #20]
 800a042:	9807      	ldr	r0, [sp, #28]
 800a044:	1af3      	subs	r3, r6, r3
 800a046:	2f00      	cmp	r7, #0
 800a048:	bf08      	it	eq
 800a04a:	462f      	moveq	r7, r5
 800a04c:	2d10      	cmp	r5, #16
 800a04e:	9306      	str	r3, [sp, #24]
 800a050:	46a8      	mov	r8, r5
 800a052:	bfa8      	it	ge
 800a054:	f04f 0810 	movge.w	r8, #16
 800a058:	f7f6 fa64 	bl	8000524 <__aeabi_ui2d>
 800a05c:	2d09      	cmp	r5, #9
 800a05e:	4682      	mov	sl, r0
 800a060:	468b      	mov	fp, r1
 800a062:	dd13      	ble.n	800a08c <_strtod_l+0x3dc>
 800a064:	4b7b      	ldr	r3, [pc, #492]	; (800a254 <_strtod_l+0x5a4>)
 800a066:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a06a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a06e:	f7f6 fad3 	bl	8000618 <__aeabi_dmul>
 800a072:	4682      	mov	sl, r0
 800a074:	4648      	mov	r0, r9
 800a076:	468b      	mov	fp, r1
 800a078:	f7f6 fa54 	bl	8000524 <__aeabi_ui2d>
 800a07c:	4602      	mov	r2, r0
 800a07e:	460b      	mov	r3, r1
 800a080:	4650      	mov	r0, sl
 800a082:	4659      	mov	r1, fp
 800a084:	f7f6 f912 	bl	80002ac <__adddf3>
 800a088:	4682      	mov	sl, r0
 800a08a:	468b      	mov	fp, r1
 800a08c:	2d0f      	cmp	r5, #15
 800a08e:	dc38      	bgt.n	800a102 <_strtod_l+0x452>
 800a090:	9b06      	ldr	r3, [sp, #24]
 800a092:	2b00      	cmp	r3, #0
 800a094:	f43f ae50 	beq.w	8009d38 <_strtod_l+0x88>
 800a098:	dd24      	ble.n	800a0e4 <_strtod_l+0x434>
 800a09a:	2b16      	cmp	r3, #22
 800a09c:	dc0b      	bgt.n	800a0b6 <_strtod_l+0x406>
 800a09e:	496d      	ldr	r1, [pc, #436]	; (800a254 <_strtod_l+0x5a4>)
 800a0a0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a0a4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0a8:	4652      	mov	r2, sl
 800a0aa:	465b      	mov	r3, fp
 800a0ac:	f7f6 fab4 	bl	8000618 <__aeabi_dmul>
 800a0b0:	4682      	mov	sl, r0
 800a0b2:	468b      	mov	fp, r1
 800a0b4:	e640      	b.n	8009d38 <_strtod_l+0x88>
 800a0b6:	9a06      	ldr	r2, [sp, #24]
 800a0b8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	db20      	blt.n	800a102 <_strtod_l+0x452>
 800a0c0:	4c64      	ldr	r4, [pc, #400]	; (800a254 <_strtod_l+0x5a4>)
 800a0c2:	f1c5 050f 	rsb	r5, r5, #15
 800a0c6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a0ca:	4652      	mov	r2, sl
 800a0cc:	465b      	mov	r3, fp
 800a0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a0d2:	f7f6 faa1 	bl	8000618 <__aeabi_dmul>
 800a0d6:	9b06      	ldr	r3, [sp, #24]
 800a0d8:	1b5d      	subs	r5, r3, r5
 800a0da:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a0de:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a0e2:	e7e3      	b.n	800a0ac <_strtod_l+0x3fc>
 800a0e4:	9b06      	ldr	r3, [sp, #24]
 800a0e6:	3316      	adds	r3, #22
 800a0e8:	db0b      	blt.n	800a102 <_strtod_l+0x452>
 800a0ea:	9b05      	ldr	r3, [sp, #20]
 800a0ec:	1b9e      	subs	r6, r3, r6
 800a0ee:	4b59      	ldr	r3, [pc, #356]	; (800a254 <_strtod_l+0x5a4>)
 800a0f0:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a0f4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a0f8:	4650      	mov	r0, sl
 800a0fa:	4659      	mov	r1, fp
 800a0fc:	f7f6 fbb6 	bl	800086c <__aeabi_ddiv>
 800a100:	e7d6      	b.n	800a0b0 <_strtod_l+0x400>
 800a102:	9b06      	ldr	r3, [sp, #24]
 800a104:	eba5 0808 	sub.w	r8, r5, r8
 800a108:	4498      	add	r8, r3
 800a10a:	f1b8 0f00 	cmp.w	r8, #0
 800a10e:	dd74      	ble.n	800a1fa <_strtod_l+0x54a>
 800a110:	f018 030f 	ands.w	r3, r8, #15
 800a114:	d00a      	beq.n	800a12c <_strtod_l+0x47c>
 800a116:	494f      	ldr	r1, [pc, #316]	; (800a254 <_strtod_l+0x5a4>)
 800a118:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a11c:	4652      	mov	r2, sl
 800a11e:	465b      	mov	r3, fp
 800a120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a124:	f7f6 fa78 	bl	8000618 <__aeabi_dmul>
 800a128:	4682      	mov	sl, r0
 800a12a:	468b      	mov	fp, r1
 800a12c:	f038 080f 	bics.w	r8, r8, #15
 800a130:	d04f      	beq.n	800a1d2 <_strtod_l+0x522>
 800a132:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a136:	dd22      	ble.n	800a17e <_strtod_l+0x4ce>
 800a138:	2500      	movs	r5, #0
 800a13a:	462e      	mov	r6, r5
 800a13c:	9507      	str	r5, [sp, #28]
 800a13e:	9505      	str	r5, [sp, #20]
 800a140:	2322      	movs	r3, #34	; 0x22
 800a142:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a25c <_strtod_l+0x5ac>
 800a146:	6023      	str	r3, [r4, #0]
 800a148:	f04f 0a00 	mov.w	sl, #0
 800a14c:	9b07      	ldr	r3, [sp, #28]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	f43f adf2 	beq.w	8009d38 <_strtod_l+0x88>
 800a154:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a156:	4620      	mov	r0, r4
 800a158:	f001 ffb8 	bl	800c0cc <_Bfree>
 800a15c:	9905      	ldr	r1, [sp, #20]
 800a15e:	4620      	mov	r0, r4
 800a160:	f001 ffb4 	bl	800c0cc <_Bfree>
 800a164:	4631      	mov	r1, r6
 800a166:	4620      	mov	r0, r4
 800a168:	f001 ffb0 	bl	800c0cc <_Bfree>
 800a16c:	9907      	ldr	r1, [sp, #28]
 800a16e:	4620      	mov	r0, r4
 800a170:	f001 ffac 	bl	800c0cc <_Bfree>
 800a174:	4629      	mov	r1, r5
 800a176:	4620      	mov	r0, r4
 800a178:	f001 ffa8 	bl	800c0cc <_Bfree>
 800a17c:	e5dc      	b.n	8009d38 <_strtod_l+0x88>
 800a17e:	4b36      	ldr	r3, [pc, #216]	; (800a258 <_strtod_l+0x5a8>)
 800a180:	9304      	str	r3, [sp, #16]
 800a182:	2300      	movs	r3, #0
 800a184:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a188:	4650      	mov	r0, sl
 800a18a:	4659      	mov	r1, fp
 800a18c:	4699      	mov	r9, r3
 800a18e:	f1b8 0f01 	cmp.w	r8, #1
 800a192:	dc21      	bgt.n	800a1d8 <_strtod_l+0x528>
 800a194:	b10b      	cbz	r3, 800a19a <_strtod_l+0x4ea>
 800a196:	4682      	mov	sl, r0
 800a198:	468b      	mov	fp, r1
 800a19a:	4b2f      	ldr	r3, [pc, #188]	; (800a258 <_strtod_l+0x5a8>)
 800a19c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a1a0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a1a4:	4652      	mov	r2, sl
 800a1a6:	465b      	mov	r3, fp
 800a1a8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a1ac:	f7f6 fa34 	bl	8000618 <__aeabi_dmul>
 800a1b0:	4b2a      	ldr	r3, [pc, #168]	; (800a25c <_strtod_l+0x5ac>)
 800a1b2:	460a      	mov	r2, r1
 800a1b4:	400b      	ands	r3, r1
 800a1b6:	492a      	ldr	r1, [pc, #168]	; (800a260 <_strtod_l+0x5b0>)
 800a1b8:	428b      	cmp	r3, r1
 800a1ba:	4682      	mov	sl, r0
 800a1bc:	d8bc      	bhi.n	800a138 <_strtod_l+0x488>
 800a1be:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a1c2:	428b      	cmp	r3, r1
 800a1c4:	bf86      	itte	hi
 800a1c6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a264 <_strtod_l+0x5b4>
 800a1ca:	f04f 3aff 	movhi.w	sl, #4294967295
 800a1ce:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a1d2:	2300      	movs	r3, #0
 800a1d4:	9304      	str	r3, [sp, #16]
 800a1d6:	e084      	b.n	800a2e2 <_strtod_l+0x632>
 800a1d8:	f018 0f01 	tst.w	r8, #1
 800a1dc:	d005      	beq.n	800a1ea <_strtod_l+0x53a>
 800a1de:	9b04      	ldr	r3, [sp, #16]
 800a1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e4:	f7f6 fa18 	bl	8000618 <__aeabi_dmul>
 800a1e8:	2301      	movs	r3, #1
 800a1ea:	9a04      	ldr	r2, [sp, #16]
 800a1ec:	3208      	adds	r2, #8
 800a1ee:	f109 0901 	add.w	r9, r9, #1
 800a1f2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a1f6:	9204      	str	r2, [sp, #16]
 800a1f8:	e7c9      	b.n	800a18e <_strtod_l+0x4de>
 800a1fa:	d0ea      	beq.n	800a1d2 <_strtod_l+0x522>
 800a1fc:	f1c8 0800 	rsb	r8, r8, #0
 800a200:	f018 020f 	ands.w	r2, r8, #15
 800a204:	d00a      	beq.n	800a21c <_strtod_l+0x56c>
 800a206:	4b13      	ldr	r3, [pc, #76]	; (800a254 <_strtod_l+0x5a4>)
 800a208:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a20c:	4650      	mov	r0, sl
 800a20e:	4659      	mov	r1, fp
 800a210:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a214:	f7f6 fb2a 	bl	800086c <__aeabi_ddiv>
 800a218:	4682      	mov	sl, r0
 800a21a:	468b      	mov	fp, r1
 800a21c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a220:	d0d7      	beq.n	800a1d2 <_strtod_l+0x522>
 800a222:	f1b8 0f1f 	cmp.w	r8, #31
 800a226:	dd1f      	ble.n	800a268 <_strtod_l+0x5b8>
 800a228:	2500      	movs	r5, #0
 800a22a:	462e      	mov	r6, r5
 800a22c:	9507      	str	r5, [sp, #28]
 800a22e:	9505      	str	r5, [sp, #20]
 800a230:	2322      	movs	r3, #34	; 0x22
 800a232:	f04f 0a00 	mov.w	sl, #0
 800a236:	f04f 0b00 	mov.w	fp, #0
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	e786      	b.n	800a14c <_strtod_l+0x49c>
 800a23e:	bf00      	nop
 800a240:	0800f52d 	.word	0x0800f52d
 800a244:	0800f570 	.word	0x0800f570
 800a248:	0800f525 	.word	0x0800f525
 800a24c:	0800f764 	.word	0x0800f764
 800a250:	0800f65f 	.word	0x0800f65f
 800a254:	0800f8d8 	.word	0x0800f8d8
 800a258:	0800f8b0 	.word	0x0800f8b0
 800a25c:	7ff00000 	.word	0x7ff00000
 800a260:	7ca00000 	.word	0x7ca00000
 800a264:	7fefffff 	.word	0x7fefffff
 800a268:	f018 0310 	ands.w	r3, r8, #16
 800a26c:	bf18      	it	ne
 800a26e:	236a      	movne	r3, #106	; 0x6a
 800a270:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a620 <_strtod_l+0x970>
 800a274:	9304      	str	r3, [sp, #16]
 800a276:	4650      	mov	r0, sl
 800a278:	4659      	mov	r1, fp
 800a27a:	2300      	movs	r3, #0
 800a27c:	f018 0f01 	tst.w	r8, #1
 800a280:	d004      	beq.n	800a28c <_strtod_l+0x5dc>
 800a282:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a286:	f7f6 f9c7 	bl	8000618 <__aeabi_dmul>
 800a28a:	2301      	movs	r3, #1
 800a28c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a290:	f109 0908 	add.w	r9, r9, #8
 800a294:	d1f2      	bne.n	800a27c <_strtod_l+0x5cc>
 800a296:	b10b      	cbz	r3, 800a29c <_strtod_l+0x5ec>
 800a298:	4682      	mov	sl, r0
 800a29a:	468b      	mov	fp, r1
 800a29c:	9b04      	ldr	r3, [sp, #16]
 800a29e:	b1c3      	cbz	r3, 800a2d2 <_strtod_l+0x622>
 800a2a0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a2a4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	4659      	mov	r1, fp
 800a2ac:	dd11      	ble.n	800a2d2 <_strtod_l+0x622>
 800a2ae:	2b1f      	cmp	r3, #31
 800a2b0:	f340 8124 	ble.w	800a4fc <_strtod_l+0x84c>
 800a2b4:	2b34      	cmp	r3, #52	; 0x34
 800a2b6:	bfde      	ittt	le
 800a2b8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a2bc:	f04f 33ff 	movle.w	r3, #4294967295
 800a2c0:	fa03 f202 	lslle.w	r2, r3, r2
 800a2c4:	f04f 0a00 	mov.w	sl, #0
 800a2c8:	bfcc      	ite	gt
 800a2ca:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a2ce:	ea02 0b01 	andle.w	fp, r2, r1
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	4650      	mov	r0, sl
 800a2d8:	4659      	mov	r1, fp
 800a2da:	f7f6 fc05 	bl	8000ae8 <__aeabi_dcmpeq>
 800a2de:	2800      	cmp	r0, #0
 800a2e0:	d1a2      	bne.n	800a228 <_strtod_l+0x578>
 800a2e2:	9b07      	ldr	r3, [sp, #28]
 800a2e4:	9300      	str	r3, [sp, #0]
 800a2e6:	9908      	ldr	r1, [sp, #32]
 800a2e8:	462b      	mov	r3, r5
 800a2ea:	463a      	mov	r2, r7
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f001 ff55 	bl	800c19c <__s2b>
 800a2f2:	9007      	str	r0, [sp, #28]
 800a2f4:	2800      	cmp	r0, #0
 800a2f6:	f43f af1f 	beq.w	800a138 <_strtod_l+0x488>
 800a2fa:	9b05      	ldr	r3, [sp, #20]
 800a2fc:	1b9e      	subs	r6, r3, r6
 800a2fe:	9b06      	ldr	r3, [sp, #24]
 800a300:	2b00      	cmp	r3, #0
 800a302:	bfb4      	ite	lt
 800a304:	4633      	movlt	r3, r6
 800a306:	2300      	movge	r3, #0
 800a308:	930c      	str	r3, [sp, #48]	; 0x30
 800a30a:	9b06      	ldr	r3, [sp, #24]
 800a30c:	2500      	movs	r5, #0
 800a30e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a312:	9312      	str	r3, [sp, #72]	; 0x48
 800a314:	462e      	mov	r6, r5
 800a316:	9b07      	ldr	r3, [sp, #28]
 800a318:	4620      	mov	r0, r4
 800a31a:	6859      	ldr	r1, [r3, #4]
 800a31c:	f001 fe96 	bl	800c04c <_Balloc>
 800a320:	9005      	str	r0, [sp, #20]
 800a322:	2800      	cmp	r0, #0
 800a324:	f43f af0c 	beq.w	800a140 <_strtod_l+0x490>
 800a328:	9b07      	ldr	r3, [sp, #28]
 800a32a:	691a      	ldr	r2, [r3, #16]
 800a32c:	3202      	adds	r2, #2
 800a32e:	f103 010c 	add.w	r1, r3, #12
 800a332:	0092      	lsls	r2, r2, #2
 800a334:	300c      	adds	r0, #12
 800a336:	f7fe fde7 	bl	8008f08 <memcpy>
 800a33a:	ec4b ab10 	vmov	d0, sl, fp
 800a33e:	aa1a      	add	r2, sp, #104	; 0x68
 800a340:	a919      	add	r1, sp, #100	; 0x64
 800a342:	4620      	mov	r0, r4
 800a344:	f002 fa70 	bl	800c828 <__d2b>
 800a348:	ec4b ab18 	vmov	d8, sl, fp
 800a34c:	9018      	str	r0, [sp, #96]	; 0x60
 800a34e:	2800      	cmp	r0, #0
 800a350:	f43f aef6 	beq.w	800a140 <_strtod_l+0x490>
 800a354:	2101      	movs	r1, #1
 800a356:	4620      	mov	r0, r4
 800a358:	f001 ffba 	bl	800c2d0 <__i2b>
 800a35c:	4606      	mov	r6, r0
 800a35e:	2800      	cmp	r0, #0
 800a360:	f43f aeee 	beq.w	800a140 <_strtod_l+0x490>
 800a364:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a366:	9904      	ldr	r1, [sp, #16]
 800a368:	2b00      	cmp	r3, #0
 800a36a:	bfab      	itete	ge
 800a36c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a36e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a370:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a372:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a376:	bfac      	ite	ge
 800a378:	eb03 0902 	addge.w	r9, r3, r2
 800a37c:	1ad7      	sublt	r7, r2, r3
 800a37e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a380:	eba3 0801 	sub.w	r8, r3, r1
 800a384:	4490      	add	r8, r2
 800a386:	4ba1      	ldr	r3, [pc, #644]	; (800a60c <_strtod_l+0x95c>)
 800a388:	f108 38ff 	add.w	r8, r8, #4294967295
 800a38c:	4598      	cmp	r8, r3
 800a38e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a392:	f280 80c7 	bge.w	800a524 <_strtod_l+0x874>
 800a396:	eba3 0308 	sub.w	r3, r3, r8
 800a39a:	2b1f      	cmp	r3, #31
 800a39c:	eba2 0203 	sub.w	r2, r2, r3
 800a3a0:	f04f 0101 	mov.w	r1, #1
 800a3a4:	f300 80b1 	bgt.w	800a50a <_strtod_l+0x85a>
 800a3a8:	fa01 f303 	lsl.w	r3, r1, r3
 800a3ac:	930d      	str	r3, [sp, #52]	; 0x34
 800a3ae:	2300      	movs	r3, #0
 800a3b0:	9308      	str	r3, [sp, #32]
 800a3b2:	eb09 0802 	add.w	r8, r9, r2
 800a3b6:	9b04      	ldr	r3, [sp, #16]
 800a3b8:	45c1      	cmp	r9, r8
 800a3ba:	4417      	add	r7, r2
 800a3bc:	441f      	add	r7, r3
 800a3be:	464b      	mov	r3, r9
 800a3c0:	bfa8      	it	ge
 800a3c2:	4643      	movge	r3, r8
 800a3c4:	42bb      	cmp	r3, r7
 800a3c6:	bfa8      	it	ge
 800a3c8:	463b      	movge	r3, r7
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	bfc2      	ittt	gt
 800a3ce:	eba8 0803 	subgt.w	r8, r8, r3
 800a3d2:	1aff      	subgt	r7, r7, r3
 800a3d4:	eba9 0903 	subgt.w	r9, r9, r3
 800a3d8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	dd17      	ble.n	800a40e <_strtod_l+0x75e>
 800a3de:	4631      	mov	r1, r6
 800a3e0:	461a      	mov	r2, r3
 800a3e2:	4620      	mov	r0, r4
 800a3e4:	f002 f834 	bl	800c450 <__pow5mult>
 800a3e8:	4606      	mov	r6, r0
 800a3ea:	2800      	cmp	r0, #0
 800a3ec:	f43f aea8 	beq.w	800a140 <_strtod_l+0x490>
 800a3f0:	4601      	mov	r1, r0
 800a3f2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a3f4:	4620      	mov	r0, r4
 800a3f6:	f001 ff81 	bl	800c2fc <__multiply>
 800a3fa:	900b      	str	r0, [sp, #44]	; 0x2c
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	f43f ae9f 	beq.w	800a140 <_strtod_l+0x490>
 800a402:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a404:	4620      	mov	r0, r4
 800a406:	f001 fe61 	bl	800c0cc <_Bfree>
 800a40a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a40c:	9318      	str	r3, [sp, #96]	; 0x60
 800a40e:	f1b8 0f00 	cmp.w	r8, #0
 800a412:	f300 808c 	bgt.w	800a52e <_strtod_l+0x87e>
 800a416:	9b06      	ldr	r3, [sp, #24]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	dd08      	ble.n	800a42e <_strtod_l+0x77e>
 800a41c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a41e:	9905      	ldr	r1, [sp, #20]
 800a420:	4620      	mov	r0, r4
 800a422:	f002 f815 	bl	800c450 <__pow5mult>
 800a426:	9005      	str	r0, [sp, #20]
 800a428:	2800      	cmp	r0, #0
 800a42a:	f43f ae89 	beq.w	800a140 <_strtod_l+0x490>
 800a42e:	2f00      	cmp	r7, #0
 800a430:	dd08      	ble.n	800a444 <_strtod_l+0x794>
 800a432:	9905      	ldr	r1, [sp, #20]
 800a434:	463a      	mov	r2, r7
 800a436:	4620      	mov	r0, r4
 800a438:	f002 f864 	bl	800c504 <__lshift>
 800a43c:	9005      	str	r0, [sp, #20]
 800a43e:	2800      	cmp	r0, #0
 800a440:	f43f ae7e 	beq.w	800a140 <_strtod_l+0x490>
 800a444:	f1b9 0f00 	cmp.w	r9, #0
 800a448:	dd08      	ble.n	800a45c <_strtod_l+0x7ac>
 800a44a:	4631      	mov	r1, r6
 800a44c:	464a      	mov	r2, r9
 800a44e:	4620      	mov	r0, r4
 800a450:	f002 f858 	bl	800c504 <__lshift>
 800a454:	4606      	mov	r6, r0
 800a456:	2800      	cmp	r0, #0
 800a458:	f43f ae72 	beq.w	800a140 <_strtod_l+0x490>
 800a45c:	9a05      	ldr	r2, [sp, #20]
 800a45e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a460:	4620      	mov	r0, r4
 800a462:	f002 f8db 	bl	800c61c <__mdiff>
 800a466:	4605      	mov	r5, r0
 800a468:	2800      	cmp	r0, #0
 800a46a:	f43f ae69 	beq.w	800a140 <_strtod_l+0x490>
 800a46e:	68c3      	ldr	r3, [r0, #12]
 800a470:	930b      	str	r3, [sp, #44]	; 0x2c
 800a472:	2300      	movs	r3, #0
 800a474:	60c3      	str	r3, [r0, #12]
 800a476:	4631      	mov	r1, r6
 800a478:	f002 f8b4 	bl	800c5e4 <__mcmp>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	da60      	bge.n	800a542 <_strtod_l+0x892>
 800a480:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a482:	ea53 030a 	orrs.w	r3, r3, sl
 800a486:	f040 8082 	bne.w	800a58e <_strtod_l+0x8de>
 800a48a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d17d      	bne.n	800a58e <_strtod_l+0x8de>
 800a492:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a496:	0d1b      	lsrs	r3, r3, #20
 800a498:	051b      	lsls	r3, r3, #20
 800a49a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a49e:	d976      	bls.n	800a58e <_strtod_l+0x8de>
 800a4a0:	696b      	ldr	r3, [r5, #20]
 800a4a2:	b913      	cbnz	r3, 800a4aa <_strtod_l+0x7fa>
 800a4a4:	692b      	ldr	r3, [r5, #16]
 800a4a6:	2b01      	cmp	r3, #1
 800a4a8:	dd71      	ble.n	800a58e <_strtod_l+0x8de>
 800a4aa:	4629      	mov	r1, r5
 800a4ac:	2201      	movs	r2, #1
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f002 f828 	bl	800c504 <__lshift>
 800a4b4:	4631      	mov	r1, r6
 800a4b6:	4605      	mov	r5, r0
 800a4b8:	f002 f894 	bl	800c5e4 <__mcmp>
 800a4bc:	2800      	cmp	r0, #0
 800a4be:	dd66      	ble.n	800a58e <_strtod_l+0x8de>
 800a4c0:	9904      	ldr	r1, [sp, #16]
 800a4c2:	4a53      	ldr	r2, [pc, #332]	; (800a610 <_strtod_l+0x960>)
 800a4c4:	465b      	mov	r3, fp
 800a4c6:	2900      	cmp	r1, #0
 800a4c8:	f000 8081 	beq.w	800a5ce <_strtod_l+0x91e>
 800a4cc:	ea02 010b 	and.w	r1, r2, fp
 800a4d0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a4d4:	dc7b      	bgt.n	800a5ce <_strtod_l+0x91e>
 800a4d6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a4da:	f77f aea9 	ble.w	800a230 <_strtod_l+0x580>
 800a4de:	4b4d      	ldr	r3, [pc, #308]	; (800a614 <_strtod_l+0x964>)
 800a4e0:	4650      	mov	r0, sl
 800a4e2:	4659      	mov	r1, fp
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	f7f6 f897 	bl	8000618 <__aeabi_dmul>
 800a4ea:	460b      	mov	r3, r1
 800a4ec:	4303      	orrs	r3, r0
 800a4ee:	bf08      	it	eq
 800a4f0:	2322      	moveq	r3, #34	; 0x22
 800a4f2:	4682      	mov	sl, r0
 800a4f4:	468b      	mov	fp, r1
 800a4f6:	bf08      	it	eq
 800a4f8:	6023      	streq	r3, [r4, #0]
 800a4fa:	e62b      	b.n	800a154 <_strtod_l+0x4a4>
 800a4fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a500:	fa02 f303 	lsl.w	r3, r2, r3
 800a504:	ea03 0a0a 	and.w	sl, r3, sl
 800a508:	e6e3      	b.n	800a2d2 <_strtod_l+0x622>
 800a50a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a50e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a512:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a516:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a51a:	fa01 f308 	lsl.w	r3, r1, r8
 800a51e:	9308      	str	r3, [sp, #32]
 800a520:	910d      	str	r1, [sp, #52]	; 0x34
 800a522:	e746      	b.n	800a3b2 <_strtod_l+0x702>
 800a524:	2300      	movs	r3, #0
 800a526:	9308      	str	r3, [sp, #32]
 800a528:	2301      	movs	r3, #1
 800a52a:	930d      	str	r3, [sp, #52]	; 0x34
 800a52c:	e741      	b.n	800a3b2 <_strtod_l+0x702>
 800a52e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a530:	4642      	mov	r2, r8
 800a532:	4620      	mov	r0, r4
 800a534:	f001 ffe6 	bl	800c504 <__lshift>
 800a538:	9018      	str	r0, [sp, #96]	; 0x60
 800a53a:	2800      	cmp	r0, #0
 800a53c:	f47f af6b 	bne.w	800a416 <_strtod_l+0x766>
 800a540:	e5fe      	b.n	800a140 <_strtod_l+0x490>
 800a542:	465f      	mov	r7, fp
 800a544:	d16e      	bne.n	800a624 <_strtod_l+0x974>
 800a546:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a548:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a54c:	b342      	cbz	r2, 800a5a0 <_strtod_l+0x8f0>
 800a54e:	4a32      	ldr	r2, [pc, #200]	; (800a618 <_strtod_l+0x968>)
 800a550:	4293      	cmp	r3, r2
 800a552:	d128      	bne.n	800a5a6 <_strtod_l+0x8f6>
 800a554:	9b04      	ldr	r3, [sp, #16]
 800a556:	4651      	mov	r1, sl
 800a558:	b1eb      	cbz	r3, 800a596 <_strtod_l+0x8e6>
 800a55a:	4b2d      	ldr	r3, [pc, #180]	; (800a610 <_strtod_l+0x960>)
 800a55c:	403b      	ands	r3, r7
 800a55e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a562:	f04f 32ff 	mov.w	r2, #4294967295
 800a566:	d819      	bhi.n	800a59c <_strtod_l+0x8ec>
 800a568:	0d1b      	lsrs	r3, r3, #20
 800a56a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a56e:	fa02 f303 	lsl.w	r3, r2, r3
 800a572:	4299      	cmp	r1, r3
 800a574:	d117      	bne.n	800a5a6 <_strtod_l+0x8f6>
 800a576:	4b29      	ldr	r3, [pc, #164]	; (800a61c <_strtod_l+0x96c>)
 800a578:	429f      	cmp	r7, r3
 800a57a:	d102      	bne.n	800a582 <_strtod_l+0x8d2>
 800a57c:	3101      	adds	r1, #1
 800a57e:	f43f addf 	beq.w	800a140 <_strtod_l+0x490>
 800a582:	4b23      	ldr	r3, [pc, #140]	; (800a610 <_strtod_l+0x960>)
 800a584:	403b      	ands	r3, r7
 800a586:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a58a:	f04f 0a00 	mov.w	sl, #0
 800a58e:	9b04      	ldr	r3, [sp, #16]
 800a590:	2b00      	cmp	r3, #0
 800a592:	d1a4      	bne.n	800a4de <_strtod_l+0x82e>
 800a594:	e5de      	b.n	800a154 <_strtod_l+0x4a4>
 800a596:	f04f 33ff 	mov.w	r3, #4294967295
 800a59a:	e7ea      	b.n	800a572 <_strtod_l+0x8c2>
 800a59c:	4613      	mov	r3, r2
 800a59e:	e7e8      	b.n	800a572 <_strtod_l+0x8c2>
 800a5a0:	ea53 030a 	orrs.w	r3, r3, sl
 800a5a4:	d08c      	beq.n	800a4c0 <_strtod_l+0x810>
 800a5a6:	9b08      	ldr	r3, [sp, #32]
 800a5a8:	b1db      	cbz	r3, 800a5e2 <_strtod_l+0x932>
 800a5aa:	423b      	tst	r3, r7
 800a5ac:	d0ef      	beq.n	800a58e <_strtod_l+0x8de>
 800a5ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a5b0:	9a04      	ldr	r2, [sp, #16]
 800a5b2:	4650      	mov	r0, sl
 800a5b4:	4659      	mov	r1, fp
 800a5b6:	b1c3      	cbz	r3, 800a5ea <_strtod_l+0x93a>
 800a5b8:	f7ff fb5c 	bl	8009c74 <sulp>
 800a5bc:	4602      	mov	r2, r0
 800a5be:	460b      	mov	r3, r1
 800a5c0:	ec51 0b18 	vmov	r0, r1, d8
 800a5c4:	f7f5 fe72 	bl	80002ac <__adddf3>
 800a5c8:	4682      	mov	sl, r0
 800a5ca:	468b      	mov	fp, r1
 800a5cc:	e7df      	b.n	800a58e <_strtod_l+0x8de>
 800a5ce:	4013      	ands	r3, r2
 800a5d0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a5d4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a5d8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a5dc:	f04f 3aff 	mov.w	sl, #4294967295
 800a5e0:	e7d5      	b.n	800a58e <_strtod_l+0x8de>
 800a5e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5e4:	ea13 0f0a 	tst.w	r3, sl
 800a5e8:	e7e0      	b.n	800a5ac <_strtod_l+0x8fc>
 800a5ea:	f7ff fb43 	bl	8009c74 <sulp>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	460b      	mov	r3, r1
 800a5f2:	ec51 0b18 	vmov	r0, r1, d8
 800a5f6:	f7f5 fe57 	bl	80002a8 <__aeabi_dsub>
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	2300      	movs	r3, #0
 800a5fe:	4682      	mov	sl, r0
 800a600:	468b      	mov	fp, r1
 800a602:	f7f6 fa71 	bl	8000ae8 <__aeabi_dcmpeq>
 800a606:	2800      	cmp	r0, #0
 800a608:	d0c1      	beq.n	800a58e <_strtod_l+0x8de>
 800a60a:	e611      	b.n	800a230 <_strtod_l+0x580>
 800a60c:	fffffc02 	.word	0xfffffc02
 800a610:	7ff00000 	.word	0x7ff00000
 800a614:	39500000 	.word	0x39500000
 800a618:	000fffff 	.word	0x000fffff
 800a61c:	7fefffff 	.word	0x7fefffff
 800a620:	0800f588 	.word	0x0800f588
 800a624:	4631      	mov	r1, r6
 800a626:	4628      	mov	r0, r5
 800a628:	f002 f95a 	bl	800c8e0 <__ratio>
 800a62c:	ec59 8b10 	vmov	r8, r9, d0
 800a630:	ee10 0a10 	vmov	r0, s0
 800a634:	2200      	movs	r2, #0
 800a636:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a63a:	4649      	mov	r1, r9
 800a63c:	f7f6 fa68 	bl	8000b10 <__aeabi_dcmple>
 800a640:	2800      	cmp	r0, #0
 800a642:	d07a      	beq.n	800a73a <_strtod_l+0xa8a>
 800a644:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a646:	2b00      	cmp	r3, #0
 800a648:	d04a      	beq.n	800a6e0 <_strtod_l+0xa30>
 800a64a:	4b95      	ldr	r3, [pc, #596]	; (800a8a0 <_strtod_l+0xbf0>)
 800a64c:	2200      	movs	r2, #0
 800a64e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a652:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a8a0 <_strtod_l+0xbf0>
 800a656:	f04f 0800 	mov.w	r8, #0
 800a65a:	4b92      	ldr	r3, [pc, #584]	; (800a8a4 <_strtod_l+0xbf4>)
 800a65c:	403b      	ands	r3, r7
 800a65e:	930d      	str	r3, [sp, #52]	; 0x34
 800a660:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a662:	4b91      	ldr	r3, [pc, #580]	; (800a8a8 <_strtod_l+0xbf8>)
 800a664:	429a      	cmp	r2, r3
 800a666:	f040 80b0 	bne.w	800a7ca <_strtod_l+0xb1a>
 800a66a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a66e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a672:	ec4b ab10 	vmov	d0, sl, fp
 800a676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a67a:	f002 f859 	bl	800c730 <__ulp>
 800a67e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a682:	ec53 2b10 	vmov	r2, r3, d0
 800a686:	f7f5 ffc7 	bl	8000618 <__aeabi_dmul>
 800a68a:	4652      	mov	r2, sl
 800a68c:	465b      	mov	r3, fp
 800a68e:	f7f5 fe0d 	bl	80002ac <__adddf3>
 800a692:	460b      	mov	r3, r1
 800a694:	4983      	ldr	r1, [pc, #524]	; (800a8a4 <_strtod_l+0xbf4>)
 800a696:	4a85      	ldr	r2, [pc, #532]	; (800a8ac <_strtod_l+0xbfc>)
 800a698:	4019      	ands	r1, r3
 800a69a:	4291      	cmp	r1, r2
 800a69c:	4682      	mov	sl, r0
 800a69e:	d960      	bls.n	800a762 <_strtod_l+0xab2>
 800a6a0:	ee18 3a90 	vmov	r3, s17
 800a6a4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	d104      	bne.n	800a6b6 <_strtod_l+0xa06>
 800a6ac:	ee18 3a10 	vmov	r3, s16
 800a6b0:	3301      	adds	r3, #1
 800a6b2:	f43f ad45 	beq.w	800a140 <_strtod_l+0x490>
 800a6b6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a8b8 <_strtod_l+0xc08>
 800a6ba:	f04f 3aff 	mov.w	sl, #4294967295
 800a6be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a6c0:	4620      	mov	r0, r4
 800a6c2:	f001 fd03 	bl	800c0cc <_Bfree>
 800a6c6:	9905      	ldr	r1, [sp, #20]
 800a6c8:	4620      	mov	r0, r4
 800a6ca:	f001 fcff 	bl	800c0cc <_Bfree>
 800a6ce:	4631      	mov	r1, r6
 800a6d0:	4620      	mov	r0, r4
 800a6d2:	f001 fcfb 	bl	800c0cc <_Bfree>
 800a6d6:	4629      	mov	r1, r5
 800a6d8:	4620      	mov	r0, r4
 800a6da:	f001 fcf7 	bl	800c0cc <_Bfree>
 800a6de:	e61a      	b.n	800a316 <_strtod_l+0x666>
 800a6e0:	f1ba 0f00 	cmp.w	sl, #0
 800a6e4:	d11b      	bne.n	800a71e <_strtod_l+0xa6e>
 800a6e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a6ea:	b9f3      	cbnz	r3, 800a72a <_strtod_l+0xa7a>
 800a6ec:	4b6c      	ldr	r3, [pc, #432]	; (800a8a0 <_strtod_l+0xbf0>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	4640      	mov	r0, r8
 800a6f2:	4649      	mov	r1, r9
 800a6f4:	f7f6 fa02 	bl	8000afc <__aeabi_dcmplt>
 800a6f8:	b9d0      	cbnz	r0, 800a730 <_strtod_l+0xa80>
 800a6fa:	4640      	mov	r0, r8
 800a6fc:	4649      	mov	r1, r9
 800a6fe:	4b6c      	ldr	r3, [pc, #432]	; (800a8b0 <_strtod_l+0xc00>)
 800a700:	2200      	movs	r2, #0
 800a702:	f7f5 ff89 	bl	8000618 <__aeabi_dmul>
 800a706:	4680      	mov	r8, r0
 800a708:	4689      	mov	r9, r1
 800a70a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a70e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a712:	9315      	str	r3, [sp, #84]	; 0x54
 800a714:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a718:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a71c:	e79d      	b.n	800a65a <_strtod_l+0x9aa>
 800a71e:	f1ba 0f01 	cmp.w	sl, #1
 800a722:	d102      	bne.n	800a72a <_strtod_l+0xa7a>
 800a724:	2f00      	cmp	r7, #0
 800a726:	f43f ad83 	beq.w	800a230 <_strtod_l+0x580>
 800a72a:	4b62      	ldr	r3, [pc, #392]	; (800a8b4 <_strtod_l+0xc04>)
 800a72c:	2200      	movs	r2, #0
 800a72e:	e78e      	b.n	800a64e <_strtod_l+0x99e>
 800a730:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a8b0 <_strtod_l+0xc00>
 800a734:	f04f 0800 	mov.w	r8, #0
 800a738:	e7e7      	b.n	800a70a <_strtod_l+0xa5a>
 800a73a:	4b5d      	ldr	r3, [pc, #372]	; (800a8b0 <_strtod_l+0xc00>)
 800a73c:	4640      	mov	r0, r8
 800a73e:	4649      	mov	r1, r9
 800a740:	2200      	movs	r2, #0
 800a742:	f7f5 ff69 	bl	8000618 <__aeabi_dmul>
 800a746:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a748:	4680      	mov	r8, r0
 800a74a:	4689      	mov	r9, r1
 800a74c:	b933      	cbnz	r3, 800a75c <_strtod_l+0xaac>
 800a74e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a752:	900e      	str	r0, [sp, #56]	; 0x38
 800a754:	930f      	str	r3, [sp, #60]	; 0x3c
 800a756:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a75a:	e7dd      	b.n	800a718 <_strtod_l+0xa68>
 800a75c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a760:	e7f9      	b.n	800a756 <_strtod_l+0xaa6>
 800a762:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a766:	9b04      	ldr	r3, [sp, #16]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d1a8      	bne.n	800a6be <_strtod_l+0xa0e>
 800a76c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a770:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a772:	0d1b      	lsrs	r3, r3, #20
 800a774:	051b      	lsls	r3, r3, #20
 800a776:	429a      	cmp	r2, r3
 800a778:	d1a1      	bne.n	800a6be <_strtod_l+0xa0e>
 800a77a:	4640      	mov	r0, r8
 800a77c:	4649      	mov	r1, r9
 800a77e:	f7f6 faab 	bl	8000cd8 <__aeabi_d2lz>
 800a782:	f7f5 ff1b 	bl	80005bc <__aeabi_l2d>
 800a786:	4602      	mov	r2, r0
 800a788:	460b      	mov	r3, r1
 800a78a:	4640      	mov	r0, r8
 800a78c:	4649      	mov	r1, r9
 800a78e:	f7f5 fd8b 	bl	80002a8 <__aeabi_dsub>
 800a792:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a794:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a798:	ea43 030a 	orr.w	r3, r3, sl
 800a79c:	4313      	orrs	r3, r2
 800a79e:	4680      	mov	r8, r0
 800a7a0:	4689      	mov	r9, r1
 800a7a2:	d055      	beq.n	800a850 <_strtod_l+0xba0>
 800a7a4:	a336      	add	r3, pc, #216	; (adr r3, 800a880 <_strtod_l+0xbd0>)
 800a7a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7aa:	f7f6 f9a7 	bl	8000afc <__aeabi_dcmplt>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	f47f acd0 	bne.w	800a154 <_strtod_l+0x4a4>
 800a7b4:	a334      	add	r3, pc, #208	; (adr r3, 800a888 <_strtod_l+0xbd8>)
 800a7b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7ba:	4640      	mov	r0, r8
 800a7bc:	4649      	mov	r1, r9
 800a7be:	f7f6 f9bb 	bl	8000b38 <__aeabi_dcmpgt>
 800a7c2:	2800      	cmp	r0, #0
 800a7c4:	f43f af7b 	beq.w	800a6be <_strtod_l+0xa0e>
 800a7c8:	e4c4      	b.n	800a154 <_strtod_l+0x4a4>
 800a7ca:	9b04      	ldr	r3, [sp, #16]
 800a7cc:	b333      	cbz	r3, 800a81c <_strtod_l+0xb6c>
 800a7ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a7d0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a7d4:	d822      	bhi.n	800a81c <_strtod_l+0xb6c>
 800a7d6:	a32e      	add	r3, pc, #184	; (adr r3, 800a890 <_strtod_l+0xbe0>)
 800a7d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7dc:	4640      	mov	r0, r8
 800a7de:	4649      	mov	r1, r9
 800a7e0:	f7f6 f996 	bl	8000b10 <__aeabi_dcmple>
 800a7e4:	b1a0      	cbz	r0, 800a810 <_strtod_l+0xb60>
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	4640      	mov	r0, r8
 800a7ea:	f7f6 f9ed 	bl	8000bc8 <__aeabi_d2uiz>
 800a7ee:	2801      	cmp	r0, #1
 800a7f0:	bf38      	it	cc
 800a7f2:	2001      	movcc	r0, #1
 800a7f4:	f7f5 fe96 	bl	8000524 <__aeabi_ui2d>
 800a7f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	4689      	mov	r9, r1
 800a7fe:	bb23      	cbnz	r3, 800a84a <_strtod_l+0xb9a>
 800a800:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a804:	9010      	str	r0, [sp, #64]	; 0x40
 800a806:	9311      	str	r3, [sp, #68]	; 0x44
 800a808:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a80c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a810:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a812:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a814:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a818:	1a9b      	subs	r3, r3, r2
 800a81a:	9309      	str	r3, [sp, #36]	; 0x24
 800a81c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a820:	eeb0 0a48 	vmov.f32	s0, s16
 800a824:	eef0 0a68 	vmov.f32	s1, s17
 800a828:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a82c:	f001 ff80 	bl	800c730 <__ulp>
 800a830:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a834:	ec53 2b10 	vmov	r2, r3, d0
 800a838:	f7f5 feee 	bl	8000618 <__aeabi_dmul>
 800a83c:	ec53 2b18 	vmov	r2, r3, d8
 800a840:	f7f5 fd34 	bl	80002ac <__adddf3>
 800a844:	4682      	mov	sl, r0
 800a846:	468b      	mov	fp, r1
 800a848:	e78d      	b.n	800a766 <_strtod_l+0xab6>
 800a84a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a84e:	e7db      	b.n	800a808 <_strtod_l+0xb58>
 800a850:	a311      	add	r3, pc, #68	; (adr r3, 800a898 <_strtod_l+0xbe8>)
 800a852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a856:	f7f6 f951 	bl	8000afc <__aeabi_dcmplt>
 800a85a:	e7b2      	b.n	800a7c2 <_strtod_l+0xb12>
 800a85c:	2300      	movs	r3, #0
 800a85e:	930a      	str	r3, [sp, #40]	; 0x28
 800a860:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a862:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a864:	6013      	str	r3, [r2, #0]
 800a866:	f7ff ba6b 	b.w	8009d40 <_strtod_l+0x90>
 800a86a:	2a65      	cmp	r2, #101	; 0x65
 800a86c:	f43f ab5f 	beq.w	8009f2e <_strtod_l+0x27e>
 800a870:	2a45      	cmp	r2, #69	; 0x45
 800a872:	f43f ab5c 	beq.w	8009f2e <_strtod_l+0x27e>
 800a876:	2301      	movs	r3, #1
 800a878:	f7ff bb94 	b.w	8009fa4 <_strtod_l+0x2f4>
 800a87c:	f3af 8000 	nop.w
 800a880:	94a03595 	.word	0x94a03595
 800a884:	3fdfffff 	.word	0x3fdfffff
 800a888:	35afe535 	.word	0x35afe535
 800a88c:	3fe00000 	.word	0x3fe00000
 800a890:	ffc00000 	.word	0xffc00000
 800a894:	41dfffff 	.word	0x41dfffff
 800a898:	94a03595 	.word	0x94a03595
 800a89c:	3fcfffff 	.word	0x3fcfffff
 800a8a0:	3ff00000 	.word	0x3ff00000
 800a8a4:	7ff00000 	.word	0x7ff00000
 800a8a8:	7fe00000 	.word	0x7fe00000
 800a8ac:	7c9fffff 	.word	0x7c9fffff
 800a8b0:	3fe00000 	.word	0x3fe00000
 800a8b4:	bff00000 	.word	0xbff00000
 800a8b8:	7fefffff 	.word	0x7fefffff

0800a8bc <_strtod_r>:
 800a8bc:	4b01      	ldr	r3, [pc, #4]	; (800a8c4 <_strtod_r+0x8>)
 800a8be:	f7ff b9f7 	b.w	8009cb0 <_strtod_l>
 800a8c2:	bf00      	nop
 800a8c4:	200000dc 	.word	0x200000dc

0800a8c8 <strtod>:
 800a8c8:	460a      	mov	r2, r1
 800a8ca:	4601      	mov	r1, r0
 800a8cc:	4802      	ldr	r0, [pc, #8]	; (800a8d8 <strtod+0x10>)
 800a8ce:	4b03      	ldr	r3, [pc, #12]	; (800a8dc <strtod+0x14>)
 800a8d0:	6800      	ldr	r0, [r0, #0]
 800a8d2:	f7ff b9ed 	b.w	8009cb0 <_strtod_l>
 800a8d6:	bf00      	nop
 800a8d8:	20000074 	.word	0x20000074
 800a8dc:	200000dc 	.word	0x200000dc

0800a8e0 <strtok>:
 800a8e0:	4b16      	ldr	r3, [pc, #88]	; (800a93c <strtok+0x5c>)
 800a8e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a8e4:	681e      	ldr	r6, [r3, #0]
 800a8e6:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800a8e8:	4605      	mov	r5, r0
 800a8ea:	b9fc      	cbnz	r4, 800a92c <strtok+0x4c>
 800a8ec:	2050      	movs	r0, #80	; 0x50
 800a8ee:	9101      	str	r1, [sp, #4]
 800a8f0:	f001 fb92 	bl	800c018 <malloc>
 800a8f4:	9901      	ldr	r1, [sp, #4]
 800a8f6:	65b0      	str	r0, [r6, #88]	; 0x58
 800a8f8:	4602      	mov	r2, r0
 800a8fa:	b920      	cbnz	r0, 800a906 <strtok+0x26>
 800a8fc:	4b10      	ldr	r3, [pc, #64]	; (800a940 <strtok+0x60>)
 800a8fe:	4811      	ldr	r0, [pc, #68]	; (800a944 <strtok+0x64>)
 800a900:	2157      	movs	r1, #87	; 0x57
 800a902:	f000 f969 	bl	800abd8 <__assert_func>
 800a906:	e9c0 4400 	strd	r4, r4, [r0]
 800a90a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a90e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a912:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a916:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a91a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a91e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a922:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a926:	6184      	str	r4, [r0, #24]
 800a928:	7704      	strb	r4, [r0, #28]
 800a92a:	6244      	str	r4, [r0, #36]	; 0x24
 800a92c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800a92e:	2301      	movs	r3, #1
 800a930:	4628      	mov	r0, r5
 800a932:	b002      	add	sp, #8
 800a934:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a938:	f000 b806 	b.w	800a948 <__strtok_r>
 800a93c:	20000074 	.word	0x20000074
 800a940:	0800f5b0 	.word	0x0800f5b0
 800a944:	0800f5c7 	.word	0x0800f5c7

0800a948 <__strtok_r>:
 800a948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a94a:	b908      	cbnz	r0, 800a950 <__strtok_r+0x8>
 800a94c:	6810      	ldr	r0, [r2, #0]
 800a94e:	b188      	cbz	r0, 800a974 <__strtok_r+0x2c>
 800a950:	4604      	mov	r4, r0
 800a952:	4620      	mov	r0, r4
 800a954:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a958:	460f      	mov	r7, r1
 800a95a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a95e:	b91e      	cbnz	r6, 800a968 <__strtok_r+0x20>
 800a960:	b965      	cbnz	r5, 800a97c <__strtok_r+0x34>
 800a962:	6015      	str	r5, [r2, #0]
 800a964:	4628      	mov	r0, r5
 800a966:	e005      	b.n	800a974 <__strtok_r+0x2c>
 800a968:	42b5      	cmp	r5, r6
 800a96a:	d1f6      	bne.n	800a95a <__strtok_r+0x12>
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d1f0      	bne.n	800a952 <__strtok_r+0xa>
 800a970:	6014      	str	r4, [r2, #0]
 800a972:	7003      	strb	r3, [r0, #0]
 800a974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a976:	461c      	mov	r4, r3
 800a978:	e00c      	b.n	800a994 <__strtok_r+0x4c>
 800a97a:	b915      	cbnz	r5, 800a982 <__strtok_r+0x3a>
 800a97c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a980:	460e      	mov	r6, r1
 800a982:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a986:	42ab      	cmp	r3, r5
 800a988:	d1f7      	bne.n	800a97a <__strtok_r+0x32>
 800a98a:	2b00      	cmp	r3, #0
 800a98c:	d0f3      	beq.n	800a976 <__strtok_r+0x2e>
 800a98e:	2300      	movs	r3, #0
 800a990:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a994:	6014      	str	r4, [r2, #0]
 800a996:	e7ed      	b.n	800a974 <__strtok_r+0x2c>

0800a998 <_strtol_l.constprop.0>:
 800a998:	2b01      	cmp	r3, #1
 800a99a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a99e:	d001      	beq.n	800a9a4 <_strtol_l.constprop.0+0xc>
 800a9a0:	2b24      	cmp	r3, #36	; 0x24
 800a9a2:	d906      	bls.n	800a9b2 <_strtol_l.constprop.0+0x1a>
 800a9a4:	f7fe fa86 	bl	8008eb4 <__errno>
 800a9a8:	2316      	movs	r3, #22
 800a9aa:	6003      	str	r3, [r0, #0]
 800a9ac:	2000      	movs	r0, #0
 800a9ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9b2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800aa98 <_strtol_l.constprop.0+0x100>
 800a9b6:	460d      	mov	r5, r1
 800a9b8:	462e      	mov	r6, r5
 800a9ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a9be:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a9c2:	f017 0708 	ands.w	r7, r7, #8
 800a9c6:	d1f7      	bne.n	800a9b8 <_strtol_l.constprop.0+0x20>
 800a9c8:	2c2d      	cmp	r4, #45	; 0x2d
 800a9ca:	d132      	bne.n	800aa32 <_strtol_l.constprop.0+0x9a>
 800a9cc:	782c      	ldrb	r4, [r5, #0]
 800a9ce:	2701      	movs	r7, #1
 800a9d0:	1cb5      	adds	r5, r6, #2
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d05b      	beq.n	800aa8e <_strtol_l.constprop.0+0xf6>
 800a9d6:	2b10      	cmp	r3, #16
 800a9d8:	d109      	bne.n	800a9ee <_strtol_l.constprop.0+0x56>
 800a9da:	2c30      	cmp	r4, #48	; 0x30
 800a9dc:	d107      	bne.n	800a9ee <_strtol_l.constprop.0+0x56>
 800a9de:	782c      	ldrb	r4, [r5, #0]
 800a9e0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a9e4:	2c58      	cmp	r4, #88	; 0x58
 800a9e6:	d14d      	bne.n	800aa84 <_strtol_l.constprop.0+0xec>
 800a9e8:	786c      	ldrb	r4, [r5, #1]
 800a9ea:	2310      	movs	r3, #16
 800a9ec:	3502      	adds	r5, #2
 800a9ee:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a9f2:	f108 38ff 	add.w	r8, r8, #4294967295
 800a9f6:	f04f 0c00 	mov.w	ip, #0
 800a9fa:	fbb8 f9f3 	udiv	r9, r8, r3
 800a9fe:	4666      	mov	r6, ip
 800aa00:	fb03 8a19 	mls	sl, r3, r9, r8
 800aa04:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800aa08:	f1be 0f09 	cmp.w	lr, #9
 800aa0c:	d816      	bhi.n	800aa3c <_strtol_l.constprop.0+0xa4>
 800aa0e:	4674      	mov	r4, lr
 800aa10:	42a3      	cmp	r3, r4
 800aa12:	dd24      	ble.n	800aa5e <_strtol_l.constprop.0+0xc6>
 800aa14:	f1bc 0f00 	cmp.w	ip, #0
 800aa18:	db1e      	blt.n	800aa58 <_strtol_l.constprop.0+0xc0>
 800aa1a:	45b1      	cmp	r9, r6
 800aa1c:	d31c      	bcc.n	800aa58 <_strtol_l.constprop.0+0xc0>
 800aa1e:	d101      	bne.n	800aa24 <_strtol_l.constprop.0+0x8c>
 800aa20:	45a2      	cmp	sl, r4
 800aa22:	db19      	blt.n	800aa58 <_strtol_l.constprop.0+0xc0>
 800aa24:	fb06 4603 	mla	r6, r6, r3, r4
 800aa28:	f04f 0c01 	mov.w	ip, #1
 800aa2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa30:	e7e8      	b.n	800aa04 <_strtol_l.constprop.0+0x6c>
 800aa32:	2c2b      	cmp	r4, #43	; 0x2b
 800aa34:	bf04      	itt	eq
 800aa36:	782c      	ldrbeq	r4, [r5, #0]
 800aa38:	1cb5      	addeq	r5, r6, #2
 800aa3a:	e7ca      	b.n	800a9d2 <_strtol_l.constprop.0+0x3a>
 800aa3c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800aa40:	f1be 0f19 	cmp.w	lr, #25
 800aa44:	d801      	bhi.n	800aa4a <_strtol_l.constprop.0+0xb2>
 800aa46:	3c37      	subs	r4, #55	; 0x37
 800aa48:	e7e2      	b.n	800aa10 <_strtol_l.constprop.0+0x78>
 800aa4a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800aa4e:	f1be 0f19 	cmp.w	lr, #25
 800aa52:	d804      	bhi.n	800aa5e <_strtol_l.constprop.0+0xc6>
 800aa54:	3c57      	subs	r4, #87	; 0x57
 800aa56:	e7db      	b.n	800aa10 <_strtol_l.constprop.0+0x78>
 800aa58:	f04f 3cff 	mov.w	ip, #4294967295
 800aa5c:	e7e6      	b.n	800aa2c <_strtol_l.constprop.0+0x94>
 800aa5e:	f1bc 0f00 	cmp.w	ip, #0
 800aa62:	da05      	bge.n	800aa70 <_strtol_l.constprop.0+0xd8>
 800aa64:	2322      	movs	r3, #34	; 0x22
 800aa66:	6003      	str	r3, [r0, #0]
 800aa68:	4646      	mov	r6, r8
 800aa6a:	b942      	cbnz	r2, 800aa7e <_strtol_l.constprop.0+0xe6>
 800aa6c:	4630      	mov	r0, r6
 800aa6e:	e79e      	b.n	800a9ae <_strtol_l.constprop.0+0x16>
 800aa70:	b107      	cbz	r7, 800aa74 <_strtol_l.constprop.0+0xdc>
 800aa72:	4276      	negs	r6, r6
 800aa74:	2a00      	cmp	r2, #0
 800aa76:	d0f9      	beq.n	800aa6c <_strtol_l.constprop.0+0xd4>
 800aa78:	f1bc 0f00 	cmp.w	ip, #0
 800aa7c:	d000      	beq.n	800aa80 <_strtol_l.constprop.0+0xe8>
 800aa7e:	1e69      	subs	r1, r5, #1
 800aa80:	6011      	str	r1, [r2, #0]
 800aa82:	e7f3      	b.n	800aa6c <_strtol_l.constprop.0+0xd4>
 800aa84:	2430      	movs	r4, #48	; 0x30
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d1b1      	bne.n	800a9ee <_strtol_l.constprop.0+0x56>
 800aa8a:	2308      	movs	r3, #8
 800aa8c:	e7af      	b.n	800a9ee <_strtol_l.constprop.0+0x56>
 800aa8e:	2c30      	cmp	r4, #48	; 0x30
 800aa90:	d0a5      	beq.n	800a9de <_strtol_l.constprop.0+0x46>
 800aa92:	230a      	movs	r3, #10
 800aa94:	e7ab      	b.n	800a9ee <_strtol_l.constprop.0+0x56>
 800aa96:	bf00      	nop
 800aa98:	0800f661 	.word	0x0800f661

0800aa9c <_strtol_r>:
 800aa9c:	f7ff bf7c 	b.w	800a998 <_strtol_l.constprop.0>

0800aaa0 <_strtoul_l.constprop.0>:
 800aaa0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aaa4:	4f36      	ldr	r7, [pc, #216]	; (800ab80 <_strtoul_l.constprop.0+0xe0>)
 800aaa6:	4686      	mov	lr, r0
 800aaa8:	460d      	mov	r5, r1
 800aaaa:	4628      	mov	r0, r5
 800aaac:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aab0:	5de6      	ldrb	r6, [r4, r7]
 800aab2:	f016 0608 	ands.w	r6, r6, #8
 800aab6:	d1f8      	bne.n	800aaaa <_strtoul_l.constprop.0+0xa>
 800aab8:	2c2d      	cmp	r4, #45	; 0x2d
 800aaba:	d12f      	bne.n	800ab1c <_strtoul_l.constprop.0+0x7c>
 800aabc:	782c      	ldrb	r4, [r5, #0]
 800aabe:	2601      	movs	r6, #1
 800aac0:	1c85      	adds	r5, r0, #2
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d057      	beq.n	800ab76 <_strtoul_l.constprop.0+0xd6>
 800aac6:	2b10      	cmp	r3, #16
 800aac8:	d109      	bne.n	800aade <_strtoul_l.constprop.0+0x3e>
 800aaca:	2c30      	cmp	r4, #48	; 0x30
 800aacc:	d107      	bne.n	800aade <_strtoul_l.constprop.0+0x3e>
 800aace:	7828      	ldrb	r0, [r5, #0]
 800aad0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800aad4:	2858      	cmp	r0, #88	; 0x58
 800aad6:	d149      	bne.n	800ab6c <_strtoul_l.constprop.0+0xcc>
 800aad8:	786c      	ldrb	r4, [r5, #1]
 800aada:	2310      	movs	r3, #16
 800aadc:	3502      	adds	r5, #2
 800aade:	f04f 38ff 	mov.w	r8, #4294967295
 800aae2:	2700      	movs	r7, #0
 800aae4:	fbb8 f8f3 	udiv	r8, r8, r3
 800aae8:	fb03 f908 	mul.w	r9, r3, r8
 800aaec:	ea6f 0909 	mvn.w	r9, r9
 800aaf0:	4638      	mov	r0, r7
 800aaf2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800aaf6:	f1bc 0f09 	cmp.w	ip, #9
 800aafa:	d814      	bhi.n	800ab26 <_strtoul_l.constprop.0+0x86>
 800aafc:	4664      	mov	r4, ip
 800aafe:	42a3      	cmp	r3, r4
 800ab00:	dd22      	ble.n	800ab48 <_strtoul_l.constprop.0+0xa8>
 800ab02:	2f00      	cmp	r7, #0
 800ab04:	db1d      	blt.n	800ab42 <_strtoul_l.constprop.0+0xa2>
 800ab06:	4580      	cmp	r8, r0
 800ab08:	d31b      	bcc.n	800ab42 <_strtoul_l.constprop.0+0xa2>
 800ab0a:	d101      	bne.n	800ab10 <_strtoul_l.constprop.0+0x70>
 800ab0c:	45a1      	cmp	r9, r4
 800ab0e:	db18      	blt.n	800ab42 <_strtoul_l.constprop.0+0xa2>
 800ab10:	fb00 4003 	mla	r0, r0, r3, r4
 800ab14:	2701      	movs	r7, #1
 800ab16:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ab1a:	e7ea      	b.n	800aaf2 <_strtoul_l.constprop.0+0x52>
 800ab1c:	2c2b      	cmp	r4, #43	; 0x2b
 800ab1e:	bf04      	itt	eq
 800ab20:	782c      	ldrbeq	r4, [r5, #0]
 800ab22:	1c85      	addeq	r5, r0, #2
 800ab24:	e7cd      	b.n	800aac2 <_strtoul_l.constprop.0+0x22>
 800ab26:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800ab2a:	f1bc 0f19 	cmp.w	ip, #25
 800ab2e:	d801      	bhi.n	800ab34 <_strtoul_l.constprop.0+0x94>
 800ab30:	3c37      	subs	r4, #55	; 0x37
 800ab32:	e7e4      	b.n	800aafe <_strtoul_l.constprop.0+0x5e>
 800ab34:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800ab38:	f1bc 0f19 	cmp.w	ip, #25
 800ab3c:	d804      	bhi.n	800ab48 <_strtoul_l.constprop.0+0xa8>
 800ab3e:	3c57      	subs	r4, #87	; 0x57
 800ab40:	e7dd      	b.n	800aafe <_strtoul_l.constprop.0+0x5e>
 800ab42:	f04f 37ff 	mov.w	r7, #4294967295
 800ab46:	e7e6      	b.n	800ab16 <_strtoul_l.constprop.0+0x76>
 800ab48:	2f00      	cmp	r7, #0
 800ab4a:	da07      	bge.n	800ab5c <_strtoul_l.constprop.0+0xbc>
 800ab4c:	2322      	movs	r3, #34	; 0x22
 800ab4e:	f8ce 3000 	str.w	r3, [lr]
 800ab52:	f04f 30ff 	mov.w	r0, #4294967295
 800ab56:	b932      	cbnz	r2, 800ab66 <_strtoul_l.constprop.0+0xc6>
 800ab58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab5c:	b106      	cbz	r6, 800ab60 <_strtoul_l.constprop.0+0xc0>
 800ab5e:	4240      	negs	r0, r0
 800ab60:	2a00      	cmp	r2, #0
 800ab62:	d0f9      	beq.n	800ab58 <_strtoul_l.constprop.0+0xb8>
 800ab64:	b107      	cbz	r7, 800ab68 <_strtoul_l.constprop.0+0xc8>
 800ab66:	1e69      	subs	r1, r5, #1
 800ab68:	6011      	str	r1, [r2, #0]
 800ab6a:	e7f5      	b.n	800ab58 <_strtoul_l.constprop.0+0xb8>
 800ab6c:	2430      	movs	r4, #48	; 0x30
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	d1b5      	bne.n	800aade <_strtoul_l.constprop.0+0x3e>
 800ab72:	2308      	movs	r3, #8
 800ab74:	e7b3      	b.n	800aade <_strtoul_l.constprop.0+0x3e>
 800ab76:	2c30      	cmp	r4, #48	; 0x30
 800ab78:	d0a9      	beq.n	800aace <_strtoul_l.constprop.0+0x2e>
 800ab7a:	230a      	movs	r3, #10
 800ab7c:	e7af      	b.n	800aade <_strtoul_l.constprop.0+0x3e>
 800ab7e:	bf00      	nop
 800ab80:	0800f661 	.word	0x0800f661

0800ab84 <strtoul>:
 800ab84:	4613      	mov	r3, r2
 800ab86:	460a      	mov	r2, r1
 800ab88:	4601      	mov	r1, r0
 800ab8a:	4802      	ldr	r0, [pc, #8]	; (800ab94 <strtoul+0x10>)
 800ab8c:	6800      	ldr	r0, [r0, #0]
 800ab8e:	f7ff bf87 	b.w	800aaa0 <_strtoul_l.constprop.0>
 800ab92:	bf00      	nop
 800ab94:	20000074 	.word	0x20000074

0800ab98 <_vsiprintf_r>:
 800ab98:	b500      	push	{lr}
 800ab9a:	b09b      	sub	sp, #108	; 0x6c
 800ab9c:	9100      	str	r1, [sp, #0]
 800ab9e:	9104      	str	r1, [sp, #16]
 800aba0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800aba4:	9105      	str	r1, [sp, #20]
 800aba6:	9102      	str	r1, [sp, #8]
 800aba8:	4905      	ldr	r1, [pc, #20]	; (800abc0 <_vsiprintf_r+0x28>)
 800abaa:	9103      	str	r1, [sp, #12]
 800abac:	4669      	mov	r1, sp
 800abae:	f002 f861 	bl	800cc74 <_svfiprintf_r>
 800abb2:	9b00      	ldr	r3, [sp, #0]
 800abb4:	2200      	movs	r2, #0
 800abb6:	701a      	strb	r2, [r3, #0]
 800abb8:	b01b      	add	sp, #108	; 0x6c
 800abba:	f85d fb04 	ldr.w	pc, [sp], #4
 800abbe:	bf00      	nop
 800abc0:	ffff0208 	.word	0xffff0208

0800abc4 <vsiprintf>:
 800abc4:	4613      	mov	r3, r2
 800abc6:	460a      	mov	r2, r1
 800abc8:	4601      	mov	r1, r0
 800abca:	4802      	ldr	r0, [pc, #8]	; (800abd4 <vsiprintf+0x10>)
 800abcc:	6800      	ldr	r0, [r0, #0]
 800abce:	f7ff bfe3 	b.w	800ab98 <_vsiprintf_r>
 800abd2:	bf00      	nop
 800abd4:	20000074 	.word	0x20000074

0800abd8 <__assert_func>:
 800abd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800abda:	4614      	mov	r4, r2
 800abdc:	461a      	mov	r2, r3
 800abde:	4b09      	ldr	r3, [pc, #36]	; (800ac04 <__assert_func+0x2c>)
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	4605      	mov	r5, r0
 800abe4:	68d8      	ldr	r0, [r3, #12]
 800abe6:	b14c      	cbz	r4, 800abfc <__assert_func+0x24>
 800abe8:	4b07      	ldr	r3, [pc, #28]	; (800ac08 <__assert_func+0x30>)
 800abea:	9100      	str	r1, [sp, #0]
 800abec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800abf0:	4906      	ldr	r1, [pc, #24]	; (800ac0c <__assert_func+0x34>)
 800abf2:	462b      	mov	r3, r5
 800abf4:	f000 fe8a 	bl	800b90c <fiprintf>
 800abf8:	f002 fb90 	bl	800d31c <abort>
 800abfc:	4b04      	ldr	r3, [pc, #16]	; (800ac10 <__assert_func+0x38>)
 800abfe:	461c      	mov	r4, r3
 800ac00:	e7f3      	b.n	800abea <__assert_func+0x12>
 800ac02:	bf00      	nop
 800ac04:	20000074 	.word	0x20000074
 800ac08:	0800f624 	.word	0x0800f624
 800ac0c:	0800f631 	.word	0x0800f631
 800ac10:	0800f65f 	.word	0x0800f65f

0800ac14 <quorem>:
 800ac14:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac18:	6903      	ldr	r3, [r0, #16]
 800ac1a:	690c      	ldr	r4, [r1, #16]
 800ac1c:	42a3      	cmp	r3, r4
 800ac1e:	4607      	mov	r7, r0
 800ac20:	f2c0 8081 	blt.w	800ad26 <quorem+0x112>
 800ac24:	3c01      	subs	r4, #1
 800ac26:	f101 0814 	add.w	r8, r1, #20
 800ac2a:	f100 0514 	add.w	r5, r0, #20
 800ac2e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac32:	9301      	str	r3, [sp, #4]
 800ac34:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ac38:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac3c:	3301      	adds	r3, #1
 800ac3e:	429a      	cmp	r2, r3
 800ac40:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ac44:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ac48:	fbb2 f6f3 	udiv	r6, r2, r3
 800ac4c:	d331      	bcc.n	800acb2 <quorem+0x9e>
 800ac4e:	f04f 0e00 	mov.w	lr, #0
 800ac52:	4640      	mov	r0, r8
 800ac54:	46ac      	mov	ip, r5
 800ac56:	46f2      	mov	sl, lr
 800ac58:	f850 2b04 	ldr.w	r2, [r0], #4
 800ac5c:	b293      	uxth	r3, r2
 800ac5e:	fb06 e303 	mla	r3, r6, r3, lr
 800ac62:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	ebaa 0303 	sub.w	r3, sl, r3
 800ac6c:	f8dc a000 	ldr.w	sl, [ip]
 800ac70:	0c12      	lsrs	r2, r2, #16
 800ac72:	fa13 f38a 	uxtah	r3, r3, sl
 800ac76:	fb06 e202 	mla	r2, r6, r2, lr
 800ac7a:	9300      	str	r3, [sp, #0]
 800ac7c:	9b00      	ldr	r3, [sp, #0]
 800ac7e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac82:	b292      	uxth	r2, r2
 800ac84:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac88:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac8c:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac90:	4581      	cmp	r9, r0
 800ac92:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac96:	f84c 3b04 	str.w	r3, [ip], #4
 800ac9a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac9e:	d2db      	bcs.n	800ac58 <quorem+0x44>
 800aca0:	f855 300b 	ldr.w	r3, [r5, fp]
 800aca4:	b92b      	cbnz	r3, 800acb2 <quorem+0x9e>
 800aca6:	9b01      	ldr	r3, [sp, #4]
 800aca8:	3b04      	subs	r3, #4
 800acaa:	429d      	cmp	r5, r3
 800acac:	461a      	mov	r2, r3
 800acae:	d32e      	bcc.n	800ad0e <quorem+0xfa>
 800acb0:	613c      	str	r4, [r7, #16]
 800acb2:	4638      	mov	r0, r7
 800acb4:	f001 fc96 	bl	800c5e4 <__mcmp>
 800acb8:	2800      	cmp	r0, #0
 800acba:	db24      	blt.n	800ad06 <quorem+0xf2>
 800acbc:	3601      	adds	r6, #1
 800acbe:	4628      	mov	r0, r5
 800acc0:	f04f 0c00 	mov.w	ip, #0
 800acc4:	f858 2b04 	ldr.w	r2, [r8], #4
 800acc8:	f8d0 e000 	ldr.w	lr, [r0]
 800accc:	b293      	uxth	r3, r2
 800acce:	ebac 0303 	sub.w	r3, ip, r3
 800acd2:	0c12      	lsrs	r2, r2, #16
 800acd4:	fa13 f38e 	uxtah	r3, r3, lr
 800acd8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800acdc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ace0:	b29b      	uxth	r3, r3
 800ace2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ace6:	45c1      	cmp	r9, r8
 800ace8:	f840 3b04 	str.w	r3, [r0], #4
 800acec:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800acf0:	d2e8      	bcs.n	800acc4 <quorem+0xb0>
 800acf2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800acf6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800acfa:	b922      	cbnz	r2, 800ad06 <quorem+0xf2>
 800acfc:	3b04      	subs	r3, #4
 800acfe:	429d      	cmp	r5, r3
 800ad00:	461a      	mov	r2, r3
 800ad02:	d30a      	bcc.n	800ad1a <quorem+0x106>
 800ad04:	613c      	str	r4, [r7, #16]
 800ad06:	4630      	mov	r0, r6
 800ad08:	b003      	add	sp, #12
 800ad0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0e:	6812      	ldr	r2, [r2, #0]
 800ad10:	3b04      	subs	r3, #4
 800ad12:	2a00      	cmp	r2, #0
 800ad14:	d1cc      	bne.n	800acb0 <quorem+0x9c>
 800ad16:	3c01      	subs	r4, #1
 800ad18:	e7c7      	b.n	800acaa <quorem+0x96>
 800ad1a:	6812      	ldr	r2, [r2, #0]
 800ad1c:	3b04      	subs	r3, #4
 800ad1e:	2a00      	cmp	r2, #0
 800ad20:	d1f0      	bne.n	800ad04 <quorem+0xf0>
 800ad22:	3c01      	subs	r4, #1
 800ad24:	e7eb      	b.n	800acfe <quorem+0xea>
 800ad26:	2000      	movs	r0, #0
 800ad28:	e7ee      	b.n	800ad08 <quorem+0xf4>
 800ad2a:	0000      	movs	r0, r0
 800ad2c:	0000      	movs	r0, r0
	...

0800ad30 <_dtoa_r>:
 800ad30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad34:	ed2d 8b04 	vpush	{d8-d9}
 800ad38:	ec57 6b10 	vmov	r6, r7, d0
 800ad3c:	b093      	sub	sp, #76	; 0x4c
 800ad3e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ad40:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ad44:	9106      	str	r1, [sp, #24]
 800ad46:	ee10 aa10 	vmov	sl, s0
 800ad4a:	4604      	mov	r4, r0
 800ad4c:	9209      	str	r2, [sp, #36]	; 0x24
 800ad4e:	930c      	str	r3, [sp, #48]	; 0x30
 800ad50:	46bb      	mov	fp, r7
 800ad52:	b975      	cbnz	r5, 800ad72 <_dtoa_r+0x42>
 800ad54:	2010      	movs	r0, #16
 800ad56:	f001 f95f 	bl	800c018 <malloc>
 800ad5a:	4602      	mov	r2, r0
 800ad5c:	6260      	str	r0, [r4, #36]	; 0x24
 800ad5e:	b920      	cbnz	r0, 800ad6a <_dtoa_r+0x3a>
 800ad60:	4ba7      	ldr	r3, [pc, #668]	; (800b000 <_dtoa_r+0x2d0>)
 800ad62:	21ea      	movs	r1, #234	; 0xea
 800ad64:	48a7      	ldr	r0, [pc, #668]	; (800b004 <_dtoa_r+0x2d4>)
 800ad66:	f7ff ff37 	bl	800abd8 <__assert_func>
 800ad6a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800ad6e:	6005      	str	r5, [r0, #0]
 800ad70:	60c5      	str	r5, [r0, #12]
 800ad72:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad74:	6819      	ldr	r1, [r3, #0]
 800ad76:	b151      	cbz	r1, 800ad8e <_dtoa_r+0x5e>
 800ad78:	685a      	ldr	r2, [r3, #4]
 800ad7a:	604a      	str	r2, [r1, #4]
 800ad7c:	2301      	movs	r3, #1
 800ad7e:	4093      	lsls	r3, r2
 800ad80:	608b      	str	r3, [r1, #8]
 800ad82:	4620      	mov	r0, r4
 800ad84:	f001 f9a2 	bl	800c0cc <_Bfree>
 800ad88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ad8a:	2200      	movs	r2, #0
 800ad8c:	601a      	str	r2, [r3, #0]
 800ad8e:	1e3b      	subs	r3, r7, #0
 800ad90:	bfaa      	itet	ge
 800ad92:	2300      	movge	r3, #0
 800ad94:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ad98:	f8c8 3000 	strge.w	r3, [r8]
 800ad9c:	4b9a      	ldr	r3, [pc, #616]	; (800b008 <_dtoa_r+0x2d8>)
 800ad9e:	bfbc      	itt	lt
 800ada0:	2201      	movlt	r2, #1
 800ada2:	f8c8 2000 	strlt.w	r2, [r8]
 800ada6:	ea33 030b 	bics.w	r3, r3, fp
 800adaa:	d11b      	bne.n	800ade4 <_dtoa_r+0xb4>
 800adac:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adae:	f242 730f 	movw	r3, #9999	; 0x270f
 800adb2:	6013      	str	r3, [r2, #0]
 800adb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800adb8:	4333      	orrs	r3, r6
 800adba:	f000 8592 	beq.w	800b8e2 <_dtoa_r+0xbb2>
 800adbe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800adc0:	b963      	cbnz	r3, 800addc <_dtoa_r+0xac>
 800adc2:	4b92      	ldr	r3, [pc, #584]	; (800b00c <_dtoa_r+0x2dc>)
 800adc4:	e022      	b.n	800ae0c <_dtoa_r+0xdc>
 800adc6:	4b92      	ldr	r3, [pc, #584]	; (800b010 <_dtoa_r+0x2e0>)
 800adc8:	9301      	str	r3, [sp, #4]
 800adca:	3308      	adds	r3, #8
 800adcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800adce:	6013      	str	r3, [r2, #0]
 800add0:	9801      	ldr	r0, [sp, #4]
 800add2:	b013      	add	sp, #76	; 0x4c
 800add4:	ecbd 8b04 	vpop	{d8-d9}
 800add8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800addc:	4b8b      	ldr	r3, [pc, #556]	; (800b00c <_dtoa_r+0x2dc>)
 800adde:	9301      	str	r3, [sp, #4]
 800ade0:	3303      	adds	r3, #3
 800ade2:	e7f3      	b.n	800adcc <_dtoa_r+0x9c>
 800ade4:	2200      	movs	r2, #0
 800ade6:	2300      	movs	r3, #0
 800ade8:	4650      	mov	r0, sl
 800adea:	4659      	mov	r1, fp
 800adec:	f7f5 fe7c 	bl	8000ae8 <__aeabi_dcmpeq>
 800adf0:	ec4b ab19 	vmov	d9, sl, fp
 800adf4:	4680      	mov	r8, r0
 800adf6:	b158      	cbz	r0, 800ae10 <_dtoa_r+0xe0>
 800adf8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800adfa:	2301      	movs	r3, #1
 800adfc:	6013      	str	r3, [r2, #0]
 800adfe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	f000 856b 	beq.w	800b8dc <_dtoa_r+0xbac>
 800ae06:	4883      	ldr	r0, [pc, #524]	; (800b014 <_dtoa_r+0x2e4>)
 800ae08:	6018      	str	r0, [r3, #0]
 800ae0a:	1e43      	subs	r3, r0, #1
 800ae0c:	9301      	str	r3, [sp, #4]
 800ae0e:	e7df      	b.n	800add0 <_dtoa_r+0xa0>
 800ae10:	ec4b ab10 	vmov	d0, sl, fp
 800ae14:	aa10      	add	r2, sp, #64	; 0x40
 800ae16:	a911      	add	r1, sp, #68	; 0x44
 800ae18:	4620      	mov	r0, r4
 800ae1a:	f001 fd05 	bl	800c828 <__d2b>
 800ae1e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ae22:	ee08 0a10 	vmov	s16, r0
 800ae26:	2d00      	cmp	r5, #0
 800ae28:	f000 8084 	beq.w	800af34 <_dtoa_r+0x204>
 800ae2c:	ee19 3a90 	vmov	r3, s19
 800ae30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ae34:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ae38:	4656      	mov	r6, sl
 800ae3a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ae3e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ae42:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ae46:	4b74      	ldr	r3, [pc, #464]	; (800b018 <_dtoa_r+0x2e8>)
 800ae48:	2200      	movs	r2, #0
 800ae4a:	4630      	mov	r0, r6
 800ae4c:	4639      	mov	r1, r7
 800ae4e:	f7f5 fa2b 	bl	80002a8 <__aeabi_dsub>
 800ae52:	a365      	add	r3, pc, #404	; (adr r3, 800afe8 <_dtoa_r+0x2b8>)
 800ae54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae58:	f7f5 fbde 	bl	8000618 <__aeabi_dmul>
 800ae5c:	a364      	add	r3, pc, #400	; (adr r3, 800aff0 <_dtoa_r+0x2c0>)
 800ae5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae62:	f7f5 fa23 	bl	80002ac <__adddf3>
 800ae66:	4606      	mov	r6, r0
 800ae68:	4628      	mov	r0, r5
 800ae6a:	460f      	mov	r7, r1
 800ae6c:	f7f5 fb6a 	bl	8000544 <__aeabi_i2d>
 800ae70:	a361      	add	r3, pc, #388	; (adr r3, 800aff8 <_dtoa_r+0x2c8>)
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f7f5 fbcf 	bl	8000618 <__aeabi_dmul>
 800ae7a:	4602      	mov	r2, r0
 800ae7c:	460b      	mov	r3, r1
 800ae7e:	4630      	mov	r0, r6
 800ae80:	4639      	mov	r1, r7
 800ae82:	f7f5 fa13 	bl	80002ac <__adddf3>
 800ae86:	4606      	mov	r6, r0
 800ae88:	460f      	mov	r7, r1
 800ae8a:	f7f5 fe75 	bl	8000b78 <__aeabi_d2iz>
 800ae8e:	2200      	movs	r2, #0
 800ae90:	9000      	str	r0, [sp, #0]
 800ae92:	2300      	movs	r3, #0
 800ae94:	4630      	mov	r0, r6
 800ae96:	4639      	mov	r1, r7
 800ae98:	f7f5 fe30 	bl	8000afc <__aeabi_dcmplt>
 800ae9c:	b150      	cbz	r0, 800aeb4 <_dtoa_r+0x184>
 800ae9e:	9800      	ldr	r0, [sp, #0]
 800aea0:	f7f5 fb50 	bl	8000544 <__aeabi_i2d>
 800aea4:	4632      	mov	r2, r6
 800aea6:	463b      	mov	r3, r7
 800aea8:	f7f5 fe1e 	bl	8000ae8 <__aeabi_dcmpeq>
 800aeac:	b910      	cbnz	r0, 800aeb4 <_dtoa_r+0x184>
 800aeae:	9b00      	ldr	r3, [sp, #0]
 800aeb0:	3b01      	subs	r3, #1
 800aeb2:	9300      	str	r3, [sp, #0]
 800aeb4:	9b00      	ldr	r3, [sp, #0]
 800aeb6:	2b16      	cmp	r3, #22
 800aeb8:	d85a      	bhi.n	800af70 <_dtoa_r+0x240>
 800aeba:	9a00      	ldr	r2, [sp, #0]
 800aebc:	4b57      	ldr	r3, [pc, #348]	; (800b01c <_dtoa_r+0x2ec>)
 800aebe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec6:	ec51 0b19 	vmov	r0, r1, d9
 800aeca:	f7f5 fe17 	bl	8000afc <__aeabi_dcmplt>
 800aece:	2800      	cmp	r0, #0
 800aed0:	d050      	beq.n	800af74 <_dtoa_r+0x244>
 800aed2:	9b00      	ldr	r3, [sp, #0]
 800aed4:	3b01      	subs	r3, #1
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	2300      	movs	r3, #0
 800aeda:	930b      	str	r3, [sp, #44]	; 0x2c
 800aedc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aede:	1b5d      	subs	r5, r3, r5
 800aee0:	1e6b      	subs	r3, r5, #1
 800aee2:	9305      	str	r3, [sp, #20]
 800aee4:	bf45      	ittet	mi
 800aee6:	f1c5 0301 	rsbmi	r3, r5, #1
 800aeea:	9304      	strmi	r3, [sp, #16]
 800aeec:	2300      	movpl	r3, #0
 800aeee:	2300      	movmi	r3, #0
 800aef0:	bf4c      	ite	mi
 800aef2:	9305      	strmi	r3, [sp, #20]
 800aef4:	9304      	strpl	r3, [sp, #16]
 800aef6:	9b00      	ldr	r3, [sp, #0]
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	db3d      	blt.n	800af78 <_dtoa_r+0x248>
 800aefc:	9b05      	ldr	r3, [sp, #20]
 800aefe:	9a00      	ldr	r2, [sp, #0]
 800af00:	920a      	str	r2, [sp, #40]	; 0x28
 800af02:	4413      	add	r3, r2
 800af04:	9305      	str	r3, [sp, #20]
 800af06:	2300      	movs	r3, #0
 800af08:	9307      	str	r3, [sp, #28]
 800af0a:	9b06      	ldr	r3, [sp, #24]
 800af0c:	2b09      	cmp	r3, #9
 800af0e:	f200 8089 	bhi.w	800b024 <_dtoa_r+0x2f4>
 800af12:	2b05      	cmp	r3, #5
 800af14:	bfc4      	itt	gt
 800af16:	3b04      	subgt	r3, #4
 800af18:	9306      	strgt	r3, [sp, #24]
 800af1a:	9b06      	ldr	r3, [sp, #24]
 800af1c:	f1a3 0302 	sub.w	r3, r3, #2
 800af20:	bfcc      	ite	gt
 800af22:	2500      	movgt	r5, #0
 800af24:	2501      	movle	r5, #1
 800af26:	2b03      	cmp	r3, #3
 800af28:	f200 8087 	bhi.w	800b03a <_dtoa_r+0x30a>
 800af2c:	e8df f003 	tbb	[pc, r3]
 800af30:	59383a2d 	.word	0x59383a2d
 800af34:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800af38:	441d      	add	r5, r3
 800af3a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800af3e:	2b20      	cmp	r3, #32
 800af40:	bfc1      	itttt	gt
 800af42:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800af46:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800af4a:	fa0b f303 	lslgt.w	r3, fp, r3
 800af4e:	fa26 f000 	lsrgt.w	r0, r6, r0
 800af52:	bfda      	itte	le
 800af54:	f1c3 0320 	rsble	r3, r3, #32
 800af58:	fa06 f003 	lslle.w	r0, r6, r3
 800af5c:	4318      	orrgt	r0, r3
 800af5e:	f7f5 fae1 	bl	8000524 <__aeabi_ui2d>
 800af62:	2301      	movs	r3, #1
 800af64:	4606      	mov	r6, r0
 800af66:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800af6a:	3d01      	subs	r5, #1
 800af6c:	930e      	str	r3, [sp, #56]	; 0x38
 800af6e:	e76a      	b.n	800ae46 <_dtoa_r+0x116>
 800af70:	2301      	movs	r3, #1
 800af72:	e7b2      	b.n	800aeda <_dtoa_r+0x1aa>
 800af74:	900b      	str	r0, [sp, #44]	; 0x2c
 800af76:	e7b1      	b.n	800aedc <_dtoa_r+0x1ac>
 800af78:	9b04      	ldr	r3, [sp, #16]
 800af7a:	9a00      	ldr	r2, [sp, #0]
 800af7c:	1a9b      	subs	r3, r3, r2
 800af7e:	9304      	str	r3, [sp, #16]
 800af80:	4253      	negs	r3, r2
 800af82:	9307      	str	r3, [sp, #28]
 800af84:	2300      	movs	r3, #0
 800af86:	930a      	str	r3, [sp, #40]	; 0x28
 800af88:	e7bf      	b.n	800af0a <_dtoa_r+0x1da>
 800af8a:	2300      	movs	r3, #0
 800af8c:	9308      	str	r3, [sp, #32]
 800af8e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af90:	2b00      	cmp	r3, #0
 800af92:	dc55      	bgt.n	800b040 <_dtoa_r+0x310>
 800af94:	2301      	movs	r3, #1
 800af96:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800af9a:	461a      	mov	r2, r3
 800af9c:	9209      	str	r2, [sp, #36]	; 0x24
 800af9e:	e00c      	b.n	800afba <_dtoa_r+0x28a>
 800afa0:	2301      	movs	r3, #1
 800afa2:	e7f3      	b.n	800af8c <_dtoa_r+0x25c>
 800afa4:	2300      	movs	r3, #0
 800afa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800afa8:	9308      	str	r3, [sp, #32]
 800afaa:	9b00      	ldr	r3, [sp, #0]
 800afac:	4413      	add	r3, r2
 800afae:	9302      	str	r3, [sp, #8]
 800afb0:	3301      	adds	r3, #1
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	9303      	str	r3, [sp, #12]
 800afb6:	bfb8      	it	lt
 800afb8:	2301      	movlt	r3, #1
 800afba:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800afbc:	2200      	movs	r2, #0
 800afbe:	6042      	str	r2, [r0, #4]
 800afc0:	2204      	movs	r2, #4
 800afc2:	f102 0614 	add.w	r6, r2, #20
 800afc6:	429e      	cmp	r6, r3
 800afc8:	6841      	ldr	r1, [r0, #4]
 800afca:	d93d      	bls.n	800b048 <_dtoa_r+0x318>
 800afcc:	4620      	mov	r0, r4
 800afce:	f001 f83d 	bl	800c04c <_Balloc>
 800afd2:	9001      	str	r0, [sp, #4]
 800afd4:	2800      	cmp	r0, #0
 800afd6:	d13b      	bne.n	800b050 <_dtoa_r+0x320>
 800afd8:	4b11      	ldr	r3, [pc, #68]	; (800b020 <_dtoa_r+0x2f0>)
 800afda:	4602      	mov	r2, r0
 800afdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800afe0:	e6c0      	b.n	800ad64 <_dtoa_r+0x34>
 800afe2:	2301      	movs	r3, #1
 800afe4:	e7df      	b.n	800afa6 <_dtoa_r+0x276>
 800afe6:	bf00      	nop
 800afe8:	636f4361 	.word	0x636f4361
 800afec:	3fd287a7 	.word	0x3fd287a7
 800aff0:	8b60c8b3 	.word	0x8b60c8b3
 800aff4:	3fc68a28 	.word	0x3fc68a28
 800aff8:	509f79fb 	.word	0x509f79fb
 800affc:	3fd34413 	.word	0x3fd34413
 800b000:	0800f5b0 	.word	0x0800f5b0
 800b004:	0800f76e 	.word	0x0800f76e
 800b008:	7ff00000 	.word	0x7ff00000
 800b00c:	0800f76a 	.word	0x0800f76a
 800b010:	0800f761 	.word	0x0800f761
 800b014:	0800f531 	.word	0x0800f531
 800b018:	3ff80000 	.word	0x3ff80000
 800b01c:	0800f8d8 	.word	0x0800f8d8
 800b020:	0800f7c9 	.word	0x0800f7c9
 800b024:	2501      	movs	r5, #1
 800b026:	2300      	movs	r3, #0
 800b028:	9306      	str	r3, [sp, #24]
 800b02a:	9508      	str	r5, [sp, #32]
 800b02c:	f04f 33ff 	mov.w	r3, #4294967295
 800b030:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b034:	2200      	movs	r2, #0
 800b036:	2312      	movs	r3, #18
 800b038:	e7b0      	b.n	800af9c <_dtoa_r+0x26c>
 800b03a:	2301      	movs	r3, #1
 800b03c:	9308      	str	r3, [sp, #32]
 800b03e:	e7f5      	b.n	800b02c <_dtoa_r+0x2fc>
 800b040:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b042:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b046:	e7b8      	b.n	800afba <_dtoa_r+0x28a>
 800b048:	3101      	adds	r1, #1
 800b04a:	6041      	str	r1, [r0, #4]
 800b04c:	0052      	lsls	r2, r2, #1
 800b04e:	e7b8      	b.n	800afc2 <_dtoa_r+0x292>
 800b050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b052:	9a01      	ldr	r2, [sp, #4]
 800b054:	601a      	str	r2, [r3, #0]
 800b056:	9b03      	ldr	r3, [sp, #12]
 800b058:	2b0e      	cmp	r3, #14
 800b05a:	f200 809d 	bhi.w	800b198 <_dtoa_r+0x468>
 800b05e:	2d00      	cmp	r5, #0
 800b060:	f000 809a 	beq.w	800b198 <_dtoa_r+0x468>
 800b064:	9b00      	ldr	r3, [sp, #0]
 800b066:	2b00      	cmp	r3, #0
 800b068:	dd32      	ble.n	800b0d0 <_dtoa_r+0x3a0>
 800b06a:	4ab7      	ldr	r2, [pc, #732]	; (800b348 <_dtoa_r+0x618>)
 800b06c:	f003 030f 	and.w	r3, r3, #15
 800b070:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b074:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b078:	9b00      	ldr	r3, [sp, #0]
 800b07a:	05d8      	lsls	r0, r3, #23
 800b07c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b080:	d516      	bpl.n	800b0b0 <_dtoa_r+0x380>
 800b082:	4bb2      	ldr	r3, [pc, #712]	; (800b34c <_dtoa_r+0x61c>)
 800b084:	ec51 0b19 	vmov	r0, r1, d9
 800b088:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b08c:	f7f5 fbee 	bl	800086c <__aeabi_ddiv>
 800b090:	f007 070f 	and.w	r7, r7, #15
 800b094:	4682      	mov	sl, r0
 800b096:	468b      	mov	fp, r1
 800b098:	2503      	movs	r5, #3
 800b09a:	4eac      	ldr	r6, [pc, #688]	; (800b34c <_dtoa_r+0x61c>)
 800b09c:	b957      	cbnz	r7, 800b0b4 <_dtoa_r+0x384>
 800b09e:	4642      	mov	r2, r8
 800b0a0:	464b      	mov	r3, r9
 800b0a2:	4650      	mov	r0, sl
 800b0a4:	4659      	mov	r1, fp
 800b0a6:	f7f5 fbe1 	bl	800086c <__aeabi_ddiv>
 800b0aa:	4682      	mov	sl, r0
 800b0ac:	468b      	mov	fp, r1
 800b0ae:	e028      	b.n	800b102 <_dtoa_r+0x3d2>
 800b0b0:	2502      	movs	r5, #2
 800b0b2:	e7f2      	b.n	800b09a <_dtoa_r+0x36a>
 800b0b4:	07f9      	lsls	r1, r7, #31
 800b0b6:	d508      	bpl.n	800b0ca <_dtoa_r+0x39a>
 800b0b8:	4640      	mov	r0, r8
 800b0ba:	4649      	mov	r1, r9
 800b0bc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0c0:	f7f5 faaa 	bl	8000618 <__aeabi_dmul>
 800b0c4:	3501      	adds	r5, #1
 800b0c6:	4680      	mov	r8, r0
 800b0c8:	4689      	mov	r9, r1
 800b0ca:	107f      	asrs	r7, r7, #1
 800b0cc:	3608      	adds	r6, #8
 800b0ce:	e7e5      	b.n	800b09c <_dtoa_r+0x36c>
 800b0d0:	f000 809b 	beq.w	800b20a <_dtoa_r+0x4da>
 800b0d4:	9b00      	ldr	r3, [sp, #0]
 800b0d6:	4f9d      	ldr	r7, [pc, #628]	; (800b34c <_dtoa_r+0x61c>)
 800b0d8:	425e      	negs	r6, r3
 800b0da:	4b9b      	ldr	r3, [pc, #620]	; (800b348 <_dtoa_r+0x618>)
 800b0dc:	f006 020f 	and.w	r2, r6, #15
 800b0e0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b0e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0e8:	ec51 0b19 	vmov	r0, r1, d9
 800b0ec:	f7f5 fa94 	bl	8000618 <__aeabi_dmul>
 800b0f0:	1136      	asrs	r6, r6, #4
 800b0f2:	4682      	mov	sl, r0
 800b0f4:	468b      	mov	fp, r1
 800b0f6:	2300      	movs	r3, #0
 800b0f8:	2502      	movs	r5, #2
 800b0fa:	2e00      	cmp	r6, #0
 800b0fc:	d17a      	bne.n	800b1f4 <_dtoa_r+0x4c4>
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d1d3      	bne.n	800b0aa <_dtoa_r+0x37a>
 800b102:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b104:	2b00      	cmp	r3, #0
 800b106:	f000 8082 	beq.w	800b20e <_dtoa_r+0x4de>
 800b10a:	4b91      	ldr	r3, [pc, #580]	; (800b350 <_dtoa_r+0x620>)
 800b10c:	2200      	movs	r2, #0
 800b10e:	4650      	mov	r0, sl
 800b110:	4659      	mov	r1, fp
 800b112:	f7f5 fcf3 	bl	8000afc <__aeabi_dcmplt>
 800b116:	2800      	cmp	r0, #0
 800b118:	d079      	beq.n	800b20e <_dtoa_r+0x4de>
 800b11a:	9b03      	ldr	r3, [sp, #12]
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d076      	beq.n	800b20e <_dtoa_r+0x4de>
 800b120:	9b02      	ldr	r3, [sp, #8]
 800b122:	2b00      	cmp	r3, #0
 800b124:	dd36      	ble.n	800b194 <_dtoa_r+0x464>
 800b126:	9b00      	ldr	r3, [sp, #0]
 800b128:	4650      	mov	r0, sl
 800b12a:	4659      	mov	r1, fp
 800b12c:	1e5f      	subs	r7, r3, #1
 800b12e:	2200      	movs	r2, #0
 800b130:	4b88      	ldr	r3, [pc, #544]	; (800b354 <_dtoa_r+0x624>)
 800b132:	f7f5 fa71 	bl	8000618 <__aeabi_dmul>
 800b136:	9e02      	ldr	r6, [sp, #8]
 800b138:	4682      	mov	sl, r0
 800b13a:	468b      	mov	fp, r1
 800b13c:	3501      	adds	r5, #1
 800b13e:	4628      	mov	r0, r5
 800b140:	f7f5 fa00 	bl	8000544 <__aeabi_i2d>
 800b144:	4652      	mov	r2, sl
 800b146:	465b      	mov	r3, fp
 800b148:	f7f5 fa66 	bl	8000618 <__aeabi_dmul>
 800b14c:	4b82      	ldr	r3, [pc, #520]	; (800b358 <_dtoa_r+0x628>)
 800b14e:	2200      	movs	r2, #0
 800b150:	f7f5 f8ac 	bl	80002ac <__adddf3>
 800b154:	46d0      	mov	r8, sl
 800b156:	46d9      	mov	r9, fp
 800b158:	4682      	mov	sl, r0
 800b15a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b15e:	2e00      	cmp	r6, #0
 800b160:	d158      	bne.n	800b214 <_dtoa_r+0x4e4>
 800b162:	4b7e      	ldr	r3, [pc, #504]	; (800b35c <_dtoa_r+0x62c>)
 800b164:	2200      	movs	r2, #0
 800b166:	4640      	mov	r0, r8
 800b168:	4649      	mov	r1, r9
 800b16a:	f7f5 f89d 	bl	80002a8 <__aeabi_dsub>
 800b16e:	4652      	mov	r2, sl
 800b170:	465b      	mov	r3, fp
 800b172:	4680      	mov	r8, r0
 800b174:	4689      	mov	r9, r1
 800b176:	f7f5 fcdf 	bl	8000b38 <__aeabi_dcmpgt>
 800b17a:	2800      	cmp	r0, #0
 800b17c:	f040 8295 	bne.w	800b6aa <_dtoa_r+0x97a>
 800b180:	4652      	mov	r2, sl
 800b182:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b186:	4640      	mov	r0, r8
 800b188:	4649      	mov	r1, r9
 800b18a:	f7f5 fcb7 	bl	8000afc <__aeabi_dcmplt>
 800b18e:	2800      	cmp	r0, #0
 800b190:	f040 8289 	bne.w	800b6a6 <_dtoa_r+0x976>
 800b194:	ec5b ab19 	vmov	sl, fp, d9
 800b198:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	f2c0 8148 	blt.w	800b430 <_dtoa_r+0x700>
 800b1a0:	9a00      	ldr	r2, [sp, #0]
 800b1a2:	2a0e      	cmp	r2, #14
 800b1a4:	f300 8144 	bgt.w	800b430 <_dtoa_r+0x700>
 800b1a8:	4b67      	ldr	r3, [pc, #412]	; (800b348 <_dtoa_r+0x618>)
 800b1aa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1ae:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	f280 80d5 	bge.w	800b364 <_dtoa_r+0x634>
 800b1ba:	9b03      	ldr	r3, [sp, #12]
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	f300 80d1 	bgt.w	800b364 <_dtoa_r+0x634>
 800b1c2:	f040 826f 	bne.w	800b6a4 <_dtoa_r+0x974>
 800b1c6:	4b65      	ldr	r3, [pc, #404]	; (800b35c <_dtoa_r+0x62c>)
 800b1c8:	2200      	movs	r2, #0
 800b1ca:	4640      	mov	r0, r8
 800b1cc:	4649      	mov	r1, r9
 800b1ce:	f7f5 fa23 	bl	8000618 <__aeabi_dmul>
 800b1d2:	4652      	mov	r2, sl
 800b1d4:	465b      	mov	r3, fp
 800b1d6:	f7f5 fca5 	bl	8000b24 <__aeabi_dcmpge>
 800b1da:	9e03      	ldr	r6, [sp, #12]
 800b1dc:	4637      	mov	r7, r6
 800b1de:	2800      	cmp	r0, #0
 800b1e0:	f040 8245 	bne.w	800b66e <_dtoa_r+0x93e>
 800b1e4:	9d01      	ldr	r5, [sp, #4]
 800b1e6:	2331      	movs	r3, #49	; 0x31
 800b1e8:	f805 3b01 	strb.w	r3, [r5], #1
 800b1ec:	9b00      	ldr	r3, [sp, #0]
 800b1ee:	3301      	adds	r3, #1
 800b1f0:	9300      	str	r3, [sp, #0]
 800b1f2:	e240      	b.n	800b676 <_dtoa_r+0x946>
 800b1f4:	07f2      	lsls	r2, r6, #31
 800b1f6:	d505      	bpl.n	800b204 <_dtoa_r+0x4d4>
 800b1f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1fc:	f7f5 fa0c 	bl	8000618 <__aeabi_dmul>
 800b200:	3501      	adds	r5, #1
 800b202:	2301      	movs	r3, #1
 800b204:	1076      	asrs	r6, r6, #1
 800b206:	3708      	adds	r7, #8
 800b208:	e777      	b.n	800b0fa <_dtoa_r+0x3ca>
 800b20a:	2502      	movs	r5, #2
 800b20c:	e779      	b.n	800b102 <_dtoa_r+0x3d2>
 800b20e:	9f00      	ldr	r7, [sp, #0]
 800b210:	9e03      	ldr	r6, [sp, #12]
 800b212:	e794      	b.n	800b13e <_dtoa_r+0x40e>
 800b214:	9901      	ldr	r1, [sp, #4]
 800b216:	4b4c      	ldr	r3, [pc, #304]	; (800b348 <_dtoa_r+0x618>)
 800b218:	4431      	add	r1, r6
 800b21a:	910d      	str	r1, [sp, #52]	; 0x34
 800b21c:	9908      	ldr	r1, [sp, #32]
 800b21e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b222:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b226:	2900      	cmp	r1, #0
 800b228:	d043      	beq.n	800b2b2 <_dtoa_r+0x582>
 800b22a:	494d      	ldr	r1, [pc, #308]	; (800b360 <_dtoa_r+0x630>)
 800b22c:	2000      	movs	r0, #0
 800b22e:	f7f5 fb1d 	bl	800086c <__aeabi_ddiv>
 800b232:	4652      	mov	r2, sl
 800b234:	465b      	mov	r3, fp
 800b236:	f7f5 f837 	bl	80002a8 <__aeabi_dsub>
 800b23a:	9d01      	ldr	r5, [sp, #4]
 800b23c:	4682      	mov	sl, r0
 800b23e:	468b      	mov	fp, r1
 800b240:	4649      	mov	r1, r9
 800b242:	4640      	mov	r0, r8
 800b244:	f7f5 fc98 	bl	8000b78 <__aeabi_d2iz>
 800b248:	4606      	mov	r6, r0
 800b24a:	f7f5 f97b 	bl	8000544 <__aeabi_i2d>
 800b24e:	4602      	mov	r2, r0
 800b250:	460b      	mov	r3, r1
 800b252:	4640      	mov	r0, r8
 800b254:	4649      	mov	r1, r9
 800b256:	f7f5 f827 	bl	80002a8 <__aeabi_dsub>
 800b25a:	3630      	adds	r6, #48	; 0x30
 800b25c:	f805 6b01 	strb.w	r6, [r5], #1
 800b260:	4652      	mov	r2, sl
 800b262:	465b      	mov	r3, fp
 800b264:	4680      	mov	r8, r0
 800b266:	4689      	mov	r9, r1
 800b268:	f7f5 fc48 	bl	8000afc <__aeabi_dcmplt>
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d163      	bne.n	800b338 <_dtoa_r+0x608>
 800b270:	4642      	mov	r2, r8
 800b272:	464b      	mov	r3, r9
 800b274:	4936      	ldr	r1, [pc, #216]	; (800b350 <_dtoa_r+0x620>)
 800b276:	2000      	movs	r0, #0
 800b278:	f7f5 f816 	bl	80002a8 <__aeabi_dsub>
 800b27c:	4652      	mov	r2, sl
 800b27e:	465b      	mov	r3, fp
 800b280:	f7f5 fc3c 	bl	8000afc <__aeabi_dcmplt>
 800b284:	2800      	cmp	r0, #0
 800b286:	f040 80b5 	bne.w	800b3f4 <_dtoa_r+0x6c4>
 800b28a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b28c:	429d      	cmp	r5, r3
 800b28e:	d081      	beq.n	800b194 <_dtoa_r+0x464>
 800b290:	4b30      	ldr	r3, [pc, #192]	; (800b354 <_dtoa_r+0x624>)
 800b292:	2200      	movs	r2, #0
 800b294:	4650      	mov	r0, sl
 800b296:	4659      	mov	r1, fp
 800b298:	f7f5 f9be 	bl	8000618 <__aeabi_dmul>
 800b29c:	4b2d      	ldr	r3, [pc, #180]	; (800b354 <_dtoa_r+0x624>)
 800b29e:	4682      	mov	sl, r0
 800b2a0:	468b      	mov	fp, r1
 800b2a2:	4640      	mov	r0, r8
 800b2a4:	4649      	mov	r1, r9
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f7f5 f9b6 	bl	8000618 <__aeabi_dmul>
 800b2ac:	4680      	mov	r8, r0
 800b2ae:	4689      	mov	r9, r1
 800b2b0:	e7c6      	b.n	800b240 <_dtoa_r+0x510>
 800b2b2:	4650      	mov	r0, sl
 800b2b4:	4659      	mov	r1, fp
 800b2b6:	f7f5 f9af 	bl	8000618 <__aeabi_dmul>
 800b2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2bc:	9d01      	ldr	r5, [sp, #4]
 800b2be:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2c0:	4682      	mov	sl, r0
 800b2c2:	468b      	mov	fp, r1
 800b2c4:	4649      	mov	r1, r9
 800b2c6:	4640      	mov	r0, r8
 800b2c8:	f7f5 fc56 	bl	8000b78 <__aeabi_d2iz>
 800b2cc:	4606      	mov	r6, r0
 800b2ce:	f7f5 f939 	bl	8000544 <__aeabi_i2d>
 800b2d2:	3630      	adds	r6, #48	; 0x30
 800b2d4:	4602      	mov	r2, r0
 800b2d6:	460b      	mov	r3, r1
 800b2d8:	4640      	mov	r0, r8
 800b2da:	4649      	mov	r1, r9
 800b2dc:	f7f4 ffe4 	bl	80002a8 <__aeabi_dsub>
 800b2e0:	f805 6b01 	strb.w	r6, [r5], #1
 800b2e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b2e6:	429d      	cmp	r5, r3
 800b2e8:	4680      	mov	r8, r0
 800b2ea:	4689      	mov	r9, r1
 800b2ec:	f04f 0200 	mov.w	r2, #0
 800b2f0:	d124      	bne.n	800b33c <_dtoa_r+0x60c>
 800b2f2:	4b1b      	ldr	r3, [pc, #108]	; (800b360 <_dtoa_r+0x630>)
 800b2f4:	4650      	mov	r0, sl
 800b2f6:	4659      	mov	r1, fp
 800b2f8:	f7f4 ffd8 	bl	80002ac <__adddf3>
 800b2fc:	4602      	mov	r2, r0
 800b2fe:	460b      	mov	r3, r1
 800b300:	4640      	mov	r0, r8
 800b302:	4649      	mov	r1, r9
 800b304:	f7f5 fc18 	bl	8000b38 <__aeabi_dcmpgt>
 800b308:	2800      	cmp	r0, #0
 800b30a:	d173      	bne.n	800b3f4 <_dtoa_r+0x6c4>
 800b30c:	4652      	mov	r2, sl
 800b30e:	465b      	mov	r3, fp
 800b310:	4913      	ldr	r1, [pc, #76]	; (800b360 <_dtoa_r+0x630>)
 800b312:	2000      	movs	r0, #0
 800b314:	f7f4 ffc8 	bl	80002a8 <__aeabi_dsub>
 800b318:	4602      	mov	r2, r0
 800b31a:	460b      	mov	r3, r1
 800b31c:	4640      	mov	r0, r8
 800b31e:	4649      	mov	r1, r9
 800b320:	f7f5 fbec 	bl	8000afc <__aeabi_dcmplt>
 800b324:	2800      	cmp	r0, #0
 800b326:	f43f af35 	beq.w	800b194 <_dtoa_r+0x464>
 800b32a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b32c:	1e6b      	subs	r3, r5, #1
 800b32e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b330:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b334:	2b30      	cmp	r3, #48	; 0x30
 800b336:	d0f8      	beq.n	800b32a <_dtoa_r+0x5fa>
 800b338:	9700      	str	r7, [sp, #0]
 800b33a:	e049      	b.n	800b3d0 <_dtoa_r+0x6a0>
 800b33c:	4b05      	ldr	r3, [pc, #20]	; (800b354 <_dtoa_r+0x624>)
 800b33e:	f7f5 f96b 	bl	8000618 <__aeabi_dmul>
 800b342:	4680      	mov	r8, r0
 800b344:	4689      	mov	r9, r1
 800b346:	e7bd      	b.n	800b2c4 <_dtoa_r+0x594>
 800b348:	0800f8d8 	.word	0x0800f8d8
 800b34c:	0800f8b0 	.word	0x0800f8b0
 800b350:	3ff00000 	.word	0x3ff00000
 800b354:	40240000 	.word	0x40240000
 800b358:	401c0000 	.word	0x401c0000
 800b35c:	40140000 	.word	0x40140000
 800b360:	3fe00000 	.word	0x3fe00000
 800b364:	9d01      	ldr	r5, [sp, #4]
 800b366:	4656      	mov	r6, sl
 800b368:	465f      	mov	r7, fp
 800b36a:	4642      	mov	r2, r8
 800b36c:	464b      	mov	r3, r9
 800b36e:	4630      	mov	r0, r6
 800b370:	4639      	mov	r1, r7
 800b372:	f7f5 fa7b 	bl	800086c <__aeabi_ddiv>
 800b376:	f7f5 fbff 	bl	8000b78 <__aeabi_d2iz>
 800b37a:	4682      	mov	sl, r0
 800b37c:	f7f5 f8e2 	bl	8000544 <__aeabi_i2d>
 800b380:	4642      	mov	r2, r8
 800b382:	464b      	mov	r3, r9
 800b384:	f7f5 f948 	bl	8000618 <__aeabi_dmul>
 800b388:	4602      	mov	r2, r0
 800b38a:	460b      	mov	r3, r1
 800b38c:	4630      	mov	r0, r6
 800b38e:	4639      	mov	r1, r7
 800b390:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b394:	f7f4 ff88 	bl	80002a8 <__aeabi_dsub>
 800b398:	f805 6b01 	strb.w	r6, [r5], #1
 800b39c:	9e01      	ldr	r6, [sp, #4]
 800b39e:	9f03      	ldr	r7, [sp, #12]
 800b3a0:	1bae      	subs	r6, r5, r6
 800b3a2:	42b7      	cmp	r7, r6
 800b3a4:	4602      	mov	r2, r0
 800b3a6:	460b      	mov	r3, r1
 800b3a8:	d135      	bne.n	800b416 <_dtoa_r+0x6e6>
 800b3aa:	f7f4 ff7f 	bl	80002ac <__adddf3>
 800b3ae:	4642      	mov	r2, r8
 800b3b0:	464b      	mov	r3, r9
 800b3b2:	4606      	mov	r6, r0
 800b3b4:	460f      	mov	r7, r1
 800b3b6:	f7f5 fbbf 	bl	8000b38 <__aeabi_dcmpgt>
 800b3ba:	b9d0      	cbnz	r0, 800b3f2 <_dtoa_r+0x6c2>
 800b3bc:	4642      	mov	r2, r8
 800b3be:	464b      	mov	r3, r9
 800b3c0:	4630      	mov	r0, r6
 800b3c2:	4639      	mov	r1, r7
 800b3c4:	f7f5 fb90 	bl	8000ae8 <__aeabi_dcmpeq>
 800b3c8:	b110      	cbz	r0, 800b3d0 <_dtoa_r+0x6a0>
 800b3ca:	f01a 0f01 	tst.w	sl, #1
 800b3ce:	d110      	bne.n	800b3f2 <_dtoa_r+0x6c2>
 800b3d0:	4620      	mov	r0, r4
 800b3d2:	ee18 1a10 	vmov	r1, s16
 800b3d6:	f000 fe79 	bl	800c0cc <_Bfree>
 800b3da:	2300      	movs	r3, #0
 800b3dc:	9800      	ldr	r0, [sp, #0]
 800b3de:	702b      	strb	r3, [r5, #0]
 800b3e0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b3e2:	3001      	adds	r0, #1
 800b3e4:	6018      	str	r0, [r3, #0]
 800b3e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	f43f acf1 	beq.w	800add0 <_dtoa_r+0xa0>
 800b3ee:	601d      	str	r5, [r3, #0]
 800b3f0:	e4ee      	b.n	800add0 <_dtoa_r+0xa0>
 800b3f2:	9f00      	ldr	r7, [sp, #0]
 800b3f4:	462b      	mov	r3, r5
 800b3f6:	461d      	mov	r5, r3
 800b3f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3fc:	2a39      	cmp	r2, #57	; 0x39
 800b3fe:	d106      	bne.n	800b40e <_dtoa_r+0x6de>
 800b400:	9a01      	ldr	r2, [sp, #4]
 800b402:	429a      	cmp	r2, r3
 800b404:	d1f7      	bne.n	800b3f6 <_dtoa_r+0x6c6>
 800b406:	9901      	ldr	r1, [sp, #4]
 800b408:	2230      	movs	r2, #48	; 0x30
 800b40a:	3701      	adds	r7, #1
 800b40c:	700a      	strb	r2, [r1, #0]
 800b40e:	781a      	ldrb	r2, [r3, #0]
 800b410:	3201      	adds	r2, #1
 800b412:	701a      	strb	r2, [r3, #0]
 800b414:	e790      	b.n	800b338 <_dtoa_r+0x608>
 800b416:	4ba6      	ldr	r3, [pc, #664]	; (800b6b0 <_dtoa_r+0x980>)
 800b418:	2200      	movs	r2, #0
 800b41a:	f7f5 f8fd 	bl	8000618 <__aeabi_dmul>
 800b41e:	2200      	movs	r2, #0
 800b420:	2300      	movs	r3, #0
 800b422:	4606      	mov	r6, r0
 800b424:	460f      	mov	r7, r1
 800b426:	f7f5 fb5f 	bl	8000ae8 <__aeabi_dcmpeq>
 800b42a:	2800      	cmp	r0, #0
 800b42c:	d09d      	beq.n	800b36a <_dtoa_r+0x63a>
 800b42e:	e7cf      	b.n	800b3d0 <_dtoa_r+0x6a0>
 800b430:	9a08      	ldr	r2, [sp, #32]
 800b432:	2a00      	cmp	r2, #0
 800b434:	f000 80d7 	beq.w	800b5e6 <_dtoa_r+0x8b6>
 800b438:	9a06      	ldr	r2, [sp, #24]
 800b43a:	2a01      	cmp	r2, #1
 800b43c:	f300 80ba 	bgt.w	800b5b4 <_dtoa_r+0x884>
 800b440:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b442:	2a00      	cmp	r2, #0
 800b444:	f000 80b2 	beq.w	800b5ac <_dtoa_r+0x87c>
 800b448:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b44c:	9e07      	ldr	r6, [sp, #28]
 800b44e:	9d04      	ldr	r5, [sp, #16]
 800b450:	9a04      	ldr	r2, [sp, #16]
 800b452:	441a      	add	r2, r3
 800b454:	9204      	str	r2, [sp, #16]
 800b456:	9a05      	ldr	r2, [sp, #20]
 800b458:	2101      	movs	r1, #1
 800b45a:	441a      	add	r2, r3
 800b45c:	4620      	mov	r0, r4
 800b45e:	9205      	str	r2, [sp, #20]
 800b460:	f000 ff36 	bl	800c2d0 <__i2b>
 800b464:	4607      	mov	r7, r0
 800b466:	2d00      	cmp	r5, #0
 800b468:	dd0c      	ble.n	800b484 <_dtoa_r+0x754>
 800b46a:	9b05      	ldr	r3, [sp, #20]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	dd09      	ble.n	800b484 <_dtoa_r+0x754>
 800b470:	42ab      	cmp	r3, r5
 800b472:	9a04      	ldr	r2, [sp, #16]
 800b474:	bfa8      	it	ge
 800b476:	462b      	movge	r3, r5
 800b478:	1ad2      	subs	r2, r2, r3
 800b47a:	9204      	str	r2, [sp, #16]
 800b47c:	9a05      	ldr	r2, [sp, #20]
 800b47e:	1aed      	subs	r5, r5, r3
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	9305      	str	r3, [sp, #20]
 800b484:	9b07      	ldr	r3, [sp, #28]
 800b486:	b31b      	cbz	r3, 800b4d0 <_dtoa_r+0x7a0>
 800b488:	9b08      	ldr	r3, [sp, #32]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	f000 80af 	beq.w	800b5ee <_dtoa_r+0x8be>
 800b490:	2e00      	cmp	r6, #0
 800b492:	dd13      	ble.n	800b4bc <_dtoa_r+0x78c>
 800b494:	4639      	mov	r1, r7
 800b496:	4632      	mov	r2, r6
 800b498:	4620      	mov	r0, r4
 800b49a:	f000 ffd9 	bl	800c450 <__pow5mult>
 800b49e:	ee18 2a10 	vmov	r2, s16
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	4607      	mov	r7, r0
 800b4a6:	4620      	mov	r0, r4
 800b4a8:	f000 ff28 	bl	800c2fc <__multiply>
 800b4ac:	ee18 1a10 	vmov	r1, s16
 800b4b0:	4680      	mov	r8, r0
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f000 fe0a 	bl	800c0cc <_Bfree>
 800b4b8:	ee08 8a10 	vmov	s16, r8
 800b4bc:	9b07      	ldr	r3, [sp, #28]
 800b4be:	1b9a      	subs	r2, r3, r6
 800b4c0:	d006      	beq.n	800b4d0 <_dtoa_r+0x7a0>
 800b4c2:	ee18 1a10 	vmov	r1, s16
 800b4c6:	4620      	mov	r0, r4
 800b4c8:	f000 ffc2 	bl	800c450 <__pow5mult>
 800b4cc:	ee08 0a10 	vmov	s16, r0
 800b4d0:	2101      	movs	r1, #1
 800b4d2:	4620      	mov	r0, r4
 800b4d4:	f000 fefc 	bl	800c2d0 <__i2b>
 800b4d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	4606      	mov	r6, r0
 800b4de:	f340 8088 	ble.w	800b5f2 <_dtoa_r+0x8c2>
 800b4e2:	461a      	mov	r2, r3
 800b4e4:	4601      	mov	r1, r0
 800b4e6:	4620      	mov	r0, r4
 800b4e8:	f000 ffb2 	bl	800c450 <__pow5mult>
 800b4ec:	9b06      	ldr	r3, [sp, #24]
 800b4ee:	2b01      	cmp	r3, #1
 800b4f0:	4606      	mov	r6, r0
 800b4f2:	f340 8081 	ble.w	800b5f8 <_dtoa_r+0x8c8>
 800b4f6:	f04f 0800 	mov.w	r8, #0
 800b4fa:	6933      	ldr	r3, [r6, #16]
 800b4fc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b500:	6918      	ldr	r0, [r3, #16]
 800b502:	f000 fe95 	bl	800c230 <__hi0bits>
 800b506:	f1c0 0020 	rsb	r0, r0, #32
 800b50a:	9b05      	ldr	r3, [sp, #20]
 800b50c:	4418      	add	r0, r3
 800b50e:	f010 001f 	ands.w	r0, r0, #31
 800b512:	f000 8092 	beq.w	800b63a <_dtoa_r+0x90a>
 800b516:	f1c0 0320 	rsb	r3, r0, #32
 800b51a:	2b04      	cmp	r3, #4
 800b51c:	f340 808a 	ble.w	800b634 <_dtoa_r+0x904>
 800b520:	f1c0 001c 	rsb	r0, r0, #28
 800b524:	9b04      	ldr	r3, [sp, #16]
 800b526:	4403      	add	r3, r0
 800b528:	9304      	str	r3, [sp, #16]
 800b52a:	9b05      	ldr	r3, [sp, #20]
 800b52c:	4403      	add	r3, r0
 800b52e:	4405      	add	r5, r0
 800b530:	9305      	str	r3, [sp, #20]
 800b532:	9b04      	ldr	r3, [sp, #16]
 800b534:	2b00      	cmp	r3, #0
 800b536:	dd07      	ble.n	800b548 <_dtoa_r+0x818>
 800b538:	ee18 1a10 	vmov	r1, s16
 800b53c:	461a      	mov	r2, r3
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 ffe0 	bl	800c504 <__lshift>
 800b544:	ee08 0a10 	vmov	s16, r0
 800b548:	9b05      	ldr	r3, [sp, #20]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	dd05      	ble.n	800b55a <_dtoa_r+0x82a>
 800b54e:	4631      	mov	r1, r6
 800b550:	461a      	mov	r2, r3
 800b552:	4620      	mov	r0, r4
 800b554:	f000 ffd6 	bl	800c504 <__lshift>
 800b558:	4606      	mov	r6, r0
 800b55a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d06e      	beq.n	800b63e <_dtoa_r+0x90e>
 800b560:	ee18 0a10 	vmov	r0, s16
 800b564:	4631      	mov	r1, r6
 800b566:	f001 f83d 	bl	800c5e4 <__mcmp>
 800b56a:	2800      	cmp	r0, #0
 800b56c:	da67      	bge.n	800b63e <_dtoa_r+0x90e>
 800b56e:	9b00      	ldr	r3, [sp, #0]
 800b570:	3b01      	subs	r3, #1
 800b572:	ee18 1a10 	vmov	r1, s16
 800b576:	9300      	str	r3, [sp, #0]
 800b578:	220a      	movs	r2, #10
 800b57a:	2300      	movs	r3, #0
 800b57c:	4620      	mov	r0, r4
 800b57e:	f000 fdc7 	bl	800c110 <__multadd>
 800b582:	9b08      	ldr	r3, [sp, #32]
 800b584:	ee08 0a10 	vmov	s16, r0
 800b588:	2b00      	cmp	r3, #0
 800b58a:	f000 81b1 	beq.w	800b8f0 <_dtoa_r+0xbc0>
 800b58e:	2300      	movs	r3, #0
 800b590:	4639      	mov	r1, r7
 800b592:	220a      	movs	r2, #10
 800b594:	4620      	mov	r0, r4
 800b596:	f000 fdbb 	bl	800c110 <__multadd>
 800b59a:	9b02      	ldr	r3, [sp, #8]
 800b59c:	2b00      	cmp	r3, #0
 800b59e:	4607      	mov	r7, r0
 800b5a0:	f300 808e 	bgt.w	800b6c0 <_dtoa_r+0x990>
 800b5a4:	9b06      	ldr	r3, [sp, #24]
 800b5a6:	2b02      	cmp	r3, #2
 800b5a8:	dc51      	bgt.n	800b64e <_dtoa_r+0x91e>
 800b5aa:	e089      	b.n	800b6c0 <_dtoa_r+0x990>
 800b5ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b5ae:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b5b2:	e74b      	b.n	800b44c <_dtoa_r+0x71c>
 800b5b4:	9b03      	ldr	r3, [sp, #12]
 800b5b6:	1e5e      	subs	r6, r3, #1
 800b5b8:	9b07      	ldr	r3, [sp, #28]
 800b5ba:	42b3      	cmp	r3, r6
 800b5bc:	bfbf      	itttt	lt
 800b5be:	9b07      	ldrlt	r3, [sp, #28]
 800b5c0:	9607      	strlt	r6, [sp, #28]
 800b5c2:	1af2      	sublt	r2, r6, r3
 800b5c4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b5c6:	bfb6      	itet	lt
 800b5c8:	189b      	addlt	r3, r3, r2
 800b5ca:	1b9e      	subge	r6, r3, r6
 800b5cc:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b5ce:	9b03      	ldr	r3, [sp, #12]
 800b5d0:	bfb8      	it	lt
 800b5d2:	2600      	movlt	r6, #0
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	bfb7      	itett	lt
 800b5d8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b5dc:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b5e0:	1a9d      	sublt	r5, r3, r2
 800b5e2:	2300      	movlt	r3, #0
 800b5e4:	e734      	b.n	800b450 <_dtoa_r+0x720>
 800b5e6:	9e07      	ldr	r6, [sp, #28]
 800b5e8:	9d04      	ldr	r5, [sp, #16]
 800b5ea:	9f08      	ldr	r7, [sp, #32]
 800b5ec:	e73b      	b.n	800b466 <_dtoa_r+0x736>
 800b5ee:	9a07      	ldr	r2, [sp, #28]
 800b5f0:	e767      	b.n	800b4c2 <_dtoa_r+0x792>
 800b5f2:	9b06      	ldr	r3, [sp, #24]
 800b5f4:	2b01      	cmp	r3, #1
 800b5f6:	dc18      	bgt.n	800b62a <_dtoa_r+0x8fa>
 800b5f8:	f1ba 0f00 	cmp.w	sl, #0
 800b5fc:	d115      	bne.n	800b62a <_dtoa_r+0x8fa>
 800b5fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b602:	b993      	cbnz	r3, 800b62a <_dtoa_r+0x8fa>
 800b604:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b608:	0d1b      	lsrs	r3, r3, #20
 800b60a:	051b      	lsls	r3, r3, #20
 800b60c:	b183      	cbz	r3, 800b630 <_dtoa_r+0x900>
 800b60e:	9b04      	ldr	r3, [sp, #16]
 800b610:	3301      	adds	r3, #1
 800b612:	9304      	str	r3, [sp, #16]
 800b614:	9b05      	ldr	r3, [sp, #20]
 800b616:	3301      	adds	r3, #1
 800b618:	9305      	str	r3, [sp, #20]
 800b61a:	f04f 0801 	mov.w	r8, #1
 800b61e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b620:	2b00      	cmp	r3, #0
 800b622:	f47f af6a 	bne.w	800b4fa <_dtoa_r+0x7ca>
 800b626:	2001      	movs	r0, #1
 800b628:	e76f      	b.n	800b50a <_dtoa_r+0x7da>
 800b62a:	f04f 0800 	mov.w	r8, #0
 800b62e:	e7f6      	b.n	800b61e <_dtoa_r+0x8ee>
 800b630:	4698      	mov	r8, r3
 800b632:	e7f4      	b.n	800b61e <_dtoa_r+0x8ee>
 800b634:	f43f af7d 	beq.w	800b532 <_dtoa_r+0x802>
 800b638:	4618      	mov	r0, r3
 800b63a:	301c      	adds	r0, #28
 800b63c:	e772      	b.n	800b524 <_dtoa_r+0x7f4>
 800b63e:	9b03      	ldr	r3, [sp, #12]
 800b640:	2b00      	cmp	r3, #0
 800b642:	dc37      	bgt.n	800b6b4 <_dtoa_r+0x984>
 800b644:	9b06      	ldr	r3, [sp, #24]
 800b646:	2b02      	cmp	r3, #2
 800b648:	dd34      	ble.n	800b6b4 <_dtoa_r+0x984>
 800b64a:	9b03      	ldr	r3, [sp, #12]
 800b64c:	9302      	str	r3, [sp, #8]
 800b64e:	9b02      	ldr	r3, [sp, #8]
 800b650:	b96b      	cbnz	r3, 800b66e <_dtoa_r+0x93e>
 800b652:	4631      	mov	r1, r6
 800b654:	2205      	movs	r2, #5
 800b656:	4620      	mov	r0, r4
 800b658:	f000 fd5a 	bl	800c110 <__multadd>
 800b65c:	4601      	mov	r1, r0
 800b65e:	4606      	mov	r6, r0
 800b660:	ee18 0a10 	vmov	r0, s16
 800b664:	f000 ffbe 	bl	800c5e4 <__mcmp>
 800b668:	2800      	cmp	r0, #0
 800b66a:	f73f adbb 	bgt.w	800b1e4 <_dtoa_r+0x4b4>
 800b66e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b670:	9d01      	ldr	r5, [sp, #4]
 800b672:	43db      	mvns	r3, r3
 800b674:	9300      	str	r3, [sp, #0]
 800b676:	f04f 0800 	mov.w	r8, #0
 800b67a:	4631      	mov	r1, r6
 800b67c:	4620      	mov	r0, r4
 800b67e:	f000 fd25 	bl	800c0cc <_Bfree>
 800b682:	2f00      	cmp	r7, #0
 800b684:	f43f aea4 	beq.w	800b3d0 <_dtoa_r+0x6a0>
 800b688:	f1b8 0f00 	cmp.w	r8, #0
 800b68c:	d005      	beq.n	800b69a <_dtoa_r+0x96a>
 800b68e:	45b8      	cmp	r8, r7
 800b690:	d003      	beq.n	800b69a <_dtoa_r+0x96a>
 800b692:	4641      	mov	r1, r8
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fd19 	bl	800c0cc <_Bfree>
 800b69a:	4639      	mov	r1, r7
 800b69c:	4620      	mov	r0, r4
 800b69e:	f000 fd15 	bl	800c0cc <_Bfree>
 800b6a2:	e695      	b.n	800b3d0 <_dtoa_r+0x6a0>
 800b6a4:	2600      	movs	r6, #0
 800b6a6:	4637      	mov	r7, r6
 800b6a8:	e7e1      	b.n	800b66e <_dtoa_r+0x93e>
 800b6aa:	9700      	str	r7, [sp, #0]
 800b6ac:	4637      	mov	r7, r6
 800b6ae:	e599      	b.n	800b1e4 <_dtoa_r+0x4b4>
 800b6b0:	40240000 	.word	0x40240000
 800b6b4:	9b08      	ldr	r3, [sp, #32]
 800b6b6:	2b00      	cmp	r3, #0
 800b6b8:	f000 80ca 	beq.w	800b850 <_dtoa_r+0xb20>
 800b6bc:	9b03      	ldr	r3, [sp, #12]
 800b6be:	9302      	str	r3, [sp, #8]
 800b6c0:	2d00      	cmp	r5, #0
 800b6c2:	dd05      	ble.n	800b6d0 <_dtoa_r+0x9a0>
 800b6c4:	4639      	mov	r1, r7
 800b6c6:	462a      	mov	r2, r5
 800b6c8:	4620      	mov	r0, r4
 800b6ca:	f000 ff1b 	bl	800c504 <__lshift>
 800b6ce:	4607      	mov	r7, r0
 800b6d0:	f1b8 0f00 	cmp.w	r8, #0
 800b6d4:	d05b      	beq.n	800b78e <_dtoa_r+0xa5e>
 800b6d6:	6879      	ldr	r1, [r7, #4]
 800b6d8:	4620      	mov	r0, r4
 800b6da:	f000 fcb7 	bl	800c04c <_Balloc>
 800b6de:	4605      	mov	r5, r0
 800b6e0:	b928      	cbnz	r0, 800b6ee <_dtoa_r+0x9be>
 800b6e2:	4b87      	ldr	r3, [pc, #540]	; (800b900 <_dtoa_r+0xbd0>)
 800b6e4:	4602      	mov	r2, r0
 800b6e6:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b6ea:	f7ff bb3b 	b.w	800ad64 <_dtoa_r+0x34>
 800b6ee:	693a      	ldr	r2, [r7, #16]
 800b6f0:	3202      	adds	r2, #2
 800b6f2:	0092      	lsls	r2, r2, #2
 800b6f4:	f107 010c 	add.w	r1, r7, #12
 800b6f8:	300c      	adds	r0, #12
 800b6fa:	f7fd fc05 	bl	8008f08 <memcpy>
 800b6fe:	2201      	movs	r2, #1
 800b700:	4629      	mov	r1, r5
 800b702:	4620      	mov	r0, r4
 800b704:	f000 fefe 	bl	800c504 <__lshift>
 800b708:	9b01      	ldr	r3, [sp, #4]
 800b70a:	f103 0901 	add.w	r9, r3, #1
 800b70e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b712:	4413      	add	r3, r2
 800b714:	9305      	str	r3, [sp, #20]
 800b716:	f00a 0301 	and.w	r3, sl, #1
 800b71a:	46b8      	mov	r8, r7
 800b71c:	9304      	str	r3, [sp, #16]
 800b71e:	4607      	mov	r7, r0
 800b720:	4631      	mov	r1, r6
 800b722:	ee18 0a10 	vmov	r0, s16
 800b726:	f7ff fa75 	bl	800ac14 <quorem>
 800b72a:	4641      	mov	r1, r8
 800b72c:	9002      	str	r0, [sp, #8]
 800b72e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b732:	ee18 0a10 	vmov	r0, s16
 800b736:	f000 ff55 	bl	800c5e4 <__mcmp>
 800b73a:	463a      	mov	r2, r7
 800b73c:	9003      	str	r0, [sp, #12]
 800b73e:	4631      	mov	r1, r6
 800b740:	4620      	mov	r0, r4
 800b742:	f000 ff6b 	bl	800c61c <__mdiff>
 800b746:	68c2      	ldr	r2, [r0, #12]
 800b748:	f109 3bff 	add.w	fp, r9, #4294967295
 800b74c:	4605      	mov	r5, r0
 800b74e:	bb02      	cbnz	r2, 800b792 <_dtoa_r+0xa62>
 800b750:	4601      	mov	r1, r0
 800b752:	ee18 0a10 	vmov	r0, s16
 800b756:	f000 ff45 	bl	800c5e4 <__mcmp>
 800b75a:	4602      	mov	r2, r0
 800b75c:	4629      	mov	r1, r5
 800b75e:	4620      	mov	r0, r4
 800b760:	9207      	str	r2, [sp, #28]
 800b762:	f000 fcb3 	bl	800c0cc <_Bfree>
 800b766:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b76a:	ea43 0102 	orr.w	r1, r3, r2
 800b76e:	9b04      	ldr	r3, [sp, #16]
 800b770:	430b      	orrs	r3, r1
 800b772:	464d      	mov	r5, r9
 800b774:	d10f      	bne.n	800b796 <_dtoa_r+0xa66>
 800b776:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b77a:	d02a      	beq.n	800b7d2 <_dtoa_r+0xaa2>
 800b77c:	9b03      	ldr	r3, [sp, #12]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	dd02      	ble.n	800b788 <_dtoa_r+0xa58>
 800b782:	9b02      	ldr	r3, [sp, #8]
 800b784:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b788:	f88b a000 	strb.w	sl, [fp]
 800b78c:	e775      	b.n	800b67a <_dtoa_r+0x94a>
 800b78e:	4638      	mov	r0, r7
 800b790:	e7ba      	b.n	800b708 <_dtoa_r+0x9d8>
 800b792:	2201      	movs	r2, #1
 800b794:	e7e2      	b.n	800b75c <_dtoa_r+0xa2c>
 800b796:	9b03      	ldr	r3, [sp, #12]
 800b798:	2b00      	cmp	r3, #0
 800b79a:	db04      	blt.n	800b7a6 <_dtoa_r+0xa76>
 800b79c:	9906      	ldr	r1, [sp, #24]
 800b79e:	430b      	orrs	r3, r1
 800b7a0:	9904      	ldr	r1, [sp, #16]
 800b7a2:	430b      	orrs	r3, r1
 800b7a4:	d122      	bne.n	800b7ec <_dtoa_r+0xabc>
 800b7a6:	2a00      	cmp	r2, #0
 800b7a8:	ddee      	ble.n	800b788 <_dtoa_r+0xa58>
 800b7aa:	ee18 1a10 	vmov	r1, s16
 800b7ae:	2201      	movs	r2, #1
 800b7b0:	4620      	mov	r0, r4
 800b7b2:	f000 fea7 	bl	800c504 <__lshift>
 800b7b6:	4631      	mov	r1, r6
 800b7b8:	ee08 0a10 	vmov	s16, r0
 800b7bc:	f000 ff12 	bl	800c5e4 <__mcmp>
 800b7c0:	2800      	cmp	r0, #0
 800b7c2:	dc03      	bgt.n	800b7cc <_dtoa_r+0xa9c>
 800b7c4:	d1e0      	bne.n	800b788 <_dtoa_r+0xa58>
 800b7c6:	f01a 0f01 	tst.w	sl, #1
 800b7ca:	d0dd      	beq.n	800b788 <_dtoa_r+0xa58>
 800b7cc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7d0:	d1d7      	bne.n	800b782 <_dtoa_r+0xa52>
 800b7d2:	2339      	movs	r3, #57	; 0x39
 800b7d4:	f88b 3000 	strb.w	r3, [fp]
 800b7d8:	462b      	mov	r3, r5
 800b7da:	461d      	mov	r5, r3
 800b7dc:	3b01      	subs	r3, #1
 800b7de:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b7e2:	2a39      	cmp	r2, #57	; 0x39
 800b7e4:	d071      	beq.n	800b8ca <_dtoa_r+0xb9a>
 800b7e6:	3201      	adds	r2, #1
 800b7e8:	701a      	strb	r2, [r3, #0]
 800b7ea:	e746      	b.n	800b67a <_dtoa_r+0x94a>
 800b7ec:	2a00      	cmp	r2, #0
 800b7ee:	dd07      	ble.n	800b800 <_dtoa_r+0xad0>
 800b7f0:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b7f4:	d0ed      	beq.n	800b7d2 <_dtoa_r+0xaa2>
 800b7f6:	f10a 0301 	add.w	r3, sl, #1
 800b7fa:	f88b 3000 	strb.w	r3, [fp]
 800b7fe:	e73c      	b.n	800b67a <_dtoa_r+0x94a>
 800b800:	9b05      	ldr	r3, [sp, #20]
 800b802:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b806:	4599      	cmp	r9, r3
 800b808:	d047      	beq.n	800b89a <_dtoa_r+0xb6a>
 800b80a:	ee18 1a10 	vmov	r1, s16
 800b80e:	2300      	movs	r3, #0
 800b810:	220a      	movs	r2, #10
 800b812:	4620      	mov	r0, r4
 800b814:	f000 fc7c 	bl	800c110 <__multadd>
 800b818:	45b8      	cmp	r8, r7
 800b81a:	ee08 0a10 	vmov	s16, r0
 800b81e:	f04f 0300 	mov.w	r3, #0
 800b822:	f04f 020a 	mov.w	r2, #10
 800b826:	4641      	mov	r1, r8
 800b828:	4620      	mov	r0, r4
 800b82a:	d106      	bne.n	800b83a <_dtoa_r+0xb0a>
 800b82c:	f000 fc70 	bl	800c110 <__multadd>
 800b830:	4680      	mov	r8, r0
 800b832:	4607      	mov	r7, r0
 800b834:	f109 0901 	add.w	r9, r9, #1
 800b838:	e772      	b.n	800b720 <_dtoa_r+0x9f0>
 800b83a:	f000 fc69 	bl	800c110 <__multadd>
 800b83e:	4639      	mov	r1, r7
 800b840:	4680      	mov	r8, r0
 800b842:	2300      	movs	r3, #0
 800b844:	220a      	movs	r2, #10
 800b846:	4620      	mov	r0, r4
 800b848:	f000 fc62 	bl	800c110 <__multadd>
 800b84c:	4607      	mov	r7, r0
 800b84e:	e7f1      	b.n	800b834 <_dtoa_r+0xb04>
 800b850:	9b03      	ldr	r3, [sp, #12]
 800b852:	9302      	str	r3, [sp, #8]
 800b854:	9d01      	ldr	r5, [sp, #4]
 800b856:	ee18 0a10 	vmov	r0, s16
 800b85a:	4631      	mov	r1, r6
 800b85c:	f7ff f9da 	bl	800ac14 <quorem>
 800b860:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b864:	9b01      	ldr	r3, [sp, #4]
 800b866:	f805 ab01 	strb.w	sl, [r5], #1
 800b86a:	1aea      	subs	r2, r5, r3
 800b86c:	9b02      	ldr	r3, [sp, #8]
 800b86e:	4293      	cmp	r3, r2
 800b870:	dd09      	ble.n	800b886 <_dtoa_r+0xb56>
 800b872:	ee18 1a10 	vmov	r1, s16
 800b876:	2300      	movs	r3, #0
 800b878:	220a      	movs	r2, #10
 800b87a:	4620      	mov	r0, r4
 800b87c:	f000 fc48 	bl	800c110 <__multadd>
 800b880:	ee08 0a10 	vmov	s16, r0
 800b884:	e7e7      	b.n	800b856 <_dtoa_r+0xb26>
 800b886:	9b02      	ldr	r3, [sp, #8]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	bfc8      	it	gt
 800b88c:	461d      	movgt	r5, r3
 800b88e:	9b01      	ldr	r3, [sp, #4]
 800b890:	bfd8      	it	le
 800b892:	2501      	movle	r5, #1
 800b894:	441d      	add	r5, r3
 800b896:	f04f 0800 	mov.w	r8, #0
 800b89a:	ee18 1a10 	vmov	r1, s16
 800b89e:	2201      	movs	r2, #1
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 fe2f 	bl	800c504 <__lshift>
 800b8a6:	4631      	mov	r1, r6
 800b8a8:	ee08 0a10 	vmov	s16, r0
 800b8ac:	f000 fe9a 	bl	800c5e4 <__mcmp>
 800b8b0:	2800      	cmp	r0, #0
 800b8b2:	dc91      	bgt.n	800b7d8 <_dtoa_r+0xaa8>
 800b8b4:	d102      	bne.n	800b8bc <_dtoa_r+0xb8c>
 800b8b6:	f01a 0f01 	tst.w	sl, #1
 800b8ba:	d18d      	bne.n	800b7d8 <_dtoa_r+0xaa8>
 800b8bc:	462b      	mov	r3, r5
 800b8be:	461d      	mov	r5, r3
 800b8c0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b8c4:	2a30      	cmp	r2, #48	; 0x30
 800b8c6:	d0fa      	beq.n	800b8be <_dtoa_r+0xb8e>
 800b8c8:	e6d7      	b.n	800b67a <_dtoa_r+0x94a>
 800b8ca:	9a01      	ldr	r2, [sp, #4]
 800b8cc:	429a      	cmp	r2, r3
 800b8ce:	d184      	bne.n	800b7da <_dtoa_r+0xaaa>
 800b8d0:	9b00      	ldr	r3, [sp, #0]
 800b8d2:	3301      	adds	r3, #1
 800b8d4:	9300      	str	r3, [sp, #0]
 800b8d6:	2331      	movs	r3, #49	; 0x31
 800b8d8:	7013      	strb	r3, [r2, #0]
 800b8da:	e6ce      	b.n	800b67a <_dtoa_r+0x94a>
 800b8dc:	4b09      	ldr	r3, [pc, #36]	; (800b904 <_dtoa_r+0xbd4>)
 800b8de:	f7ff ba95 	b.w	800ae0c <_dtoa_r+0xdc>
 800b8e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	f47f aa6e 	bne.w	800adc6 <_dtoa_r+0x96>
 800b8ea:	4b07      	ldr	r3, [pc, #28]	; (800b908 <_dtoa_r+0xbd8>)
 800b8ec:	f7ff ba8e 	b.w	800ae0c <_dtoa_r+0xdc>
 800b8f0:	9b02      	ldr	r3, [sp, #8]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	dcae      	bgt.n	800b854 <_dtoa_r+0xb24>
 800b8f6:	9b06      	ldr	r3, [sp, #24]
 800b8f8:	2b02      	cmp	r3, #2
 800b8fa:	f73f aea8 	bgt.w	800b64e <_dtoa_r+0x91e>
 800b8fe:	e7a9      	b.n	800b854 <_dtoa_r+0xb24>
 800b900:	0800f7c9 	.word	0x0800f7c9
 800b904:	0800f530 	.word	0x0800f530
 800b908:	0800f761 	.word	0x0800f761

0800b90c <fiprintf>:
 800b90c:	b40e      	push	{r1, r2, r3}
 800b90e:	b503      	push	{r0, r1, lr}
 800b910:	4601      	mov	r1, r0
 800b912:	ab03      	add	r3, sp, #12
 800b914:	4805      	ldr	r0, [pc, #20]	; (800b92c <fiprintf+0x20>)
 800b916:	f853 2b04 	ldr.w	r2, [r3], #4
 800b91a:	6800      	ldr	r0, [r0, #0]
 800b91c:	9301      	str	r3, [sp, #4]
 800b91e:	f001 fad3 	bl	800cec8 <_vfiprintf_r>
 800b922:	b002      	add	sp, #8
 800b924:	f85d eb04 	ldr.w	lr, [sp], #4
 800b928:	b003      	add	sp, #12
 800b92a:	4770      	bx	lr
 800b92c:	20000074 	.word	0x20000074

0800b930 <rshift>:
 800b930:	6903      	ldr	r3, [r0, #16]
 800b932:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b936:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b93a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b93e:	f100 0414 	add.w	r4, r0, #20
 800b942:	dd45      	ble.n	800b9d0 <rshift+0xa0>
 800b944:	f011 011f 	ands.w	r1, r1, #31
 800b948:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b94c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b950:	d10c      	bne.n	800b96c <rshift+0x3c>
 800b952:	f100 0710 	add.w	r7, r0, #16
 800b956:	4629      	mov	r1, r5
 800b958:	42b1      	cmp	r1, r6
 800b95a:	d334      	bcc.n	800b9c6 <rshift+0x96>
 800b95c:	1a9b      	subs	r3, r3, r2
 800b95e:	009b      	lsls	r3, r3, #2
 800b960:	1eea      	subs	r2, r5, #3
 800b962:	4296      	cmp	r6, r2
 800b964:	bf38      	it	cc
 800b966:	2300      	movcc	r3, #0
 800b968:	4423      	add	r3, r4
 800b96a:	e015      	b.n	800b998 <rshift+0x68>
 800b96c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b970:	f1c1 0820 	rsb	r8, r1, #32
 800b974:	40cf      	lsrs	r7, r1
 800b976:	f105 0e04 	add.w	lr, r5, #4
 800b97a:	46a1      	mov	r9, r4
 800b97c:	4576      	cmp	r6, lr
 800b97e:	46f4      	mov	ip, lr
 800b980:	d815      	bhi.n	800b9ae <rshift+0x7e>
 800b982:	1a9a      	subs	r2, r3, r2
 800b984:	0092      	lsls	r2, r2, #2
 800b986:	3a04      	subs	r2, #4
 800b988:	3501      	adds	r5, #1
 800b98a:	42ae      	cmp	r6, r5
 800b98c:	bf38      	it	cc
 800b98e:	2200      	movcc	r2, #0
 800b990:	18a3      	adds	r3, r4, r2
 800b992:	50a7      	str	r7, [r4, r2]
 800b994:	b107      	cbz	r7, 800b998 <rshift+0x68>
 800b996:	3304      	adds	r3, #4
 800b998:	1b1a      	subs	r2, r3, r4
 800b99a:	42a3      	cmp	r3, r4
 800b99c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b9a0:	bf08      	it	eq
 800b9a2:	2300      	moveq	r3, #0
 800b9a4:	6102      	str	r2, [r0, #16]
 800b9a6:	bf08      	it	eq
 800b9a8:	6143      	streq	r3, [r0, #20]
 800b9aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b9ae:	f8dc c000 	ldr.w	ip, [ip]
 800b9b2:	fa0c fc08 	lsl.w	ip, ip, r8
 800b9b6:	ea4c 0707 	orr.w	r7, ip, r7
 800b9ba:	f849 7b04 	str.w	r7, [r9], #4
 800b9be:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b9c2:	40cf      	lsrs	r7, r1
 800b9c4:	e7da      	b.n	800b97c <rshift+0x4c>
 800b9c6:	f851 cb04 	ldr.w	ip, [r1], #4
 800b9ca:	f847 cf04 	str.w	ip, [r7, #4]!
 800b9ce:	e7c3      	b.n	800b958 <rshift+0x28>
 800b9d0:	4623      	mov	r3, r4
 800b9d2:	e7e1      	b.n	800b998 <rshift+0x68>

0800b9d4 <__hexdig_fun>:
 800b9d4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b9d8:	2b09      	cmp	r3, #9
 800b9da:	d802      	bhi.n	800b9e2 <__hexdig_fun+0xe>
 800b9dc:	3820      	subs	r0, #32
 800b9de:	b2c0      	uxtb	r0, r0
 800b9e0:	4770      	bx	lr
 800b9e2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b9e6:	2b05      	cmp	r3, #5
 800b9e8:	d801      	bhi.n	800b9ee <__hexdig_fun+0x1a>
 800b9ea:	3847      	subs	r0, #71	; 0x47
 800b9ec:	e7f7      	b.n	800b9de <__hexdig_fun+0xa>
 800b9ee:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b9f2:	2b05      	cmp	r3, #5
 800b9f4:	d801      	bhi.n	800b9fa <__hexdig_fun+0x26>
 800b9f6:	3827      	subs	r0, #39	; 0x27
 800b9f8:	e7f1      	b.n	800b9de <__hexdig_fun+0xa>
 800b9fa:	2000      	movs	r0, #0
 800b9fc:	4770      	bx	lr
	...

0800ba00 <__gethex>:
 800ba00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba04:	ed2d 8b02 	vpush	{d8}
 800ba08:	b089      	sub	sp, #36	; 0x24
 800ba0a:	ee08 0a10 	vmov	s16, r0
 800ba0e:	9304      	str	r3, [sp, #16]
 800ba10:	4bb4      	ldr	r3, [pc, #720]	; (800bce4 <__gethex+0x2e4>)
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	9301      	str	r3, [sp, #4]
 800ba16:	4618      	mov	r0, r3
 800ba18:	468b      	mov	fp, r1
 800ba1a:	4690      	mov	r8, r2
 800ba1c:	f7f4 fbe2 	bl	80001e4 <strlen>
 800ba20:	9b01      	ldr	r3, [sp, #4]
 800ba22:	f8db 2000 	ldr.w	r2, [fp]
 800ba26:	4403      	add	r3, r0
 800ba28:	4682      	mov	sl, r0
 800ba2a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800ba2e:	9305      	str	r3, [sp, #20]
 800ba30:	1c93      	adds	r3, r2, #2
 800ba32:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800ba36:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800ba3a:	32fe      	adds	r2, #254	; 0xfe
 800ba3c:	18d1      	adds	r1, r2, r3
 800ba3e:	461f      	mov	r7, r3
 800ba40:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ba44:	9100      	str	r1, [sp, #0]
 800ba46:	2830      	cmp	r0, #48	; 0x30
 800ba48:	d0f8      	beq.n	800ba3c <__gethex+0x3c>
 800ba4a:	f7ff ffc3 	bl	800b9d4 <__hexdig_fun>
 800ba4e:	4604      	mov	r4, r0
 800ba50:	2800      	cmp	r0, #0
 800ba52:	d13a      	bne.n	800baca <__gethex+0xca>
 800ba54:	9901      	ldr	r1, [sp, #4]
 800ba56:	4652      	mov	r2, sl
 800ba58:	4638      	mov	r0, r7
 800ba5a:	f001 fb7d 	bl	800d158 <strncmp>
 800ba5e:	4605      	mov	r5, r0
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d168      	bne.n	800bb36 <__gethex+0x136>
 800ba64:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ba68:	eb07 060a 	add.w	r6, r7, sl
 800ba6c:	f7ff ffb2 	bl	800b9d4 <__hexdig_fun>
 800ba70:	2800      	cmp	r0, #0
 800ba72:	d062      	beq.n	800bb3a <__gethex+0x13a>
 800ba74:	4633      	mov	r3, r6
 800ba76:	7818      	ldrb	r0, [r3, #0]
 800ba78:	2830      	cmp	r0, #48	; 0x30
 800ba7a:	461f      	mov	r7, r3
 800ba7c:	f103 0301 	add.w	r3, r3, #1
 800ba80:	d0f9      	beq.n	800ba76 <__gethex+0x76>
 800ba82:	f7ff ffa7 	bl	800b9d4 <__hexdig_fun>
 800ba86:	2301      	movs	r3, #1
 800ba88:	fab0 f480 	clz	r4, r0
 800ba8c:	0964      	lsrs	r4, r4, #5
 800ba8e:	4635      	mov	r5, r6
 800ba90:	9300      	str	r3, [sp, #0]
 800ba92:	463a      	mov	r2, r7
 800ba94:	4616      	mov	r6, r2
 800ba96:	3201      	adds	r2, #1
 800ba98:	7830      	ldrb	r0, [r6, #0]
 800ba9a:	f7ff ff9b 	bl	800b9d4 <__hexdig_fun>
 800ba9e:	2800      	cmp	r0, #0
 800baa0:	d1f8      	bne.n	800ba94 <__gethex+0x94>
 800baa2:	9901      	ldr	r1, [sp, #4]
 800baa4:	4652      	mov	r2, sl
 800baa6:	4630      	mov	r0, r6
 800baa8:	f001 fb56 	bl	800d158 <strncmp>
 800baac:	b980      	cbnz	r0, 800bad0 <__gethex+0xd0>
 800baae:	b94d      	cbnz	r5, 800bac4 <__gethex+0xc4>
 800bab0:	eb06 050a 	add.w	r5, r6, sl
 800bab4:	462a      	mov	r2, r5
 800bab6:	4616      	mov	r6, r2
 800bab8:	3201      	adds	r2, #1
 800baba:	7830      	ldrb	r0, [r6, #0]
 800babc:	f7ff ff8a 	bl	800b9d4 <__hexdig_fun>
 800bac0:	2800      	cmp	r0, #0
 800bac2:	d1f8      	bne.n	800bab6 <__gethex+0xb6>
 800bac4:	1bad      	subs	r5, r5, r6
 800bac6:	00ad      	lsls	r5, r5, #2
 800bac8:	e004      	b.n	800bad4 <__gethex+0xd4>
 800baca:	2400      	movs	r4, #0
 800bacc:	4625      	mov	r5, r4
 800bace:	e7e0      	b.n	800ba92 <__gethex+0x92>
 800bad0:	2d00      	cmp	r5, #0
 800bad2:	d1f7      	bne.n	800bac4 <__gethex+0xc4>
 800bad4:	7833      	ldrb	r3, [r6, #0]
 800bad6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bada:	2b50      	cmp	r3, #80	; 0x50
 800badc:	d13b      	bne.n	800bb56 <__gethex+0x156>
 800bade:	7873      	ldrb	r3, [r6, #1]
 800bae0:	2b2b      	cmp	r3, #43	; 0x2b
 800bae2:	d02c      	beq.n	800bb3e <__gethex+0x13e>
 800bae4:	2b2d      	cmp	r3, #45	; 0x2d
 800bae6:	d02e      	beq.n	800bb46 <__gethex+0x146>
 800bae8:	1c71      	adds	r1, r6, #1
 800baea:	f04f 0900 	mov.w	r9, #0
 800baee:	7808      	ldrb	r0, [r1, #0]
 800baf0:	f7ff ff70 	bl	800b9d4 <__hexdig_fun>
 800baf4:	1e43      	subs	r3, r0, #1
 800baf6:	b2db      	uxtb	r3, r3
 800baf8:	2b18      	cmp	r3, #24
 800bafa:	d82c      	bhi.n	800bb56 <__gethex+0x156>
 800bafc:	f1a0 0210 	sub.w	r2, r0, #16
 800bb00:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bb04:	f7ff ff66 	bl	800b9d4 <__hexdig_fun>
 800bb08:	1e43      	subs	r3, r0, #1
 800bb0a:	b2db      	uxtb	r3, r3
 800bb0c:	2b18      	cmp	r3, #24
 800bb0e:	d91d      	bls.n	800bb4c <__gethex+0x14c>
 800bb10:	f1b9 0f00 	cmp.w	r9, #0
 800bb14:	d000      	beq.n	800bb18 <__gethex+0x118>
 800bb16:	4252      	negs	r2, r2
 800bb18:	4415      	add	r5, r2
 800bb1a:	f8cb 1000 	str.w	r1, [fp]
 800bb1e:	b1e4      	cbz	r4, 800bb5a <__gethex+0x15a>
 800bb20:	9b00      	ldr	r3, [sp, #0]
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	bf14      	ite	ne
 800bb26:	2700      	movne	r7, #0
 800bb28:	2706      	moveq	r7, #6
 800bb2a:	4638      	mov	r0, r7
 800bb2c:	b009      	add	sp, #36	; 0x24
 800bb2e:	ecbd 8b02 	vpop	{d8}
 800bb32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb36:	463e      	mov	r6, r7
 800bb38:	4625      	mov	r5, r4
 800bb3a:	2401      	movs	r4, #1
 800bb3c:	e7ca      	b.n	800bad4 <__gethex+0xd4>
 800bb3e:	f04f 0900 	mov.w	r9, #0
 800bb42:	1cb1      	adds	r1, r6, #2
 800bb44:	e7d3      	b.n	800baee <__gethex+0xee>
 800bb46:	f04f 0901 	mov.w	r9, #1
 800bb4a:	e7fa      	b.n	800bb42 <__gethex+0x142>
 800bb4c:	230a      	movs	r3, #10
 800bb4e:	fb03 0202 	mla	r2, r3, r2, r0
 800bb52:	3a10      	subs	r2, #16
 800bb54:	e7d4      	b.n	800bb00 <__gethex+0x100>
 800bb56:	4631      	mov	r1, r6
 800bb58:	e7df      	b.n	800bb1a <__gethex+0x11a>
 800bb5a:	1bf3      	subs	r3, r6, r7
 800bb5c:	3b01      	subs	r3, #1
 800bb5e:	4621      	mov	r1, r4
 800bb60:	2b07      	cmp	r3, #7
 800bb62:	dc0b      	bgt.n	800bb7c <__gethex+0x17c>
 800bb64:	ee18 0a10 	vmov	r0, s16
 800bb68:	f000 fa70 	bl	800c04c <_Balloc>
 800bb6c:	4604      	mov	r4, r0
 800bb6e:	b940      	cbnz	r0, 800bb82 <__gethex+0x182>
 800bb70:	4b5d      	ldr	r3, [pc, #372]	; (800bce8 <__gethex+0x2e8>)
 800bb72:	4602      	mov	r2, r0
 800bb74:	21de      	movs	r1, #222	; 0xde
 800bb76:	485d      	ldr	r0, [pc, #372]	; (800bcec <__gethex+0x2ec>)
 800bb78:	f7ff f82e 	bl	800abd8 <__assert_func>
 800bb7c:	3101      	adds	r1, #1
 800bb7e:	105b      	asrs	r3, r3, #1
 800bb80:	e7ee      	b.n	800bb60 <__gethex+0x160>
 800bb82:	f100 0914 	add.w	r9, r0, #20
 800bb86:	f04f 0b00 	mov.w	fp, #0
 800bb8a:	f1ca 0301 	rsb	r3, sl, #1
 800bb8e:	f8cd 9008 	str.w	r9, [sp, #8]
 800bb92:	f8cd b000 	str.w	fp, [sp]
 800bb96:	9306      	str	r3, [sp, #24]
 800bb98:	42b7      	cmp	r7, r6
 800bb9a:	d340      	bcc.n	800bc1e <__gethex+0x21e>
 800bb9c:	9802      	ldr	r0, [sp, #8]
 800bb9e:	9b00      	ldr	r3, [sp, #0]
 800bba0:	f840 3b04 	str.w	r3, [r0], #4
 800bba4:	eba0 0009 	sub.w	r0, r0, r9
 800bba8:	1080      	asrs	r0, r0, #2
 800bbaa:	0146      	lsls	r6, r0, #5
 800bbac:	6120      	str	r0, [r4, #16]
 800bbae:	4618      	mov	r0, r3
 800bbb0:	f000 fb3e 	bl	800c230 <__hi0bits>
 800bbb4:	1a30      	subs	r0, r6, r0
 800bbb6:	f8d8 6000 	ldr.w	r6, [r8]
 800bbba:	42b0      	cmp	r0, r6
 800bbbc:	dd63      	ble.n	800bc86 <__gethex+0x286>
 800bbbe:	1b87      	subs	r7, r0, r6
 800bbc0:	4639      	mov	r1, r7
 800bbc2:	4620      	mov	r0, r4
 800bbc4:	f000 fee2 	bl	800c98c <__any_on>
 800bbc8:	4682      	mov	sl, r0
 800bbca:	b1a8      	cbz	r0, 800bbf8 <__gethex+0x1f8>
 800bbcc:	1e7b      	subs	r3, r7, #1
 800bbce:	1159      	asrs	r1, r3, #5
 800bbd0:	f003 021f 	and.w	r2, r3, #31
 800bbd4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bbd8:	f04f 0a01 	mov.w	sl, #1
 800bbdc:	fa0a f202 	lsl.w	r2, sl, r2
 800bbe0:	420a      	tst	r2, r1
 800bbe2:	d009      	beq.n	800bbf8 <__gethex+0x1f8>
 800bbe4:	4553      	cmp	r3, sl
 800bbe6:	dd05      	ble.n	800bbf4 <__gethex+0x1f4>
 800bbe8:	1eb9      	subs	r1, r7, #2
 800bbea:	4620      	mov	r0, r4
 800bbec:	f000 fece 	bl	800c98c <__any_on>
 800bbf0:	2800      	cmp	r0, #0
 800bbf2:	d145      	bne.n	800bc80 <__gethex+0x280>
 800bbf4:	f04f 0a02 	mov.w	sl, #2
 800bbf8:	4639      	mov	r1, r7
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	f7ff fe98 	bl	800b930 <rshift>
 800bc00:	443d      	add	r5, r7
 800bc02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bc06:	42ab      	cmp	r3, r5
 800bc08:	da4c      	bge.n	800bca4 <__gethex+0x2a4>
 800bc0a:	ee18 0a10 	vmov	r0, s16
 800bc0e:	4621      	mov	r1, r4
 800bc10:	f000 fa5c 	bl	800c0cc <_Bfree>
 800bc14:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bc16:	2300      	movs	r3, #0
 800bc18:	6013      	str	r3, [r2, #0]
 800bc1a:	27a3      	movs	r7, #163	; 0xa3
 800bc1c:	e785      	b.n	800bb2a <__gethex+0x12a>
 800bc1e:	1e73      	subs	r3, r6, #1
 800bc20:	9a05      	ldr	r2, [sp, #20]
 800bc22:	9303      	str	r3, [sp, #12]
 800bc24:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bc28:	4293      	cmp	r3, r2
 800bc2a:	d019      	beq.n	800bc60 <__gethex+0x260>
 800bc2c:	f1bb 0f20 	cmp.w	fp, #32
 800bc30:	d107      	bne.n	800bc42 <__gethex+0x242>
 800bc32:	9b02      	ldr	r3, [sp, #8]
 800bc34:	9a00      	ldr	r2, [sp, #0]
 800bc36:	f843 2b04 	str.w	r2, [r3], #4
 800bc3a:	9302      	str	r3, [sp, #8]
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	9300      	str	r3, [sp, #0]
 800bc40:	469b      	mov	fp, r3
 800bc42:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bc46:	f7ff fec5 	bl	800b9d4 <__hexdig_fun>
 800bc4a:	9b00      	ldr	r3, [sp, #0]
 800bc4c:	f000 000f 	and.w	r0, r0, #15
 800bc50:	fa00 f00b 	lsl.w	r0, r0, fp
 800bc54:	4303      	orrs	r3, r0
 800bc56:	9300      	str	r3, [sp, #0]
 800bc58:	f10b 0b04 	add.w	fp, fp, #4
 800bc5c:	9b03      	ldr	r3, [sp, #12]
 800bc5e:	e00d      	b.n	800bc7c <__gethex+0x27c>
 800bc60:	9b03      	ldr	r3, [sp, #12]
 800bc62:	9a06      	ldr	r2, [sp, #24]
 800bc64:	4413      	add	r3, r2
 800bc66:	42bb      	cmp	r3, r7
 800bc68:	d3e0      	bcc.n	800bc2c <__gethex+0x22c>
 800bc6a:	4618      	mov	r0, r3
 800bc6c:	9901      	ldr	r1, [sp, #4]
 800bc6e:	9307      	str	r3, [sp, #28]
 800bc70:	4652      	mov	r2, sl
 800bc72:	f001 fa71 	bl	800d158 <strncmp>
 800bc76:	9b07      	ldr	r3, [sp, #28]
 800bc78:	2800      	cmp	r0, #0
 800bc7a:	d1d7      	bne.n	800bc2c <__gethex+0x22c>
 800bc7c:	461e      	mov	r6, r3
 800bc7e:	e78b      	b.n	800bb98 <__gethex+0x198>
 800bc80:	f04f 0a03 	mov.w	sl, #3
 800bc84:	e7b8      	b.n	800bbf8 <__gethex+0x1f8>
 800bc86:	da0a      	bge.n	800bc9e <__gethex+0x29e>
 800bc88:	1a37      	subs	r7, r6, r0
 800bc8a:	4621      	mov	r1, r4
 800bc8c:	ee18 0a10 	vmov	r0, s16
 800bc90:	463a      	mov	r2, r7
 800bc92:	f000 fc37 	bl	800c504 <__lshift>
 800bc96:	1bed      	subs	r5, r5, r7
 800bc98:	4604      	mov	r4, r0
 800bc9a:	f100 0914 	add.w	r9, r0, #20
 800bc9e:	f04f 0a00 	mov.w	sl, #0
 800bca2:	e7ae      	b.n	800bc02 <__gethex+0x202>
 800bca4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bca8:	42a8      	cmp	r0, r5
 800bcaa:	dd72      	ble.n	800bd92 <__gethex+0x392>
 800bcac:	1b45      	subs	r5, r0, r5
 800bcae:	42ae      	cmp	r6, r5
 800bcb0:	dc36      	bgt.n	800bd20 <__gethex+0x320>
 800bcb2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bcb6:	2b02      	cmp	r3, #2
 800bcb8:	d02a      	beq.n	800bd10 <__gethex+0x310>
 800bcba:	2b03      	cmp	r3, #3
 800bcbc:	d02c      	beq.n	800bd18 <__gethex+0x318>
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d11c      	bne.n	800bcfc <__gethex+0x2fc>
 800bcc2:	42ae      	cmp	r6, r5
 800bcc4:	d11a      	bne.n	800bcfc <__gethex+0x2fc>
 800bcc6:	2e01      	cmp	r6, #1
 800bcc8:	d112      	bne.n	800bcf0 <__gethex+0x2f0>
 800bcca:	9a04      	ldr	r2, [sp, #16]
 800bccc:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bcd0:	6013      	str	r3, [r2, #0]
 800bcd2:	2301      	movs	r3, #1
 800bcd4:	6123      	str	r3, [r4, #16]
 800bcd6:	f8c9 3000 	str.w	r3, [r9]
 800bcda:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bcdc:	2762      	movs	r7, #98	; 0x62
 800bcde:	601c      	str	r4, [r3, #0]
 800bce0:	e723      	b.n	800bb2a <__gethex+0x12a>
 800bce2:	bf00      	nop
 800bce4:	0800f840 	.word	0x0800f840
 800bce8:	0800f7c9 	.word	0x0800f7c9
 800bcec:	0800f7da 	.word	0x0800f7da
 800bcf0:	1e71      	subs	r1, r6, #1
 800bcf2:	4620      	mov	r0, r4
 800bcf4:	f000 fe4a 	bl	800c98c <__any_on>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1e6      	bne.n	800bcca <__gethex+0x2ca>
 800bcfc:	ee18 0a10 	vmov	r0, s16
 800bd00:	4621      	mov	r1, r4
 800bd02:	f000 f9e3 	bl	800c0cc <_Bfree>
 800bd06:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bd08:	2300      	movs	r3, #0
 800bd0a:	6013      	str	r3, [r2, #0]
 800bd0c:	2750      	movs	r7, #80	; 0x50
 800bd0e:	e70c      	b.n	800bb2a <__gethex+0x12a>
 800bd10:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d1f2      	bne.n	800bcfc <__gethex+0x2fc>
 800bd16:	e7d8      	b.n	800bcca <__gethex+0x2ca>
 800bd18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1d5      	bne.n	800bcca <__gethex+0x2ca>
 800bd1e:	e7ed      	b.n	800bcfc <__gethex+0x2fc>
 800bd20:	1e6f      	subs	r7, r5, #1
 800bd22:	f1ba 0f00 	cmp.w	sl, #0
 800bd26:	d131      	bne.n	800bd8c <__gethex+0x38c>
 800bd28:	b127      	cbz	r7, 800bd34 <__gethex+0x334>
 800bd2a:	4639      	mov	r1, r7
 800bd2c:	4620      	mov	r0, r4
 800bd2e:	f000 fe2d 	bl	800c98c <__any_on>
 800bd32:	4682      	mov	sl, r0
 800bd34:	117b      	asrs	r3, r7, #5
 800bd36:	2101      	movs	r1, #1
 800bd38:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bd3c:	f007 071f 	and.w	r7, r7, #31
 800bd40:	fa01 f707 	lsl.w	r7, r1, r7
 800bd44:	421f      	tst	r7, r3
 800bd46:	4629      	mov	r1, r5
 800bd48:	4620      	mov	r0, r4
 800bd4a:	bf18      	it	ne
 800bd4c:	f04a 0a02 	orrne.w	sl, sl, #2
 800bd50:	1b76      	subs	r6, r6, r5
 800bd52:	f7ff fded 	bl	800b930 <rshift>
 800bd56:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bd5a:	2702      	movs	r7, #2
 800bd5c:	f1ba 0f00 	cmp.w	sl, #0
 800bd60:	d048      	beq.n	800bdf4 <__gethex+0x3f4>
 800bd62:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bd66:	2b02      	cmp	r3, #2
 800bd68:	d015      	beq.n	800bd96 <__gethex+0x396>
 800bd6a:	2b03      	cmp	r3, #3
 800bd6c:	d017      	beq.n	800bd9e <__gethex+0x39e>
 800bd6e:	2b01      	cmp	r3, #1
 800bd70:	d109      	bne.n	800bd86 <__gethex+0x386>
 800bd72:	f01a 0f02 	tst.w	sl, #2
 800bd76:	d006      	beq.n	800bd86 <__gethex+0x386>
 800bd78:	f8d9 0000 	ldr.w	r0, [r9]
 800bd7c:	ea4a 0a00 	orr.w	sl, sl, r0
 800bd80:	f01a 0f01 	tst.w	sl, #1
 800bd84:	d10e      	bne.n	800bda4 <__gethex+0x3a4>
 800bd86:	f047 0710 	orr.w	r7, r7, #16
 800bd8a:	e033      	b.n	800bdf4 <__gethex+0x3f4>
 800bd8c:	f04f 0a01 	mov.w	sl, #1
 800bd90:	e7d0      	b.n	800bd34 <__gethex+0x334>
 800bd92:	2701      	movs	r7, #1
 800bd94:	e7e2      	b.n	800bd5c <__gethex+0x35c>
 800bd96:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bd98:	f1c3 0301 	rsb	r3, r3, #1
 800bd9c:	9315      	str	r3, [sp, #84]	; 0x54
 800bd9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bda0:	2b00      	cmp	r3, #0
 800bda2:	d0f0      	beq.n	800bd86 <__gethex+0x386>
 800bda4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bda8:	f104 0314 	add.w	r3, r4, #20
 800bdac:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bdb0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bdb4:	f04f 0c00 	mov.w	ip, #0
 800bdb8:	4618      	mov	r0, r3
 800bdba:	f853 2b04 	ldr.w	r2, [r3], #4
 800bdbe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bdc2:	d01c      	beq.n	800bdfe <__gethex+0x3fe>
 800bdc4:	3201      	adds	r2, #1
 800bdc6:	6002      	str	r2, [r0, #0]
 800bdc8:	2f02      	cmp	r7, #2
 800bdca:	f104 0314 	add.w	r3, r4, #20
 800bdce:	d13f      	bne.n	800be50 <__gethex+0x450>
 800bdd0:	f8d8 2000 	ldr.w	r2, [r8]
 800bdd4:	3a01      	subs	r2, #1
 800bdd6:	42b2      	cmp	r2, r6
 800bdd8:	d10a      	bne.n	800bdf0 <__gethex+0x3f0>
 800bdda:	1171      	asrs	r1, r6, #5
 800bddc:	2201      	movs	r2, #1
 800bdde:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bde2:	f006 061f 	and.w	r6, r6, #31
 800bde6:	fa02 f606 	lsl.w	r6, r2, r6
 800bdea:	421e      	tst	r6, r3
 800bdec:	bf18      	it	ne
 800bdee:	4617      	movne	r7, r2
 800bdf0:	f047 0720 	orr.w	r7, r7, #32
 800bdf4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bdf6:	601c      	str	r4, [r3, #0]
 800bdf8:	9b04      	ldr	r3, [sp, #16]
 800bdfa:	601d      	str	r5, [r3, #0]
 800bdfc:	e695      	b.n	800bb2a <__gethex+0x12a>
 800bdfe:	4299      	cmp	r1, r3
 800be00:	f843 cc04 	str.w	ip, [r3, #-4]
 800be04:	d8d8      	bhi.n	800bdb8 <__gethex+0x3b8>
 800be06:	68a3      	ldr	r3, [r4, #8]
 800be08:	459b      	cmp	fp, r3
 800be0a:	db19      	blt.n	800be40 <__gethex+0x440>
 800be0c:	6861      	ldr	r1, [r4, #4]
 800be0e:	ee18 0a10 	vmov	r0, s16
 800be12:	3101      	adds	r1, #1
 800be14:	f000 f91a 	bl	800c04c <_Balloc>
 800be18:	4681      	mov	r9, r0
 800be1a:	b918      	cbnz	r0, 800be24 <__gethex+0x424>
 800be1c:	4b1a      	ldr	r3, [pc, #104]	; (800be88 <__gethex+0x488>)
 800be1e:	4602      	mov	r2, r0
 800be20:	2184      	movs	r1, #132	; 0x84
 800be22:	e6a8      	b.n	800bb76 <__gethex+0x176>
 800be24:	6922      	ldr	r2, [r4, #16]
 800be26:	3202      	adds	r2, #2
 800be28:	f104 010c 	add.w	r1, r4, #12
 800be2c:	0092      	lsls	r2, r2, #2
 800be2e:	300c      	adds	r0, #12
 800be30:	f7fd f86a 	bl	8008f08 <memcpy>
 800be34:	4621      	mov	r1, r4
 800be36:	ee18 0a10 	vmov	r0, s16
 800be3a:	f000 f947 	bl	800c0cc <_Bfree>
 800be3e:	464c      	mov	r4, r9
 800be40:	6923      	ldr	r3, [r4, #16]
 800be42:	1c5a      	adds	r2, r3, #1
 800be44:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800be48:	6122      	str	r2, [r4, #16]
 800be4a:	2201      	movs	r2, #1
 800be4c:	615a      	str	r2, [r3, #20]
 800be4e:	e7bb      	b.n	800bdc8 <__gethex+0x3c8>
 800be50:	6922      	ldr	r2, [r4, #16]
 800be52:	455a      	cmp	r2, fp
 800be54:	dd0b      	ble.n	800be6e <__gethex+0x46e>
 800be56:	2101      	movs	r1, #1
 800be58:	4620      	mov	r0, r4
 800be5a:	f7ff fd69 	bl	800b930 <rshift>
 800be5e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be62:	3501      	adds	r5, #1
 800be64:	42ab      	cmp	r3, r5
 800be66:	f6ff aed0 	blt.w	800bc0a <__gethex+0x20a>
 800be6a:	2701      	movs	r7, #1
 800be6c:	e7c0      	b.n	800bdf0 <__gethex+0x3f0>
 800be6e:	f016 061f 	ands.w	r6, r6, #31
 800be72:	d0fa      	beq.n	800be6a <__gethex+0x46a>
 800be74:	4453      	add	r3, sl
 800be76:	f1c6 0620 	rsb	r6, r6, #32
 800be7a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800be7e:	f000 f9d7 	bl	800c230 <__hi0bits>
 800be82:	42b0      	cmp	r0, r6
 800be84:	dbe7      	blt.n	800be56 <__gethex+0x456>
 800be86:	e7f0      	b.n	800be6a <__gethex+0x46a>
 800be88:	0800f7c9 	.word	0x0800f7c9

0800be8c <L_shift>:
 800be8c:	f1c2 0208 	rsb	r2, r2, #8
 800be90:	0092      	lsls	r2, r2, #2
 800be92:	b570      	push	{r4, r5, r6, lr}
 800be94:	f1c2 0620 	rsb	r6, r2, #32
 800be98:	6843      	ldr	r3, [r0, #4]
 800be9a:	6804      	ldr	r4, [r0, #0]
 800be9c:	fa03 f506 	lsl.w	r5, r3, r6
 800bea0:	432c      	orrs	r4, r5
 800bea2:	40d3      	lsrs	r3, r2
 800bea4:	6004      	str	r4, [r0, #0]
 800bea6:	f840 3f04 	str.w	r3, [r0, #4]!
 800beaa:	4288      	cmp	r0, r1
 800beac:	d3f4      	bcc.n	800be98 <L_shift+0xc>
 800beae:	bd70      	pop	{r4, r5, r6, pc}

0800beb0 <__match>:
 800beb0:	b530      	push	{r4, r5, lr}
 800beb2:	6803      	ldr	r3, [r0, #0]
 800beb4:	3301      	adds	r3, #1
 800beb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800beba:	b914      	cbnz	r4, 800bec2 <__match+0x12>
 800bebc:	6003      	str	r3, [r0, #0]
 800bebe:	2001      	movs	r0, #1
 800bec0:	bd30      	pop	{r4, r5, pc}
 800bec2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bec6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800beca:	2d19      	cmp	r5, #25
 800becc:	bf98      	it	ls
 800bece:	3220      	addls	r2, #32
 800bed0:	42a2      	cmp	r2, r4
 800bed2:	d0f0      	beq.n	800beb6 <__match+0x6>
 800bed4:	2000      	movs	r0, #0
 800bed6:	e7f3      	b.n	800bec0 <__match+0x10>

0800bed8 <__hexnan>:
 800bed8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bedc:	680b      	ldr	r3, [r1, #0]
 800bede:	115e      	asrs	r6, r3, #5
 800bee0:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800bee4:	f013 031f 	ands.w	r3, r3, #31
 800bee8:	b087      	sub	sp, #28
 800beea:	bf18      	it	ne
 800beec:	3604      	addne	r6, #4
 800beee:	2500      	movs	r5, #0
 800bef0:	1f37      	subs	r7, r6, #4
 800bef2:	4690      	mov	r8, r2
 800bef4:	6802      	ldr	r2, [r0, #0]
 800bef6:	9301      	str	r3, [sp, #4]
 800bef8:	4682      	mov	sl, r0
 800befa:	f846 5c04 	str.w	r5, [r6, #-4]
 800befe:	46b9      	mov	r9, r7
 800bf00:	463c      	mov	r4, r7
 800bf02:	9502      	str	r5, [sp, #8]
 800bf04:	46ab      	mov	fp, r5
 800bf06:	7851      	ldrb	r1, [r2, #1]
 800bf08:	1c53      	adds	r3, r2, #1
 800bf0a:	9303      	str	r3, [sp, #12]
 800bf0c:	b341      	cbz	r1, 800bf60 <__hexnan+0x88>
 800bf0e:	4608      	mov	r0, r1
 800bf10:	9205      	str	r2, [sp, #20]
 800bf12:	9104      	str	r1, [sp, #16]
 800bf14:	f7ff fd5e 	bl	800b9d4 <__hexdig_fun>
 800bf18:	2800      	cmp	r0, #0
 800bf1a:	d14f      	bne.n	800bfbc <__hexnan+0xe4>
 800bf1c:	9904      	ldr	r1, [sp, #16]
 800bf1e:	9a05      	ldr	r2, [sp, #20]
 800bf20:	2920      	cmp	r1, #32
 800bf22:	d818      	bhi.n	800bf56 <__hexnan+0x7e>
 800bf24:	9b02      	ldr	r3, [sp, #8]
 800bf26:	459b      	cmp	fp, r3
 800bf28:	dd13      	ble.n	800bf52 <__hexnan+0x7a>
 800bf2a:	454c      	cmp	r4, r9
 800bf2c:	d206      	bcs.n	800bf3c <__hexnan+0x64>
 800bf2e:	2d07      	cmp	r5, #7
 800bf30:	dc04      	bgt.n	800bf3c <__hexnan+0x64>
 800bf32:	462a      	mov	r2, r5
 800bf34:	4649      	mov	r1, r9
 800bf36:	4620      	mov	r0, r4
 800bf38:	f7ff ffa8 	bl	800be8c <L_shift>
 800bf3c:	4544      	cmp	r4, r8
 800bf3e:	d950      	bls.n	800bfe2 <__hexnan+0x10a>
 800bf40:	2300      	movs	r3, #0
 800bf42:	f1a4 0904 	sub.w	r9, r4, #4
 800bf46:	f844 3c04 	str.w	r3, [r4, #-4]
 800bf4a:	f8cd b008 	str.w	fp, [sp, #8]
 800bf4e:	464c      	mov	r4, r9
 800bf50:	461d      	mov	r5, r3
 800bf52:	9a03      	ldr	r2, [sp, #12]
 800bf54:	e7d7      	b.n	800bf06 <__hexnan+0x2e>
 800bf56:	2929      	cmp	r1, #41	; 0x29
 800bf58:	d156      	bne.n	800c008 <__hexnan+0x130>
 800bf5a:	3202      	adds	r2, #2
 800bf5c:	f8ca 2000 	str.w	r2, [sl]
 800bf60:	f1bb 0f00 	cmp.w	fp, #0
 800bf64:	d050      	beq.n	800c008 <__hexnan+0x130>
 800bf66:	454c      	cmp	r4, r9
 800bf68:	d206      	bcs.n	800bf78 <__hexnan+0xa0>
 800bf6a:	2d07      	cmp	r5, #7
 800bf6c:	dc04      	bgt.n	800bf78 <__hexnan+0xa0>
 800bf6e:	462a      	mov	r2, r5
 800bf70:	4649      	mov	r1, r9
 800bf72:	4620      	mov	r0, r4
 800bf74:	f7ff ff8a 	bl	800be8c <L_shift>
 800bf78:	4544      	cmp	r4, r8
 800bf7a:	d934      	bls.n	800bfe6 <__hexnan+0x10e>
 800bf7c:	f1a8 0204 	sub.w	r2, r8, #4
 800bf80:	4623      	mov	r3, r4
 800bf82:	f853 1b04 	ldr.w	r1, [r3], #4
 800bf86:	f842 1f04 	str.w	r1, [r2, #4]!
 800bf8a:	429f      	cmp	r7, r3
 800bf8c:	d2f9      	bcs.n	800bf82 <__hexnan+0xaa>
 800bf8e:	1b3b      	subs	r3, r7, r4
 800bf90:	f023 0303 	bic.w	r3, r3, #3
 800bf94:	3304      	adds	r3, #4
 800bf96:	3401      	adds	r4, #1
 800bf98:	3e03      	subs	r6, #3
 800bf9a:	42b4      	cmp	r4, r6
 800bf9c:	bf88      	it	hi
 800bf9e:	2304      	movhi	r3, #4
 800bfa0:	4443      	add	r3, r8
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	f843 2b04 	str.w	r2, [r3], #4
 800bfa8:	429f      	cmp	r7, r3
 800bfaa:	d2fb      	bcs.n	800bfa4 <__hexnan+0xcc>
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	b91b      	cbnz	r3, 800bfb8 <__hexnan+0xe0>
 800bfb0:	4547      	cmp	r7, r8
 800bfb2:	d127      	bne.n	800c004 <__hexnan+0x12c>
 800bfb4:	2301      	movs	r3, #1
 800bfb6:	603b      	str	r3, [r7, #0]
 800bfb8:	2005      	movs	r0, #5
 800bfba:	e026      	b.n	800c00a <__hexnan+0x132>
 800bfbc:	3501      	adds	r5, #1
 800bfbe:	2d08      	cmp	r5, #8
 800bfc0:	f10b 0b01 	add.w	fp, fp, #1
 800bfc4:	dd06      	ble.n	800bfd4 <__hexnan+0xfc>
 800bfc6:	4544      	cmp	r4, r8
 800bfc8:	d9c3      	bls.n	800bf52 <__hexnan+0x7a>
 800bfca:	2300      	movs	r3, #0
 800bfcc:	f844 3c04 	str.w	r3, [r4, #-4]
 800bfd0:	2501      	movs	r5, #1
 800bfd2:	3c04      	subs	r4, #4
 800bfd4:	6822      	ldr	r2, [r4, #0]
 800bfd6:	f000 000f 	and.w	r0, r0, #15
 800bfda:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800bfde:	6022      	str	r2, [r4, #0]
 800bfe0:	e7b7      	b.n	800bf52 <__hexnan+0x7a>
 800bfe2:	2508      	movs	r5, #8
 800bfe4:	e7b5      	b.n	800bf52 <__hexnan+0x7a>
 800bfe6:	9b01      	ldr	r3, [sp, #4]
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	d0df      	beq.n	800bfac <__hexnan+0xd4>
 800bfec:	f04f 32ff 	mov.w	r2, #4294967295
 800bff0:	f1c3 0320 	rsb	r3, r3, #32
 800bff4:	fa22 f303 	lsr.w	r3, r2, r3
 800bff8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800bffc:	401a      	ands	r2, r3
 800bffe:	f846 2c04 	str.w	r2, [r6, #-4]
 800c002:	e7d3      	b.n	800bfac <__hexnan+0xd4>
 800c004:	3f04      	subs	r7, #4
 800c006:	e7d1      	b.n	800bfac <__hexnan+0xd4>
 800c008:	2004      	movs	r0, #4
 800c00a:	b007      	add	sp, #28
 800c00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c010 <_localeconv_r>:
 800c010:	4800      	ldr	r0, [pc, #0]	; (800c014 <_localeconv_r+0x4>)
 800c012:	4770      	bx	lr
 800c014:	200001cc 	.word	0x200001cc

0800c018 <malloc>:
 800c018:	4b02      	ldr	r3, [pc, #8]	; (800c024 <malloc+0xc>)
 800c01a:	4601      	mov	r1, r0
 800c01c:	6818      	ldr	r0, [r3, #0]
 800c01e:	f000 bd59 	b.w	800cad4 <_malloc_r>
 800c022:	bf00      	nop
 800c024:	20000074 	.word	0x20000074

0800c028 <__ascii_mbtowc>:
 800c028:	b082      	sub	sp, #8
 800c02a:	b901      	cbnz	r1, 800c02e <__ascii_mbtowc+0x6>
 800c02c:	a901      	add	r1, sp, #4
 800c02e:	b142      	cbz	r2, 800c042 <__ascii_mbtowc+0x1a>
 800c030:	b14b      	cbz	r3, 800c046 <__ascii_mbtowc+0x1e>
 800c032:	7813      	ldrb	r3, [r2, #0]
 800c034:	600b      	str	r3, [r1, #0]
 800c036:	7812      	ldrb	r2, [r2, #0]
 800c038:	1e10      	subs	r0, r2, #0
 800c03a:	bf18      	it	ne
 800c03c:	2001      	movne	r0, #1
 800c03e:	b002      	add	sp, #8
 800c040:	4770      	bx	lr
 800c042:	4610      	mov	r0, r2
 800c044:	e7fb      	b.n	800c03e <__ascii_mbtowc+0x16>
 800c046:	f06f 0001 	mvn.w	r0, #1
 800c04a:	e7f8      	b.n	800c03e <__ascii_mbtowc+0x16>

0800c04c <_Balloc>:
 800c04c:	b570      	push	{r4, r5, r6, lr}
 800c04e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c050:	4604      	mov	r4, r0
 800c052:	460d      	mov	r5, r1
 800c054:	b976      	cbnz	r6, 800c074 <_Balloc+0x28>
 800c056:	2010      	movs	r0, #16
 800c058:	f7ff ffde 	bl	800c018 <malloc>
 800c05c:	4602      	mov	r2, r0
 800c05e:	6260      	str	r0, [r4, #36]	; 0x24
 800c060:	b920      	cbnz	r0, 800c06c <_Balloc+0x20>
 800c062:	4b18      	ldr	r3, [pc, #96]	; (800c0c4 <_Balloc+0x78>)
 800c064:	4818      	ldr	r0, [pc, #96]	; (800c0c8 <_Balloc+0x7c>)
 800c066:	2166      	movs	r1, #102	; 0x66
 800c068:	f7fe fdb6 	bl	800abd8 <__assert_func>
 800c06c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c070:	6006      	str	r6, [r0, #0]
 800c072:	60c6      	str	r6, [r0, #12]
 800c074:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c076:	68f3      	ldr	r3, [r6, #12]
 800c078:	b183      	cbz	r3, 800c09c <_Balloc+0x50>
 800c07a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c07c:	68db      	ldr	r3, [r3, #12]
 800c07e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c082:	b9b8      	cbnz	r0, 800c0b4 <_Balloc+0x68>
 800c084:	2101      	movs	r1, #1
 800c086:	fa01 f605 	lsl.w	r6, r1, r5
 800c08a:	1d72      	adds	r2, r6, #5
 800c08c:	0092      	lsls	r2, r2, #2
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fc9d 	bl	800c9ce <_calloc_r>
 800c094:	b160      	cbz	r0, 800c0b0 <_Balloc+0x64>
 800c096:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c09a:	e00e      	b.n	800c0ba <_Balloc+0x6e>
 800c09c:	2221      	movs	r2, #33	; 0x21
 800c09e:	2104      	movs	r1, #4
 800c0a0:	4620      	mov	r0, r4
 800c0a2:	f000 fc94 	bl	800c9ce <_calloc_r>
 800c0a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c0a8:	60f0      	str	r0, [r6, #12]
 800c0aa:	68db      	ldr	r3, [r3, #12]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d1e4      	bne.n	800c07a <_Balloc+0x2e>
 800c0b0:	2000      	movs	r0, #0
 800c0b2:	bd70      	pop	{r4, r5, r6, pc}
 800c0b4:	6802      	ldr	r2, [r0, #0]
 800c0b6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c0c0:	e7f7      	b.n	800c0b2 <_Balloc+0x66>
 800c0c2:	bf00      	nop
 800c0c4:	0800f5b0 	.word	0x0800f5b0
 800c0c8:	0800f854 	.word	0x0800f854

0800c0cc <_Bfree>:
 800c0cc:	b570      	push	{r4, r5, r6, lr}
 800c0ce:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c0d0:	4605      	mov	r5, r0
 800c0d2:	460c      	mov	r4, r1
 800c0d4:	b976      	cbnz	r6, 800c0f4 <_Bfree+0x28>
 800c0d6:	2010      	movs	r0, #16
 800c0d8:	f7ff ff9e 	bl	800c018 <malloc>
 800c0dc:	4602      	mov	r2, r0
 800c0de:	6268      	str	r0, [r5, #36]	; 0x24
 800c0e0:	b920      	cbnz	r0, 800c0ec <_Bfree+0x20>
 800c0e2:	4b09      	ldr	r3, [pc, #36]	; (800c108 <_Bfree+0x3c>)
 800c0e4:	4809      	ldr	r0, [pc, #36]	; (800c10c <_Bfree+0x40>)
 800c0e6:	218a      	movs	r1, #138	; 0x8a
 800c0e8:	f7fe fd76 	bl	800abd8 <__assert_func>
 800c0ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c0f0:	6006      	str	r6, [r0, #0]
 800c0f2:	60c6      	str	r6, [r0, #12]
 800c0f4:	b13c      	cbz	r4, 800c106 <_Bfree+0x3a>
 800c0f6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c0f8:	6862      	ldr	r2, [r4, #4]
 800c0fa:	68db      	ldr	r3, [r3, #12]
 800c0fc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c100:	6021      	str	r1, [r4, #0]
 800c102:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c106:	bd70      	pop	{r4, r5, r6, pc}
 800c108:	0800f5b0 	.word	0x0800f5b0
 800c10c:	0800f854 	.word	0x0800f854

0800c110 <__multadd>:
 800c110:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c114:	690d      	ldr	r5, [r1, #16]
 800c116:	4607      	mov	r7, r0
 800c118:	460c      	mov	r4, r1
 800c11a:	461e      	mov	r6, r3
 800c11c:	f101 0c14 	add.w	ip, r1, #20
 800c120:	2000      	movs	r0, #0
 800c122:	f8dc 3000 	ldr.w	r3, [ip]
 800c126:	b299      	uxth	r1, r3
 800c128:	fb02 6101 	mla	r1, r2, r1, r6
 800c12c:	0c1e      	lsrs	r6, r3, #16
 800c12e:	0c0b      	lsrs	r3, r1, #16
 800c130:	fb02 3306 	mla	r3, r2, r6, r3
 800c134:	b289      	uxth	r1, r1
 800c136:	3001      	adds	r0, #1
 800c138:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c13c:	4285      	cmp	r5, r0
 800c13e:	f84c 1b04 	str.w	r1, [ip], #4
 800c142:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c146:	dcec      	bgt.n	800c122 <__multadd+0x12>
 800c148:	b30e      	cbz	r6, 800c18e <__multadd+0x7e>
 800c14a:	68a3      	ldr	r3, [r4, #8]
 800c14c:	42ab      	cmp	r3, r5
 800c14e:	dc19      	bgt.n	800c184 <__multadd+0x74>
 800c150:	6861      	ldr	r1, [r4, #4]
 800c152:	4638      	mov	r0, r7
 800c154:	3101      	adds	r1, #1
 800c156:	f7ff ff79 	bl	800c04c <_Balloc>
 800c15a:	4680      	mov	r8, r0
 800c15c:	b928      	cbnz	r0, 800c16a <__multadd+0x5a>
 800c15e:	4602      	mov	r2, r0
 800c160:	4b0c      	ldr	r3, [pc, #48]	; (800c194 <__multadd+0x84>)
 800c162:	480d      	ldr	r0, [pc, #52]	; (800c198 <__multadd+0x88>)
 800c164:	21b5      	movs	r1, #181	; 0xb5
 800c166:	f7fe fd37 	bl	800abd8 <__assert_func>
 800c16a:	6922      	ldr	r2, [r4, #16]
 800c16c:	3202      	adds	r2, #2
 800c16e:	f104 010c 	add.w	r1, r4, #12
 800c172:	0092      	lsls	r2, r2, #2
 800c174:	300c      	adds	r0, #12
 800c176:	f7fc fec7 	bl	8008f08 <memcpy>
 800c17a:	4621      	mov	r1, r4
 800c17c:	4638      	mov	r0, r7
 800c17e:	f7ff ffa5 	bl	800c0cc <_Bfree>
 800c182:	4644      	mov	r4, r8
 800c184:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c188:	3501      	adds	r5, #1
 800c18a:	615e      	str	r6, [r3, #20]
 800c18c:	6125      	str	r5, [r4, #16]
 800c18e:	4620      	mov	r0, r4
 800c190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c194:	0800f7c9 	.word	0x0800f7c9
 800c198:	0800f854 	.word	0x0800f854

0800c19c <__s2b>:
 800c19c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1a0:	460c      	mov	r4, r1
 800c1a2:	4615      	mov	r5, r2
 800c1a4:	461f      	mov	r7, r3
 800c1a6:	2209      	movs	r2, #9
 800c1a8:	3308      	adds	r3, #8
 800c1aa:	4606      	mov	r6, r0
 800c1ac:	fb93 f3f2 	sdiv	r3, r3, r2
 800c1b0:	2100      	movs	r1, #0
 800c1b2:	2201      	movs	r2, #1
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	db09      	blt.n	800c1cc <__s2b+0x30>
 800c1b8:	4630      	mov	r0, r6
 800c1ba:	f7ff ff47 	bl	800c04c <_Balloc>
 800c1be:	b940      	cbnz	r0, 800c1d2 <__s2b+0x36>
 800c1c0:	4602      	mov	r2, r0
 800c1c2:	4b19      	ldr	r3, [pc, #100]	; (800c228 <__s2b+0x8c>)
 800c1c4:	4819      	ldr	r0, [pc, #100]	; (800c22c <__s2b+0x90>)
 800c1c6:	21ce      	movs	r1, #206	; 0xce
 800c1c8:	f7fe fd06 	bl	800abd8 <__assert_func>
 800c1cc:	0052      	lsls	r2, r2, #1
 800c1ce:	3101      	adds	r1, #1
 800c1d0:	e7f0      	b.n	800c1b4 <__s2b+0x18>
 800c1d2:	9b08      	ldr	r3, [sp, #32]
 800c1d4:	6143      	str	r3, [r0, #20]
 800c1d6:	2d09      	cmp	r5, #9
 800c1d8:	f04f 0301 	mov.w	r3, #1
 800c1dc:	6103      	str	r3, [r0, #16]
 800c1de:	dd16      	ble.n	800c20e <__s2b+0x72>
 800c1e0:	f104 0909 	add.w	r9, r4, #9
 800c1e4:	46c8      	mov	r8, r9
 800c1e6:	442c      	add	r4, r5
 800c1e8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c1ec:	4601      	mov	r1, r0
 800c1ee:	3b30      	subs	r3, #48	; 0x30
 800c1f0:	220a      	movs	r2, #10
 800c1f2:	4630      	mov	r0, r6
 800c1f4:	f7ff ff8c 	bl	800c110 <__multadd>
 800c1f8:	45a0      	cmp	r8, r4
 800c1fa:	d1f5      	bne.n	800c1e8 <__s2b+0x4c>
 800c1fc:	f1a5 0408 	sub.w	r4, r5, #8
 800c200:	444c      	add	r4, r9
 800c202:	1b2d      	subs	r5, r5, r4
 800c204:	1963      	adds	r3, r4, r5
 800c206:	42bb      	cmp	r3, r7
 800c208:	db04      	blt.n	800c214 <__s2b+0x78>
 800c20a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c20e:	340a      	adds	r4, #10
 800c210:	2509      	movs	r5, #9
 800c212:	e7f6      	b.n	800c202 <__s2b+0x66>
 800c214:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c218:	4601      	mov	r1, r0
 800c21a:	3b30      	subs	r3, #48	; 0x30
 800c21c:	220a      	movs	r2, #10
 800c21e:	4630      	mov	r0, r6
 800c220:	f7ff ff76 	bl	800c110 <__multadd>
 800c224:	e7ee      	b.n	800c204 <__s2b+0x68>
 800c226:	bf00      	nop
 800c228:	0800f7c9 	.word	0x0800f7c9
 800c22c:	0800f854 	.word	0x0800f854

0800c230 <__hi0bits>:
 800c230:	0c03      	lsrs	r3, r0, #16
 800c232:	041b      	lsls	r3, r3, #16
 800c234:	b9d3      	cbnz	r3, 800c26c <__hi0bits+0x3c>
 800c236:	0400      	lsls	r0, r0, #16
 800c238:	2310      	movs	r3, #16
 800c23a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c23e:	bf04      	itt	eq
 800c240:	0200      	lsleq	r0, r0, #8
 800c242:	3308      	addeq	r3, #8
 800c244:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c248:	bf04      	itt	eq
 800c24a:	0100      	lsleq	r0, r0, #4
 800c24c:	3304      	addeq	r3, #4
 800c24e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c252:	bf04      	itt	eq
 800c254:	0080      	lsleq	r0, r0, #2
 800c256:	3302      	addeq	r3, #2
 800c258:	2800      	cmp	r0, #0
 800c25a:	db05      	blt.n	800c268 <__hi0bits+0x38>
 800c25c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c260:	f103 0301 	add.w	r3, r3, #1
 800c264:	bf08      	it	eq
 800c266:	2320      	moveq	r3, #32
 800c268:	4618      	mov	r0, r3
 800c26a:	4770      	bx	lr
 800c26c:	2300      	movs	r3, #0
 800c26e:	e7e4      	b.n	800c23a <__hi0bits+0xa>

0800c270 <__lo0bits>:
 800c270:	6803      	ldr	r3, [r0, #0]
 800c272:	f013 0207 	ands.w	r2, r3, #7
 800c276:	4601      	mov	r1, r0
 800c278:	d00b      	beq.n	800c292 <__lo0bits+0x22>
 800c27a:	07da      	lsls	r2, r3, #31
 800c27c:	d423      	bmi.n	800c2c6 <__lo0bits+0x56>
 800c27e:	0798      	lsls	r0, r3, #30
 800c280:	bf49      	itett	mi
 800c282:	085b      	lsrmi	r3, r3, #1
 800c284:	089b      	lsrpl	r3, r3, #2
 800c286:	2001      	movmi	r0, #1
 800c288:	600b      	strmi	r3, [r1, #0]
 800c28a:	bf5c      	itt	pl
 800c28c:	600b      	strpl	r3, [r1, #0]
 800c28e:	2002      	movpl	r0, #2
 800c290:	4770      	bx	lr
 800c292:	b298      	uxth	r0, r3
 800c294:	b9a8      	cbnz	r0, 800c2c2 <__lo0bits+0x52>
 800c296:	0c1b      	lsrs	r3, r3, #16
 800c298:	2010      	movs	r0, #16
 800c29a:	b2da      	uxtb	r2, r3
 800c29c:	b90a      	cbnz	r2, 800c2a2 <__lo0bits+0x32>
 800c29e:	3008      	adds	r0, #8
 800c2a0:	0a1b      	lsrs	r3, r3, #8
 800c2a2:	071a      	lsls	r2, r3, #28
 800c2a4:	bf04      	itt	eq
 800c2a6:	091b      	lsreq	r3, r3, #4
 800c2a8:	3004      	addeq	r0, #4
 800c2aa:	079a      	lsls	r2, r3, #30
 800c2ac:	bf04      	itt	eq
 800c2ae:	089b      	lsreq	r3, r3, #2
 800c2b0:	3002      	addeq	r0, #2
 800c2b2:	07da      	lsls	r2, r3, #31
 800c2b4:	d403      	bmi.n	800c2be <__lo0bits+0x4e>
 800c2b6:	085b      	lsrs	r3, r3, #1
 800c2b8:	f100 0001 	add.w	r0, r0, #1
 800c2bc:	d005      	beq.n	800c2ca <__lo0bits+0x5a>
 800c2be:	600b      	str	r3, [r1, #0]
 800c2c0:	4770      	bx	lr
 800c2c2:	4610      	mov	r0, r2
 800c2c4:	e7e9      	b.n	800c29a <__lo0bits+0x2a>
 800c2c6:	2000      	movs	r0, #0
 800c2c8:	4770      	bx	lr
 800c2ca:	2020      	movs	r0, #32
 800c2cc:	4770      	bx	lr
	...

0800c2d0 <__i2b>:
 800c2d0:	b510      	push	{r4, lr}
 800c2d2:	460c      	mov	r4, r1
 800c2d4:	2101      	movs	r1, #1
 800c2d6:	f7ff feb9 	bl	800c04c <_Balloc>
 800c2da:	4602      	mov	r2, r0
 800c2dc:	b928      	cbnz	r0, 800c2ea <__i2b+0x1a>
 800c2de:	4b05      	ldr	r3, [pc, #20]	; (800c2f4 <__i2b+0x24>)
 800c2e0:	4805      	ldr	r0, [pc, #20]	; (800c2f8 <__i2b+0x28>)
 800c2e2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c2e6:	f7fe fc77 	bl	800abd8 <__assert_func>
 800c2ea:	2301      	movs	r3, #1
 800c2ec:	6144      	str	r4, [r0, #20]
 800c2ee:	6103      	str	r3, [r0, #16]
 800c2f0:	bd10      	pop	{r4, pc}
 800c2f2:	bf00      	nop
 800c2f4:	0800f7c9 	.word	0x0800f7c9
 800c2f8:	0800f854 	.word	0x0800f854

0800c2fc <__multiply>:
 800c2fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c300:	4691      	mov	r9, r2
 800c302:	690a      	ldr	r2, [r1, #16]
 800c304:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c308:	429a      	cmp	r2, r3
 800c30a:	bfb8      	it	lt
 800c30c:	460b      	movlt	r3, r1
 800c30e:	460c      	mov	r4, r1
 800c310:	bfbc      	itt	lt
 800c312:	464c      	movlt	r4, r9
 800c314:	4699      	movlt	r9, r3
 800c316:	6927      	ldr	r7, [r4, #16]
 800c318:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c31c:	68a3      	ldr	r3, [r4, #8]
 800c31e:	6861      	ldr	r1, [r4, #4]
 800c320:	eb07 060a 	add.w	r6, r7, sl
 800c324:	42b3      	cmp	r3, r6
 800c326:	b085      	sub	sp, #20
 800c328:	bfb8      	it	lt
 800c32a:	3101      	addlt	r1, #1
 800c32c:	f7ff fe8e 	bl	800c04c <_Balloc>
 800c330:	b930      	cbnz	r0, 800c340 <__multiply+0x44>
 800c332:	4602      	mov	r2, r0
 800c334:	4b44      	ldr	r3, [pc, #272]	; (800c448 <__multiply+0x14c>)
 800c336:	4845      	ldr	r0, [pc, #276]	; (800c44c <__multiply+0x150>)
 800c338:	f240 115d 	movw	r1, #349	; 0x15d
 800c33c:	f7fe fc4c 	bl	800abd8 <__assert_func>
 800c340:	f100 0514 	add.w	r5, r0, #20
 800c344:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c348:	462b      	mov	r3, r5
 800c34a:	2200      	movs	r2, #0
 800c34c:	4543      	cmp	r3, r8
 800c34e:	d321      	bcc.n	800c394 <__multiply+0x98>
 800c350:	f104 0314 	add.w	r3, r4, #20
 800c354:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c358:	f109 0314 	add.w	r3, r9, #20
 800c35c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c360:	9202      	str	r2, [sp, #8]
 800c362:	1b3a      	subs	r2, r7, r4
 800c364:	3a15      	subs	r2, #21
 800c366:	f022 0203 	bic.w	r2, r2, #3
 800c36a:	3204      	adds	r2, #4
 800c36c:	f104 0115 	add.w	r1, r4, #21
 800c370:	428f      	cmp	r7, r1
 800c372:	bf38      	it	cc
 800c374:	2204      	movcc	r2, #4
 800c376:	9201      	str	r2, [sp, #4]
 800c378:	9a02      	ldr	r2, [sp, #8]
 800c37a:	9303      	str	r3, [sp, #12]
 800c37c:	429a      	cmp	r2, r3
 800c37e:	d80c      	bhi.n	800c39a <__multiply+0x9e>
 800c380:	2e00      	cmp	r6, #0
 800c382:	dd03      	ble.n	800c38c <__multiply+0x90>
 800c384:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d05a      	beq.n	800c442 <__multiply+0x146>
 800c38c:	6106      	str	r6, [r0, #16]
 800c38e:	b005      	add	sp, #20
 800c390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c394:	f843 2b04 	str.w	r2, [r3], #4
 800c398:	e7d8      	b.n	800c34c <__multiply+0x50>
 800c39a:	f8b3 a000 	ldrh.w	sl, [r3]
 800c39e:	f1ba 0f00 	cmp.w	sl, #0
 800c3a2:	d024      	beq.n	800c3ee <__multiply+0xf2>
 800c3a4:	f104 0e14 	add.w	lr, r4, #20
 800c3a8:	46a9      	mov	r9, r5
 800c3aa:	f04f 0c00 	mov.w	ip, #0
 800c3ae:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c3b2:	f8d9 1000 	ldr.w	r1, [r9]
 800c3b6:	fa1f fb82 	uxth.w	fp, r2
 800c3ba:	b289      	uxth	r1, r1
 800c3bc:	fb0a 110b 	mla	r1, sl, fp, r1
 800c3c0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c3c4:	f8d9 2000 	ldr.w	r2, [r9]
 800c3c8:	4461      	add	r1, ip
 800c3ca:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3ce:	fb0a c20b 	mla	r2, sl, fp, ip
 800c3d2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c3d6:	b289      	uxth	r1, r1
 800c3d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c3dc:	4577      	cmp	r7, lr
 800c3de:	f849 1b04 	str.w	r1, [r9], #4
 800c3e2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c3e6:	d8e2      	bhi.n	800c3ae <__multiply+0xb2>
 800c3e8:	9a01      	ldr	r2, [sp, #4]
 800c3ea:	f845 c002 	str.w	ip, [r5, r2]
 800c3ee:	9a03      	ldr	r2, [sp, #12]
 800c3f0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c3f4:	3304      	adds	r3, #4
 800c3f6:	f1b9 0f00 	cmp.w	r9, #0
 800c3fa:	d020      	beq.n	800c43e <__multiply+0x142>
 800c3fc:	6829      	ldr	r1, [r5, #0]
 800c3fe:	f104 0c14 	add.w	ip, r4, #20
 800c402:	46ae      	mov	lr, r5
 800c404:	f04f 0a00 	mov.w	sl, #0
 800c408:	f8bc b000 	ldrh.w	fp, [ip]
 800c40c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c410:	fb09 220b 	mla	r2, r9, fp, r2
 800c414:	4492      	add	sl, r2
 800c416:	b289      	uxth	r1, r1
 800c418:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c41c:	f84e 1b04 	str.w	r1, [lr], #4
 800c420:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c424:	f8be 1000 	ldrh.w	r1, [lr]
 800c428:	0c12      	lsrs	r2, r2, #16
 800c42a:	fb09 1102 	mla	r1, r9, r2, r1
 800c42e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c432:	4567      	cmp	r7, ip
 800c434:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c438:	d8e6      	bhi.n	800c408 <__multiply+0x10c>
 800c43a:	9a01      	ldr	r2, [sp, #4]
 800c43c:	50a9      	str	r1, [r5, r2]
 800c43e:	3504      	adds	r5, #4
 800c440:	e79a      	b.n	800c378 <__multiply+0x7c>
 800c442:	3e01      	subs	r6, #1
 800c444:	e79c      	b.n	800c380 <__multiply+0x84>
 800c446:	bf00      	nop
 800c448:	0800f7c9 	.word	0x0800f7c9
 800c44c:	0800f854 	.word	0x0800f854

0800c450 <__pow5mult>:
 800c450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c454:	4615      	mov	r5, r2
 800c456:	f012 0203 	ands.w	r2, r2, #3
 800c45a:	4606      	mov	r6, r0
 800c45c:	460f      	mov	r7, r1
 800c45e:	d007      	beq.n	800c470 <__pow5mult+0x20>
 800c460:	4c25      	ldr	r4, [pc, #148]	; (800c4f8 <__pow5mult+0xa8>)
 800c462:	3a01      	subs	r2, #1
 800c464:	2300      	movs	r3, #0
 800c466:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c46a:	f7ff fe51 	bl	800c110 <__multadd>
 800c46e:	4607      	mov	r7, r0
 800c470:	10ad      	asrs	r5, r5, #2
 800c472:	d03d      	beq.n	800c4f0 <__pow5mult+0xa0>
 800c474:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c476:	b97c      	cbnz	r4, 800c498 <__pow5mult+0x48>
 800c478:	2010      	movs	r0, #16
 800c47a:	f7ff fdcd 	bl	800c018 <malloc>
 800c47e:	4602      	mov	r2, r0
 800c480:	6270      	str	r0, [r6, #36]	; 0x24
 800c482:	b928      	cbnz	r0, 800c490 <__pow5mult+0x40>
 800c484:	4b1d      	ldr	r3, [pc, #116]	; (800c4fc <__pow5mult+0xac>)
 800c486:	481e      	ldr	r0, [pc, #120]	; (800c500 <__pow5mult+0xb0>)
 800c488:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c48c:	f7fe fba4 	bl	800abd8 <__assert_func>
 800c490:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c494:	6004      	str	r4, [r0, #0]
 800c496:	60c4      	str	r4, [r0, #12]
 800c498:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c49c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c4a0:	b94c      	cbnz	r4, 800c4b6 <__pow5mult+0x66>
 800c4a2:	f240 2171 	movw	r1, #625	; 0x271
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f7ff ff12 	bl	800c2d0 <__i2b>
 800c4ac:	2300      	movs	r3, #0
 800c4ae:	f8c8 0008 	str.w	r0, [r8, #8]
 800c4b2:	4604      	mov	r4, r0
 800c4b4:	6003      	str	r3, [r0, #0]
 800c4b6:	f04f 0900 	mov.w	r9, #0
 800c4ba:	07eb      	lsls	r3, r5, #31
 800c4bc:	d50a      	bpl.n	800c4d4 <__pow5mult+0x84>
 800c4be:	4639      	mov	r1, r7
 800c4c0:	4622      	mov	r2, r4
 800c4c2:	4630      	mov	r0, r6
 800c4c4:	f7ff ff1a 	bl	800c2fc <__multiply>
 800c4c8:	4639      	mov	r1, r7
 800c4ca:	4680      	mov	r8, r0
 800c4cc:	4630      	mov	r0, r6
 800c4ce:	f7ff fdfd 	bl	800c0cc <_Bfree>
 800c4d2:	4647      	mov	r7, r8
 800c4d4:	106d      	asrs	r5, r5, #1
 800c4d6:	d00b      	beq.n	800c4f0 <__pow5mult+0xa0>
 800c4d8:	6820      	ldr	r0, [r4, #0]
 800c4da:	b938      	cbnz	r0, 800c4ec <__pow5mult+0x9c>
 800c4dc:	4622      	mov	r2, r4
 800c4de:	4621      	mov	r1, r4
 800c4e0:	4630      	mov	r0, r6
 800c4e2:	f7ff ff0b 	bl	800c2fc <__multiply>
 800c4e6:	6020      	str	r0, [r4, #0]
 800c4e8:	f8c0 9000 	str.w	r9, [r0]
 800c4ec:	4604      	mov	r4, r0
 800c4ee:	e7e4      	b.n	800c4ba <__pow5mult+0x6a>
 800c4f0:	4638      	mov	r0, r7
 800c4f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4f6:	bf00      	nop
 800c4f8:	0800f9a0 	.word	0x0800f9a0
 800c4fc:	0800f5b0 	.word	0x0800f5b0
 800c500:	0800f854 	.word	0x0800f854

0800c504 <__lshift>:
 800c504:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c508:	460c      	mov	r4, r1
 800c50a:	6849      	ldr	r1, [r1, #4]
 800c50c:	6923      	ldr	r3, [r4, #16]
 800c50e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c512:	68a3      	ldr	r3, [r4, #8]
 800c514:	4607      	mov	r7, r0
 800c516:	4691      	mov	r9, r2
 800c518:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c51c:	f108 0601 	add.w	r6, r8, #1
 800c520:	42b3      	cmp	r3, r6
 800c522:	db0b      	blt.n	800c53c <__lshift+0x38>
 800c524:	4638      	mov	r0, r7
 800c526:	f7ff fd91 	bl	800c04c <_Balloc>
 800c52a:	4605      	mov	r5, r0
 800c52c:	b948      	cbnz	r0, 800c542 <__lshift+0x3e>
 800c52e:	4602      	mov	r2, r0
 800c530:	4b2a      	ldr	r3, [pc, #168]	; (800c5dc <__lshift+0xd8>)
 800c532:	482b      	ldr	r0, [pc, #172]	; (800c5e0 <__lshift+0xdc>)
 800c534:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c538:	f7fe fb4e 	bl	800abd8 <__assert_func>
 800c53c:	3101      	adds	r1, #1
 800c53e:	005b      	lsls	r3, r3, #1
 800c540:	e7ee      	b.n	800c520 <__lshift+0x1c>
 800c542:	2300      	movs	r3, #0
 800c544:	f100 0114 	add.w	r1, r0, #20
 800c548:	f100 0210 	add.w	r2, r0, #16
 800c54c:	4618      	mov	r0, r3
 800c54e:	4553      	cmp	r3, sl
 800c550:	db37      	blt.n	800c5c2 <__lshift+0xbe>
 800c552:	6920      	ldr	r0, [r4, #16]
 800c554:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c558:	f104 0314 	add.w	r3, r4, #20
 800c55c:	f019 091f 	ands.w	r9, r9, #31
 800c560:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c564:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c568:	d02f      	beq.n	800c5ca <__lshift+0xc6>
 800c56a:	f1c9 0e20 	rsb	lr, r9, #32
 800c56e:	468a      	mov	sl, r1
 800c570:	f04f 0c00 	mov.w	ip, #0
 800c574:	681a      	ldr	r2, [r3, #0]
 800c576:	fa02 f209 	lsl.w	r2, r2, r9
 800c57a:	ea42 020c 	orr.w	r2, r2, ip
 800c57e:	f84a 2b04 	str.w	r2, [sl], #4
 800c582:	f853 2b04 	ldr.w	r2, [r3], #4
 800c586:	4298      	cmp	r0, r3
 800c588:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c58c:	d8f2      	bhi.n	800c574 <__lshift+0x70>
 800c58e:	1b03      	subs	r3, r0, r4
 800c590:	3b15      	subs	r3, #21
 800c592:	f023 0303 	bic.w	r3, r3, #3
 800c596:	3304      	adds	r3, #4
 800c598:	f104 0215 	add.w	r2, r4, #21
 800c59c:	4290      	cmp	r0, r2
 800c59e:	bf38      	it	cc
 800c5a0:	2304      	movcc	r3, #4
 800c5a2:	f841 c003 	str.w	ip, [r1, r3]
 800c5a6:	f1bc 0f00 	cmp.w	ip, #0
 800c5aa:	d001      	beq.n	800c5b0 <__lshift+0xac>
 800c5ac:	f108 0602 	add.w	r6, r8, #2
 800c5b0:	3e01      	subs	r6, #1
 800c5b2:	4638      	mov	r0, r7
 800c5b4:	612e      	str	r6, [r5, #16]
 800c5b6:	4621      	mov	r1, r4
 800c5b8:	f7ff fd88 	bl	800c0cc <_Bfree>
 800c5bc:	4628      	mov	r0, r5
 800c5be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5c2:	f842 0f04 	str.w	r0, [r2, #4]!
 800c5c6:	3301      	adds	r3, #1
 800c5c8:	e7c1      	b.n	800c54e <__lshift+0x4a>
 800c5ca:	3904      	subs	r1, #4
 800c5cc:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5d0:	f841 2f04 	str.w	r2, [r1, #4]!
 800c5d4:	4298      	cmp	r0, r3
 800c5d6:	d8f9      	bhi.n	800c5cc <__lshift+0xc8>
 800c5d8:	e7ea      	b.n	800c5b0 <__lshift+0xac>
 800c5da:	bf00      	nop
 800c5dc:	0800f7c9 	.word	0x0800f7c9
 800c5e0:	0800f854 	.word	0x0800f854

0800c5e4 <__mcmp>:
 800c5e4:	b530      	push	{r4, r5, lr}
 800c5e6:	6902      	ldr	r2, [r0, #16]
 800c5e8:	690c      	ldr	r4, [r1, #16]
 800c5ea:	1b12      	subs	r2, r2, r4
 800c5ec:	d10e      	bne.n	800c60c <__mcmp+0x28>
 800c5ee:	f100 0314 	add.w	r3, r0, #20
 800c5f2:	3114      	adds	r1, #20
 800c5f4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c5f8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c5fc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c600:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c604:	42a5      	cmp	r5, r4
 800c606:	d003      	beq.n	800c610 <__mcmp+0x2c>
 800c608:	d305      	bcc.n	800c616 <__mcmp+0x32>
 800c60a:	2201      	movs	r2, #1
 800c60c:	4610      	mov	r0, r2
 800c60e:	bd30      	pop	{r4, r5, pc}
 800c610:	4283      	cmp	r3, r0
 800c612:	d3f3      	bcc.n	800c5fc <__mcmp+0x18>
 800c614:	e7fa      	b.n	800c60c <__mcmp+0x28>
 800c616:	f04f 32ff 	mov.w	r2, #4294967295
 800c61a:	e7f7      	b.n	800c60c <__mcmp+0x28>

0800c61c <__mdiff>:
 800c61c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c620:	460c      	mov	r4, r1
 800c622:	4606      	mov	r6, r0
 800c624:	4611      	mov	r1, r2
 800c626:	4620      	mov	r0, r4
 800c628:	4690      	mov	r8, r2
 800c62a:	f7ff ffdb 	bl	800c5e4 <__mcmp>
 800c62e:	1e05      	subs	r5, r0, #0
 800c630:	d110      	bne.n	800c654 <__mdiff+0x38>
 800c632:	4629      	mov	r1, r5
 800c634:	4630      	mov	r0, r6
 800c636:	f7ff fd09 	bl	800c04c <_Balloc>
 800c63a:	b930      	cbnz	r0, 800c64a <__mdiff+0x2e>
 800c63c:	4b3a      	ldr	r3, [pc, #232]	; (800c728 <__mdiff+0x10c>)
 800c63e:	4602      	mov	r2, r0
 800c640:	f240 2132 	movw	r1, #562	; 0x232
 800c644:	4839      	ldr	r0, [pc, #228]	; (800c72c <__mdiff+0x110>)
 800c646:	f7fe fac7 	bl	800abd8 <__assert_func>
 800c64a:	2301      	movs	r3, #1
 800c64c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c650:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c654:	bfa4      	itt	ge
 800c656:	4643      	movge	r3, r8
 800c658:	46a0      	movge	r8, r4
 800c65a:	4630      	mov	r0, r6
 800c65c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c660:	bfa6      	itte	ge
 800c662:	461c      	movge	r4, r3
 800c664:	2500      	movge	r5, #0
 800c666:	2501      	movlt	r5, #1
 800c668:	f7ff fcf0 	bl	800c04c <_Balloc>
 800c66c:	b920      	cbnz	r0, 800c678 <__mdiff+0x5c>
 800c66e:	4b2e      	ldr	r3, [pc, #184]	; (800c728 <__mdiff+0x10c>)
 800c670:	4602      	mov	r2, r0
 800c672:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c676:	e7e5      	b.n	800c644 <__mdiff+0x28>
 800c678:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c67c:	6926      	ldr	r6, [r4, #16]
 800c67e:	60c5      	str	r5, [r0, #12]
 800c680:	f104 0914 	add.w	r9, r4, #20
 800c684:	f108 0514 	add.w	r5, r8, #20
 800c688:	f100 0e14 	add.w	lr, r0, #20
 800c68c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c690:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c694:	f108 0210 	add.w	r2, r8, #16
 800c698:	46f2      	mov	sl, lr
 800c69a:	2100      	movs	r1, #0
 800c69c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c6a0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c6a4:	fa1f f883 	uxth.w	r8, r3
 800c6a8:	fa11 f18b 	uxtah	r1, r1, fp
 800c6ac:	0c1b      	lsrs	r3, r3, #16
 800c6ae:	eba1 0808 	sub.w	r8, r1, r8
 800c6b2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c6b6:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c6ba:	fa1f f888 	uxth.w	r8, r8
 800c6be:	1419      	asrs	r1, r3, #16
 800c6c0:	454e      	cmp	r6, r9
 800c6c2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c6c6:	f84a 3b04 	str.w	r3, [sl], #4
 800c6ca:	d8e7      	bhi.n	800c69c <__mdiff+0x80>
 800c6cc:	1b33      	subs	r3, r6, r4
 800c6ce:	3b15      	subs	r3, #21
 800c6d0:	f023 0303 	bic.w	r3, r3, #3
 800c6d4:	3304      	adds	r3, #4
 800c6d6:	3415      	adds	r4, #21
 800c6d8:	42a6      	cmp	r6, r4
 800c6da:	bf38      	it	cc
 800c6dc:	2304      	movcc	r3, #4
 800c6de:	441d      	add	r5, r3
 800c6e0:	4473      	add	r3, lr
 800c6e2:	469e      	mov	lr, r3
 800c6e4:	462e      	mov	r6, r5
 800c6e6:	4566      	cmp	r6, ip
 800c6e8:	d30e      	bcc.n	800c708 <__mdiff+0xec>
 800c6ea:	f10c 0203 	add.w	r2, ip, #3
 800c6ee:	1b52      	subs	r2, r2, r5
 800c6f0:	f022 0203 	bic.w	r2, r2, #3
 800c6f4:	3d03      	subs	r5, #3
 800c6f6:	45ac      	cmp	ip, r5
 800c6f8:	bf38      	it	cc
 800c6fa:	2200      	movcc	r2, #0
 800c6fc:	441a      	add	r2, r3
 800c6fe:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c702:	b17b      	cbz	r3, 800c724 <__mdiff+0x108>
 800c704:	6107      	str	r7, [r0, #16]
 800c706:	e7a3      	b.n	800c650 <__mdiff+0x34>
 800c708:	f856 8b04 	ldr.w	r8, [r6], #4
 800c70c:	fa11 f288 	uxtah	r2, r1, r8
 800c710:	1414      	asrs	r4, r2, #16
 800c712:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c716:	b292      	uxth	r2, r2
 800c718:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c71c:	f84e 2b04 	str.w	r2, [lr], #4
 800c720:	1421      	asrs	r1, r4, #16
 800c722:	e7e0      	b.n	800c6e6 <__mdiff+0xca>
 800c724:	3f01      	subs	r7, #1
 800c726:	e7ea      	b.n	800c6fe <__mdiff+0xe2>
 800c728:	0800f7c9 	.word	0x0800f7c9
 800c72c:	0800f854 	.word	0x0800f854

0800c730 <__ulp>:
 800c730:	b082      	sub	sp, #8
 800c732:	ed8d 0b00 	vstr	d0, [sp]
 800c736:	9b01      	ldr	r3, [sp, #4]
 800c738:	4912      	ldr	r1, [pc, #72]	; (800c784 <__ulp+0x54>)
 800c73a:	4019      	ands	r1, r3
 800c73c:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c740:	2900      	cmp	r1, #0
 800c742:	dd05      	ble.n	800c750 <__ulp+0x20>
 800c744:	2200      	movs	r2, #0
 800c746:	460b      	mov	r3, r1
 800c748:	ec43 2b10 	vmov	d0, r2, r3
 800c74c:	b002      	add	sp, #8
 800c74e:	4770      	bx	lr
 800c750:	4249      	negs	r1, r1
 800c752:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c756:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c75a:	f04f 0200 	mov.w	r2, #0
 800c75e:	f04f 0300 	mov.w	r3, #0
 800c762:	da04      	bge.n	800c76e <__ulp+0x3e>
 800c764:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c768:	fa41 f300 	asr.w	r3, r1, r0
 800c76c:	e7ec      	b.n	800c748 <__ulp+0x18>
 800c76e:	f1a0 0114 	sub.w	r1, r0, #20
 800c772:	291e      	cmp	r1, #30
 800c774:	bfda      	itte	le
 800c776:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c77a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c77e:	2101      	movgt	r1, #1
 800c780:	460a      	mov	r2, r1
 800c782:	e7e1      	b.n	800c748 <__ulp+0x18>
 800c784:	7ff00000 	.word	0x7ff00000

0800c788 <__b2d>:
 800c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c78a:	6905      	ldr	r5, [r0, #16]
 800c78c:	f100 0714 	add.w	r7, r0, #20
 800c790:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c794:	1f2e      	subs	r6, r5, #4
 800c796:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c79a:	4620      	mov	r0, r4
 800c79c:	f7ff fd48 	bl	800c230 <__hi0bits>
 800c7a0:	f1c0 0320 	rsb	r3, r0, #32
 800c7a4:	280a      	cmp	r0, #10
 800c7a6:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c824 <__b2d+0x9c>
 800c7aa:	600b      	str	r3, [r1, #0]
 800c7ac:	dc14      	bgt.n	800c7d8 <__b2d+0x50>
 800c7ae:	f1c0 0e0b 	rsb	lr, r0, #11
 800c7b2:	fa24 f10e 	lsr.w	r1, r4, lr
 800c7b6:	42b7      	cmp	r7, r6
 800c7b8:	ea41 030c 	orr.w	r3, r1, ip
 800c7bc:	bf34      	ite	cc
 800c7be:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c7c2:	2100      	movcs	r1, #0
 800c7c4:	3015      	adds	r0, #21
 800c7c6:	fa04 f000 	lsl.w	r0, r4, r0
 800c7ca:	fa21 f10e 	lsr.w	r1, r1, lr
 800c7ce:	ea40 0201 	orr.w	r2, r0, r1
 800c7d2:	ec43 2b10 	vmov	d0, r2, r3
 800c7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c7d8:	42b7      	cmp	r7, r6
 800c7da:	bf3a      	itte	cc
 800c7dc:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c7e0:	f1a5 0608 	subcc.w	r6, r5, #8
 800c7e4:	2100      	movcs	r1, #0
 800c7e6:	380b      	subs	r0, #11
 800c7e8:	d017      	beq.n	800c81a <__b2d+0x92>
 800c7ea:	f1c0 0c20 	rsb	ip, r0, #32
 800c7ee:	fa04 f500 	lsl.w	r5, r4, r0
 800c7f2:	42be      	cmp	r6, r7
 800c7f4:	fa21 f40c 	lsr.w	r4, r1, ip
 800c7f8:	ea45 0504 	orr.w	r5, r5, r4
 800c7fc:	bf8c      	ite	hi
 800c7fe:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c802:	2400      	movls	r4, #0
 800c804:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c808:	fa01 f000 	lsl.w	r0, r1, r0
 800c80c:	fa24 f40c 	lsr.w	r4, r4, ip
 800c810:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c814:	ea40 0204 	orr.w	r2, r0, r4
 800c818:	e7db      	b.n	800c7d2 <__b2d+0x4a>
 800c81a:	ea44 030c 	orr.w	r3, r4, ip
 800c81e:	460a      	mov	r2, r1
 800c820:	e7d7      	b.n	800c7d2 <__b2d+0x4a>
 800c822:	bf00      	nop
 800c824:	3ff00000 	.word	0x3ff00000

0800c828 <__d2b>:
 800c828:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c82c:	4689      	mov	r9, r1
 800c82e:	2101      	movs	r1, #1
 800c830:	ec57 6b10 	vmov	r6, r7, d0
 800c834:	4690      	mov	r8, r2
 800c836:	f7ff fc09 	bl	800c04c <_Balloc>
 800c83a:	4604      	mov	r4, r0
 800c83c:	b930      	cbnz	r0, 800c84c <__d2b+0x24>
 800c83e:	4602      	mov	r2, r0
 800c840:	4b25      	ldr	r3, [pc, #148]	; (800c8d8 <__d2b+0xb0>)
 800c842:	4826      	ldr	r0, [pc, #152]	; (800c8dc <__d2b+0xb4>)
 800c844:	f240 310a 	movw	r1, #778	; 0x30a
 800c848:	f7fe f9c6 	bl	800abd8 <__assert_func>
 800c84c:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c850:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c854:	bb35      	cbnz	r5, 800c8a4 <__d2b+0x7c>
 800c856:	2e00      	cmp	r6, #0
 800c858:	9301      	str	r3, [sp, #4]
 800c85a:	d028      	beq.n	800c8ae <__d2b+0x86>
 800c85c:	4668      	mov	r0, sp
 800c85e:	9600      	str	r6, [sp, #0]
 800c860:	f7ff fd06 	bl	800c270 <__lo0bits>
 800c864:	9900      	ldr	r1, [sp, #0]
 800c866:	b300      	cbz	r0, 800c8aa <__d2b+0x82>
 800c868:	9a01      	ldr	r2, [sp, #4]
 800c86a:	f1c0 0320 	rsb	r3, r0, #32
 800c86e:	fa02 f303 	lsl.w	r3, r2, r3
 800c872:	430b      	orrs	r3, r1
 800c874:	40c2      	lsrs	r2, r0
 800c876:	6163      	str	r3, [r4, #20]
 800c878:	9201      	str	r2, [sp, #4]
 800c87a:	9b01      	ldr	r3, [sp, #4]
 800c87c:	61a3      	str	r3, [r4, #24]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	bf14      	ite	ne
 800c882:	2202      	movne	r2, #2
 800c884:	2201      	moveq	r2, #1
 800c886:	6122      	str	r2, [r4, #16]
 800c888:	b1d5      	cbz	r5, 800c8c0 <__d2b+0x98>
 800c88a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c88e:	4405      	add	r5, r0
 800c890:	f8c9 5000 	str.w	r5, [r9]
 800c894:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c898:	f8c8 0000 	str.w	r0, [r8]
 800c89c:	4620      	mov	r0, r4
 800c89e:	b003      	add	sp, #12
 800c8a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c8a8:	e7d5      	b.n	800c856 <__d2b+0x2e>
 800c8aa:	6161      	str	r1, [r4, #20]
 800c8ac:	e7e5      	b.n	800c87a <__d2b+0x52>
 800c8ae:	a801      	add	r0, sp, #4
 800c8b0:	f7ff fcde 	bl	800c270 <__lo0bits>
 800c8b4:	9b01      	ldr	r3, [sp, #4]
 800c8b6:	6163      	str	r3, [r4, #20]
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	6122      	str	r2, [r4, #16]
 800c8bc:	3020      	adds	r0, #32
 800c8be:	e7e3      	b.n	800c888 <__d2b+0x60>
 800c8c0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c8c4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c8c8:	f8c9 0000 	str.w	r0, [r9]
 800c8cc:	6918      	ldr	r0, [r3, #16]
 800c8ce:	f7ff fcaf 	bl	800c230 <__hi0bits>
 800c8d2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c8d6:	e7df      	b.n	800c898 <__d2b+0x70>
 800c8d8:	0800f7c9 	.word	0x0800f7c9
 800c8dc:	0800f854 	.word	0x0800f854

0800c8e0 <__ratio>:
 800c8e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8e4:	4688      	mov	r8, r1
 800c8e6:	4669      	mov	r1, sp
 800c8e8:	4681      	mov	r9, r0
 800c8ea:	f7ff ff4d 	bl	800c788 <__b2d>
 800c8ee:	a901      	add	r1, sp, #4
 800c8f0:	4640      	mov	r0, r8
 800c8f2:	ec55 4b10 	vmov	r4, r5, d0
 800c8f6:	f7ff ff47 	bl	800c788 <__b2d>
 800c8fa:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c8fe:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c902:	eba3 0c02 	sub.w	ip, r3, r2
 800c906:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c90a:	1a9b      	subs	r3, r3, r2
 800c90c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c910:	ec51 0b10 	vmov	r0, r1, d0
 800c914:	2b00      	cmp	r3, #0
 800c916:	bfd6      	itet	le
 800c918:	460a      	movle	r2, r1
 800c91a:	462a      	movgt	r2, r5
 800c91c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c920:	468b      	mov	fp, r1
 800c922:	462f      	mov	r7, r5
 800c924:	bfd4      	ite	le
 800c926:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c92a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c92e:	4620      	mov	r0, r4
 800c930:	ee10 2a10 	vmov	r2, s0
 800c934:	465b      	mov	r3, fp
 800c936:	4639      	mov	r1, r7
 800c938:	f7f3 ff98 	bl	800086c <__aeabi_ddiv>
 800c93c:	ec41 0b10 	vmov	d0, r0, r1
 800c940:	b003      	add	sp, #12
 800c942:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c946 <__copybits>:
 800c946:	3901      	subs	r1, #1
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	1149      	asrs	r1, r1, #5
 800c94c:	6914      	ldr	r4, [r2, #16]
 800c94e:	3101      	adds	r1, #1
 800c950:	f102 0314 	add.w	r3, r2, #20
 800c954:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c958:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c95c:	1f05      	subs	r5, r0, #4
 800c95e:	42a3      	cmp	r3, r4
 800c960:	d30c      	bcc.n	800c97c <__copybits+0x36>
 800c962:	1aa3      	subs	r3, r4, r2
 800c964:	3b11      	subs	r3, #17
 800c966:	f023 0303 	bic.w	r3, r3, #3
 800c96a:	3211      	adds	r2, #17
 800c96c:	42a2      	cmp	r2, r4
 800c96e:	bf88      	it	hi
 800c970:	2300      	movhi	r3, #0
 800c972:	4418      	add	r0, r3
 800c974:	2300      	movs	r3, #0
 800c976:	4288      	cmp	r0, r1
 800c978:	d305      	bcc.n	800c986 <__copybits+0x40>
 800c97a:	bd70      	pop	{r4, r5, r6, pc}
 800c97c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c980:	f845 6f04 	str.w	r6, [r5, #4]!
 800c984:	e7eb      	b.n	800c95e <__copybits+0x18>
 800c986:	f840 3b04 	str.w	r3, [r0], #4
 800c98a:	e7f4      	b.n	800c976 <__copybits+0x30>

0800c98c <__any_on>:
 800c98c:	f100 0214 	add.w	r2, r0, #20
 800c990:	6900      	ldr	r0, [r0, #16]
 800c992:	114b      	asrs	r3, r1, #5
 800c994:	4298      	cmp	r0, r3
 800c996:	b510      	push	{r4, lr}
 800c998:	db11      	blt.n	800c9be <__any_on+0x32>
 800c99a:	dd0a      	ble.n	800c9b2 <__any_on+0x26>
 800c99c:	f011 011f 	ands.w	r1, r1, #31
 800c9a0:	d007      	beq.n	800c9b2 <__any_on+0x26>
 800c9a2:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c9a6:	fa24 f001 	lsr.w	r0, r4, r1
 800c9aa:	fa00 f101 	lsl.w	r1, r0, r1
 800c9ae:	428c      	cmp	r4, r1
 800c9b0:	d10b      	bne.n	800c9ca <__any_on+0x3e>
 800c9b2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c9b6:	4293      	cmp	r3, r2
 800c9b8:	d803      	bhi.n	800c9c2 <__any_on+0x36>
 800c9ba:	2000      	movs	r0, #0
 800c9bc:	bd10      	pop	{r4, pc}
 800c9be:	4603      	mov	r3, r0
 800c9c0:	e7f7      	b.n	800c9b2 <__any_on+0x26>
 800c9c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c9c6:	2900      	cmp	r1, #0
 800c9c8:	d0f5      	beq.n	800c9b6 <__any_on+0x2a>
 800c9ca:	2001      	movs	r0, #1
 800c9cc:	e7f6      	b.n	800c9bc <__any_on+0x30>

0800c9ce <_calloc_r>:
 800c9ce:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9d0:	fba1 2402 	umull	r2, r4, r1, r2
 800c9d4:	b94c      	cbnz	r4, 800c9ea <_calloc_r+0x1c>
 800c9d6:	4611      	mov	r1, r2
 800c9d8:	9201      	str	r2, [sp, #4]
 800c9da:	f000 f87b 	bl	800cad4 <_malloc_r>
 800c9de:	9a01      	ldr	r2, [sp, #4]
 800c9e0:	4605      	mov	r5, r0
 800c9e2:	b930      	cbnz	r0, 800c9f2 <_calloc_r+0x24>
 800c9e4:	4628      	mov	r0, r5
 800c9e6:	b003      	add	sp, #12
 800c9e8:	bd30      	pop	{r4, r5, pc}
 800c9ea:	220c      	movs	r2, #12
 800c9ec:	6002      	str	r2, [r0, #0]
 800c9ee:	2500      	movs	r5, #0
 800c9f0:	e7f8      	b.n	800c9e4 <_calloc_r+0x16>
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	f7fc fa96 	bl	8008f24 <memset>
 800c9f8:	e7f4      	b.n	800c9e4 <_calloc_r+0x16>
	...

0800c9fc <_free_r>:
 800c9fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9fe:	2900      	cmp	r1, #0
 800ca00:	d044      	beq.n	800ca8c <_free_r+0x90>
 800ca02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ca06:	9001      	str	r0, [sp, #4]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f1a1 0404 	sub.w	r4, r1, #4
 800ca0e:	bfb8      	it	lt
 800ca10:	18e4      	addlt	r4, r4, r3
 800ca12:	f000 fec5 	bl	800d7a0 <__malloc_lock>
 800ca16:	4a1e      	ldr	r2, [pc, #120]	; (800ca90 <_free_r+0x94>)
 800ca18:	9801      	ldr	r0, [sp, #4]
 800ca1a:	6813      	ldr	r3, [r2, #0]
 800ca1c:	b933      	cbnz	r3, 800ca2c <_free_r+0x30>
 800ca1e:	6063      	str	r3, [r4, #4]
 800ca20:	6014      	str	r4, [r2, #0]
 800ca22:	b003      	add	sp, #12
 800ca24:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ca28:	f000 bec0 	b.w	800d7ac <__malloc_unlock>
 800ca2c:	42a3      	cmp	r3, r4
 800ca2e:	d908      	bls.n	800ca42 <_free_r+0x46>
 800ca30:	6825      	ldr	r5, [r4, #0]
 800ca32:	1961      	adds	r1, r4, r5
 800ca34:	428b      	cmp	r3, r1
 800ca36:	bf01      	itttt	eq
 800ca38:	6819      	ldreq	r1, [r3, #0]
 800ca3a:	685b      	ldreq	r3, [r3, #4]
 800ca3c:	1949      	addeq	r1, r1, r5
 800ca3e:	6021      	streq	r1, [r4, #0]
 800ca40:	e7ed      	b.n	800ca1e <_free_r+0x22>
 800ca42:	461a      	mov	r2, r3
 800ca44:	685b      	ldr	r3, [r3, #4]
 800ca46:	b10b      	cbz	r3, 800ca4c <_free_r+0x50>
 800ca48:	42a3      	cmp	r3, r4
 800ca4a:	d9fa      	bls.n	800ca42 <_free_r+0x46>
 800ca4c:	6811      	ldr	r1, [r2, #0]
 800ca4e:	1855      	adds	r5, r2, r1
 800ca50:	42a5      	cmp	r5, r4
 800ca52:	d10b      	bne.n	800ca6c <_free_r+0x70>
 800ca54:	6824      	ldr	r4, [r4, #0]
 800ca56:	4421      	add	r1, r4
 800ca58:	1854      	adds	r4, r2, r1
 800ca5a:	42a3      	cmp	r3, r4
 800ca5c:	6011      	str	r1, [r2, #0]
 800ca5e:	d1e0      	bne.n	800ca22 <_free_r+0x26>
 800ca60:	681c      	ldr	r4, [r3, #0]
 800ca62:	685b      	ldr	r3, [r3, #4]
 800ca64:	6053      	str	r3, [r2, #4]
 800ca66:	4421      	add	r1, r4
 800ca68:	6011      	str	r1, [r2, #0]
 800ca6a:	e7da      	b.n	800ca22 <_free_r+0x26>
 800ca6c:	d902      	bls.n	800ca74 <_free_r+0x78>
 800ca6e:	230c      	movs	r3, #12
 800ca70:	6003      	str	r3, [r0, #0]
 800ca72:	e7d6      	b.n	800ca22 <_free_r+0x26>
 800ca74:	6825      	ldr	r5, [r4, #0]
 800ca76:	1961      	adds	r1, r4, r5
 800ca78:	428b      	cmp	r3, r1
 800ca7a:	bf04      	itt	eq
 800ca7c:	6819      	ldreq	r1, [r3, #0]
 800ca7e:	685b      	ldreq	r3, [r3, #4]
 800ca80:	6063      	str	r3, [r4, #4]
 800ca82:	bf04      	itt	eq
 800ca84:	1949      	addeq	r1, r1, r5
 800ca86:	6021      	streq	r1, [r4, #0]
 800ca88:	6054      	str	r4, [r2, #4]
 800ca8a:	e7ca      	b.n	800ca22 <_free_r+0x26>
 800ca8c:	b003      	add	sp, #12
 800ca8e:	bd30      	pop	{r4, r5, pc}
 800ca90:	20000f40 	.word	0x20000f40

0800ca94 <sbrk_aligned>:
 800ca94:	b570      	push	{r4, r5, r6, lr}
 800ca96:	4e0e      	ldr	r6, [pc, #56]	; (800cad0 <sbrk_aligned+0x3c>)
 800ca98:	460c      	mov	r4, r1
 800ca9a:	6831      	ldr	r1, [r6, #0]
 800ca9c:	4605      	mov	r5, r0
 800ca9e:	b911      	cbnz	r1, 800caa6 <sbrk_aligned+0x12>
 800caa0:	f000 fb4a 	bl	800d138 <_sbrk_r>
 800caa4:	6030      	str	r0, [r6, #0]
 800caa6:	4621      	mov	r1, r4
 800caa8:	4628      	mov	r0, r5
 800caaa:	f000 fb45 	bl	800d138 <_sbrk_r>
 800caae:	1c43      	adds	r3, r0, #1
 800cab0:	d00a      	beq.n	800cac8 <sbrk_aligned+0x34>
 800cab2:	1cc4      	adds	r4, r0, #3
 800cab4:	f024 0403 	bic.w	r4, r4, #3
 800cab8:	42a0      	cmp	r0, r4
 800caba:	d007      	beq.n	800cacc <sbrk_aligned+0x38>
 800cabc:	1a21      	subs	r1, r4, r0
 800cabe:	4628      	mov	r0, r5
 800cac0:	f000 fb3a 	bl	800d138 <_sbrk_r>
 800cac4:	3001      	adds	r0, #1
 800cac6:	d101      	bne.n	800cacc <sbrk_aligned+0x38>
 800cac8:	f04f 34ff 	mov.w	r4, #4294967295
 800cacc:	4620      	mov	r0, r4
 800cace:	bd70      	pop	{r4, r5, r6, pc}
 800cad0:	20000f44 	.word	0x20000f44

0800cad4 <_malloc_r>:
 800cad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cad8:	1ccd      	adds	r5, r1, #3
 800cada:	f025 0503 	bic.w	r5, r5, #3
 800cade:	3508      	adds	r5, #8
 800cae0:	2d0c      	cmp	r5, #12
 800cae2:	bf38      	it	cc
 800cae4:	250c      	movcc	r5, #12
 800cae6:	2d00      	cmp	r5, #0
 800cae8:	4607      	mov	r7, r0
 800caea:	db01      	blt.n	800caf0 <_malloc_r+0x1c>
 800caec:	42a9      	cmp	r1, r5
 800caee:	d905      	bls.n	800cafc <_malloc_r+0x28>
 800caf0:	230c      	movs	r3, #12
 800caf2:	603b      	str	r3, [r7, #0]
 800caf4:	2600      	movs	r6, #0
 800caf6:	4630      	mov	r0, r6
 800caf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cafc:	4e2e      	ldr	r6, [pc, #184]	; (800cbb8 <_malloc_r+0xe4>)
 800cafe:	f000 fe4f 	bl	800d7a0 <__malloc_lock>
 800cb02:	6833      	ldr	r3, [r6, #0]
 800cb04:	461c      	mov	r4, r3
 800cb06:	bb34      	cbnz	r4, 800cb56 <_malloc_r+0x82>
 800cb08:	4629      	mov	r1, r5
 800cb0a:	4638      	mov	r0, r7
 800cb0c:	f7ff ffc2 	bl	800ca94 <sbrk_aligned>
 800cb10:	1c43      	adds	r3, r0, #1
 800cb12:	4604      	mov	r4, r0
 800cb14:	d14d      	bne.n	800cbb2 <_malloc_r+0xde>
 800cb16:	6834      	ldr	r4, [r6, #0]
 800cb18:	4626      	mov	r6, r4
 800cb1a:	2e00      	cmp	r6, #0
 800cb1c:	d140      	bne.n	800cba0 <_malloc_r+0xcc>
 800cb1e:	6823      	ldr	r3, [r4, #0]
 800cb20:	4631      	mov	r1, r6
 800cb22:	4638      	mov	r0, r7
 800cb24:	eb04 0803 	add.w	r8, r4, r3
 800cb28:	f000 fb06 	bl	800d138 <_sbrk_r>
 800cb2c:	4580      	cmp	r8, r0
 800cb2e:	d13a      	bne.n	800cba6 <_malloc_r+0xd2>
 800cb30:	6821      	ldr	r1, [r4, #0]
 800cb32:	3503      	adds	r5, #3
 800cb34:	1a6d      	subs	r5, r5, r1
 800cb36:	f025 0503 	bic.w	r5, r5, #3
 800cb3a:	3508      	adds	r5, #8
 800cb3c:	2d0c      	cmp	r5, #12
 800cb3e:	bf38      	it	cc
 800cb40:	250c      	movcc	r5, #12
 800cb42:	4629      	mov	r1, r5
 800cb44:	4638      	mov	r0, r7
 800cb46:	f7ff ffa5 	bl	800ca94 <sbrk_aligned>
 800cb4a:	3001      	adds	r0, #1
 800cb4c:	d02b      	beq.n	800cba6 <_malloc_r+0xd2>
 800cb4e:	6823      	ldr	r3, [r4, #0]
 800cb50:	442b      	add	r3, r5
 800cb52:	6023      	str	r3, [r4, #0]
 800cb54:	e00e      	b.n	800cb74 <_malloc_r+0xa0>
 800cb56:	6822      	ldr	r2, [r4, #0]
 800cb58:	1b52      	subs	r2, r2, r5
 800cb5a:	d41e      	bmi.n	800cb9a <_malloc_r+0xc6>
 800cb5c:	2a0b      	cmp	r2, #11
 800cb5e:	d916      	bls.n	800cb8e <_malloc_r+0xba>
 800cb60:	1961      	adds	r1, r4, r5
 800cb62:	42a3      	cmp	r3, r4
 800cb64:	6025      	str	r5, [r4, #0]
 800cb66:	bf18      	it	ne
 800cb68:	6059      	strne	r1, [r3, #4]
 800cb6a:	6863      	ldr	r3, [r4, #4]
 800cb6c:	bf08      	it	eq
 800cb6e:	6031      	streq	r1, [r6, #0]
 800cb70:	5162      	str	r2, [r4, r5]
 800cb72:	604b      	str	r3, [r1, #4]
 800cb74:	4638      	mov	r0, r7
 800cb76:	f104 060b 	add.w	r6, r4, #11
 800cb7a:	f000 fe17 	bl	800d7ac <__malloc_unlock>
 800cb7e:	f026 0607 	bic.w	r6, r6, #7
 800cb82:	1d23      	adds	r3, r4, #4
 800cb84:	1af2      	subs	r2, r6, r3
 800cb86:	d0b6      	beq.n	800caf6 <_malloc_r+0x22>
 800cb88:	1b9b      	subs	r3, r3, r6
 800cb8a:	50a3      	str	r3, [r4, r2]
 800cb8c:	e7b3      	b.n	800caf6 <_malloc_r+0x22>
 800cb8e:	6862      	ldr	r2, [r4, #4]
 800cb90:	42a3      	cmp	r3, r4
 800cb92:	bf0c      	ite	eq
 800cb94:	6032      	streq	r2, [r6, #0]
 800cb96:	605a      	strne	r2, [r3, #4]
 800cb98:	e7ec      	b.n	800cb74 <_malloc_r+0xa0>
 800cb9a:	4623      	mov	r3, r4
 800cb9c:	6864      	ldr	r4, [r4, #4]
 800cb9e:	e7b2      	b.n	800cb06 <_malloc_r+0x32>
 800cba0:	4634      	mov	r4, r6
 800cba2:	6876      	ldr	r6, [r6, #4]
 800cba4:	e7b9      	b.n	800cb1a <_malloc_r+0x46>
 800cba6:	230c      	movs	r3, #12
 800cba8:	603b      	str	r3, [r7, #0]
 800cbaa:	4638      	mov	r0, r7
 800cbac:	f000 fdfe 	bl	800d7ac <__malloc_unlock>
 800cbb0:	e7a1      	b.n	800caf6 <_malloc_r+0x22>
 800cbb2:	6025      	str	r5, [r4, #0]
 800cbb4:	e7de      	b.n	800cb74 <_malloc_r+0xa0>
 800cbb6:	bf00      	nop
 800cbb8:	20000f40 	.word	0x20000f40

0800cbbc <__ssputs_r>:
 800cbbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cbc0:	688e      	ldr	r6, [r1, #8]
 800cbc2:	429e      	cmp	r6, r3
 800cbc4:	4682      	mov	sl, r0
 800cbc6:	460c      	mov	r4, r1
 800cbc8:	4690      	mov	r8, r2
 800cbca:	461f      	mov	r7, r3
 800cbcc:	d838      	bhi.n	800cc40 <__ssputs_r+0x84>
 800cbce:	898a      	ldrh	r2, [r1, #12]
 800cbd0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cbd4:	d032      	beq.n	800cc3c <__ssputs_r+0x80>
 800cbd6:	6825      	ldr	r5, [r4, #0]
 800cbd8:	6909      	ldr	r1, [r1, #16]
 800cbda:	eba5 0901 	sub.w	r9, r5, r1
 800cbde:	6965      	ldr	r5, [r4, #20]
 800cbe0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cbe4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cbe8:	3301      	adds	r3, #1
 800cbea:	444b      	add	r3, r9
 800cbec:	106d      	asrs	r5, r5, #1
 800cbee:	429d      	cmp	r5, r3
 800cbf0:	bf38      	it	cc
 800cbf2:	461d      	movcc	r5, r3
 800cbf4:	0553      	lsls	r3, r2, #21
 800cbf6:	d531      	bpl.n	800cc5c <__ssputs_r+0xa0>
 800cbf8:	4629      	mov	r1, r5
 800cbfa:	f7ff ff6b 	bl	800cad4 <_malloc_r>
 800cbfe:	4606      	mov	r6, r0
 800cc00:	b950      	cbnz	r0, 800cc18 <__ssputs_r+0x5c>
 800cc02:	230c      	movs	r3, #12
 800cc04:	f8ca 3000 	str.w	r3, [sl]
 800cc08:	89a3      	ldrh	r3, [r4, #12]
 800cc0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc0e:	81a3      	strh	r3, [r4, #12]
 800cc10:	f04f 30ff 	mov.w	r0, #4294967295
 800cc14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cc18:	6921      	ldr	r1, [r4, #16]
 800cc1a:	464a      	mov	r2, r9
 800cc1c:	f7fc f974 	bl	8008f08 <memcpy>
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cc26:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cc2a:	81a3      	strh	r3, [r4, #12]
 800cc2c:	6126      	str	r6, [r4, #16]
 800cc2e:	6165      	str	r5, [r4, #20]
 800cc30:	444e      	add	r6, r9
 800cc32:	eba5 0509 	sub.w	r5, r5, r9
 800cc36:	6026      	str	r6, [r4, #0]
 800cc38:	60a5      	str	r5, [r4, #8]
 800cc3a:	463e      	mov	r6, r7
 800cc3c:	42be      	cmp	r6, r7
 800cc3e:	d900      	bls.n	800cc42 <__ssputs_r+0x86>
 800cc40:	463e      	mov	r6, r7
 800cc42:	6820      	ldr	r0, [r4, #0]
 800cc44:	4632      	mov	r2, r6
 800cc46:	4641      	mov	r1, r8
 800cc48:	f000 fd90 	bl	800d76c <memmove>
 800cc4c:	68a3      	ldr	r3, [r4, #8]
 800cc4e:	1b9b      	subs	r3, r3, r6
 800cc50:	60a3      	str	r3, [r4, #8]
 800cc52:	6823      	ldr	r3, [r4, #0]
 800cc54:	4433      	add	r3, r6
 800cc56:	6023      	str	r3, [r4, #0]
 800cc58:	2000      	movs	r0, #0
 800cc5a:	e7db      	b.n	800cc14 <__ssputs_r+0x58>
 800cc5c:	462a      	mov	r2, r5
 800cc5e:	f000 fdab 	bl	800d7b8 <_realloc_r>
 800cc62:	4606      	mov	r6, r0
 800cc64:	2800      	cmp	r0, #0
 800cc66:	d1e1      	bne.n	800cc2c <__ssputs_r+0x70>
 800cc68:	6921      	ldr	r1, [r4, #16]
 800cc6a:	4650      	mov	r0, sl
 800cc6c:	f7ff fec6 	bl	800c9fc <_free_r>
 800cc70:	e7c7      	b.n	800cc02 <__ssputs_r+0x46>
	...

0800cc74 <_svfiprintf_r>:
 800cc74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc78:	4698      	mov	r8, r3
 800cc7a:	898b      	ldrh	r3, [r1, #12]
 800cc7c:	061b      	lsls	r3, r3, #24
 800cc7e:	b09d      	sub	sp, #116	; 0x74
 800cc80:	4607      	mov	r7, r0
 800cc82:	460d      	mov	r5, r1
 800cc84:	4614      	mov	r4, r2
 800cc86:	d50e      	bpl.n	800cca6 <_svfiprintf_r+0x32>
 800cc88:	690b      	ldr	r3, [r1, #16]
 800cc8a:	b963      	cbnz	r3, 800cca6 <_svfiprintf_r+0x32>
 800cc8c:	2140      	movs	r1, #64	; 0x40
 800cc8e:	f7ff ff21 	bl	800cad4 <_malloc_r>
 800cc92:	6028      	str	r0, [r5, #0]
 800cc94:	6128      	str	r0, [r5, #16]
 800cc96:	b920      	cbnz	r0, 800cca2 <_svfiprintf_r+0x2e>
 800cc98:	230c      	movs	r3, #12
 800cc9a:	603b      	str	r3, [r7, #0]
 800cc9c:	f04f 30ff 	mov.w	r0, #4294967295
 800cca0:	e0d1      	b.n	800ce46 <_svfiprintf_r+0x1d2>
 800cca2:	2340      	movs	r3, #64	; 0x40
 800cca4:	616b      	str	r3, [r5, #20]
 800cca6:	2300      	movs	r3, #0
 800cca8:	9309      	str	r3, [sp, #36]	; 0x24
 800ccaa:	2320      	movs	r3, #32
 800ccac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ccb0:	f8cd 800c 	str.w	r8, [sp, #12]
 800ccb4:	2330      	movs	r3, #48	; 0x30
 800ccb6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ce60 <_svfiprintf_r+0x1ec>
 800ccba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ccbe:	f04f 0901 	mov.w	r9, #1
 800ccc2:	4623      	mov	r3, r4
 800ccc4:	469a      	mov	sl, r3
 800ccc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ccca:	b10a      	cbz	r2, 800ccd0 <_svfiprintf_r+0x5c>
 800cccc:	2a25      	cmp	r2, #37	; 0x25
 800ccce:	d1f9      	bne.n	800ccc4 <_svfiprintf_r+0x50>
 800ccd0:	ebba 0b04 	subs.w	fp, sl, r4
 800ccd4:	d00b      	beq.n	800ccee <_svfiprintf_r+0x7a>
 800ccd6:	465b      	mov	r3, fp
 800ccd8:	4622      	mov	r2, r4
 800ccda:	4629      	mov	r1, r5
 800ccdc:	4638      	mov	r0, r7
 800ccde:	f7ff ff6d 	bl	800cbbc <__ssputs_r>
 800cce2:	3001      	adds	r0, #1
 800cce4:	f000 80aa 	beq.w	800ce3c <_svfiprintf_r+0x1c8>
 800cce8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ccea:	445a      	add	r2, fp
 800ccec:	9209      	str	r2, [sp, #36]	; 0x24
 800ccee:	f89a 3000 	ldrb.w	r3, [sl]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	f000 80a2 	beq.w	800ce3c <_svfiprintf_r+0x1c8>
 800ccf8:	2300      	movs	r3, #0
 800ccfa:	f04f 32ff 	mov.w	r2, #4294967295
 800ccfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cd02:	f10a 0a01 	add.w	sl, sl, #1
 800cd06:	9304      	str	r3, [sp, #16]
 800cd08:	9307      	str	r3, [sp, #28]
 800cd0a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cd0e:	931a      	str	r3, [sp, #104]	; 0x68
 800cd10:	4654      	mov	r4, sl
 800cd12:	2205      	movs	r2, #5
 800cd14:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cd18:	4851      	ldr	r0, [pc, #324]	; (800ce60 <_svfiprintf_r+0x1ec>)
 800cd1a:	f7f3 fa71 	bl	8000200 <memchr>
 800cd1e:	9a04      	ldr	r2, [sp, #16]
 800cd20:	b9d8      	cbnz	r0, 800cd5a <_svfiprintf_r+0xe6>
 800cd22:	06d0      	lsls	r0, r2, #27
 800cd24:	bf44      	itt	mi
 800cd26:	2320      	movmi	r3, #32
 800cd28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd2c:	0711      	lsls	r1, r2, #28
 800cd2e:	bf44      	itt	mi
 800cd30:	232b      	movmi	r3, #43	; 0x2b
 800cd32:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cd36:	f89a 3000 	ldrb.w	r3, [sl]
 800cd3a:	2b2a      	cmp	r3, #42	; 0x2a
 800cd3c:	d015      	beq.n	800cd6a <_svfiprintf_r+0xf6>
 800cd3e:	9a07      	ldr	r2, [sp, #28]
 800cd40:	4654      	mov	r4, sl
 800cd42:	2000      	movs	r0, #0
 800cd44:	f04f 0c0a 	mov.w	ip, #10
 800cd48:	4621      	mov	r1, r4
 800cd4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cd4e:	3b30      	subs	r3, #48	; 0x30
 800cd50:	2b09      	cmp	r3, #9
 800cd52:	d94e      	bls.n	800cdf2 <_svfiprintf_r+0x17e>
 800cd54:	b1b0      	cbz	r0, 800cd84 <_svfiprintf_r+0x110>
 800cd56:	9207      	str	r2, [sp, #28]
 800cd58:	e014      	b.n	800cd84 <_svfiprintf_r+0x110>
 800cd5a:	eba0 0308 	sub.w	r3, r0, r8
 800cd5e:	fa09 f303 	lsl.w	r3, r9, r3
 800cd62:	4313      	orrs	r3, r2
 800cd64:	9304      	str	r3, [sp, #16]
 800cd66:	46a2      	mov	sl, r4
 800cd68:	e7d2      	b.n	800cd10 <_svfiprintf_r+0x9c>
 800cd6a:	9b03      	ldr	r3, [sp, #12]
 800cd6c:	1d19      	adds	r1, r3, #4
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	9103      	str	r1, [sp, #12]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bfbb      	ittet	lt
 800cd76:	425b      	neglt	r3, r3
 800cd78:	f042 0202 	orrlt.w	r2, r2, #2
 800cd7c:	9307      	strge	r3, [sp, #28]
 800cd7e:	9307      	strlt	r3, [sp, #28]
 800cd80:	bfb8      	it	lt
 800cd82:	9204      	strlt	r2, [sp, #16]
 800cd84:	7823      	ldrb	r3, [r4, #0]
 800cd86:	2b2e      	cmp	r3, #46	; 0x2e
 800cd88:	d10c      	bne.n	800cda4 <_svfiprintf_r+0x130>
 800cd8a:	7863      	ldrb	r3, [r4, #1]
 800cd8c:	2b2a      	cmp	r3, #42	; 0x2a
 800cd8e:	d135      	bne.n	800cdfc <_svfiprintf_r+0x188>
 800cd90:	9b03      	ldr	r3, [sp, #12]
 800cd92:	1d1a      	adds	r2, r3, #4
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	9203      	str	r2, [sp, #12]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	bfb8      	it	lt
 800cd9c:	f04f 33ff 	movlt.w	r3, #4294967295
 800cda0:	3402      	adds	r4, #2
 800cda2:	9305      	str	r3, [sp, #20]
 800cda4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800ce70 <_svfiprintf_r+0x1fc>
 800cda8:	7821      	ldrb	r1, [r4, #0]
 800cdaa:	2203      	movs	r2, #3
 800cdac:	4650      	mov	r0, sl
 800cdae:	f7f3 fa27 	bl	8000200 <memchr>
 800cdb2:	b140      	cbz	r0, 800cdc6 <_svfiprintf_r+0x152>
 800cdb4:	2340      	movs	r3, #64	; 0x40
 800cdb6:	eba0 000a 	sub.w	r0, r0, sl
 800cdba:	fa03 f000 	lsl.w	r0, r3, r0
 800cdbe:	9b04      	ldr	r3, [sp, #16]
 800cdc0:	4303      	orrs	r3, r0
 800cdc2:	3401      	adds	r4, #1
 800cdc4:	9304      	str	r3, [sp, #16]
 800cdc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cdca:	4826      	ldr	r0, [pc, #152]	; (800ce64 <_svfiprintf_r+0x1f0>)
 800cdcc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cdd0:	2206      	movs	r2, #6
 800cdd2:	f7f3 fa15 	bl	8000200 <memchr>
 800cdd6:	2800      	cmp	r0, #0
 800cdd8:	d038      	beq.n	800ce4c <_svfiprintf_r+0x1d8>
 800cdda:	4b23      	ldr	r3, [pc, #140]	; (800ce68 <_svfiprintf_r+0x1f4>)
 800cddc:	bb1b      	cbnz	r3, 800ce26 <_svfiprintf_r+0x1b2>
 800cdde:	9b03      	ldr	r3, [sp, #12]
 800cde0:	3307      	adds	r3, #7
 800cde2:	f023 0307 	bic.w	r3, r3, #7
 800cde6:	3308      	adds	r3, #8
 800cde8:	9303      	str	r3, [sp, #12]
 800cdea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cdec:	4433      	add	r3, r6
 800cdee:	9309      	str	r3, [sp, #36]	; 0x24
 800cdf0:	e767      	b.n	800ccc2 <_svfiprintf_r+0x4e>
 800cdf2:	fb0c 3202 	mla	r2, ip, r2, r3
 800cdf6:	460c      	mov	r4, r1
 800cdf8:	2001      	movs	r0, #1
 800cdfa:	e7a5      	b.n	800cd48 <_svfiprintf_r+0xd4>
 800cdfc:	2300      	movs	r3, #0
 800cdfe:	3401      	adds	r4, #1
 800ce00:	9305      	str	r3, [sp, #20]
 800ce02:	4619      	mov	r1, r3
 800ce04:	f04f 0c0a 	mov.w	ip, #10
 800ce08:	4620      	mov	r0, r4
 800ce0a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ce0e:	3a30      	subs	r2, #48	; 0x30
 800ce10:	2a09      	cmp	r2, #9
 800ce12:	d903      	bls.n	800ce1c <_svfiprintf_r+0x1a8>
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d0c5      	beq.n	800cda4 <_svfiprintf_r+0x130>
 800ce18:	9105      	str	r1, [sp, #20]
 800ce1a:	e7c3      	b.n	800cda4 <_svfiprintf_r+0x130>
 800ce1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800ce20:	4604      	mov	r4, r0
 800ce22:	2301      	movs	r3, #1
 800ce24:	e7f0      	b.n	800ce08 <_svfiprintf_r+0x194>
 800ce26:	ab03      	add	r3, sp, #12
 800ce28:	9300      	str	r3, [sp, #0]
 800ce2a:	462a      	mov	r2, r5
 800ce2c:	4b0f      	ldr	r3, [pc, #60]	; (800ce6c <_svfiprintf_r+0x1f8>)
 800ce2e:	a904      	add	r1, sp, #16
 800ce30:	4638      	mov	r0, r7
 800ce32:	f7fc f91f 	bl	8009074 <_printf_float>
 800ce36:	1c42      	adds	r2, r0, #1
 800ce38:	4606      	mov	r6, r0
 800ce3a:	d1d6      	bne.n	800cdea <_svfiprintf_r+0x176>
 800ce3c:	89ab      	ldrh	r3, [r5, #12]
 800ce3e:	065b      	lsls	r3, r3, #25
 800ce40:	f53f af2c 	bmi.w	800cc9c <_svfiprintf_r+0x28>
 800ce44:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ce46:	b01d      	add	sp, #116	; 0x74
 800ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4c:	ab03      	add	r3, sp, #12
 800ce4e:	9300      	str	r3, [sp, #0]
 800ce50:	462a      	mov	r2, r5
 800ce52:	4b06      	ldr	r3, [pc, #24]	; (800ce6c <_svfiprintf_r+0x1f8>)
 800ce54:	a904      	add	r1, sp, #16
 800ce56:	4638      	mov	r0, r7
 800ce58:	f7fc fbb0 	bl	80095bc <_printf_i>
 800ce5c:	e7eb      	b.n	800ce36 <_svfiprintf_r+0x1c2>
 800ce5e:	bf00      	nop
 800ce60:	0800f9ac 	.word	0x0800f9ac
 800ce64:	0800f9b6 	.word	0x0800f9b6
 800ce68:	08009075 	.word	0x08009075
 800ce6c:	0800cbbd 	.word	0x0800cbbd
 800ce70:	0800f9b2 	.word	0x0800f9b2

0800ce74 <__sfputc_r>:
 800ce74:	6893      	ldr	r3, [r2, #8]
 800ce76:	3b01      	subs	r3, #1
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	b410      	push	{r4}
 800ce7c:	6093      	str	r3, [r2, #8]
 800ce7e:	da08      	bge.n	800ce92 <__sfputc_r+0x1e>
 800ce80:	6994      	ldr	r4, [r2, #24]
 800ce82:	42a3      	cmp	r3, r4
 800ce84:	db01      	blt.n	800ce8a <__sfputc_r+0x16>
 800ce86:	290a      	cmp	r1, #10
 800ce88:	d103      	bne.n	800ce92 <__sfputc_r+0x1e>
 800ce8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ce8e:	f000 b977 	b.w	800d180 <__swbuf_r>
 800ce92:	6813      	ldr	r3, [r2, #0]
 800ce94:	1c58      	adds	r0, r3, #1
 800ce96:	6010      	str	r0, [r2, #0]
 800ce98:	7019      	strb	r1, [r3, #0]
 800ce9a:	4608      	mov	r0, r1
 800ce9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cea0:	4770      	bx	lr

0800cea2 <__sfputs_r>:
 800cea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cea4:	4606      	mov	r6, r0
 800cea6:	460f      	mov	r7, r1
 800cea8:	4614      	mov	r4, r2
 800ceaa:	18d5      	adds	r5, r2, r3
 800ceac:	42ac      	cmp	r4, r5
 800ceae:	d101      	bne.n	800ceb4 <__sfputs_r+0x12>
 800ceb0:	2000      	movs	r0, #0
 800ceb2:	e007      	b.n	800cec4 <__sfputs_r+0x22>
 800ceb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceb8:	463a      	mov	r2, r7
 800ceba:	4630      	mov	r0, r6
 800cebc:	f7ff ffda 	bl	800ce74 <__sfputc_r>
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d1f3      	bne.n	800ceac <__sfputs_r+0xa>
 800cec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cec8 <_vfiprintf_r>:
 800cec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cecc:	460d      	mov	r5, r1
 800cece:	b09d      	sub	sp, #116	; 0x74
 800ced0:	4614      	mov	r4, r2
 800ced2:	4698      	mov	r8, r3
 800ced4:	4606      	mov	r6, r0
 800ced6:	b118      	cbz	r0, 800cee0 <_vfiprintf_r+0x18>
 800ced8:	6983      	ldr	r3, [r0, #24]
 800ceda:	b90b      	cbnz	r3, 800cee0 <_vfiprintf_r+0x18>
 800cedc:	f000 fb40 	bl	800d560 <__sinit>
 800cee0:	4b89      	ldr	r3, [pc, #548]	; (800d108 <_vfiprintf_r+0x240>)
 800cee2:	429d      	cmp	r5, r3
 800cee4:	d11b      	bne.n	800cf1e <_vfiprintf_r+0x56>
 800cee6:	6875      	ldr	r5, [r6, #4]
 800cee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ceea:	07d9      	lsls	r1, r3, #31
 800ceec:	d405      	bmi.n	800cefa <_vfiprintf_r+0x32>
 800ceee:	89ab      	ldrh	r3, [r5, #12]
 800cef0:	059a      	lsls	r2, r3, #22
 800cef2:	d402      	bmi.n	800cefa <_vfiprintf_r+0x32>
 800cef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cef6:	f000 fbd1 	bl	800d69c <__retarget_lock_acquire_recursive>
 800cefa:	89ab      	ldrh	r3, [r5, #12]
 800cefc:	071b      	lsls	r3, r3, #28
 800cefe:	d501      	bpl.n	800cf04 <_vfiprintf_r+0x3c>
 800cf00:	692b      	ldr	r3, [r5, #16]
 800cf02:	b9eb      	cbnz	r3, 800cf40 <_vfiprintf_r+0x78>
 800cf04:	4629      	mov	r1, r5
 800cf06:	4630      	mov	r0, r6
 800cf08:	f000 f99a 	bl	800d240 <__swsetup_r>
 800cf0c:	b1c0      	cbz	r0, 800cf40 <_vfiprintf_r+0x78>
 800cf0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800cf10:	07dc      	lsls	r4, r3, #31
 800cf12:	d50e      	bpl.n	800cf32 <_vfiprintf_r+0x6a>
 800cf14:	f04f 30ff 	mov.w	r0, #4294967295
 800cf18:	b01d      	add	sp, #116	; 0x74
 800cf1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1e:	4b7b      	ldr	r3, [pc, #492]	; (800d10c <_vfiprintf_r+0x244>)
 800cf20:	429d      	cmp	r5, r3
 800cf22:	d101      	bne.n	800cf28 <_vfiprintf_r+0x60>
 800cf24:	68b5      	ldr	r5, [r6, #8]
 800cf26:	e7df      	b.n	800cee8 <_vfiprintf_r+0x20>
 800cf28:	4b79      	ldr	r3, [pc, #484]	; (800d110 <_vfiprintf_r+0x248>)
 800cf2a:	429d      	cmp	r5, r3
 800cf2c:	bf08      	it	eq
 800cf2e:	68f5      	ldreq	r5, [r6, #12]
 800cf30:	e7da      	b.n	800cee8 <_vfiprintf_r+0x20>
 800cf32:	89ab      	ldrh	r3, [r5, #12]
 800cf34:	0598      	lsls	r0, r3, #22
 800cf36:	d4ed      	bmi.n	800cf14 <_vfiprintf_r+0x4c>
 800cf38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800cf3a:	f000 fbb0 	bl	800d69e <__retarget_lock_release_recursive>
 800cf3e:	e7e9      	b.n	800cf14 <_vfiprintf_r+0x4c>
 800cf40:	2300      	movs	r3, #0
 800cf42:	9309      	str	r3, [sp, #36]	; 0x24
 800cf44:	2320      	movs	r3, #32
 800cf46:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf4a:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf4e:	2330      	movs	r3, #48	; 0x30
 800cf50:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d114 <_vfiprintf_r+0x24c>
 800cf54:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf58:	f04f 0901 	mov.w	r9, #1
 800cf5c:	4623      	mov	r3, r4
 800cf5e:	469a      	mov	sl, r3
 800cf60:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf64:	b10a      	cbz	r2, 800cf6a <_vfiprintf_r+0xa2>
 800cf66:	2a25      	cmp	r2, #37	; 0x25
 800cf68:	d1f9      	bne.n	800cf5e <_vfiprintf_r+0x96>
 800cf6a:	ebba 0b04 	subs.w	fp, sl, r4
 800cf6e:	d00b      	beq.n	800cf88 <_vfiprintf_r+0xc0>
 800cf70:	465b      	mov	r3, fp
 800cf72:	4622      	mov	r2, r4
 800cf74:	4629      	mov	r1, r5
 800cf76:	4630      	mov	r0, r6
 800cf78:	f7ff ff93 	bl	800cea2 <__sfputs_r>
 800cf7c:	3001      	adds	r0, #1
 800cf7e:	f000 80aa 	beq.w	800d0d6 <_vfiprintf_r+0x20e>
 800cf82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf84:	445a      	add	r2, fp
 800cf86:	9209      	str	r2, [sp, #36]	; 0x24
 800cf88:	f89a 3000 	ldrb.w	r3, [sl]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	f000 80a2 	beq.w	800d0d6 <_vfiprintf_r+0x20e>
 800cf92:	2300      	movs	r3, #0
 800cf94:	f04f 32ff 	mov.w	r2, #4294967295
 800cf98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf9c:	f10a 0a01 	add.w	sl, sl, #1
 800cfa0:	9304      	str	r3, [sp, #16]
 800cfa2:	9307      	str	r3, [sp, #28]
 800cfa4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfa8:	931a      	str	r3, [sp, #104]	; 0x68
 800cfaa:	4654      	mov	r4, sl
 800cfac:	2205      	movs	r2, #5
 800cfae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfb2:	4858      	ldr	r0, [pc, #352]	; (800d114 <_vfiprintf_r+0x24c>)
 800cfb4:	f7f3 f924 	bl	8000200 <memchr>
 800cfb8:	9a04      	ldr	r2, [sp, #16]
 800cfba:	b9d8      	cbnz	r0, 800cff4 <_vfiprintf_r+0x12c>
 800cfbc:	06d1      	lsls	r1, r2, #27
 800cfbe:	bf44      	itt	mi
 800cfc0:	2320      	movmi	r3, #32
 800cfc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfc6:	0713      	lsls	r3, r2, #28
 800cfc8:	bf44      	itt	mi
 800cfca:	232b      	movmi	r3, #43	; 0x2b
 800cfcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfd0:	f89a 3000 	ldrb.w	r3, [sl]
 800cfd4:	2b2a      	cmp	r3, #42	; 0x2a
 800cfd6:	d015      	beq.n	800d004 <_vfiprintf_r+0x13c>
 800cfd8:	9a07      	ldr	r2, [sp, #28]
 800cfda:	4654      	mov	r4, sl
 800cfdc:	2000      	movs	r0, #0
 800cfde:	f04f 0c0a 	mov.w	ip, #10
 800cfe2:	4621      	mov	r1, r4
 800cfe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfe8:	3b30      	subs	r3, #48	; 0x30
 800cfea:	2b09      	cmp	r3, #9
 800cfec:	d94e      	bls.n	800d08c <_vfiprintf_r+0x1c4>
 800cfee:	b1b0      	cbz	r0, 800d01e <_vfiprintf_r+0x156>
 800cff0:	9207      	str	r2, [sp, #28]
 800cff2:	e014      	b.n	800d01e <_vfiprintf_r+0x156>
 800cff4:	eba0 0308 	sub.w	r3, r0, r8
 800cff8:	fa09 f303 	lsl.w	r3, r9, r3
 800cffc:	4313      	orrs	r3, r2
 800cffe:	9304      	str	r3, [sp, #16]
 800d000:	46a2      	mov	sl, r4
 800d002:	e7d2      	b.n	800cfaa <_vfiprintf_r+0xe2>
 800d004:	9b03      	ldr	r3, [sp, #12]
 800d006:	1d19      	adds	r1, r3, #4
 800d008:	681b      	ldr	r3, [r3, #0]
 800d00a:	9103      	str	r1, [sp, #12]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	bfbb      	ittet	lt
 800d010:	425b      	neglt	r3, r3
 800d012:	f042 0202 	orrlt.w	r2, r2, #2
 800d016:	9307      	strge	r3, [sp, #28]
 800d018:	9307      	strlt	r3, [sp, #28]
 800d01a:	bfb8      	it	lt
 800d01c:	9204      	strlt	r2, [sp, #16]
 800d01e:	7823      	ldrb	r3, [r4, #0]
 800d020:	2b2e      	cmp	r3, #46	; 0x2e
 800d022:	d10c      	bne.n	800d03e <_vfiprintf_r+0x176>
 800d024:	7863      	ldrb	r3, [r4, #1]
 800d026:	2b2a      	cmp	r3, #42	; 0x2a
 800d028:	d135      	bne.n	800d096 <_vfiprintf_r+0x1ce>
 800d02a:	9b03      	ldr	r3, [sp, #12]
 800d02c:	1d1a      	adds	r2, r3, #4
 800d02e:	681b      	ldr	r3, [r3, #0]
 800d030:	9203      	str	r2, [sp, #12]
 800d032:	2b00      	cmp	r3, #0
 800d034:	bfb8      	it	lt
 800d036:	f04f 33ff 	movlt.w	r3, #4294967295
 800d03a:	3402      	adds	r4, #2
 800d03c:	9305      	str	r3, [sp, #20]
 800d03e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d124 <_vfiprintf_r+0x25c>
 800d042:	7821      	ldrb	r1, [r4, #0]
 800d044:	2203      	movs	r2, #3
 800d046:	4650      	mov	r0, sl
 800d048:	f7f3 f8da 	bl	8000200 <memchr>
 800d04c:	b140      	cbz	r0, 800d060 <_vfiprintf_r+0x198>
 800d04e:	2340      	movs	r3, #64	; 0x40
 800d050:	eba0 000a 	sub.w	r0, r0, sl
 800d054:	fa03 f000 	lsl.w	r0, r3, r0
 800d058:	9b04      	ldr	r3, [sp, #16]
 800d05a:	4303      	orrs	r3, r0
 800d05c:	3401      	adds	r4, #1
 800d05e:	9304      	str	r3, [sp, #16]
 800d060:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d064:	482c      	ldr	r0, [pc, #176]	; (800d118 <_vfiprintf_r+0x250>)
 800d066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d06a:	2206      	movs	r2, #6
 800d06c:	f7f3 f8c8 	bl	8000200 <memchr>
 800d070:	2800      	cmp	r0, #0
 800d072:	d03f      	beq.n	800d0f4 <_vfiprintf_r+0x22c>
 800d074:	4b29      	ldr	r3, [pc, #164]	; (800d11c <_vfiprintf_r+0x254>)
 800d076:	bb1b      	cbnz	r3, 800d0c0 <_vfiprintf_r+0x1f8>
 800d078:	9b03      	ldr	r3, [sp, #12]
 800d07a:	3307      	adds	r3, #7
 800d07c:	f023 0307 	bic.w	r3, r3, #7
 800d080:	3308      	adds	r3, #8
 800d082:	9303      	str	r3, [sp, #12]
 800d084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d086:	443b      	add	r3, r7
 800d088:	9309      	str	r3, [sp, #36]	; 0x24
 800d08a:	e767      	b.n	800cf5c <_vfiprintf_r+0x94>
 800d08c:	fb0c 3202 	mla	r2, ip, r2, r3
 800d090:	460c      	mov	r4, r1
 800d092:	2001      	movs	r0, #1
 800d094:	e7a5      	b.n	800cfe2 <_vfiprintf_r+0x11a>
 800d096:	2300      	movs	r3, #0
 800d098:	3401      	adds	r4, #1
 800d09a:	9305      	str	r3, [sp, #20]
 800d09c:	4619      	mov	r1, r3
 800d09e:	f04f 0c0a 	mov.w	ip, #10
 800d0a2:	4620      	mov	r0, r4
 800d0a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0a8:	3a30      	subs	r2, #48	; 0x30
 800d0aa:	2a09      	cmp	r2, #9
 800d0ac:	d903      	bls.n	800d0b6 <_vfiprintf_r+0x1ee>
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d0c5      	beq.n	800d03e <_vfiprintf_r+0x176>
 800d0b2:	9105      	str	r1, [sp, #20]
 800d0b4:	e7c3      	b.n	800d03e <_vfiprintf_r+0x176>
 800d0b6:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0ba:	4604      	mov	r4, r0
 800d0bc:	2301      	movs	r3, #1
 800d0be:	e7f0      	b.n	800d0a2 <_vfiprintf_r+0x1da>
 800d0c0:	ab03      	add	r3, sp, #12
 800d0c2:	9300      	str	r3, [sp, #0]
 800d0c4:	462a      	mov	r2, r5
 800d0c6:	4b16      	ldr	r3, [pc, #88]	; (800d120 <_vfiprintf_r+0x258>)
 800d0c8:	a904      	add	r1, sp, #16
 800d0ca:	4630      	mov	r0, r6
 800d0cc:	f7fb ffd2 	bl	8009074 <_printf_float>
 800d0d0:	4607      	mov	r7, r0
 800d0d2:	1c78      	adds	r0, r7, #1
 800d0d4:	d1d6      	bne.n	800d084 <_vfiprintf_r+0x1bc>
 800d0d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0d8:	07d9      	lsls	r1, r3, #31
 800d0da:	d405      	bmi.n	800d0e8 <_vfiprintf_r+0x220>
 800d0dc:	89ab      	ldrh	r3, [r5, #12]
 800d0de:	059a      	lsls	r2, r3, #22
 800d0e0:	d402      	bmi.n	800d0e8 <_vfiprintf_r+0x220>
 800d0e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0e4:	f000 fadb 	bl	800d69e <__retarget_lock_release_recursive>
 800d0e8:	89ab      	ldrh	r3, [r5, #12]
 800d0ea:	065b      	lsls	r3, r3, #25
 800d0ec:	f53f af12 	bmi.w	800cf14 <_vfiprintf_r+0x4c>
 800d0f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0f2:	e711      	b.n	800cf18 <_vfiprintf_r+0x50>
 800d0f4:	ab03      	add	r3, sp, #12
 800d0f6:	9300      	str	r3, [sp, #0]
 800d0f8:	462a      	mov	r2, r5
 800d0fa:	4b09      	ldr	r3, [pc, #36]	; (800d120 <_vfiprintf_r+0x258>)
 800d0fc:	a904      	add	r1, sp, #16
 800d0fe:	4630      	mov	r0, r6
 800d100:	f7fc fa5c 	bl	80095bc <_printf_i>
 800d104:	e7e4      	b.n	800d0d0 <_vfiprintf_r+0x208>
 800d106:	bf00      	nop
 800d108:	0800f9e0 	.word	0x0800f9e0
 800d10c:	0800fa00 	.word	0x0800fa00
 800d110:	0800f9c0 	.word	0x0800f9c0
 800d114:	0800f9ac 	.word	0x0800f9ac
 800d118:	0800f9b6 	.word	0x0800f9b6
 800d11c:	08009075 	.word	0x08009075
 800d120:	0800cea3 	.word	0x0800cea3
 800d124:	0800f9b2 	.word	0x0800f9b2

0800d128 <nan>:
 800d128:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d130 <nan+0x8>
 800d12c:	4770      	bx	lr
 800d12e:	bf00      	nop
 800d130:	00000000 	.word	0x00000000
 800d134:	7ff80000 	.word	0x7ff80000

0800d138 <_sbrk_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4d06      	ldr	r5, [pc, #24]	; (800d154 <_sbrk_r+0x1c>)
 800d13c:	2300      	movs	r3, #0
 800d13e:	4604      	mov	r4, r0
 800d140:	4608      	mov	r0, r1
 800d142:	602b      	str	r3, [r5, #0]
 800d144:	f7f8 f972 	bl	800542c <_sbrk>
 800d148:	1c43      	adds	r3, r0, #1
 800d14a:	d102      	bne.n	800d152 <_sbrk_r+0x1a>
 800d14c:	682b      	ldr	r3, [r5, #0]
 800d14e:	b103      	cbz	r3, 800d152 <_sbrk_r+0x1a>
 800d150:	6023      	str	r3, [r4, #0]
 800d152:	bd38      	pop	{r3, r4, r5, pc}
 800d154:	20000f4c 	.word	0x20000f4c

0800d158 <strncmp>:
 800d158:	b510      	push	{r4, lr}
 800d15a:	b17a      	cbz	r2, 800d17c <strncmp+0x24>
 800d15c:	4603      	mov	r3, r0
 800d15e:	3901      	subs	r1, #1
 800d160:	1884      	adds	r4, r0, r2
 800d162:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d16a:	4290      	cmp	r0, r2
 800d16c:	d101      	bne.n	800d172 <strncmp+0x1a>
 800d16e:	42a3      	cmp	r3, r4
 800d170:	d101      	bne.n	800d176 <strncmp+0x1e>
 800d172:	1a80      	subs	r0, r0, r2
 800d174:	bd10      	pop	{r4, pc}
 800d176:	2800      	cmp	r0, #0
 800d178:	d1f3      	bne.n	800d162 <strncmp+0xa>
 800d17a:	e7fa      	b.n	800d172 <strncmp+0x1a>
 800d17c:	4610      	mov	r0, r2
 800d17e:	e7f9      	b.n	800d174 <strncmp+0x1c>

0800d180 <__swbuf_r>:
 800d180:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d182:	460e      	mov	r6, r1
 800d184:	4614      	mov	r4, r2
 800d186:	4605      	mov	r5, r0
 800d188:	b118      	cbz	r0, 800d192 <__swbuf_r+0x12>
 800d18a:	6983      	ldr	r3, [r0, #24]
 800d18c:	b90b      	cbnz	r3, 800d192 <__swbuf_r+0x12>
 800d18e:	f000 f9e7 	bl	800d560 <__sinit>
 800d192:	4b21      	ldr	r3, [pc, #132]	; (800d218 <__swbuf_r+0x98>)
 800d194:	429c      	cmp	r4, r3
 800d196:	d12b      	bne.n	800d1f0 <__swbuf_r+0x70>
 800d198:	686c      	ldr	r4, [r5, #4]
 800d19a:	69a3      	ldr	r3, [r4, #24]
 800d19c:	60a3      	str	r3, [r4, #8]
 800d19e:	89a3      	ldrh	r3, [r4, #12]
 800d1a0:	071a      	lsls	r2, r3, #28
 800d1a2:	d52f      	bpl.n	800d204 <__swbuf_r+0x84>
 800d1a4:	6923      	ldr	r3, [r4, #16]
 800d1a6:	b36b      	cbz	r3, 800d204 <__swbuf_r+0x84>
 800d1a8:	6923      	ldr	r3, [r4, #16]
 800d1aa:	6820      	ldr	r0, [r4, #0]
 800d1ac:	1ac0      	subs	r0, r0, r3
 800d1ae:	6963      	ldr	r3, [r4, #20]
 800d1b0:	b2f6      	uxtb	r6, r6
 800d1b2:	4283      	cmp	r3, r0
 800d1b4:	4637      	mov	r7, r6
 800d1b6:	dc04      	bgt.n	800d1c2 <__swbuf_r+0x42>
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4628      	mov	r0, r5
 800d1bc:	f000 f93c 	bl	800d438 <_fflush_r>
 800d1c0:	bb30      	cbnz	r0, 800d210 <__swbuf_r+0x90>
 800d1c2:	68a3      	ldr	r3, [r4, #8]
 800d1c4:	3b01      	subs	r3, #1
 800d1c6:	60a3      	str	r3, [r4, #8]
 800d1c8:	6823      	ldr	r3, [r4, #0]
 800d1ca:	1c5a      	adds	r2, r3, #1
 800d1cc:	6022      	str	r2, [r4, #0]
 800d1ce:	701e      	strb	r6, [r3, #0]
 800d1d0:	6963      	ldr	r3, [r4, #20]
 800d1d2:	3001      	adds	r0, #1
 800d1d4:	4283      	cmp	r3, r0
 800d1d6:	d004      	beq.n	800d1e2 <__swbuf_r+0x62>
 800d1d8:	89a3      	ldrh	r3, [r4, #12]
 800d1da:	07db      	lsls	r3, r3, #31
 800d1dc:	d506      	bpl.n	800d1ec <__swbuf_r+0x6c>
 800d1de:	2e0a      	cmp	r6, #10
 800d1e0:	d104      	bne.n	800d1ec <__swbuf_r+0x6c>
 800d1e2:	4621      	mov	r1, r4
 800d1e4:	4628      	mov	r0, r5
 800d1e6:	f000 f927 	bl	800d438 <_fflush_r>
 800d1ea:	b988      	cbnz	r0, 800d210 <__swbuf_r+0x90>
 800d1ec:	4638      	mov	r0, r7
 800d1ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <__swbuf_r+0x9c>)
 800d1f2:	429c      	cmp	r4, r3
 800d1f4:	d101      	bne.n	800d1fa <__swbuf_r+0x7a>
 800d1f6:	68ac      	ldr	r4, [r5, #8]
 800d1f8:	e7cf      	b.n	800d19a <__swbuf_r+0x1a>
 800d1fa:	4b09      	ldr	r3, [pc, #36]	; (800d220 <__swbuf_r+0xa0>)
 800d1fc:	429c      	cmp	r4, r3
 800d1fe:	bf08      	it	eq
 800d200:	68ec      	ldreq	r4, [r5, #12]
 800d202:	e7ca      	b.n	800d19a <__swbuf_r+0x1a>
 800d204:	4621      	mov	r1, r4
 800d206:	4628      	mov	r0, r5
 800d208:	f000 f81a 	bl	800d240 <__swsetup_r>
 800d20c:	2800      	cmp	r0, #0
 800d20e:	d0cb      	beq.n	800d1a8 <__swbuf_r+0x28>
 800d210:	f04f 37ff 	mov.w	r7, #4294967295
 800d214:	e7ea      	b.n	800d1ec <__swbuf_r+0x6c>
 800d216:	bf00      	nop
 800d218:	0800f9e0 	.word	0x0800f9e0
 800d21c:	0800fa00 	.word	0x0800fa00
 800d220:	0800f9c0 	.word	0x0800f9c0

0800d224 <__ascii_wctomb>:
 800d224:	b149      	cbz	r1, 800d23a <__ascii_wctomb+0x16>
 800d226:	2aff      	cmp	r2, #255	; 0xff
 800d228:	bf85      	ittet	hi
 800d22a:	238a      	movhi	r3, #138	; 0x8a
 800d22c:	6003      	strhi	r3, [r0, #0]
 800d22e:	700a      	strbls	r2, [r1, #0]
 800d230:	f04f 30ff 	movhi.w	r0, #4294967295
 800d234:	bf98      	it	ls
 800d236:	2001      	movls	r0, #1
 800d238:	4770      	bx	lr
 800d23a:	4608      	mov	r0, r1
 800d23c:	4770      	bx	lr
	...

0800d240 <__swsetup_r>:
 800d240:	4b32      	ldr	r3, [pc, #200]	; (800d30c <__swsetup_r+0xcc>)
 800d242:	b570      	push	{r4, r5, r6, lr}
 800d244:	681d      	ldr	r5, [r3, #0]
 800d246:	4606      	mov	r6, r0
 800d248:	460c      	mov	r4, r1
 800d24a:	b125      	cbz	r5, 800d256 <__swsetup_r+0x16>
 800d24c:	69ab      	ldr	r3, [r5, #24]
 800d24e:	b913      	cbnz	r3, 800d256 <__swsetup_r+0x16>
 800d250:	4628      	mov	r0, r5
 800d252:	f000 f985 	bl	800d560 <__sinit>
 800d256:	4b2e      	ldr	r3, [pc, #184]	; (800d310 <__swsetup_r+0xd0>)
 800d258:	429c      	cmp	r4, r3
 800d25a:	d10f      	bne.n	800d27c <__swsetup_r+0x3c>
 800d25c:	686c      	ldr	r4, [r5, #4]
 800d25e:	89a3      	ldrh	r3, [r4, #12]
 800d260:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d264:	0719      	lsls	r1, r3, #28
 800d266:	d42c      	bmi.n	800d2c2 <__swsetup_r+0x82>
 800d268:	06dd      	lsls	r5, r3, #27
 800d26a:	d411      	bmi.n	800d290 <__swsetup_r+0x50>
 800d26c:	2309      	movs	r3, #9
 800d26e:	6033      	str	r3, [r6, #0]
 800d270:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d274:	81a3      	strh	r3, [r4, #12]
 800d276:	f04f 30ff 	mov.w	r0, #4294967295
 800d27a:	e03e      	b.n	800d2fa <__swsetup_r+0xba>
 800d27c:	4b25      	ldr	r3, [pc, #148]	; (800d314 <__swsetup_r+0xd4>)
 800d27e:	429c      	cmp	r4, r3
 800d280:	d101      	bne.n	800d286 <__swsetup_r+0x46>
 800d282:	68ac      	ldr	r4, [r5, #8]
 800d284:	e7eb      	b.n	800d25e <__swsetup_r+0x1e>
 800d286:	4b24      	ldr	r3, [pc, #144]	; (800d318 <__swsetup_r+0xd8>)
 800d288:	429c      	cmp	r4, r3
 800d28a:	bf08      	it	eq
 800d28c:	68ec      	ldreq	r4, [r5, #12]
 800d28e:	e7e6      	b.n	800d25e <__swsetup_r+0x1e>
 800d290:	0758      	lsls	r0, r3, #29
 800d292:	d512      	bpl.n	800d2ba <__swsetup_r+0x7a>
 800d294:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d296:	b141      	cbz	r1, 800d2aa <__swsetup_r+0x6a>
 800d298:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d29c:	4299      	cmp	r1, r3
 800d29e:	d002      	beq.n	800d2a6 <__swsetup_r+0x66>
 800d2a0:	4630      	mov	r0, r6
 800d2a2:	f7ff fbab 	bl	800c9fc <_free_r>
 800d2a6:	2300      	movs	r3, #0
 800d2a8:	6363      	str	r3, [r4, #52]	; 0x34
 800d2aa:	89a3      	ldrh	r3, [r4, #12]
 800d2ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d2b0:	81a3      	strh	r3, [r4, #12]
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	6063      	str	r3, [r4, #4]
 800d2b6:	6923      	ldr	r3, [r4, #16]
 800d2b8:	6023      	str	r3, [r4, #0]
 800d2ba:	89a3      	ldrh	r3, [r4, #12]
 800d2bc:	f043 0308 	orr.w	r3, r3, #8
 800d2c0:	81a3      	strh	r3, [r4, #12]
 800d2c2:	6923      	ldr	r3, [r4, #16]
 800d2c4:	b94b      	cbnz	r3, 800d2da <__swsetup_r+0x9a>
 800d2c6:	89a3      	ldrh	r3, [r4, #12]
 800d2c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d2cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d2d0:	d003      	beq.n	800d2da <__swsetup_r+0x9a>
 800d2d2:	4621      	mov	r1, r4
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	f000 fa09 	bl	800d6ec <__smakebuf_r>
 800d2da:	89a0      	ldrh	r0, [r4, #12]
 800d2dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d2e0:	f010 0301 	ands.w	r3, r0, #1
 800d2e4:	d00a      	beq.n	800d2fc <__swsetup_r+0xbc>
 800d2e6:	2300      	movs	r3, #0
 800d2e8:	60a3      	str	r3, [r4, #8]
 800d2ea:	6963      	ldr	r3, [r4, #20]
 800d2ec:	425b      	negs	r3, r3
 800d2ee:	61a3      	str	r3, [r4, #24]
 800d2f0:	6923      	ldr	r3, [r4, #16]
 800d2f2:	b943      	cbnz	r3, 800d306 <__swsetup_r+0xc6>
 800d2f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d2f8:	d1ba      	bne.n	800d270 <__swsetup_r+0x30>
 800d2fa:	bd70      	pop	{r4, r5, r6, pc}
 800d2fc:	0781      	lsls	r1, r0, #30
 800d2fe:	bf58      	it	pl
 800d300:	6963      	ldrpl	r3, [r4, #20]
 800d302:	60a3      	str	r3, [r4, #8]
 800d304:	e7f4      	b.n	800d2f0 <__swsetup_r+0xb0>
 800d306:	2000      	movs	r0, #0
 800d308:	e7f7      	b.n	800d2fa <__swsetup_r+0xba>
 800d30a:	bf00      	nop
 800d30c:	20000074 	.word	0x20000074
 800d310:	0800f9e0 	.word	0x0800f9e0
 800d314:	0800fa00 	.word	0x0800fa00
 800d318:	0800f9c0 	.word	0x0800f9c0

0800d31c <abort>:
 800d31c:	b508      	push	{r3, lr}
 800d31e:	2006      	movs	r0, #6
 800d320:	f000 faa2 	bl	800d868 <raise>
 800d324:	2001      	movs	r0, #1
 800d326:	f7f8 f851 	bl	80053cc <_exit>
	...

0800d32c <__sflush_r>:
 800d32c:	898a      	ldrh	r2, [r1, #12]
 800d32e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d332:	4605      	mov	r5, r0
 800d334:	0710      	lsls	r0, r2, #28
 800d336:	460c      	mov	r4, r1
 800d338:	d458      	bmi.n	800d3ec <__sflush_r+0xc0>
 800d33a:	684b      	ldr	r3, [r1, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	dc05      	bgt.n	800d34c <__sflush_r+0x20>
 800d340:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d342:	2b00      	cmp	r3, #0
 800d344:	dc02      	bgt.n	800d34c <__sflush_r+0x20>
 800d346:	2000      	movs	r0, #0
 800d348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d34c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d34e:	2e00      	cmp	r6, #0
 800d350:	d0f9      	beq.n	800d346 <__sflush_r+0x1a>
 800d352:	2300      	movs	r3, #0
 800d354:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d358:	682f      	ldr	r7, [r5, #0]
 800d35a:	602b      	str	r3, [r5, #0]
 800d35c:	d032      	beq.n	800d3c4 <__sflush_r+0x98>
 800d35e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d360:	89a3      	ldrh	r3, [r4, #12]
 800d362:	075a      	lsls	r2, r3, #29
 800d364:	d505      	bpl.n	800d372 <__sflush_r+0x46>
 800d366:	6863      	ldr	r3, [r4, #4]
 800d368:	1ac0      	subs	r0, r0, r3
 800d36a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d36c:	b10b      	cbz	r3, 800d372 <__sflush_r+0x46>
 800d36e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d370:	1ac0      	subs	r0, r0, r3
 800d372:	2300      	movs	r3, #0
 800d374:	4602      	mov	r2, r0
 800d376:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d378:	6a21      	ldr	r1, [r4, #32]
 800d37a:	4628      	mov	r0, r5
 800d37c:	47b0      	blx	r6
 800d37e:	1c43      	adds	r3, r0, #1
 800d380:	89a3      	ldrh	r3, [r4, #12]
 800d382:	d106      	bne.n	800d392 <__sflush_r+0x66>
 800d384:	6829      	ldr	r1, [r5, #0]
 800d386:	291d      	cmp	r1, #29
 800d388:	d82c      	bhi.n	800d3e4 <__sflush_r+0xb8>
 800d38a:	4a2a      	ldr	r2, [pc, #168]	; (800d434 <__sflush_r+0x108>)
 800d38c:	40ca      	lsrs	r2, r1
 800d38e:	07d6      	lsls	r6, r2, #31
 800d390:	d528      	bpl.n	800d3e4 <__sflush_r+0xb8>
 800d392:	2200      	movs	r2, #0
 800d394:	6062      	str	r2, [r4, #4]
 800d396:	04d9      	lsls	r1, r3, #19
 800d398:	6922      	ldr	r2, [r4, #16]
 800d39a:	6022      	str	r2, [r4, #0]
 800d39c:	d504      	bpl.n	800d3a8 <__sflush_r+0x7c>
 800d39e:	1c42      	adds	r2, r0, #1
 800d3a0:	d101      	bne.n	800d3a6 <__sflush_r+0x7a>
 800d3a2:	682b      	ldr	r3, [r5, #0]
 800d3a4:	b903      	cbnz	r3, 800d3a8 <__sflush_r+0x7c>
 800d3a6:	6560      	str	r0, [r4, #84]	; 0x54
 800d3a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3aa:	602f      	str	r7, [r5, #0]
 800d3ac:	2900      	cmp	r1, #0
 800d3ae:	d0ca      	beq.n	800d346 <__sflush_r+0x1a>
 800d3b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d3b4:	4299      	cmp	r1, r3
 800d3b6:	d002      	beq.n	800d3be <__sflush_r+0x92>
 800d3b8:	4628      	mov	r0, r5
 800d3ba:	f7ff fb1f 	bl	800c9fc <_free_r>
 800d3be:	2000      	movs	r0, #0
 800d3c0:	6360      	str	r0, [r4, #52]	; 0x34
 800d3c2:	e7c1      	b.n	800d348 <__sflush_r+0x1c>
 800d3c4:	6a21      	ldr	r1, [r4, #32]
 800d3c6:	2301      	movs	r3, #1
 800d3c8:	4628      	mov	r0, r5
 800d3ca:	47b0      	blx	r6
 800d3cc:	1c41      	adds	r1, r0, #1
 800d3ce:	d1c7      	bne.n	800d360 <__sflush_r+0x34>
 800d3d0:	682b      	ldr	r3, [r5, #0]
 800d3d2:	2b00      	cmp	r3, #0
 800d3d4:	d0c4      	beq.n	800d360 <__sflush_r+0x34>
 800d3d6:	2b1d      	cmp	r3, #29
 800d3d8:	d001      	beq.n	800d3de <__sflush_r+0xb2>
 800d3da:	2b16      	cmp	r3, #22
 800d3dc:	d101      	bne.n	800d3e2 <__sflush_r+0xb6>
 800d3de:	602f      	str	r7, [r5, #0]
 800d3e0:	e7b1      	b.n	800d346 <__sflush_r+0x1a>
 800d3e2:	89a3      	ldrh	r3, [r4, #12]
 800d3e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d3e8:	81a3      	strh	r3, [r4, #12]
 800d3ea:	e7ad      	b.n	800d348 <__sflush_r+0x1c>
 800d3ec:	690f      	ldr	r7, [r1, #16]
 800d3ee:	2f00      	cmp	r7, #0
 800d3f0:	d0a9      	beq.n	800d346 <__sflush_r+0x1a>
 800d3f2:	0793      	lsls	r3, r2, #30
 800d3f4:	680e      	ldr	r6, [r1, #0]
 800d3f6:	bf08      	it	eq
 800d3f8:	694b      	ldreq	r3, [r1, #20]
 800d3fa:	600f      	str	r7, [r1, #0]
 800d3fc:	bf18      	it	ne
 800d3fe:	2300      	movne	r3, #0
 800d400:	eba6 0807 	sub.w	r8, r6, r7
 800d404:	608b      	str	r3, [r1, #8]
 800d406:	f1b8 0f00 	cmp.w	r8, #0
 800d40a:	dd9c      	ble.n	800d346 <__sflush_r+0x1a>
 800d40c:	6a21      	ldr	r1, [r4, #32]
 800d40e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d410:	4643      	mov	r3, r8
 800d412:	463a      	mov	r2, r7
 800d414:	4628      	mov	r0, r5
 800d416:	47b0      	blx	r6
 800d418:	2800      	cmp	r0, #0
 800d41a:	dc06      	bgt.n	800d42a <__sflush_r+0xfe>
 800d41c:	89a3      	ldrh	r3, [r4, #12]
 800d41e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d422:	81a3      	strh	r3, [r4, #12]
 800d424:	f04f 30ff 	mov.w	r0, #4294967295
 800d428:	e78e      	b.n	800d348 <__sflush_r+0x1c>
 800d42a:	4407      	add	r7, r0
 800d42c:	eba8 0800 	sub.w	r8, r8, r0
 800d430:	e7e9      	b.n	800d406 <__sflush_r+0xda>
 800d432:	bf00      	nop
 800d434:	20400001 	.word	0x20400001

0800d438 <_fflush_r>:
 800d438:	b538      	push	{r3, r4, r5, lr}
 800d43a:	690b      	ldr	r3, [r1, #16]
 800d43c:	4605      	mov	r5, r0
 800d43e:	460c      	mov	r4, r1
 800d440:	b913      	cbnz	r3, 800d448 <_fflush_r+0x10>
 800d442:	2500      	movs	r5, #0
 800d444:	4628      	mov	r0, r5
 800d446:	bd38      	pop	{r3, r4, r5, pc}
 800d448:	b118      	cbz	r0, 800d452 <_fflush_r+0x1a>
 800d44a:	6983      	ldr	r3, [r0, #24]
 800d44c:	b90b      	cbnz	r3, 800d452 <_fflush_r+0x1a>
 800d44e:	f000 f887 	bl	800d560 <__sinit>
 800d452:	4b14      	ldr	r3, [pc, #80]	; (800d4a4 <_fflush_r+0x6c>)
 800d454:	429c      	cmp	r4, r3
 800d456:	d11b      	bne.n	800d490 <_fflush_r+0x58>
 800d458:	686c      	ldr	r4, [r5, #4]
 800d45a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d0ef      	beq.n	800d442 <_fflush_r+0xa>
 800d462:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d464:	07d0      	lsls	r0, r2, #31
 800d466:	d404      	bmi.n	800d472 <_fflush_r+0x3a>
 800d468:	0599      	lsls	r1, r3, #22
 800d46a:	d402      	bmi.n	800d472 <_fflush_r+0x3a>
 800d46c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d46e:	f000 f915 	bl	800d69c <__retarget_lock_acquire_recursive>
 800d472:	4628      	mov	r0, r5
 800d474:	4621      	mov	r1, r4
 800d476:	f7ff ff59 	bl	800d32c <__sflush_r>
 800d47a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d47c:	07da      	lsls	r2, r3, #31
 800d47e:	4605      	mov	r5, r0
 800d480:	d4e0      	bmi.n	800d444 <_fflush_r+0xc>
 800d482:	89a3      	ldrh	r3, [r4, #12]
 800d484:	059b      	lsls	r3, r3, #22
 800d486:	d4dd      	bmi.n	800d444 <_fflush_r+0xc>
 800d488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d48a:	f000 f908 	bl	800d69e <__retarget_lock_release_recursive>
 800d48e:	e7d9      	b.n	800d444 <_fflush_r+0xc>
 800d490:	4b05      	ldr	r3, [pc, #20]	; (800d4a8 <_fflush_r+0x70>)
 800d492:	429c      	cmp	r4, r3
 800d494:	d101      	bne.n	800d49a <_fflush_r+0x62>
 800d496:	68ac      	ldr	r4, [r5, #8]
 800d498:	e7df      	b.n	800d45a <_fflush_r+0x22>
 800d49a:	4b04      	ldr	r3, [pc, #16]	; (800d4ac <_fflush_r+0x74>)
 800d49c:	429c      	cmp	r4, r3
 800d49e:	bf08      	it	eq
 800d4a0:	68ec      	ldreq	r4, [r5, #12]
 800d4a2:	e7da      	b.n	800d45a <_fflush_r+0x22>
 800d4a4:	0800f9e0 	.word	0x0800f9e0
 800d4a8:	0800fa00 	.word	0x0800fa00
 800d4ac:	0800f9c0 	.word	0x0800f9c0

0800d4b0 <std>:
 800d4b0:	2300      	movs	r3, #0
 800d4b2:	b510      	push	{r4, lr}
 800d4b4:	4604      	mov	r4, r0
 800d4b6:	e9c0 3300 	strd	r3, r3, [r0]
 800d4ba:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4be:	6083      	str	r3, [r0, #8]
 800d4c0:	8181      	strh	r1, [r0, #12]
 800d4c2:	6643      	str	r3, [r0, #100]	; 0x64
 800d4c4:	81c2      	strh	r2, [r0, #14]
 800d4c6:	6183      	str	r3, [r0, #24]
 800d4c8:	4619      	mov	r1, r3
 800d4ca:	2208      	movs	r2, #8
 800d4cc:	305c      	adds	r0, #92	; 0x5c
 800d4ce:	f7fb fd29 	bl	8008f24 <memset>
 800d4d2:	4b05      	ldr	r3, [pc, #20]	; (800d4e8 <std+0x38>)
 800d4d4:	6263      	str	r3, [r4, #36]	; 0x24
 800d4d6:	4b05      	ldr	r3, [pc, #20]	; (800d4ec <std+0x3c>)
 800d4d8:	62a3      	str	r3, [r4, #40]	; 0x28
 800d4da:	4b05      	ldr	r3, [pc, #20]	; (800d4f0 <std+0x40>)
 800d4dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d4de:	4b05      	ldr	r3, [pc, #20]	; (800d4f4 <std+0x44>)
 800d4e0:	6224      	str	r4, [r4, #32]
 800d4e2:	6323      	str	r3, [r4, #48]	; 0x30
 800d4e4:	bd10      	pop	{r4, pc}
 800d4e6:	bf00      	nop
 800d4e8:	0800d8a1 	.word	0x0800d8a1
 800d4ec:	0800d8c3 	.word	0x0800d8c3
 800d4f0:	0800d8fb 	.word	0x0800d8fb
 800d4f4:	0800d91f 	.word	0x0800d91f

0800d4f8 <_cleanup_r>:
 800d4f8:	4901      	ldr	r1, [pc, #4]	; (800d500 <_cleanup_r+0x8>)
 800d4fa:	f000 b8af 	b.w	800d65c <_fwalk_reent>
 800d4fe:	bf00      	nop
 800d500:	0800d439 	.word	0x0800d439

0800d504 <__sfmoreglue>:
 800d504:	b570      	push	{r4, r5, r6, lr}
 800d506:	2268      	movs	r2, #104	; 0x68
 800d508:	1e4d      	subs	r5, r1, #1
 800d50a:	4355      	muls	r5, r2
 800d50c:	460e      	mov	r6, r1
 800d50e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d512:	f7ff fadf 	bl	800cad4 <_malloc_r>
 800d516:	4604      	mov	r4, r0
 800d518:	b140      	cbz	r0, 800d52c <__sfmoreglue+0x28>
 800d51a:	2100      	movs	r1, #0
 800d51c:	e9c0 1600 	strd	r1, r6, [r0]
 800d520:	300c      	adds	r0, #12
 800d522:	60a0      	str	r0, [r4, #8]
 800d524:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d528:	f7fb fcfc 	bl	8008f24 <memset>
 800d52c:	4620      	mov	r0, r4
 800d52e:	bd70      	pop	{r4, r5, r6, pc}

0800d530 <__sfp_lock_acquire>:
 800d530:	4801      	ldr	r0, [pc, #4]	; (800d538 <__sfp_lock_acquire+0x8>)
 800d532:	f000 b8b3 	b.w	800d69c <__retarget_lock_acquire_recursive>
 800d536:	bf00      	nop
 800d538:	20000f49 	.word	0x20000f49

0800d53c <__sfp_lock_release>:
 800d53c:	4801      	ldr	r0, [pc, #4]	; (800d544 <__sfp_lock_release+0x8>)
 800d53e:	f000 b8ae 	b.w	800d69e <__retarget_lock_release_recursive>
 800d542:	bf00      	nop
 800d544:	20000f49 	.word	0x20000f49

0800d548 <__sinit_lock_acquire>:
 800d548:	4801      	ldr	r0, [pc, #4]	; (800d550 <__sinit_lock_acquire+0x8>)
 800d54a:	f000 b8a7 	b.w	800d69c <__retarget_lock_acquire_recursive>
 800d54e:	bf00      	nop
 800d550:	20000f4a 	.word	0x20000f4a

0800d554 <__sinit_lock_release>:
 800d554:	4801      	ldr	r0, [pc, #4]	; (800d55c <__sinit_lock_release+0x8>)
 800d556:	f000 b8a2 	b.w	800d69e <__retarget_lock_release_recursive>
 800d55a:	bf00      	nop
 800d55c:	20000f4a 	.word	0x20000f4a

0800d560 <__sinit>:
 800d560:	b510      	push	{r4, lr}
 800d562:	4604      	mov	r4, r0
 800d564:	f7ff fff0 	bl	800d548 <__sinit_lock_acquire>
 800d568:	69a3      	ldr	r3, [r4, #24]
 800d56a:	b11b      	cbz	r3, 800d574 <__sinit+0x14>
 800d56c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d570:	f7ff bff0 	b.w	800d554 <__sinit_lock_release>
 800d574:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d578:	6523      	str	r3, [r4, #80]	; 0x50
 800d57a:	4b13      	ldr	r3, [pc, #76]	; (800d5c8 <__sinit+0x68>)
 800d57c:	4a13      	ldr	r2, [pc, #76]	; (800d5cc <__sinit+0x6c>)
 800d57e:	681b      	ldr	r3, [r3, #0]
 800d580:	62a2      	str	r2, [r4, #40]	; 0x28
 800d582:	42a3      	cmp	r3, r4
 800d584:	bf04      	itt	eq
 800d586:	2301      	moveq	r3, #1
 800d588:	61a3      	streq	r3, [r4, #24]
 800d58a:	4620      	mov	r0, r4
 800d58c:	f000 f820 	bl	800d5d0 <__sfp>
 800d590:	6060      	str	r0, [r4, #4]
 800d592:	4620      	mov	r0, r4
 800d594:	f000 f81c 	bl	800d5d0 <__sfp>
 800d598:	60a0      	str	r0, [r4, #8]
 800d59a:	4620      	mov	r0, r4
 800d59c:	f000 f818 	bl	800d5d0 <__sfp>
 800d5a0:	2200      	movs	r2, #0
 800d5a2:	60e0      	str	r0, [r4, #12]
 800d5a4:	2104      	movs	r1, #4
 800d5a6:	6860      	ldr	r0, [r4, #4]
 800d5a8:	f7ff ff82 	bl	800d4b0 <std>
 800d5ac:	68a0      	ldr	r0, [r4, #8]
 800d5ae:	2201      	movs	r2, #1
 800d5b0:	2109      	movs	r1, #9
 800d5b2:	f7ff ff7d 	bl	800d4b0 <std>
 800d5b6:	68e0      	ldr	r0, [r4, #12]
 800d5b8:	2202      	movs	r2, #2
 800d5ba:	2112      	movs	r1, #18
 800d5bc:	f7ff ff78 	bl	800d4b0 <std>
 800d5c0:	2301      	movs	r3, #1
 800d5c2:	61a3      	str	r3, [r4, #24]
 800d5c4:	e7d2      	b.n	800d56c <__sinit+0xc>
 800d5c6:	bf00      	nop
 800d5c8:	0800f51c 	.word	0x0800f51c
 800d5cc:	0800d4f9 	.word	0x0800d4f9

0800d5d0 <__sfp>:
 800d5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5d2:	4607      	mov	r7, r0
 800d5d4:	f7ff ffac 	bl	800d530 <__sfp_lock_acquire>
 800d5d8:	4b1e      	ldr	r3, [pc, #120]	; (800d654 <__sfp+0x84>)
 800d5da:	681e      	ldr	r6, [r3, #0]
 800d5dc:	69b3      	ldr	r3, [r6, #24]
 800d5de:	b913      	cbnz	r3, 800d5e6 <__sfp+0x16>
 800d5e0:	4630      	mov	r0, r6
 800d5e2:	f7ff ffbd 	bl	800d560 <__sinit>
 800d5e6:	3648      	adds	r6, #72	; 0x48
 800d5e8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d5ec:	3b01      	subs	r3, #1
 800d5ee:	d503      	bpl.n	800d5f8 <__sfp+0x28>
 800d5f0:	6833      	ldr	r3, [r6, #0]
 800d5f2:	b30b      	cbz	r3, 800d638 <__sfp+0x68>
 800d5f4:	6836      	ldr	r6, [r6, #0]
 800d5f6:	e7f7      	b.n	800d5e8 <__sfp+0x18>
 800d5f8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d5fc:	b9d5      	cbnz	r5, 800d634 <__sfp+0x64>
 800d5fe:	4b16      	ldr	r3, [pc, #88]	; (800d658 <__sfp+0x88>)
 800d600:	60e3      	str	r3, [r4, #12]
 800d602:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d606:	6665      	str	r5, [r4, #100]	; 0x64
 800d608:	f000 f847 	bl	800d69a <__retarget_lock_init_recursive>
 800d60c:	f7ff ff96 	bl	800d53c <__sfp_lock_release>
 800d610:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d614:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d618:	6025      	str	r5, [r4, #0]
 800d61a:	61a5      	str	r5, [r4, #24]
 800d61c:	2208      	movs	r2, #8
 800d61e:	4629      	mov	r1, r5
 800d620:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d624:	f7fb fc7e 	bl	8008f24 <memset>
 800d628:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d62c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d630:	4620      	mov	r0, r4
 800d632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d634:	3468      	adds	r4, #104	; 0x68
 800d636:	e7d9      	b.n	800d5ec <__sfp+0x1c>
 800d638:	2104      	movs	r1, #4
 800d63a:	4638      	mov	r0, r7
 800d63c:	f7ff ff62 	bl	800d504 <__sfmoreglue>
 800d640:	4604      	mov	r4, r0
 800d642:	6030      	str	r0, [r6, #0]
 800d644:	2800      	cmp	r0, #0
 800d646:	d1d5      	bne.n	800d5f4 <__sfp+0x24>
 800d648:	f7ff ff78 	bl	800d53c <__sfp_lock_release>
 800d64c:	230c      	movs	r3, #12
 800d64e:	603b      	str	r3, [r7, #0]
 800d650:	e7ee      	b.n	800d630 <__sfp+0x60>
 800d652:	bf00      	nop
 800d654:	0800f51c 	.word	0x0800f51c
 800d658:	ffff0001 	.word	0xffff0001

0800d65c <_fwalk_reent>:
 800d65c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d660:	4606      	mov	r6, r0
 800d662:	4688      	mov	r8, r1
 800d664:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d668:	2700      	movs	r7, #0
 800d66a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d66e:	f1b9 0901 	subs.w	r9, r9, #1
 800d672:	d505      	bpl.n	800d680 <_fwalk_reent+0x24>
 800d674:	6824      	ldr	r4, [r4, #0]
 800d676:	2c00      	cmp	r4, #0
 800d678:	d1f7      	bne.n	800d66a <_fwalk_reent+0xe>
 800d67a:	4638      	mov	r0, r7
 800d67c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d680:	89ab      	ldrh	r3, [r5, #12]
 800d682:	2b01      	cmp	r3, #1
 800d684:	d907      	bls.n	800d696 <_fwalk_reent+0x3a>
 800d686:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d68a:	3301      	adds	r3, #1
 800d68c:	d003      	beq.n	800d696 <_fwalk_reent+0x3a>
 800d68e:	4629      	mov	r1, r5
 800d690:	4630      	mov	r0, r6
 800d692:	47c0      	blx	r8
 800d694:	4307      	orrs	r7, r0
 800d696:	3568      	adds	r5, #104	; 0x68
 800d698:	e7e9      	b.n	800d66e <_fwalk_reent+0x12>

0800d69a <__retarget_lock_init_recursive>:
 800d69a:	4770      	bx	lr

0800d69c <__retarget_lock_acquire_recursive>:
 800d69c:	4770      	bx	lr

0800d69e <__retarget_lock_release_recursive>:
 800d69e:	4770      	bx	lr

0800d6a0 <__swhatbuf_r>:
 800d6a0:	b570      	push	{r4, r5, r6, lr}
 800d6a2:	460e      	mov	r6, r1
 800d6a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d6a8:	2900      	cmp	r1, #0
 800d6aa:	b096      	sub	sp, #88	; 0x58
 800d6ac:	4614      	mov	r4, r2
 800d6ae:	461d      	mov	r5, r3
 800d6b0:	da08      	bge.n	800d6c4 <__swhatbuf_r+0x24>
 800d6b2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d6b6:	2200      	movs	r2, #0
 800d6b8:	602a      	str	r2, [r5, #0]
 800d6ba:	061a      	lsls	r2, r3, #24
 800d6bc:	d410      	bmi.n	800d6e0 <__swhatbuf_r+0x40>
 800d6be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6c2:	e00e      	b.n	800d6e2 <__swhatbuf_r+0x42>
 800d6c4:	466a      	mov	r2, sp
 800d6c6:	f000 f951 	bl	800d96c <_fstat_r>
 800d6ca:	2800      	cmp	r0, #0
 800d6cc:	dbf1      	blt.n	800d6b2 <__swhatbuf_r+0x12>
 800d6ce:	9a01      	ldr	r2, [sp, #4]
 800d6d0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d6d4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d6d8:	425a      	negs	r2, r3
 800d6da:	415a      	adcs	r2, r3
 800d6dc:	602a      	str	r2, [r5, #0]
 800d6de:	e7ee      	b.n	800d6be <__swhatbuf_r+0x1e>
 800d6e0:	2340      	movs	r3, #64	; 0x40
 800d6e2:	2000      	movs	r0, #0
 800d6e4:	6023      	str	r3, [r4, #0]
 800d6e6:	b016      	add	sp, #88	; 0x58
 800d6e8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d6ec <__smakebuf_r>:
 800d6ec:	898b      	ldrh	r3, [r1, #12]
 800d6ee:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6f0:	079d      	lsls	r5, r3, #30
 800d6f2:	4606      	mov	r6, r0
 800d6f4:	460c      	mov	r4, r1
 800d6f6:	d507      	bpl.n	800d708 <__smakebuf_r+0x1c>
 800d6f8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6fc:	6023      	str	r3, [r4, #0]
 800d6fe:	6123      	str	r3, [r4, #16]
 800d700:	2301      	movs	r3, #1
 800d702:	6163      	str	r3, [r4, #20]
 800d704:	b002      	add	sp, #8
 800d706:	bd70      	pop	{r4, r5, r6, pc}
 800d708:	ab01      	add	r3, sp, #4
 800d70a:	466a      	mov	r2, sp
 800d70c:	f7ff ffc8 	bl	800d6a0 <__swhatbuf_r>
 800d710:	9900      	ldr	r1, [sp, #0]
 800d712:	4605      	mov	r5, r0
 800d714:	4630      	mov	r0, r6
 800d716:	f7ff f9dd 	bl	800cad4 <_malloc_r>
 800d71a:	b948      	cbnz	r0, 800d730 <__smakebuf_r+0x44>
 800d71c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d720:	059a      	lsls	r2, r3, #22
 800d722:	d4ef      	bmi.n	800d704 <__smakebuf_r+0x18>
 800d724:	f023 0303 	bic.w	r3, r3, #3
 800d728:	f043 0302 	orr.w	r3, r3, #2
 800d72c:	81a3      	strh	r3, [r4, #12]
 800d72e:	e7e3      	b.n	800d6f8 <__smakebuf_r+0xc>
 800d730:	4b0d      	ldr	r3, [pc, #52]	; (800d768 <__smakebuf_r+0x7c>)
 800d732:	62b3      	str	r3, [r6, #40]	; 0x28
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	6020      	str	r0, [r4, #0]
 800d738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d73c:	81a3      	strh	r3, [r4, #12]
 800d73e:	9b00      	ldr	r3, [sp, #0]
 800d740:	6163      	str	r3, [r4, #20]
 800d742:	9b01      	ldr	r3, [sp, #4]
 800d744:	6120      	str	r0, [r4, #16]
 800d746:	b15b      	cbz	r3, 800d760 <__smakebuf_r+0x74>
 800d748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d74c:	4630      	mov	r0, r6
 800d74e:	f000 f91f 	bl	800d990 <_isatty_r>
 800d752:	b128      	cbz	r0, 800d760 <__smakebuf_r+0x74>
 800d754:	89a3      	ldrh	r3, [r4, #12]
 800d756:	f023 0303 	bic.w	r3, r3, #3
 800d75a:	f043 0301 	orr.w	r3, r3, #1
 800d75e:	81a3      	strh	r3, [r4, #12]
 800d760:	89a0      	ldrh	r0, [r4, #12]
 800d762:	4305      	orrs	r5, r0
 800d764:	81a5      	strh	r5, [r4, #12]
 800d766:	e7cd      	b.n	800d704 <__smakebuf_r+0x18>
 800d768:	0800d4f9 	.word	0x0800d4f9

0800d76c <memmove>:
 800d76c:	4288      	cmp	r0, r1
 800d76e:	b510      	push	{r4, lr}
 800d770:	eb01 0402 	add.w	r4, r1, r2
 800d774:	d902      	bls.n	800d77c <memmove+0x10>
 800d776:	4284      	cmp	r4, r0
 800d778:	4623      	mov	r3, r4
 800d77a:	d807      	bhi.n	800d78c <memmove+0x20>
 800d77c:	1e43      	subs	r3, r0, #1
 800d77e:	42a1      	cmp	r1, r4
 800d780:	d008      	beq.n	800d794 <memmove+0x28>
 800d782:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d786:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d78a:	e7f8      	b.n	800d77e <memmove+0x12>
 800d78c:	4402      	add	r2, r0
 800d78e:	4601      	mov	r1, r0
 800d790:	428a      	cmp	r2, r1
 800d792:	d100      	bne.n	800d796 <memmove+0x2a>
 800d794:	bd10      	pop	{r4, pc}
 800d796:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d79a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d79e:	e7f7      	b.n	800d790 <memmove+0x24>

0800d7a0 <__malloc_lock>:
 800d7a0:	4801      	ldr	r0, [pc, #4]	; (800d7a8 <__malloc_lock+0x8>)
 800d7a2:	f7ff bf7b 	b.w	800d69c <__retarget_lock_acquire_recursive>
 800d7a6:	bf00      	nop
 800d7a8:	20000f48 	.word	0x20000f48

0800d7ac <__malloc_unlock>:
 800d7ac:	4801      	ldr	r0, [pc, #4]	; (800d7b4 <__malloc_unlock+0x8>)
 800d7ae:	f7ff bf76 	b.w	800d69e <__retarget_lock_release_recursive>
 800d7b2:	bf00      	nop
 800d7b4:	20000f48 	.word	0x20000f48

0800d7b8 <_realloc_r>:
 800d7b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7bc:	4680      	mov	r8, r0
 800d7be:	4614      	mov	r4, r2
 800d7c0:	460e      	mov	r6, r1
 800d7c2:	b921      	cbnz	r1, 800d7ce <_realloc_r+0x16>
 800d7c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	4611      	mov	r1, r2
 800d7ca:	f7ff b983 	b.w	800cad4 <_malloc_r>
 800d7ce:	b92a      	cbnz	r2, 800d7dc <_realloc_r+0x24>
 800d7d0:	f7ff f914 	bl	800c9fc <_free_r>
 800d7d4:	4625      	mov	r5, r4
 800d7d6:	4628      	mov	r0, r5
 800d7d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7dc:	f000 f8fa 	bl	800d9d4 <_malloc_usable_size_r>
 800d7e0:	4284      	cmp	r4, r0
 800d7e2:	4607      	mov	r7, r0
 800d7e4:	d802      	bhi.n	800d7ec <_realloc_r+0x34>
 800d7e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7ea:	d812      	bhi.n	800d812 <_realloc_r+0x5a>
 800d7ec:	4621      	mov	r1, r4
 800d7ee:	4640      	mov	r0, r8
 800d7f0:	f7ff f970 	bl	800cad4 <_malloc_r>
 800d7f4:	4605      	mov	r5, r0
 800d7f6:	2800      	cmp	r0, #0
 800d7f8:	d0ed      	beq.n	800d7d6 <_realloc_r+0x1e>
 800d7fa:	42bc      	cmp	r4, r7
 800d7fc:	4622      	mov	r2, r4
 800d7fe:	4631      	mov	r1, r6
 800d800:	bf28      	it	cs
 800d802:	463a      	movcs	r2, r7
 800d804:	f7fb fb80 	bl	8008f08 <memcpy>
 800d808:	4631      	mov	r1, r6
 800d80a:	4640      	mov	r0, r8
 800d80c:	f7ff f8f6 	bl	800c9fc <_free_r>
 800d810:	e7e1      	b.n	800d7d6 <_realloc_r+0x1e>
 800d812:	4635      	mov	r5, r6
 800d814:	e7df      	b.n	800d7d6 <_realloc_r+0x1e>

0800d816 <_raise_r>:
 800d816:	291f      	cmp	r1, #31
 800d818:	b538      	push	{r3, r4, r5, lr}
 800d81a:	4604      	mov	r4, r0
 800d81c:	460d      	mov	r5, r1
 800d81e:	d904      	bls.n	800d82a <_raise_r+0x14>
 800d820:	2316      	movs	r3, #22
 800d822:	6003      	str	r3, [r0, #0]
 800d824:	f04f 30ff 	mov.w	r0, #4294967295
 800d828:	bd38      	pop	{r3, r4, r5, pc}
 800d82a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d82c:	b112      	cbz	r2, 800d834 <_raise_r+0x1e>
 800d82e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d832:	b94b      	cbnz	r3, 800d848 <_raise_r+0x32>
 800d834:	4620      	mov	r0, r4
 800d836:	f000 f831 	bl	800d89c <_getpid_r>
 800d83a:	462a      	mov	r2, r5
 800d83c:	4601      	mov	r1, r0
 800d83e:	4620      	mov	r0, r4
 800d840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d844:	f000 b818 	b.w	800d878 <_kill_r>
 800d848:	2b01      	cmp	r3, #1
 800d84a:	d00a      	beq.n	800d862 <_raise_r+0x4c>
 800d84c:	1c59      	adds	r1, r3, #1
 800d84e:	d103      	bne.n	800d858 <_raise_r+0x42>
 800d850:	2316      	movs	r3, #22
 800d852:	6003      	str	r3, [r0, #0]
 800d854:	2001      	movs	r0, #1
 800d856:	e7e7      	b.n	800d828 <_raise_r+0x12>
 800d858:	2400      	movs	r4, #0
 800d85a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d85e:	4628      	mov	r0, r5
 800d860:	4798      	blx	r3
 800d862:	2000      	movs	r0, #0
 800d864:	e7e0      	b.n	800d828 <_raise_r+0x12>
	...

0800d868 <raise>:
 800d868:	4b02      	ldr	r3, [pc, #8]	; (800d874 <raise+0xc>)
 800d86a:	4601      	mov	r1, r0
 800d86c:	6818      	ldr	r0, [r3, #0]
 800d86e:	f7ff bfd2 	b.w	800d816 <_raise_r>
 800d872:	bf00      	nop
 800d874:	20000074 	.word	0x20000074

0800d878 <_kill_r>:
 800d878:	b538      	push	{r3, r4, r5, lr}
 800d87a:	4d07      	ldr	r5, [pc, #28]	; (800d898 <_kill_r+0x20>)
 800d87c:	2300      	movs	r3, #0
 800d87e:	4604      	mov	r4, r0
 800d880:	4608      	mov	r0, r1
 800d882:	4611      	mov	r1, r2
 800d884:	602b      	str	r3, [r5, #0]
 800d886:	f7f7 fd99 	bl	80053bc <_kill>
 800d88a:	1c43      	adds	r3, r0, #1
 800d88c:	d102      	bne.n	800d894 <_kill_r+0x1c>
 800d88e:	682b      	ldr	r3, [r5, #0]
 800d890:	b103      	cbz	r3, 800d894 <_kill_r+0x1c>
 800d892:	6023      	str	r3, [r4, #0]
 800d894:	bd38      	pop	{r3, r4, r5, pc}
 800d896:	bf00      	nop
 800d898:	20000f4c 	.word	0x20000f4c

0800d89c <_getpid_r>:
 800d89c:	f7f7 bd8c 	b.w	80053b8 <_getpid>

0800d8a0 <__sread>:
 800d8a0:	b510      	push	{r4, lr}
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a8:	f000 f89c 	bl	800d9e4 <_read_r>
 800d8ac:	2800      	cmp	r0, #0
 800d8ae:	bfab      	itete	ge
 800d8b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d8b2:	89a3      	ldrhlt	r3, [r4, #12]
 800d8b4:	181b      	addge	r3, r3, r0
 800d8b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d8ba:	bfac      	ite	ge
 800d8bc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d8be:	81a3      	strhlt	r3, [r4, #12]
 800d8c0:	bd10      	pop	{r4, pc}

0800d8c2 <__swrite>:
 800d8c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8c6:	461f      	mov	r7, r3
 800d8c8:	898b      	ldrh	r3, [r1, #12]
 800d8ca:	05db      	lsls	r3, r3, #23
 800d8cc:	4605      	mov	r5, r0
 800d8ce:	460c      	mov	r4, r1
 800d8d0:	4616      	mov	r6, r2
 800d8d2:	d505      	bpl.n	800d8e0 <__swrite+0x1e>
 800d8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8d8:	2302      	movs	r3, #2
 800d8da:	2200      	movs	r2, #0
 800d8dc:	f000 f868 	bl	800d9b0 <_lseek_r>
 800d8e0:	89a3      	ldrh	r3, [r4, #12]
 800d8e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d8e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d8ea:	81a3      	strh	r3, [r4, #12]
 800d8ec:	4632      	mov	r2, r6
 800d8ee:	463b      	mov	r3, r7
 800d8f0:	4628      	mov	r0, r5
 800d8f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f6:	f000 b817 	b.w	800d928 <_write_r>

0800d8fa <__sseek>:
 800d8fa:	b510      	push	{r4, lr}
 800d8fc:	460c      	mov	r4, r1
 800d8fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d902:	f000 f855 	bl	800d9b0 <_lseek_r>
 800d906:	1c43      	adds	r3, r0, #1
 800d908:	89a3      	ldrh	r3, [r4, #12]
 800d90a:	bf15      	itete	ne
 800d90c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d90e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d912:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d916:	81a3      	strheq	r3, [r4, #12]
 800d918:	bf18      	it	ne
 800d91a:	81a3      	strhne	r3, [r4, #12]
 800d91c:	bd10      	pop	{r4, pc}

0800d91e <__sclose>:
 800d91e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d922:	f000 b813 	b.w	800d94c <_close_r>
	...

0800d928 <_write_r>:
 800d928:	b538      	push	{r3, r4, r5, lr}
 800d92a:	4d07      	ldr	r5, [pc, #28]	; (800d948 <_write_r+0x20>)
 800d92c:	4604      	mov	r4, r0
 800d92e:	4608      	mov	r0, r1
 800d930:	4611      	mov	r1, r2
 800d932:	2200      	movs	r2, #0
 800d934:	602a      	str	r2, [r5, #0]
 800d936:	461a      	mov	r2, r3
 800d938:	f7f7 fd5c 	bl	80053f4 <_write>
 800d93c:	1c43      	adds	r3, r0, #1
 800d93e:	d102      	bne.n	800d946 <_write_r+0x1e>
 800d940:	682b      	ldr	r3, [r5, #0]
 800d942:	b103      	cbz	r3, 800d946 <_write_r+0x1e>
 800d944:	6023      	str	r3, [r4, #0]
 800d946:	bd38      	pop	{r3, r4, r5, pc}
 800d948:	20000f4c 	.word	0x20000f4c

0800d94c <_close_r>:
 800d94c:	b538      	push	{r3, r4, r5, lr}
 800d94e:	4d06      	ldr	r5, [pc, #24]	; (800d968 <_close_r+0x1c>)
 800d950:	2300      	movs	r3, #0
 800d952:	4604      	mov	r4, r0
 800d954:	4608      	mov	r0, r1
 800d956:	602b      	str	r3, [r5, #0]
 800d958:	f7f7 fd5a 	bl	8005410 <_close>
 800d95c:	1c43      	adds	r3, r0, #1
 800d95e:	d102      	bne.n	800d966 <_close_r+0x1a>
 800d960:	682b      	ldr	r3, [r5, #0]
 800d962:	b103      	cbz	r3, 800d966 <_close_r+0x1a>
 800d964:	6023      	str	r3, [r4, #0]
 800d966:	bd38      	pop	{r3, r4, r5, pc}
 800d968:	20000f4c 	.word	0x20000f4c

0800d96c <_fstat_r>:
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4d07      	ldr	r5, [pc, #28]	; (800d98c <_fstat_r+0x20>)
 800d970:	2300      	movs	r3, #0
 800d972:	4604      	mov	r4, r0
 800d974:	4608      	mov	r0, r1
 800d976:	4611      	mov	r1, r2
 800d978:	602b      	str	r3, [r5, #0]
 800d97a:	f7f7 fd4d 	bl	8005418 <_fstat>
 800d97e:	1c43      	adds	r3, r0, #1
 800d980:	d102      	bne.n	800d988 <_fstat_r+0x1c>
 800d982:	682b      	ldr	r3, [r5, #0]
 800d984:	b103      	cbz	r3, 800d988 <_fstat_r+0x1c>
 800d986:	6023      	str	r3, [r4, #0]
 800d988:	bd38      	pop	{r3, r4, r5, pc}
 800d98a:	bf00      	nop
 800d98c:	20000f4c 	.word	0x20000f4c

0800d990 <_isatty_r>:
 800d990:	b538      	push	{r3, r4, r5, lr}
 800d992:	4d06      	ldr	r5, [pc, #24]	; (800d9ac <_isatty_r+0x1c>)
 800d994:	2300      	movs	r3, #0
 800d996:	4604      	mov	r4, r0
 800d998:	4608      	mov	r0, r1
 800d99a:	602b      	str	r3, [r5, #0]
 800d99c:	f7f7 fd42 	bl	8005424 <_isatty>
 800d9a0:	1c43      	adds	r3, r0, #1
 800d9a2:	d102      	bne.n	800d9aa <_isatty_r+0x1a>
 800d9a4:	682b      	ldr	r3, [r5, #0]
 800d9a6:	b103      	cbz	r3, 800d9aa <_isatty_r+0x1a>
 800d9a8:	6023      	str	r3, [r4, #0]
 800d9aa:	bd38      	pop	{r3, r4, r5, pc}
 800d9ac:	20000f4c 	.word	0x20000f4c

0800d9b0 <_lseek_r>:
 800d9b0:	b538      	push	{r3, r4, r5, lr}
 800d9b2:	4d07      	ldr	r5, [pc, #28]	; (800d9d0 <_lseek_r+0x20>)
 800d9b4:	4604      	mov	r4, r0
 800d9b6:	4608      	mov	r0, r1
 800d9b8:	4611      	mov	r1, r2
 800d9ba:	2200      	movs	r2, #0
 800d9bc:	602a      	str	r2, [r5, #0]
 800d9be:	461a      	mov	r2, r3
 800d9c0:	f7f7 fd32 	bl	8005428 <_lseek>
 800d9c4:	1c43      	adds	r3, r0, #1
 800d9c6:	d102      	bne.n	800d9ce <_lseek_r+0x1e>
 800d9c8:	682b      	ldr	r3, [r5, #0]
 800d9ca:	b103      	cbz	r3, 800d9ce <_lseek_r+0x1e>
 800d9cc:	6023      	str	r3, [r4, #0]
 800d9ce:	bd38      	pop	{r3, r4, r5, pc}
 800d9d0:	20000f4c 	.word	0x20000f4c

0800d9d4 <_malloc_usable_size_r>:
 800d9d4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d9d8:	1f18      	subs	r0, r3, #4
 800d9da:	2b00      	cmp	r3, #0
 800d9dc:	bfbc      	itt	lt
 800d9de:	580b      	ldrlt	r3, [r1, r0]
 800d9e0:	18c0      	addlt	r0, r0, r3
 800d9e2:	4770      	bx	lr

0800d9e4 <_read_r>:
 800d9e4:	b538      	push	{r3, r4, r5, lr}
 800d9e6:	4d07      	ldr	r5, [pc, #28]	; (800da04 <_read_r+0x20>)
 800d9e8:	4604      	mov	r4, r0
 800d9ea:	4608      	mov	r0, r1
 800d9ec:	4611      	mov	r1, r2
 800d9ee:	2200      	movs	r2, #0
 800d9f0:	602a      	str	r2, [r5, #0]
 800d9f2:	461a      	mov	r2, r3
 800d9f4:	f7f7 fcf0 	bl	80053d8 <_read>
 800d9f8:	1c43      	adds	r3, r0, #1
 800d9fa:	d102      	bne.n	800da02 <_read_r+0x1e>
 800d9fc:	682b      	ldr	r3, [r5, #0]
 800d9fe:	b103      	cbz	r3, 800da02 <_read_r+0x1e>
 800da00:	6023      	str	r3, [r4, #0]
 800da02:	bd38      	pop	{r3, r4, r5, pc}
 800da04:	20000f4c 	.word	0x20000f4c

0800da08 <cosf>:
 800da08:	ee10 3a10 	vmov	r3, s0
 800da0c:	b507      	push	{r0, r1, r2, lr}
 800da0e:	4a1e      	ldr	r2, [pc, #120]	; (800da88 <cosf+0x80>)
 800da10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da14:	4293      	cmp	r3, r2
 800da16:	dc06      	bgt.n	800da26 <cosf+0x1e>
 800da18:	eddf 0a1c 	vldr	s1, [pc, #112]	; 800da8c <cosf+0x84>
 800da1c:	b003      	add	sp, #12
 800da1e:	f85d eb04 	ldr.w	lr, [sp], #4
 800da22:	f000 bb53 	b.w	800e0cc <__kernel_cosf>
 800da26:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800da2a:	db04      	blt.n	800da36 <cosf+0x2e>
 800da2c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800da30:	b003      	add	sp, #12
 800da32:	f85d fb04 	ldr.w	pc, [sp], #4
 800da36:	4668      	mov	r0, sp
 800da38:	f000 fa08 	bl	800de4c <__ieee754_rem_pio2f>
 800da3c:	f000 0003 	and.w	r0, r0, #3
 800da40:	2801      	cmp	r0, #1
 800da42:	d009      	beq.n	800da58 <cosf+0x50>
 800da44:	2802      	cmp	r0, #2
 800da46:	d010      	beq.n	800da6a <cosf+0x62>
 800da48:	b9b0      	cbnz	r0, 800da78 <cosf+0x70>
 800da4a:	eddd 0a01 	vldr	s1, [sp, #4]
 800da4e:	ed9d 0a00 	vldr	s0, [sp]
 800da52:	f000 fb3b 	bl	800e0cc <__kernel_cosf>
 800da56:	e7eb      	b.n	800da30 <cosf+0x28>
 800da58:	eddd 0a01 	vldr	s1, [sp, #4]
 800da5c:	ed9d 0a00 	vldr	s0, [sp]
 800da60:	f000 fe0a 	bl	800e678 <__kernel_sinf>
 800da64:	eeb1 0a40 	vneg.f32	s0, s0
 800da68:	e7e2      	b.n	800da30 <cosf+0x28>
 800da6a:	eddd 0a01 	vldr	s1, [sp, #4]
 800da6e:	ed9d 0a00 	vldr	s0, [sp]
 800da72:	f000 fb2b 	bl	800e0cc <__kernel_cosf>
 800da76:	e7f5      	b.n	800da64 <cosf+0x5c>
 800da78:	eddd 0a01 	vldr	s1, [sp, #4]
 800da7c:	ed9d 0a00 	vldr	s0, [sp]
 800da80:	2001      	movs	r0, #1
 800da82:	f000 fdf9 	bl	800e678 <__kernel_sinf>
 800da86:	e7d3      	b.n	800da30 <cosf+0x28>
 800da88:	3f490fd8 	.word	0x3f490fd8
 800da8c:	00000000 	.word	0x00000000

0800da90 <sinf>:
 800da90:	ee10 3a10 	vmov	r3, s0
 800da94:	b507      	push	{r0, r1, r2, lr}
 800da96:	4a1f      	ldr	r2, [pc, #124]	; (800db14 <sinf+0x84>)
 800da98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800da9c:	4293      	cmp	r3, r2
 800da9e:	dc07      	bgt.n	800dab0 <sinf+0x20>
 800daa0:	eddf 0a1d 	vldr	s1, [pc, #116]	; 800db18 <sinf+0x88>
 800daa4:	2000      	movs	r0, #0
 800daa6:	b003      	add	sp, #12
 800daa8:	f85d eb04 	ldr.w	lr, [sp], #4
 800daac:	f000 bde4 	b.w	800e678 <__kernel_sinf>
 800dab0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800dab4:	db04      	blt.n	800dac0 <sinf+0x30>
 800dab6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800daba:	b003      	add	sp, #12
 800dabc:	f85d fb04 	ldr.w	pc, [sp], #4
 800dac0:	4668      	mov	r0, sp
 800dac2:	f000 f9c3 	bl	800de4c <__ieee754_rem_pio2f>
 800dac6:	f000 0003 	and.w	r0, r0, #3
 800daca:	2801      	cmp	r0, #1
 800dacc:	d00a      	beq.n	800dae4 <sinf+0x54>
 800dace:	2802      	cmp	r0, #2
 800dad0:	d00f      	beq.n	800daf2 <sinf+0x62>
 800dad2:	b9c0      	cbnz	r0, 800db06 <sinf+0x76>
 800dad4:	eddd 0a01 	vldr	s1, [sp, #4]
 800dad8:	ed9d 0a00 	vldr	s0, [sp]
 800dadc:	2001      	movs	r0, #1
 800dade:	f000 fdcb 	bl	800e678 <__kernel_sinf>
 800dae2:	e7ea      	b.n	800daba <sinf+0x2a>
 800dae4:	eddd 0a01 	vldr	s1, [sp, #4]
 800dae8:	ed9d 0a00 	vldr	s0, [sp]
 800daec:	f000 faee 	bl	800e0cc <__kernel_cosf>
 800daf0:	e7e3      	b.n	800daba <sinf+0x2a>
 800daf2:	eddd 0a01 	vldr	s1, [sp, #4]
 800daf6:	ed9d 0a00 	vldr	s0, [sp]
 800dafa:	2001      	movs	r0, #1
 800dafc:	f000 fdbc 	bl	800e678 <__kernel_sinf>
 800db00:	eeb1 0a40 	vneg.f32	s0, s0
 800db04:	e7d9      	b.n	800daba <sinf+0x2a>
 800db06:	eddd 0a01 	vldr	s1, [sp, #4]
 800db0a:	ed9d 0a00 	vldr	s0, [sp]
 800db0e:	f000 fadd 	bl	800e0cc <__kernel_cosf>
 800db12:	e7f5      	b.n	800db00 <sinf+0x70>
 800db14:	3f490fd8 	.word	0x3f490fd8
 800db18:	00000000 	.word	0x00000000

0800db1c <asinf>:
 800db1c:	b508      	push	{r3, lr}
 800db1e:	ed2d 8b02 	vpush	{d8}
 800db22:	eeb0 8a40 	vmov.f32	s16, s0
 800db26:	f000 f853 	bl	800dbd0 <__ieee754_asinf>
 800db2a:	eeb4 8a48 	vcmp.f32	s16, s16
 800db2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db32:	eef0 8a40 	vmov.f32	s17, s0
 800db36:	d615      	bvs.n	800db64 <asinf+0x48>
 800db38:	eeb0 0a48 	vmov.f32	s0, s16
 800db3c:	f000 fde4 	bl	800e708 <fabsf>
 800db40:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800db44:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800db48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db4c:	dd0a      	ble.n	800db64 <asinf+0x48>
 800db4e:	f7fb f9b1 	bl	8008eb4 <__errno>
 800db52:	ecbd 8b02 	vpop	{d8}
 800db56:	2321      	movs	r3, #33	; 0x21
 800db58:	6003      	str	r3, [r0, #0]
 800db5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800db5e:	4804      	ldr	r0, [pc, #16]	; (800db70 <asinf+0x54>)
 800db60:	f7fc b862 	b.w	8009c28 <nanf>
 800db64:	eeb0 0a68 	vmov.f32	s0, s17
 800db68:	ecbd 8b02 	vpop	{d8}
 800db6c:	bd08      	pop	{r3, pc}
 800db6e:	bf00      	nop
 800db70:	0800f65f 	.word	0x0800f65f

0800db74 <log10f>:
 800db74:	b508      	push	{r3, lr}
 800db76:	ed2d 8b02 	vpush	{d8}
 800db7a:	eeb0 8a40 	vmov.f32	s16, s0
 800db7e:	f000 f90d 	bl	800dd9c <__ieee754_log10f>
 800db82:	eeb4 8a48 	vcmp.f32	s16, s16
 800db86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db8a:	d60f      	bvs.n	800dbac <log10f+0x38>
 800db8c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800db90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db94:	d80a      	bhi.n	800dbac <log10f+0x38>
 800db96:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800db9a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db9e:	d108      	bne.n	800dbb2 <log10f+0x3e>
 800dba0:	f7fb f988 	bl	8008eb4 <__errno>
 800dba4:	2322      	movs	r3, #34	; 0x22
 800dba6:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800dbc8 <log10f+0x54>
 800dbaa:	6003      	str	r3, [r0, #0]
 800dbac:	ecbd 8b02 	vpop	{d8}
 800dbb0:	bd08      	pop	{r3, pc}
 800dbb2:	f7fb f97f 	bl	8008eb4 <__errno>
 800dbb6:	ecbd 8b02 	vpop	{d8}
 800dbba:	2321      	movs	r3, #33	; 0x21
 800dbbc:	6003      	str	r3, [r0, #0]
 800dbbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800dbc2:	4802      	ldr	r0, [pc, #8]	; (800dbcc <log10f+0x58>)
 800dbc4:	f7fc b830 	b.w	8009c28 <nanf>
 800dbc8:	ff800000 	.word	0xff800000
 800dbcc:	0800f65f 	.word	0x0800f65f

0800dbd0 <__ieee754_asinf>:
 800dbd0:	b538      	push	{r3, r4, r5, lr}
 800dbd2:	ee10 5a10 	vmov	r5, s0
 800dbd6:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800dbda:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800dbde:	ed2d 8b04 	vpush	{d8-d9}
 800dbe2:	d10c      	bne.n	800dbfe <__ieee754_asinf+0x2e>
 800dbe4:	eddf 7a5d 	vldr	s15, [pc, #372]	; 800dd5c <__ieee754_asinf+0x18c>
 800dbe8:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800dd60 <__ieee754_asinf+0x190>
 800dbec:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dbf0:	eee0 7a07 	vfma.f32	s15, s0, s14
 800dbf4:	eeb0 0a67 	vmov.f32	s0, s15
 800dbf8:	ecbd 8b04 	vpop	{d8-d9}
 800dbfc:	bd38      	pop	{r3, r4, r5, pc}
 800dbfe:	dd04      	ble.n	800dc0a <__ieee754_asinf+0x3a>
 800dc00:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dc04:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800dc08:	e7f6      	b.n	800dbf8 <__ieee754_asinf+0x28>
 800dc0a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800dc0e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800dc12:	da0b      	bge.n	800dc2c <__ieee754_asinf+0x5c>
 800dc14:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800dc18:	da52      	bge.n	800dcc0 <__ieee754_asinf+0xf0>
 800dc1a:	eddf 7a52 	vldr	s15, [pc, #328]	; 800dd64 <__ieee754_asinf+0x194>
 800dc1e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dc22:	eef4 7ae8 	vcmpe.f32	s15, s17
 800dc26:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dc2a:	dce5      	bgt.n	800dbf8 <__ieee754_asinf+0x28>
 800dc2c:	f000 fd6c 	bl	800e708 <fabsf>
 800dc30:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800dc34:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800dc38:	ee20 8a08 	vmul.f32	s16, s0, s16
 800dc3c:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800dd68 <__ieee754_asinf+0x198>
 800dc40:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800dd6c <__ieee754_asinf+0x19c>
 800dc44:	ed9f 9a4a 	vldr	s18, [pc, #296]	; 800dd70 <__ieee754_asinf+0x1a0>
 800dc48:	eea8 7a27 	vfma.f32	s14, s16, s15
 800dc4c:	eddf 7a49 	vldr	s15, [pc, #292]	; 800dd74 <__ieee754_asinf+0x1a4>
 800dc50:	eee7 7a08 	vfma.f32	s15, s14, s16
 800dc54:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800dd78 <__ieee754_asinf+0x1a8>
 800dc58:	eea7 7a88 	vfma.f32	s14, s15, s16
 800dc5c:	eddf 7a47 	vldr	s15, [pc, #284]	; 800dd7c <__ieee754_asinf+0x1ac>
 800dc60:	eee7 7a08 	vfma.f32	s15, s14, s16
 800dc64:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800dd80 <__ieee754_asinf+0x1b0>
 800dc68:	eea7 9a88 	vfma.f32	s18, s15, s16
 800dc6c:	eddf 7a45 	vldr	s15, [pc, #276]	; 800dd84 <__ieee754_asinf+0x1b4>
 800dc70:	eee8 7a07 	vfma.f32	s15, s16, s14
 800dc74:	ed9f 7a44 	vldr	s14, [pc, #272]	; 800dd88 <__ieee754_asinf+0x1b8>
 800dc78:	eea7 7a88 	vfma.f32	s14, s15, s16
 800dc7c:	eddf 7a43 	vldr	s15, [pc, #268]	; 800dd8c <__ieee754_asinf+0x1bc>
 800dc80:	eee7 7a08 	vfma.f32	s15, s14, s16
 800dc84:	eeb0 0a48 	vmov.f32	s0, s16
 800dc88:	eee7 8a88 	vfma.f32	s17, s15, s16
 800dc8c:	f000 fa1a 	bl	800e0c4 <__ieee754_sqrtf>
 800dc90:	4b3f      	ldr	r3, [pc, #252]	; (800dd90 <__ieee754_asinf+0x1c0>)
 800dc92:	ee29 9a08 	vmul.f32	s18, s18, s16
 800dc96:	429c      	cmp	r4, r3
 800dc98:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800dc9c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800dca0:	dd3d      	ble.n	800dd1e <__ieee754_asinf+0x14e>
 800dca2:	eea0 0a06 	vfma.f32	s0, s0, s12
 800dca6:	eddf 7a3b 	vldr	s15, [pc, #236]	; 800dd94 <__ieee754_asinf+0x1c4>
 800dcaa:	eee0 7a26 	vfma.f32	s15, s0, s13
 800dcae:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800dd60 <__ieee754_asinf+0x190>
 800dcb2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dcb6:	2d00      	cmp	r5, #0
 800dcb8:	bfd8      	it	le
 800dcba:	eeb1 0a40 	vnegle.f32	s0, s0
 800dcbe:	e79b      	b.n	800dbf8 <__ieee754_asinf+0x28>
 800dcc0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800dcc4:	eddf 6a28 	vldr	s13, [pc, #160]	; 800dd68 <__ieee754_asinf+0x198>
 800dcc8:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800dd6c <__ieee754_asinf+0x19c>
 800dccc:	ed9f 6a2c 	vldr	s12, [pc, #176]	; 800dd80 <__ieee754_asinf+0x1b0>
 800dcd0:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800dcd4:	eddf 6a27 	vldr	s13, [pc, #156]	; 800dd74 <__ieee754_asinf+0x1a4>
 800dcd8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dcdc:	ed9f 7a26 	vldr	s14, [pc, #152]	; 800dd78 <__ieee754_asinf+0x1a8>
 800dce0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dce4:	eddf 6a25 	vldr	s13, [pc, #148]	; 800dd7c <__ieee754_asinf+0x1ac>
 800dce8:	eee7 6a27 	vfma.f32	s13, s14, s15
 800dcec:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800dd70 <__ieee754_asinf+0x1a0>
 800dcf0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800dcf4:	eddf 6a23 	vldr	s13, [pc, #140]	; 800dd84 <__ieee754_asinf+0x1b4>
 800dcf8:	eee7 6a86 	vfma.f32	s13, s15, s12
 800dcfc:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800dd88 <__ieee754_asinf+0x1b8>
 800dd00:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800dd04:	eddf 6a21 	vldr	s13, [pc, #132]	; 800dd8c <__ieee754_asinf+0x1bc>
 800dd08:	eee6 6a27 	vfma.f32	s13, s12, s15
 800dd0c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dd10:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800dd14:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800dd18:	eea0 0a27 	vfma.f32	s0, s0, s15
 800dd1c:	e76c      	b.n	800dbf8 <__ieee754_asinf+0x28>
 800dd1e:	ee10 3a10 	vmov	r3, s0
 800dd22:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800dd26:	f023 030f 	bic.w	r3, r3, #15
 800dd2a:	ee07 3a10 	vmov	s14, r3
 800dd2e:	eea7 8a47 	vfms.f32	s16, s14, s14
 800dd32:	ee70 7a07 	vadd.f32	s15, s0, s14
 800dd36:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dd3a:	eec8 5a27 	vdiv.f32	s11, s16, s15
 800dd3e:	eddf 7a07 	vldr	s15, [pc, #28]	; 800dd5c <__ieee754_asinf+0x18c>
 800dd42:	eee5 7ae6 	vfms.f32	s15, s11, s13
 800dd46:	eed0 7a06 	vfnms.f32	s15, s0, s12
 800dd4a:	ed9f 0a13 	vldr	s0, [pc, #76]	; 800dd98 <__ieee754_asinf+0x1c8>
 800dd4e:	eeb0 6a40 	vmov.f32	s12, s0
 800dd52:	eea7 6a66 	vfms.f32	s12, s14, s13
 800dd56:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800dd5a:	e7aa      	b.n	800dcb2 <__ieee754_asinf+0xe2>
 800dd5c:	b33bbd2e 	.word	0xb33bbd2e
 800dd60:	3fc90fdb 	.word	0x3fc90fdb
 800dd64:	7149f2ca 	.word	0x7149f2ca
 800dd68:	3811ef08 	.word	0x3811ef08
 800dd6c:	3a4f7f04 	.word	0x3a4f7f04
 800dd70:	3e2aaaab 	.word	0x3e2aaaab
 800dd74:	bd241146 	.word	0xbd241146
 800dd78:	3e4e0aa8 	.word	0x3e4e0aa8
 800dd7c:	bea6b090 	.word	0xbea6b090
 800dd80:	3d9dc62e 	.word	0x3d9dc62e
 800dd84:	bf303361 	.word	0xbf303361
 800dd88:	4001572d 	.word	0x4001572d
 800dd8c:	c019d139 	.word	0xc019d139
 800dd90:	3f799999 	.word	0x3f799999
 800dd94:	333bbd2e 	.word	0x333bbd2e
 800dd98:	3f490fdb 	.word	0x3f490fdb

0800dd9c <__ieee754_log10f>:
 800dd9c:	b508      	push	{r3, lr}
 800dd9e:	ee10 2a10 	vmov	r2, s0
 800dda2:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800dda6:	ed2d 8b02 	vpush	{d8}
 800ddaa:	d108      	bne.n	800ddbe <__ieee754_log10f+0x22>
 800ddac:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800de34 <__ieee754_log10f+0x98>
 800ddb0:	eddf 7a21 	vldr	s15, [pc, #132]	; 800de38 <__ieee754_log10f+0x9c>
 800ddb4:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ddb8:	ecbd 8b02 	vpop	{d8}
 800ddbc:	bd08      	pop	{r3, pc}
 800ddbe:	2a00      	cmp	r2, #0
 800ddc0:	da02      	bge.n	800ddc8 <__ieee754_log10f+0x2c>
 800ddc2:	ee30 7a40 	vsub.f32	s14, s0, s0
 800ddc6:	e7f3      	b.n	800ddb0 <__ieee754_log10f+0x14>
 800ddc8:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800ddcc:	db02      	blt.n	800ddd4 <__ieee754_log10f+0x38>
 800ddce:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ddd2:	e7f1      	b.n	800ddb8 <__ieee754_log10f+0x1c>
 800ddd4:	f5b2 0f00 	cmp.w	r2, #8388608	; 0x800000
 800ddd8:	bfbf      	itttt	lt
 800ddda:	eddf 7a18 	vldrlt	s15, [pc, #96]	; 800de3c <__ieee754_log10f+0xa0>
 800ddde:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800dde2:	f06f 0118 	mvnlt.w	r1, #24
 800dde6:	ee17 2a90 	vmovlt	r2, s15
 800ddea:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800ddee:	bfa8      	it	ge
 800ddf0:	2100      	movge	r1, #0
 800ddf2:	3b7f      	subs	r3, #127	; 0x7f
 800ddf4:	440b      	add	r3, r1
 800ddf6:	0fd9      	lsrs	r1, r3, #31
 800ddf8:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 800ddfc:	ee07 3a90 	vmov	s15, r3
 800de00:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800de04:	f1c1 037f 	rsb	r3, r1, #127	; 0x7f
 800de08:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800de0c:	ee00 3a10 	vmov	s0, r3
 800de10:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800de14:	f000 fd34 	bl	800e880 <__ieee754_logf>
 800de18:	eddf 7a09 	vldr	s15, [pc, #36]	; 800de40 <__ieee754_log10f+0xa4>
 800de1c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800de20:	eddf 7a08 	vldr	s15, [pc, #32]	; 800de44 <__ieee754_log10f+0xa8>
 800de24:	eea8 0a27 	vfma.f32	s0, s16, s15
 800de28:	eddf 7a07 	vldr	s15, [pc, #28]	; 800de48 <__ieee754_log10f+0xac>
 800de2c:	eea8 0a27 	vfma.f32	s0, s16, s15
 800de30:	e7c2      	b.n	800ddb8 <__ieee754_log10f+0x1c>
 800de32:	bf00      	nop
 800de34:	cc000000 	.word	0xcc000000
 800de38:	00000000 	.word	0x00000000
 800de3c:	4c000000 	.word	0x4c000000
 800de40:	3ede5bd9 	.word	0x3ede5bd9
 800de44:	355427db 	.word	0x355427db
 800de48:	3e9a2080 	.word	0x3e9a2080

0800de4c <__ieee754_rem_pio2f>:
 800de4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de4e:	ee10 6a10 	vmov	r6, s0
 800de52:	4b8e      	ldr	r3, [pc, #568]	; (800e08c <__ieee754_rem_pio2f+0x240>)
 800de54:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 800de58:	429d      	cmp	r5, r3
 800de5a:	b087      	sub	sp, #28
 800de5c:	eef0 7a40 	vmov.f32	s15, s0
 800de60:	4604      	mov	r4, r0
 800de62:	dc05      	bgt.n	800de70 <__ieee754_rem_pio2f+0x24>
 800de64:	2300      	movs	r3, #0
 800de66:	ed80 0a00 	vstr	s0, [r0]
 800de6a:	6043      	str	r3, [r0, #4]
 800de6c:	2000      	movs	r0, #0
 800de6e:	e01a      	b.n	800dea6 <__ieee754_rem_pio2f+0x5a>
 800de70:	4b87      	ldr	r3, [pc, #540]	; (800e090 <__ieee754_rem_pio2f+0x244>)
 800de72:	429d      	cmp	r5, r3
 800de74:	dc46      	bgt.n	800df04 <__ieee754_rem_pio2f+0xb8>
 800de76:	2e00      	cmp	r6, #0
 800de78:	ed9f 0a86 	vldr	s0, [pc, #536]	; 800e094 <__ieee754_rem_pio2f+0x248>
 800de7c:	4b86      	ldr	r3, [pc, #536]	; (800e098 <__ieee754_rem_pio2f+0x24c>)
 800de7e:	f025 050f 	bic.w	r5, r5, #15
 800de82:	dd1f      	ble.n	800dec4 <__ieee754_rem_pio2f+0x78>
 800de84:	429d      	cmp	r5, r3
 800de86:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800de8a:	d00e      	beq.n	800deaa <__ieee754_rem_pio2f+0x5e>
 800de8c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 800e09c <__ieee754_rem_pio2f+0x250>
 800de90:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800de94:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800de98:	ed80 0a00 	vstr	s0, [r0]
 800de9c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dea0:	2001      	movs	r0, #1
 800dea2:	edc4 7a01 	vstr	s15, [r4, #4]
 800dea6:	b007      	add	sp, #28
 800dea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800deaa:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 800e0a0 <__ieee754_rem_pio2f+0x254>
 800deae:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 800e0a4 <__ieee754_rem_pio2f+0x258>
 800deb2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800deb6:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800deba:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800debe:	edc0 6a00 	vstr	s13, [r0]
 800dec2:	e7eb      	b.n	800de9c <__ieee754_rem_pio2f+0x50>
 800dec4:	429d      	cmp	r5, r3
 800dec6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800deca:	d00e      	beq.n	800deea <__ieee754_rem_pio2f+0x9e>
 800decc:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e09c <__ieee754_rem_pio2f+0x250>
 800ded0:	ee37 0a87 	vadd.f32	s0, s15, s14
 800ded4:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800ded8:	ed80 0a00 	vstr	s0, [r0]
 800dedc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dee0:	f04f 30ff 	mov.w	r0, #4294967295
 800dee4:	edc4 7a01 	vstr	s15, [r4, #4]
 800dee8:	e7dd      	b.n	800dea6 <__ieee754_rem_pio2f+0x5a>
 800deea:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 800e0a0 <__ieee754_rem_pio2f+0x254>
 800deee:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e0a4 <__ieee754_rem_pio2f+0x258>
 800def2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800def6:	ee77 6a87 	vadd.f32	s13, s15, s14
 800defa:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800defe:	edc0 6a00 	vstr	s13, [r0]
 800df02:	e7eb      	b.n	800dedc <__ieee754_rem_pio2f+0x90>
 800df04:	4b68      	ldr	r3, [pc, #416]	; (800e0a8 <__ieee754_rem_pio2f+0x25c>)
 800df06:	429d      	cmp	r5, r3
 800df08:	dc72      	bgt.n	800dff0 <__ieee754_rem_pio2f+0x1a4>
 800df0a:	f000 fbfd 	bl	800e708 <fabsf>
 800df0e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800e0ac <__ieee754_rem_pio2f+0x260>
 800df12:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800df16:	eee0 7a07 	vfma.f32	s15, s0, s14
 800df1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800df1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800df22:	ee17 0a90 	vmov	r0, s15
 800df26:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800e094 <__ieee754_rem_pio2f+0x248>
 800df2a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800df2e:	281f      	cmp	r0, #31
 800df30:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800e09c <__ieee754_rem_pio2f+0x250>
 800df34:	ee67 7a27 	vmul.f32	s15, s14, s15
 800df38:	eeb1 6a47 	vneg.f32	s12, s14
 800df3c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800df40:	ee16 2a90 	vmov	r2, s13
 800df44:	dc1c      	bgt.n	800df80 <__ieee754_rem_pio2f+0x134>
 800df46:	495a      	ldr	r1, [pc, #360]	; (800e0b0 <__ieee754_rem_pio2f+0x264>)
 800df48:	1e47      	subs	r7, r0, #1
 800df4a:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 800df4e:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800df52:	428b      	cmp	r3, r1
 800df54:	d014      	beq.n	800df80 <__ieee754_rem_pio2f+0x134>
 800df56:	6022      	str	r2, [r4, #0]
 800df58:	ed94 7a00 	vldr	s14, [r4]
 800df5c:	ee30 0a47 	vsub.f32	s0, s0, s14
 800df60:	2e00      	cmp	r6, #0
 800df62:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df66:	ed84 0a01 	vstr	s0, [r4, #4]
 800df6a:	da9c      	bge.n	800dea6 <__ieee754_rem_pio2f+0x5a>
 800df6c:	eeb1 7a47 	vneg.f32	s14, s14
 800df70:	eeb1 0a40 	vneg.f32	s0, s0
 800df74:	ed84 7a00 	vstr	s14, [r4]
 800df78:	ed84 0a01 	vstr	s0, [r4, #4]
 800df7c:	4240      	negs	r0, r0
 800df7e:	e792      	b.n	800dea6 <__ieee754_rem_pio2f+0x5a>
 800df80:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800df84:	15eb      	asrs	r3, r5, #23
 800df86:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 800df8a:	2d08      	cmp	r5, #8
 800df8c:	dde3      	ble.n	800df56 <__ieee754_rem_pio2f+0x10a>
 800df8e:	eddf 7a44 	vldr	s15, [pc, #272]	; 800e0a0 <__ieee754_rem_pio2f+0x254>
 800df92:	eddf 5a44 	vldr	s11, [pc, #272]	; 800e0a4 <__ieee754_rem_pio2f+0x258>
 800df96:	eef0 6a40 	vmov.f32	s13, s0
 800df9a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800df9e:	ee30 0a66 	vsub.f32	s0, s0, s13
 800dfa2:	eea6 0a27 	vfma.f32	s0, s12, s15
 800dfa6:	eef0 7a40 	vmov.f32	s15, s0
 800dfaa:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800dfae:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800dfb2:	ee15 2a90 	vmov	r2, s11
 800dfb6:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800dfba:	1a5b      	subs	r3, r3, r1
 800dfbc:	2b19      	cmp	r3, #25
 800dfbe:	dc04      	bgt.n	800dfca <__ieee754_rem_pio2f+0x17e>
 800dfc0:	edc4 5a00 	vstr	s11, [r4]
 800dfc4:	eeb0 0a66 	vmov.f32	s0, s13
 800dfc8:	e7c6      	b.n	800df58 <__ieee754_rem_pio2f+0x10c>
 800dfca:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800e0b4 <__ieee754_rem_pio2f+0x268>
 800dfce:	eeb0 0a66 	vmov.f32	s0, s13
 800dfd2:	eea6 0a25 	vfma.f32	s0, s12, s11
 800dfd6:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800dfda:	eddf 6a37 	vldr	s13, [pc, #220]	; 800e0b8 <__ieee754_rem_pio2f+0x26c>
 800dfde:	eee6 7a25 	vfma.f32	s15, s12, s11
 800dfe2:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800dfe6:	ee30 7a67 	vsub.f32	s14, s0, s15
 800dfea:	ed84 7a00 	vstr	s14, [r4]
 800dfee:	e7b3      	b.n	800df58 <__ieee754_rem_pio2f+0x10c>
 800dff0:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800dff4:	db06      	blt.n	800e004 <__ieee754_rem_pio2f+0x1b8>
 800dff6:	ee70 7a40 	vsub.f32	s15, s0, s0
 800dffa:	edc0 7a01 	vstr	s15, [r0, #4]
 800dffe:	edc0 7a00 	vstr	s15, [r0]
 800e002:	e733      	b.n	800de6c <__ieee754_rem_pio2f+0x20>
 800e004:	15ea      	asrs	r2, r5, #23
 800e006:	3a86      	subs	r2, #134	; 0x86
 800e008:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 800e00c:	ee07 3a90 	vmov	s15, r3
 800e010:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e014:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e0bc <__ieee754_rem_pio2f+0x270>
 800e018:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e01c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e020:	ed8d 7a03 	vstr	s14, [sp, #12]
 800e024:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e028:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800e02c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800e030:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e034:	ed8d 7a04 	vstr	s14, [sp, #16]
 800e038:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e03c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800e040:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e044:	edcd 7a05 	vstr	s15, [sp, #20]
 800e048:	d11e      	bne.n	800e088 <__ieee754_rem_pio2f+0x23c>
 800e04a:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800e04e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e052:	bf14      	ite	ne
 800e054:	2302      	movne	r3, #2
 800e056:	2301      	moveq	r3, #1
 800e058:	4919      	ldr	r1, [pc, #100]	; (800e0c0 <__ieee754_rem_pio2f+0x274>)
 800e05a:	9101      	str	r1, [sp, #4]
 800e05c:	2102      	movs	r1, #2
 800e05e:	9100      	str	r1, [sp, #0]
 800e060:	a803      	add	r0, sp, #12
 800e062:	4621      	mov	r1, r4
 800e064:	f000 f892 	bl	800e18c <__kernel_rem_pio2f>
 800e068:	2e00      	cmp	r6, #0
 800e06a:	f6bf af1c 	bge.w	800dea6 <__ieee754_rem_pio2f+0x5a>
 800e06e:	edd4 7a00 	vldr	s15, [r4]
 800e072:	eef1 7a67 	vneg.f32	s15, s15
 800e076:	edc4 7a00 	vstr	s15, [r4]
 800e07a:	edd4 7a01 	vldr	s15, [r4, #4]
 800e07e:	eef1 7a67 	vneg.f32	s15, s15
 800e082:	edc4 7a01 	vstr	s15, [r4, #4]
 800e086:	e779      	b.n	800df7c <__ieee754_rem_pio2f+0x130>
 800e088:	2303      	movs	r3, #3
 800e08a:	e7e5      	b.n	800e058 <__ieee754_rem_pio2f+0x20c>
 800e08c:	3f490fd8 	.word	0x3f490fd8
 800e090:	4016cbe3 	.word	0x4016cbe3
 800e094:	3fc90f80 	.word	0x3fc90f80
 800e098:	3fc90fd0 	.word	0x3fc90fd0
 800e09c:	37354443 	.word	0x37354443
 800e0a0:	37354400 	.word	0x37354400
 800e0a4:	2e85a308 	.word	0x2e85a308
 800e0a8:	43490f80 	.word	0x43490f80
 800e0ac:	3f22f984 	.word	0x3f22f984
 800e0b0:	0800fa20 	.word	0x0800fa20
 800e0b4:	2e85a300 	.word	0x2e85a300
 800e0b8:	248d3132 	.word	0x248d3132
 800e0bc:	43800000 	.word	0x43800000
 800e0c0:	0800faa0 	.word	0x0800faa0

0800e0c4 <__ieee754_sqrtf>:
 800e0c4:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800e0c8:	4770      	bx	lr
	...

0800e0cc <__kernel_cosf>:
 800e0cc:	ee10 3a10 	vmov	r3, s0
 800e0d0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e0d4:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e0d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e0dc:	da05      	bge.n	800e0ea <__kernel_cosf+0x1e>
 800e0de:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e0e2:	ee17 2a90 	vmov	r2, s15
 800e0e6:	2a00      	cmp	r2, #0
 800e0e8:	d03d      	beq.n	800e166 <__kernel_cosf+0x9a>
 800e0ea:	ee60 5a00 	vmul.f32	s11, s0, s0
 800e0ee:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e16c <__kernel_cosf+0xa0>
 800e0f2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800e170 <__kernel_cosf+0xa4>
 800e0f6:	eddf 6a1f 	vldr	s13, [pc, #124]	; 800e174 <__kernel_cosf+0xa8>
 800e0fa:	4a1f      	ldr	r2, [pc, #124]	; (800e178 <__kernel_cosf+0xac>)
 800e0fc:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800e100:	4293      	cmp	r3, r2
 800e102:	eddf 7a1e 	vldr	s15, [pc, #120]	; 800e17c <__kernel_cosf+0xb0>
 800e106:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e10a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 800e180 <__kernel_cosf+0xb4>
 800e10e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e112:	eddf 7a1c 	vldr	s15, [pc, #112]	; 800e184 <__kernel_cosf+0xb8>
 800e116:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e11a:	eeb0 7a66 	vmov.f32	s14, s13
 800e11e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800e122:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e126:	ee65 7aa6 	vmul.f32	s15, s11, s13
 800e12a:	ee67 6a25 	vmul.f32	s13, s14, s11
 800e12e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 800e132:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800e136:	dc04      	bgt.n	800e142 <__kernel_cosf+0x76>
 800e138:	ee37 7ac7 	vsub.f32	s14, s15, s14
 800e13c:	ee36 0a47 	vsub.f32	s0, s12, s14
 800e140:	4770      	bx	lr
 800e142:	4a11      	ldr	r2, [pc, #68]	; (800e188 <__kernel_cosf+0xbc>)
 800e144:	4293      	cmp	r3, r2
 800e146:	bfda      	itte	le
 800e148:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800e14c:	ee06 3a90 	vmovle	s13, r3
 800e150:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 800e154:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e158:	ee36 0a66 	vsub.f32	s0, s12, s13
 800e15c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e160:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e164:	4770      	bx	lr
 800e166:	eeb0 0a46 	vmov.f32	s0, s12
 800e16a:	4770      	bx	lr
 800e16c:	ad47d74e 	.word	0xad47d74e
 800e170:	310f74f6 	.word	0x310f74f6
 800e174:	3d2aaaab 	.word	0x3d2aaaab
 800e178:	3e999999 	.word	0x3e999999
 800e17c:	b493f27c 	.word	0xb493f27c
 800e180:	37d00d01 	.word	0x37d00d01
 800e184:	bab60b61 	.word	0xbab60b61
 800e188:	3f480000 	.word	0x3f480000

0800e18c <__kernel_rem_pio2f>:
 800e18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e190:	ed2d 8b04 	vpush	{d8-d9}
 800e194:	b0d9      	sub	sp, #356	; 0x164
 800e196:	4688      	mov	r8, r1
 800e198:	9002      	str	r0, [sp, #8]
 800e19a:	49bb      	ldr	r1, [pc, #748]	; (800e488 <__kernel_rem_pio2f+0x2fc>)
 800e19c:	9866      	ldr	r0, [sp, #408]	; 0x198
 800e19e:	9301      	str	r3, [sp, #4]
 800e1a0:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 800e1a4:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 800e1a8:	1e59      	subs	r1, r3, #1
 800e1aa:	1d13      	adds	r3, r2, #4
 800e1ac:	db27      	blt.n	800e1fe <__kernel_rem_pio2f+0x72>
 800e1ae:	f1b2 0b03 	subs.w	fp, r2, #3
 800e1b2:	bf48      	it	mi
 800e1b4:	f102 0b04 	addmi.w	fp, r2, #4
 800e1b8:	ea4f 00eb 	mov.w	r0, fp, asr #3
 800e1bc:	1c45      	adds	r5, r0, #1
 800e1be:	00ec      	lsls	r4, r5, #3
 800e1c0:	1a47      	subs	r7, r0, r1
 800e1c2:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 800e498 <__kernel_rem_pio2f+0x30c>
 800e1c6:	9403      	str	r4, [sp, #12]
 800e1c8:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 800e1cc:	eb0a 0c01 	add.w	ip, sl, r1
 800e1d0:	ae1c      	add	r6, sp, #112	; 0x70
 800e1d2:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 800e1d6:	2400      	movs	r4, #0
 800e1d8:	4564      	cmp	r4, ip
 800e1da:	dd12      	ble.n	800e202 <__kernel_rem_pio2f+0x76>
 800e1dc:	9b01      	ldr	r3, [sp, #4]
 800e1de:	ac1c      	add	r4, sp, #112	; 0x70
 800e1e0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 800e1e4:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 800e1e8:	f04f 0c00 	mov.w	ip, #0
 800e1ec:	45d4      	cmp	ip, sl
 800e1ee:	dc27      	bgt.n	800e240 <__kernel_rem_pio2f+0xb4>
 800e1f0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 800e1f4:	eddf 7aa8 	vldr	s15, [pc, #672]	; 800e498 <__kernel_rem_pio2f+0x30c>
 800e1f8:	4627      	mov	r7, r4
 800e1fa:	2600      	movs	r6, #0
 800e1fc:	e016      	b.n	800e22c <__kernel_rem_pio2f+0xa0>
 800e1fe:	2000      	movs	r0, #0
 800e200:	e7dc      	b.n	800e1bc <__kernel_rem_pio2f+0x30>
 800e202:	42e7      	cmn	r7, r4
 800e204:	bf5d      	ittte	pl
 800e206:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 800e20a:	ee07 3a90 	vmovpl	s15, r3
 800e20e:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800e212:	eef0 7a47 	vmovmi.f32	s15, s14
 800e216:	ece6 7a01 	vstmia	r6!, {s15}
 800e21a:	3401      	adds	r4, #1
 800e21c:	e7dc      	b.n	800e1d8 <__kernel_rem_pio2f+0x4c>
 800e21e:	ecf9 6a01 	vldmia	r9!, {s13}
 800e222:	ed97 7a00 	vldr	s14, [r7]
 800e226:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e22a:	3601      	adds	r6, #1
 800e22c:	428e      	cmp	r6, r1
 800e22e:	f1a7 0704 	sub.w	r7, r7, #4
 800e232:	ddf4      	ble.n	800e21e <__kernel_rem_pio2f+0x92>
 800e234:	eceb 7a01 	vstmia	fp!, {s15}
 800e238:	f10c 0c01 	add.w	ip, ip, #1
 800e23c:	3404      	adds	r4, #4
 800e23e:	e7d5      	b.n	800e1ec <__kernel_rem_pio2f+0x60>
 800e240:	ab08      	add	r3, sp, #32
 800e242:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 800e246:	eddf 8a93 	vldr	s17, [pc, #588]	; 800e494 <__kernel_rem_pio2f+0x308>
 800e24a:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800e490 <__kernel_rem_pio2f+0x304>
 800e24e:	9304      	str	r3, [sp, #16]
 800e250:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 800e254:	4656      	mov	r6, sl
 800e256:	00b3      	lsls	r3, r6, #2
 800e258:	9305      	str	r3, [sp, #20]
 800e25a:	ab58      	add	r3, sp, #352	; 0x160
 800e25c:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e260:	ac08      	add	r4, sp, #32
 800e262:	ab44      	add	r3, sp, #272	; 0x110
 800e264:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 800e268:	46a4      	mov	ip, r4
 800e26a:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 800e26e:	4637      	mov	r7, r6
 800e270:	2f00      	cmp	r7, #0
 800e272:	f1a0 0004 	sub.w	r0, r0, #4
 800e276:	dc4f      	bgt.n	800e318 <__kernel_rem_pio2f+0x18c>
 800e278:	4628      	mov	r0, r5
 800e27a:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e27e:	f000 fa8d 	bl	800e79c <scalbnf>
 800e282:	eeb0 8a40 	vmov.f32	s16, s0
 800e286:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800e28a:	ee28 0a00 	vmul.f32	s0, s16, s0
 800e28e:	f000 fa43 	bl	800e718 <floorf>
 800e292:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800e296:	eea0 8a67 	vfms.f32	s16, s0, s15
 800e29a:	2d00      	cmp	r5, #0
 800e29c:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e2a0:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800e2a4:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 800e2a8:	ee17 9a90 	vmov	r9, s15
 800e2ac:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e2b0:	dd44      	ble.n	800e33c <__kernel_rem_pio2f+0x1b0>
 800e2b2:	f106 3cff 	add.w	ip, r6, #4294967295
 800e2b6:	ab08      	add	r3, sp, #32
 800e2b8:	f1c5 0e08 	rsb	lr, r5, #8
 800e2bc:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 800e2c0:	fa47 f00e 	asr.w	r0, r7, lr
 800e2c4:	4481      	add	r9, r0
 800e2c6:	fa00 f00e 	lsl.w	r0, r0, lr
 800e2ca:	1a3f      	subs	r7, r7, r0
 800e2cc:	f1c5 0007 	rsb	r0, r5, #7
 800e2d0:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 800e2d4:	4107      	asrs	r7, r0
 800e2d6:	2f00      	cmp	r7, #0
 800e2d8:	dd3f      	ble.n	800e35a <__kernel_rem_pio2f+0x1ce>
 800e2da:	f04f 0e00 	mov.w	lr, #0
 800e2de:	f109 0901 	add.w	r9, r9, #1
 800e2e2:	4673      	mov	r3, lr
 800e2e4:	4576      	cmp	r6, lr
 800e2e6:	dc6b      	bgt.n	800e3c0 <__kernel_rem_pio2f+0x234>
 800e2e8:	2d00      	cmp	r5, #0
 800e2ea:	dd04      	ble.n	800e2f6 <__kernel_rem_pio2f+0x16a>
 800e2ec:	2d01      	cmp	r5, #1
 800e2ee:	d078      	beq.n	800e3e2 <__kernel_rem_pio2f+0x256>
 800e2f0:	2d02      	cmp	r5, #2
 800e2f2:	f000 8081 	beq.w	800e3f8 <__kernel_rem_pio2f+0x26c>
 800e2f6:	2f02      	cmp	r7, #2
 800e2f8:	d12f      	bne.n	800e35a <__kernel_rem_pio2f+0x1ce>
 800e2fa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e2fe:	ee30 8a48 	vsub.f32	s16, s0, s16
 800e302:	b353      	cbz	r3, 800e35a <__kernel_rem_pio2f+0x1ce>
 800e304:	4628      	mov	r0, r5
 800e306:	e9cd 1206 	strd	r1, r2, [sp, #24]
 800e30a:	f000 fa47 	bl	800e79c <scalbnf>
 800e30e:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 800e312:	ee38 8a40 	vsub.f32	s16, s16, s0
 800e316:	e020      	b.n	800e35a <__kernel_rem_pio2f+0x1ce>
 800e318:	ee60 7a28 	vmul.f32	s15, s0, s17
 800e31c:	3f01      	subs	r7, #1
 800e31e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e322:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e326:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800e32a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e32e:	ecac 0a01 	vstmia	ip!, {s0}
 800e332:	ed90 0a00 	vldr	s0, [r0]
 800e336:	ee37 0a80 	vadd.f32	s0, s15, s0
 800e33a:	e799      	b.n	800e270 <__kernel_rem_pio2f+0xe4>
 800e33c:	d105      	bne.n	800e34a <__kernel_rem_pio2f+0x1be>
 800e33e:	1e70      	subs	r0, r6, #1
 800e340:	ab08      	add	r3, sp, #32
 800e342:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 800e346:	11ff      	asrs	r7, r7, #7
 800e348:	e7c5      	b.n	800e2d6 <__kernel_rem_pio2f+0x14a>
 800e34a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e34e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800e352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e356:	da31      	bge.n	800e3bc <__kernel_rem_pio2f+0x230>
 800e358:	2700      	movs	r7, #0
 800e35a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800e35e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e362:	f040 809b 	bne.w	800e49c <__kernel_rem_pio2f+0x310>
 800e366:	1e74      	subs	r4, r6, #1
 800e368:	46a4      	mov	ip, r4
 800e36a:	2000      	movs	r0, #0
 800e36c:	45d4      	cmp	ip, sl
 800e36e:	da4a      	bge.n	800e406 <__kernel_rem_pio2f+0x27a>
 800e370:	2800      	cmp	r0, #0
 800e372:	d07a      	beq.n	800e46a <__kernel_rem_pio2f+0x2de>
 800e374:	ab08      	add	r3, sp, #32
 800e376:	3d08      	subs	r5, #8
 800e378:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	f000 8081 	beq.w	800e484 <__kernel_rem_pio2f+0x2f8>
 800e382:	4628      	mov	r0, r5
 800e384:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800e388:	00a5      	lsls	r5, r4, #2
 800e38a:	f000 fa07 	bl	800e79c <scalbnf>
 800e38e:	aa44      	add	r2, sp, #272	; 0x110
 800e390:	1d2b      	adds	r3, r5, #4
 800e392:	ed9f 7a40 	vldr	s14, [pc, #256]	; 800e494 <__kernel_rem_pio2f+0x308>
 800e396:	18d1      	adds	r1, r2, r3
 800e398:	4622      	mov	r2, r4
 800e39a:	2a00      	cmp	r2, #0
 800e39c:	f280 80ae 	bge.w	800e4fc <__kernel_rem_pio2f+0x370>
 800e3a0:	4622      	mov	r2, r4
 800e3a2:	2a00      	cmp	r2, #0
 800e3a4:	f2c0 80cc 	blt.w	800e540 <__kernel_rem_pio2f+0x3b4>
 800e3a8:	a944      	add	r1, sp, #272	; 0x110
 800e3aa:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 800e3ae:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 800e48c <__kernel_rem_pio2f+0x300>
 800e3b2:	eddf 7a39 	vldr	s15, [pc, #228]	; 800e498 <__kernel_rem_pio2f+0x30c>
 800e3b6:	2000      	movs	r0, #0
 800e3b8:	1aa1      	subs	r1, r4, r2
 800e3ba:	e0b6      	b.n	800e52a <__kernel_rem_pio2f+0x39e>
 800e3bc:	2702      	movs	r7, #2
 800e3be:	e78c      	b.n	800e2da <__kernel_rem_pio2f+0x14e>
 800e3c0:	6820      	ldr	r0, [r4, #0]
 800e3c2:	b94b      	cbnz	r3, 800e3d8 <__kernel_rem_pio2f+0x24c>
 800e3c4:	b118      	cbz	r0, 800e3ce <__kernel_rem_pio2f+0x242>
 800e3c6:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 800e3ca:	6020      	str	r0, [r4, #0]
 800e3cc:	2001      	movs	r0, #1
 800e3ce:	f10e 0e01 	add.w	lr, lr, #1
 800e3d2:	3404      	adds	r4, #4
 800e3d4:	4603      	mov	r3, r0
 800e3d6:	e785      	b.n	800e2e4 <__kernel_rem_pio2f+0x158>
 800e3d8:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 800e3dc:	6020      	str	r0, [r4, #0]
 800e3de:	4618      	mov	r0, r3
 800e3e0:	e7f5      	b.n	800e3ce <__kernel_rem_pio2f+0x242>
 800e3e2:	1e74      	subs	r4, r6, #1
 800e3e4:	a808      	add	r0, sp, #32
 800e3e6:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e3ea:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800e3ee:	f10d 0c20 	add.w	ip, sp, #32
 800e3f2:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 800e3f6:	e77e      	b.n	800e2f6 <__kernel_rem_pio2f+0x16a>
 800e3f8:	1e74      	subs	r4, r6, #1
 800e3fa:	a808      	add	r0, sp, #32
 800e3fc:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 800e400:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 800e404:	e7f3      	b.n	800e3ee <__kernel_rem_pio2f+0x262>
 800e406:	ab08      	add	r3, sp, #32
 800e408:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 800e40c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800e410:	4318      	orrs	r0, r3
 800e412:	e7ab      	b.n	800e36c <__kernel_rem_pio2f+0x1e0>
 800e414:	f10c 0c01 	add.w	ip, ip, #1
 800e418:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 800e41c:	2c00      	cmp	r4, #0
 800e41e:	d0f9      	beq.n	800e414 <__kernel_rem_pio2f+0x288>
 800e420:	9b05      	ldr	r3, [sp, #20]
 800e422:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 800e426:	eb0d 0003 	add.w	r0, sp, r3
 800e42a:	9b01      	ldr	r3, [sp, #4]
 800e42c:	18f4      	adds	r4, r6, r3
 800e42e:	ab1c      	add	r3, sp, #112	; 0x70
 800e430:	1c77      	adds	r7, r6, #1
 800e432:	384c      	subs	r0, #76	; 0x4c
 800e434:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e438:	4466      	add	r6, ip
 800e43a:	42be      	cmp	r6, r7
 800e43c:	f6ff af0b 	blt.w	800e256 <__kernel_rem_pio2f+0xca>
 800e440:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 800e444:	f8dd e008 	ldr.w	lr, [sp, #8]
 800e448:	ee07 3a90 	vmov	s15, r3
 800e44c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e450:	f04f 0c00 	mov.w	ip, #0
 800e454:	ece4 7a01 	vstmia	r4!, {s15}
 800e458:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800e498 <__kernel_rem_pio2f+0x30c>
 800e45c:	46a1      	mov	r9, r4
 800e45e:	458c      	cmp	ip, r1
 800e460:	dd07      	ble.n	800e472 <__kernel_rem_pio2f+0x2e6>
 800e462:	ece0 7a01 	vstmia	r0!, {s15}
 800e466:	3701      	adds	r7, #1
 800e468:	e7e7      	b.n	800e43a <__kernel_rem_pio2f+0x2ae>
 800e46a:	9804      	ldr	r0, [sp, #16]
 800e46c:	f04f 0c01 	mov.w	ip, #1
 800e470:	e7d2      	b.n	800e418 <__kernel_rem_pio2f+0x28c>
 800e472:	ecfe 6a01 	vldmia	lr!, {s13}
 800e476:	ed39 7a01 	vldmdb	r9!, {s14}
 800e47a:	f10c 0c01 	add.w	ip, ip, #1
 800e47e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e482:	e7ec      	b.n	800e45e <__kernel_rem_pio2f+0x2d2>
 800e484:	3c01      	subs	r4, #1
 800e486:	e775      	b.n	800e374 <__kernel_rem_pio2f+0x1e8>
 800e488:	0800fde4 	.word	0x0800fde4
 800e48c:	0800fdb8 	.word	0x0800fdb8
 800e490:	43800000 	.word	0x43800000
 800e494:	3b800000 	.word	0x3b800000
 800e498:	00000000 	.word	0x00000000
 800e49c:	9b03      	ldr	r3, [sp, #12]
 800e49e:	eeb0 0a48 	vmov.f32	s0, s16
 800e4a2:	1a98      	subs	r0, r3, r2
 800e4a4:	f000 f97a 	bl	800e79c <scalbnf>
 800e4a8:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800e490 <__kernel_rem_pio2f+0x304>
 800e4ac:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e4b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e4b4:	db19      	blt.n	800e4ea <__kernel_rem_pio2f+0x35e>
 800e4b6:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800e494 <__kernel_rem_pio2f+0x308>
 800e4ba:	ee60 7a27 	vmul.f32	s15, s0, s15
 800e4be:	aa08      	add	r2, sp, #32
 800e4c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4c4:	1c74      	adds	r4, r6, #1
 800e4c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e4ca:	3508      	adds	r5, #8
 800e4cc:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e4d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e4d4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e4d8:	ee10 3a10 	vmov	r3, s0
 800e4dc:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e4e0:	ee17 3a90 	vmov	r3, s15
 800e4e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 800e4e8:	e74b      	b.n	800e382 <__kernel_rem_pio2f+0x1f6>
 800e4ea:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800e4ee:	aa08      	add	r2, sp, #32
 800e4f0:	ee10 3a10 	vmov	r3, s0
 800e4f4:	4634      	mov	r4, r6
 800e4f6:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800e4fa:	e742      	b.n	800e382 <__kernel_rem_pio2f+0x1f6>
 800e4fc:	a808      	add	r0, sp, #32
 800e4fe:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800e502:	9001      	str	r0, [sp, #4]
 800e504:	ee07 0a90 	vmov	s15, r0
 800e508:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e50c:	3a01      	subs	r2, #1
 800e50e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800e512:	ee20 0a07 	vmul.f32	s0, s0, s14
 800e516:	ed61 7a01 	vstmdb	r1!, {s15}
 800e51a:	e73e      	b.n	800e39a <__kernel_rem_pio2f+0x20e>
 800e51c:	ecfc 6a01 	vldmia	ip!, {s13}
 800e520:	ecb6 7a01 	vldmia	r6!, {s14}
 800e524:	eee6 7a87 	vfma.f32	s15, s13, s14
 800e528:	3001      	adds	r0, #1
 800e52a:	4550      	cmp	r0, sl
 800e52c:	dc01      	bgt.n	800e532 <__kernel_rem_pio2f+0x3a6>
 800e52e:	4288      	cmp	r0, r1
 800e530:	ddf4      	ble.n	800e51c <__kernel_rem_pio2f+0x390>
 800e532:	a858      	add	r0, sp, #352	; 0x160
 800e534:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e538:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 800e53c:	3a01      	subs	r2, #1
 800e53e:	e730      	b.n	800e3a2 <__kernel_rem_pio2f+0x216>
 800e540:	9a66      	ldr	r2, [sp, #408]	; 0x198
 800e542:	2a02      	cmp	r2, #2
 800e544:	dc09      	bgt.n	800e55a <__kernel_rem_pio2f+0x3ce>
 800e546:	2a00      	cmp	r2, #0
 800e548:	dc2a      	bgt.n	800e5a0 <__kernel_rem_pio2f+0x414>
 800e54a:	d043      	beq.n	800e5d4 <__kernel_rem_pio2f+0x448>
 800e54c:	f009 0007 	and.w	r0, r9, #7
 800e550:	b059      	add	sp, #356	; 0x164
 800e552:	ecbd 8b04 	vpop	{d8-d9}
 800e556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55a:	9b66      	ldr	r3, [sp, #408]	; 0x198
 800e55c:	2b03      	cmp	r3, #3
 800e55e:	d1f5      	bne.n	800e54c <__kernel_rem_pio2f+0x3c0>
 800e560:	ab30      	add	r3, sp, #192	; 0xc0
 800e562:	442b      	add	r3, r5
 800e564:	461a      	mov	r2, r3
 800e566:	4619      	mov	r1, r3
 800e568:	4620      	mov	r0, r4
 800e56a:	2800      	cmp	r0, #0
 800e56c:	f1a1 0104 	sub.w	r1, r1, #4
 800e570:	dc51      	bgt.n	800e616 <__kernel_rem_pio2f+0x48a>
 800e572:	4621      	mov	r1, r4
 800e574:	2901      	cmp	r1, #1
 800e576:	f1a2 0204 	sub.w	r2, r2, #4
 800e57a:	dc5c      	bgt.n	800e636 <__kernel_rem_pio2f+0x4aa>
 800e57c:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 800e498 <__kernel_rem_pio2f+0x30c>
 800e580:	3304      	adds	r3, #4
 800e582:	2c01      	cmp	r4, #1
 800e584:	dc67      	bgt.n	800e656 <__kernel_rem_pio2f+0x4ca>
 800e586:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 800e58a:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800e58e:	2f00      	cmp	r7, #0
 800e590:	d167      	bne.n	800e662 <__kernel_rem_pio2f+0x4d6>
 800e592:	edc8 6a00 	vstr	s13, [r8]
 800e596:	ed88 7a01 	vstr	s14, [r8, #4]
 800e59a:	edc8 7a02 	vstr	s15, [r8, #8]
 800e59e:	e7d5      	b.n	800e54c <__kernel_rem_pio2f+0x3c0>
 800e5a0:	aa30      	add	r2, sp, #192	; 0xc0
 800e5a2:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 800e498 <__kernel_rem_pio2f+0x30c>
 800e5a6:	4413      	add	r3, r2
 800e5a8:	4622      	mov	r2, r4
 800e5aa:	2a00      	cmp	r2, #0
 800e5ac:	da24      	bge.n	800e5f8 <__kernel_rem_pio2f+0x46c>
 800e5ae:	b34f      	cbz	r7, 800e604 <__kernel_rem_pio2f+0x478>
 800e5b0:	eef1 7a47 	vneg.f32	s15, s14
 800e5b4:	edc8 7a00 	vstr	s15, [r8]
 800e5b8:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 800e5bc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e5c0:	aa31      	add	r2, sp, #196	; 0xc4
 800e5c2:	2301      	movs	r3, #1
 800e5c4:	429c      	cmp	r4, r3
 800e5c6:	da20      	bge.n	800e60a <__kernel_rem_pio2f+0x47e>
 800e5c8:	b10f      	cbz	r7, 800e5ce <__kernel_rem_pio2f+0x442>
 800e5ca:	eef1 7a67 	vneg.f32	s15, s15
 800e5ce:	edc8 7a01 	vstr	s15, [r8, #4]
 800e5d2:	e7bb      	b.n	800e54c <__kernel_rem_pio2f+0x3c0>
 800e5d4:	aa30      	add	r2, sp, #192	; 0xc0
 800e5d6:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 800e498 <__kernel_rem_pio2f+0x30c>
 800e5da:	4413      	add	r3, r2
 800e5dc:	2c00      	cmp	r4, #0
 800e5de:	da05      	bge.n	800e5ec <__kernel_rem_pio2f+0x460>
 800e5e0:	b10f      	cbz	r7, 800e5e6 <__kernel_rem_pio2f+0x45a>
 800e5e2:	eef1 7a67 	vneg.f32	s15, s15
 800e5e6:	edc8 7a00 	vstr	s15, [r8]
 800e5ea:	e7af      	b.n	800e54c <__kernel_rem_pio2f+0x3c0>
 800e5ec:	ed33 7a01 	vldmdb	r3!, {s14}
 800e5f0:	3c01      	subs	r4, #1
 800e5f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e5f6:	e7f1      	b.n	800e5dc <__kernel_rem_pio2f+0x450>
 800e5f8:	ed73 7a01 	vldmdb	r3!, {s15}
 800e5fc:	3a01      	subs	r2, #1
 800e5fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 800e602:	e7d2      	b.n	800e5aa <__kernel_rem_pio2f+0x41e>
 800e604:	eef0 7a47 	vmov.f32	s15, s14
 800e608:	e7d4      	b.n	800e5b4 <__kernel_rem_pio2f+0x428>
 800e60a:	ecb2 7a01 	vldmia	r2!, {s14}
 800e60e:	3301      	adds	r3, #1
 800e610:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e614:	e7d6      	b.n	800e5c4 <__kernel_rem_pio2f+0x438>
 800e616:	edd1 7a00 	vldr	s15, [r1]
 800e61a:	edd1 6a01 	vldr	s13, [r1, #4]
 800e61e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e622:	3801      	subs	r0, #1
 800e624:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e628:	ed81 7a00 	vstr	s14, [r1]
 800e62c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e630:	edc1 7a01 	vstr	s15, [r1, #4]
 800e634:	e799      	b.n	800e56a <__kernel_rem_pio2f+0x3de>
 800e636:	edd2 7a00 	vldr	s15, [r2]
 800e63a:	edd2 6a01 	vldr	s13, [r2, #4]
 800e63e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800e642:	3901      	subs	r1, #1
 800e644:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e648:	ed82 7a00 	vstr	s14, [r2]
 800e64c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800e650:	edc2 7a01 	vstr	s15, [r2, #4]
 800e654:	e78e      	b.n	800e574 <__kernel_rem_pio2f+0x3e8>
 800e656:	ed33 7a01 	vldmdb	r3!, {s14}
 800e65a:	3c01      	subs	r4, #1
 800e65c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e660:	e78f      	b.n	800e582 <__kernel_rem_pio2f+0x3f6>
 800e662:	eef1 6a66 	vneg.f32	s13, s13
 800e666:	eeb1 7a47 	vneg.f32	s14, s14
 800e66a:	edc8 6a00 	vstr	s13, [r8]
 800e66e:	ed88 7a01 	vstr	s14, [r8, #4]
 800e672:	eef1 7a67 	vneg.f32	s15, s15
 800e676:	e790      	b.n	800e59a <__kernel_rem_pio2f+0x40e>

0800e678 <__kernel_sinf>:
 800e678:	ee10 3a10 	vmov	r3, s0
 800e67c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e680:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800e684:	da04      	bge.n	800e690 <__kernel_sinf+0x18>
 800e686:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800e68a:	ee17 3a90 	vmov	r3, s15
 800e68e:	b35b      	cbz	r3, 800e6e8 <__kernel_sinf+0x70>
 800e690:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e694:	eddf 7a15 	vldr	s15, [pc, #84]	; 800e6ec <__kernel_sinf+0x74>
 800e698:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800e6f0 <__kernel_sinf+0x78>
 800e69c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e6a0:	eddf 7a14 	vldr	s15, [pc, #80]	; 800e6f4 <__kernel_sinf+0x7c>
 800e6a4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6a8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800e6f8 <__kernel_sinf+0x80>
 800e6ac:	eea7 6a87 	vfma.f32	s12, s15, s14
 800e6b0:	eddf 7a12 	vldr	s15, [pc, #72]	; 800e6fc <__kernel_sinf+0x84>
 800e6b4:	ee60 6a07 	vmul.f32	s13, s0, s14
 800e6b8:	eee6 7a07 	vfma.f32	s15, s12, s14
 800e6bc:	b930      	cbnz	r0, 800e6cc <__kernel_sinf+0x54>
 800e6be:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800e700 <__kernel_sinf+0x88>
 800e6c2:	eea7 6a27 	vfma.f32	s12, s14, s15
 800e6c6:	eea6 0a26 	vfma.f32	s0, s12, s13
 800e6ca:	4770      	bx	lr
 800e6cc:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800e6d0:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800e6d4:	eee0 7a86 	vfma.f32	s15, s1, s12
 800e6d8:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800e6dc:	eddf 7a09 	vldr	s15, [pc, #36]	; 800e704 <__kernel_sinf+0x8c>
 800e6e0:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800e6e4:	ee30 0a60 	vsub.f32	s0, s0, s1
 800e6e8:	4770      	bx	lr
 800e6ea:	bf00      	nop
 800e6ec:	2f2ec9d3 	.word	0x2f2ec9d3
 800e6f0:	b2d72f34 	.word	0xb2d72f34
 800e6f4:	3638ef1b 	.word	0x3638ef1b
 800e6f8:	b9500d01 	.word	0xb9500d01
 800e6fc:	3c088889 	.word	0x3c088889
 800e700:	be2aaaab 	.word	0xbe2aaaab
 800e704:	3e2aaaab 	.word	0x3e2aaaab

0800e708 <fabsf>:
 800e708:	ee10 3a10 	vmov	r3, s0
 800e70c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e710:	ee00 3a10 	vmov	s0, r3
 800e714:	4770      	bx	lr
	...

0800e718 <floorf>:
 800e718:	ee10 3a10 	vmov	r3, s0
 800e71c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e720:	3a7f      	subs	r2, #127	; 0x7f
 800e722:	2a16      	cmp	r2, #22
 800e724:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e728:	dc2a      	bgt.n	800e780 <floorf+0x68>
 800e72a:	2a00      	cmp	r2, #0
 800e72c:	da11      	bge.n	800e752 <floorf+0x3a>
 800e72e:	eddf 7a18 	vldr	s15, [pc, #96]	; 800e790 <floorf+0x78>
 800e732:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e736:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e73a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e73e:	dd05      	ble.n	800e74c <floorf+0x34>
 800e740:	2b00      	cmp	r3, #0
 800e742:	da23      	bge.n	800e78c <floorf+0x74>
 800e744:	4a13      	ldr	r2, [pc, #76]	; (800e794 <floorf+0x7c>)
 800e746:	2900      	cmp	r1, #0
 800e748:	bf18      	it	ne
 800e74a:	4613      	movne	r3, r2
 800e74c:	ee00 3a10 	vmov	s0, r3
 800e750:	4770      	bx	lr
 800e752:	4911      	ldr	r1, [pc, #68]	; (800e798 <floorf+0x80>)
 800e754:	4111      	asrs	r1, r2
 800e756:	420b      	tst	r3, r1
 800e758:	d0fa      	beq.n	800e750 <floorf+0x38>
 800e75a:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800e790 <floorf+0x78>
 800e75e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800e762:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800e766:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e76a:	ddef      	ble.n	800e74c <floorf+0x34>
 800e76c:	2b00      	cmp	r3, #0
 800e76e:	bfbe      	ittt	lt
 800e770:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800e774:	fa40 f202 	asrlt.w	r2, r0, r2
 800e778:	189b      	addlt	r3, r3, r2
 800e77a:	ea23 0301 	bic.w	r3, r3, r1
 800e77e:	e7e5      	b.n	800e74c <floorf+0x34>
 800e780:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800e784:	d3e4      	bcc.n	800e750 <floorf+0x38>
 800e786:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e78a:	4770      	bx	lr
 800e78c:	2300      	movs	r3, #0
 800e78e:	e7dd      	b.n	800e74c <floorf+0x34>
 800e790:	7149f2ca 	.word	0x7149f2ca
 800e794:	bf800000 	.word	0xbf800000
 800e798:	007fffff 	.word	0x007fffff

0800e79c <scalbnf>:
 800e79c:	ee10 3a10 	vmov	r3, s0
 800e7a0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e7a4:	d025      	beq.n	800e7f2 <scalbnf+0x56>
 800e7a6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800e7aa:	d302      	bcc.n	800e7b2 <scalbnf+0x16>
 800e7ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e7b0:	4770      	bx	lr
 800e7b2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 800e7b6:	d122      	bne.n	800e7fe <scalbnf+0x62>
 800e7b8:	4b2a      	ldr	r3, [pc, #168]	; (800e864 <scalbnf+0xc8>)
 800e7ba:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800e868 <scalbnf+0xcc>
 800e7be:	4298      	cmp	r0, r3
 800e7c0:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e7c4:	db16      	blt.n	800e7f4 <scalbnf+0x58>
 800e7c6:	ee10 3a10 	vmov	r3, s0
 800e7ca:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800e7ce:	3a19      	subs	r2, #25
 800e7d0:	4402      	add	r2, r0
 800e7d2:	2afe      	cmp	r2, #254	; 0xfe
 800e7d4:	dd15      	ble.n	800e802 <scalbnf+0x66>
 800e7d6:	ee10 3a10 	vmov	r3, s0
 800e7da:	eddf 7a24 	vldr	s15, [pc, #144]	; 800e86c <scalbnf+0xd0>
 800e7de:	eddf 6a24 	vldr	s13, [pc, #144]	; 800e870 <scalbnf+0xd4>
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	eeb0 7a67 	vmov.f32	s14, s15
 800e7e8:	bfb8      	it	lt
 800e7ea:	eef0 7a66 	vmovlt.f32	s15, s13
 800e7ee:	ee27 0a27 	vmul.f32	s0, s14, s15
 800e7f2:	4770      	bx	lr
 800e7f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e874 <scalbnf+0xd8>
 800e7f8:	ee20 0a27 	vmul.f32	s0, s0, s15
 800e7fc:	4770      	bx	lr
 800e7fe:	0dd2      	lsrs	r2, r2, #23
 800e800:	e7e6      	b.n	800e7d0 <scalbnf+0x34>
 800e802:	2a00      	cmp	r2, #0
 800e804:	dd06      	ble.n	800e814 <scalbnf+0x78>
 800e806:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e80a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e80e:	ee00 3a10 	vmov	s0, r3
 800e812:	4770      	bx	lr
 800e814:	f112 0f16 	cmn.w	r2, #22
 800e818:	da1a      	bge.n	800e850 <scalbnf+0xb4>
 800e81a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e81e:	4298      	cmp	r0, r3
 800e820:	ee10 3a10 	vmov	r3, s0
 800e824:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800e828:	dd0a      	ble.n	800e840 <scalbnf+0xa4>
 800e82a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 800e86c <scalbnf+0xd0>
 800e82e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 800e870 <scalbnf+0xd4>
 800e832:	eef0 7a40 	vmov.f32	s15, s0
 800e836:	2b00      	cmp	r3, #0
 800e838:	bf18      	it	ne
 800e83a:	eeb0 0a47 	vmovne.f32	s0, s14
 800e83e:	e7db      	b.n	800e7f8 <scalbnf+0x5c>
 800e840:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 800e874 <scalbnf+0xd8>
 800e844:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800e878 <scalbnf+0xdc>
 800e848:	eef0 7a40 	vmov.f32	s15, s0
 800e84c:	2b00      	cmp	r3, #0
 800e84e:	e7f3      	b.n	800e838 <scalbnf+0x9c>
 800e850:	3219      	adds	r2, #25
 800e852:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e856:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800e85a:	eddf 7a08 	vldr	s15, [pc, #32]	; 800e87c <scalbnf+0xe0>
 800e85e:	ee07 3a10 	vmov	s14, r3
 800e862:	e7c4      	b.n	800e7ee <scalbnf+0x52>
 800e864:	ffff3cb0 	.word	0xffff3cb0
 800e868:	4c000000 	.word	0x4c000000
 800e86c:	7149f2ca 	.word	0x7149f2ca
 800e870:	f149f2ca 	.word	0xf149f2ca
 800e874:	0da24260 	.word	0x0da24260
 800e878:	8da24260 	.word	0x8da24260
 800e87c:	33000000 	.word	0x33000000

0800e880 <__ieee754_logf>:
 800e880:	ee10 3a10 	vmov	r3, s0
 800e884:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800e888:	d106      	bne.n	800e898 <__ieee754_logf+0x18>
 800e88a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ea20 <__ieee754_logf+0x1a0>
 800e88e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800ea24 <__ieee754_logf+0x1a4>
 800e892:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800e896:	4770      	bx	lr
 800e898:	2b00      	cmp	r3, #0
 800e89a:	da02      	bge.n	800e8a2 <__ieee754_logf+0x22>
 800e89c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800e8a0:	e7f5      	b.n	800e88e <__ieee754_logf+0xe>
 800e8a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e8a6:	db02      	blt.n	800e8ae <__ieee754_logf+0x2e>
 800e8a8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e8ac:	4770      	bx	lr
 800e8ae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e8b2:	bfb8      	it	lt
 800e8b4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800ea28 <__ieee754_logf+0x1a8>
 800e8b8:	485c      	ldr	r0, [pc, #368]	; (800ea2c <__ieee754_logf+0x1ac>)
 800e8ba:	bfbe      	ittt	lt
 800e8bc:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800e8c0:	f06f 0118 	mvnlt.w	r1, #24
 800e8c4:	ee17 3a90 	vmovlt	r3, s15
 800e8c8:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800e8cc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800e8d0:	4418      	add	r0, r3
 800e8d2:	bfa8      	it	ge
 800e8d4:	2100      	movge	r1, #0
 800e8d6:	3a7f      	subs	r2, #127	; 0x7f
 800e8d8:	440a      	add	r2, r1
 800e8da:	f400 0100 	and.w	r1, r0, #8388608	; 0x800000
 800e8de:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800e8e2:	4319      	orrs	r1, r3
 800e8e4:	ee00 1a10 	vmov	s0, r1
 800e8e8:	4951      	ldr	r1, [pc, #324]	; (800ea30 <__ieee754_logf+0x1b0>)
 800e8ea:	eb02 52d0 	add.w	r2, r2, r0, lsr #23
 800e8ee:	f103 000f 	add.w	r0, r3, #15
 800e8f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800e8f6:	4001      	ands	r1, r0
 800e8f8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e8fc:	bb89      	cbnz	r1, 800e962 <__ieee754_logf+0xe2>
 800e8fe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800e902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e906:	d10f      	bne.n	800e928 <__ieee754_logf+0xa8>
 800e908:	2a00      	cmp	r2, #0
 800e90a:	f000 8085 	beq.w	800ea18 <__ieee754_logf+0x198>
 800e90e:	ee07 2a90 	vmov	s15, r2
 800e912:	ed9f 0a48 	vldr	s0, [pc, #288]	; 800ea34 <__ieee754_logf+0x1b4>
 800e916:	ed9f 7a48 	vldr	s14, [pc, #288]	; 800ea38 <__ieee754_logf+0x1b8>
 800e91a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e91e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e922:	eea7 0a87 	vfma.f32	s0, s15, s14
 800e926:	4770      	bx	lr
 800e928:	eddf 6a44 	vldr	s13, [pc, #272]	; 800ea3c <__ieee754_logf+0x1bc>
 800e92c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e930:	eee0 7a66 	vfms.f32	s15, s0, s13
 800e934:	ee20 7a00 	vmul.f32	s14, s0, s0
 800e938:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e93c:	b912      	cbnz	r2, 800e944 <__ieee754_logf+0xc4>
 800e93e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e942:	4770      	bx	lr
 800e944:	ee07 2a90 	vmov	s15, r2
 800e948:	eddf 6a3a 	vldr	s13, [pc, #232]	; 800ea34 <__ieee754_logf+0x1b4>
 800e94c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e950:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e954:	ee37 0a40 	vsub.f32	s0, s14, s0
 800e958:	ed9f 7a37 	vldr	s14, [pc, #220]	; 800ea38 <__ieee754_logf+0x1b8>
 800e95c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800e960:	4770      	bx	lr
 800e962:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800e966:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e96a:	eddf 5a35 	vldr	s11, [pc, #212]	; 800ea40 <__ieee754_logf+0x1c0>
 800e96e:	eddf 4a35 	vldr	s9, [pc, #212]	; 800ea44 <__ieee754_logf+0x1c4>
 800e972:	4935      	ldr	r1, [pc, #212]	; (800ea48 <__ieee754_logf+0x1c8>)
 800e974:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800e978:	4419      	add	r1, r3
 800e97a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800e97e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800e982:	430b      	orrs	r3, r1
 800e984:	2b00      	cmp	r3, #0
 800e986:	ee07 2a90 	vmov	s15, r2
 800e98a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800e98e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e992:	ee25 7a05 	vmul.f32	s14, s10, s10
 800e996:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800ea4c <__ieee754_logf+0x1cc>
 800e99a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800e99e:	eddf 5a2c 	vldr	s11, [pc, #176]	; 800ea50 <__ieee754_logf+0x1d0>
 800e9a2:	eee7 5a87 	vfma.f32	s11, s15, s14
 800e9a6:	eddf 7a2b 	vldr	s15, [pc, #172]	; 800ea54 <__ieee754_logf+0x1d4>
 800e9aa:	eee7 7a24 	vfma.f32	s15, s14, s9
 800e9ae:	eddf 4a2a 	vldr	s9, [pc, #168]	; 800ea58 <__ieee754_logf+0x1d8>
 800e9b2:	eee7 4a87 	vfma.f32	s9, s15, s14
 800e9b6:	eddf 7a29 	vldr	s15, [pc, #164]	; 800ea5c <__ieee754_logf+0x1dc>
 800e9ba:	eee4 7a87 	vfma.f32	s15, s9, s14
 800e9be:	ee67 7a85 	vmul.f32	s15, s15, s10
 800e9c2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800e9c6:	dd1c      	ble.n	800ea02 <__ieee754_logf+0x182>
 800e9c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e9cc:	ee20 7a07 	vmul.f32	s14, s0, s14
 800e9d0:	ee27 7a00 	vmul.f32	s14, s14, s0
 800e9d4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e9d8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800e9dc:	b922      	cbnz	r2, 800e9e8 <__ieee754_logf+0x168>
 800e9de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9e2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e9e6:	4770      	bx	lr
 800e9e8:	ed9f 6a12 	vldr	s12, [pc, #72]	; 800ea34 <__ieee754_logf+0x1b4>
 800e9ec:	eee6 7a86 	vfma.f32	s15, s13, s12
 800e9f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e9f4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e9f8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800ea38 <__ieee754_logf+0x1b8>
 800e9fc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800ea00:	4770      	bx	lr
 800ea02:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ea06:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ea0a:	2a00      	cmp	r2, #0
 800ea0c:	d0e9      	beq.n	800e9e2 <__ieee754_logf+0x162>
 800ea0e:	ed9f 7a09 	vldr	s14, [pc, #36]	; 800ea34 <__ieee754_logf+0x1b4>
 800ea12:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ea16:	e7ed      	b.n	800e9f4 <__ieee754_logf+0x174>
 800ea18:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800ea24 <__ieee754_logf+0x1a4>
 800ea1c:	4770      	bx	lr
 800ea1e:	bf00      	nop
 800ea20:	cc000000 	.word	0xcc000000
 800ea24:	00000000 	.word	0x00000000
 800ea28:	4c000000 	.word	0x4c000000
 800ea2c:	004afb20 	.word	0x004afb20
 800ea30:	007ffff0 	.word	0x007ffff0
 800ea34:	3717f7d1 	.word	0x3717f7d1
 800ea38:	3f317180 	.word	0x3f317180
 800ea3c:	3eaaaaab 	.word	0x3eaaaaab
 800ea40:	3e1cd04f 	.word	0x3e1cd04f
 800ea44:	3e178897 	.word	0x3e178897
 800ea48:	ffcf5c30 	.word	0xffcf5c30
 800ea4c:	3e638e29 	.word	0x3e638e29
 800ea50:	3ecccccd 	.word	0x3ecccccd
 800ea54:	3e3a3325 	.word	0x3e3a3325
 800ea58:	3e924925 	.word	0x3e924925
 800ea5c:	3f2aaaab 	.word	0x3f2aaaab

0800ea60 <_init>:
 800ea60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea62:	bf00      	nop
 800ea64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea66:	bc08      	pop	{r3}
 800ea68:	469e      	mov	lr, r3
 800ea6a:	4770      	bx	lr

0800ea6c <_fini>:
 800ea6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6e:	bf00      	nop
 800ea70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea72:	bc08      	pop	{r3}
 800ea74:	469e      	mov	lr, r3
 800ea76:	4770      	bx	lr
